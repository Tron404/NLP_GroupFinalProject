Id,Problem,Python Code
0,"['write', 'numpy', 'program', 'repeat', 'element', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'repeat', '(', '3', ',', '4', ')', 'print', '(', 'x', ')', 'x', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', ')', 'print', '(', 'np', '.', 'repeat', '(', 'x', ',', '2', ')', ')']"
1,"['write', 'python', 'function', 'create', 'print', 'list', 'value', 'square', 'number', 'included']","['def', 'printValues', '(', ')', ':', 'l', '=', 'list', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '31', ')', ':', 'l', '.', 'append', '(', 'i', '**', '2', ')', 'print', '(', 'l', ')', 'printValues', '(', ')']"
2,"['write', 'python', 'program', 'remove', 'duplicate', 'list', 'list']","['import', 'itertools', 'num', '=', '[', '[', '10', ',', '20', ']', ',', '[', '40', ']', ',', '[', '30', ',', '56', ',', '25', ']', ',', '[', '10', ',', '20', ']', ',', '[', '33', ']', ',', '[', '40', ']', ']', 'print', '(', '""Original List""', ',', 'num', ')', 'num', '.', 'sort', '(', ')', 'new_num', '=', 'list', '(', 'num', 'for', 'num', ',', '_', 'in', 'itertools', '.', 'groupby', '(', 'num', ')', ')', 'print', '(', '""New List""', ',', 'new_num', ')']"
3,"['write', 'numpy', 'program', 'compute', 'x', 'coordinate', 'point', 'sine', 'curve', 'plot', 'point', 'using', 'matplotlib']","['import', 'numpy', 'as', 'np', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'x', '=', 'np', '.', 'arange', '(', '0', ',', '3', '*', 'np', '.', 'pi', ',', '0.2', ')', 'y', '=', 'np', '.', 'sin', '(', 'x', ')', 'print', '(', '""Plot the points using matplotlib:""', ')', 'plt', '.', 'plot', '(', 'x', ',', 'y', ')', 'plt', '.', 'show', '(', ')']"
4,"['write', 'python', 'program', 'alter', 'given', 'sqlite', 'table']","['import', 'sqlite3', 'from', 'sqlite3', 'import', 'Error', 'def', 'sql_connection', '(', ')', ':', 'try', ':', 'conn', '=', 'sqlite3', '.', 'connect', '(', ""'mydatabase.db'"", ')', 'return', 'conn', 'except', 'Error', ':', 'print', '(', 'Error', ')', 'def', 'sql_table', '(', 'conn', ')', ':', 'cursorObj', '=', 'conn', '.', 'cursor', '(', ')', 'cursorObj', '.', 'execute', '(', '""CREATE TABLE agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);""', ')', 'print', '(', '""\\nagent_master file has created.""', ')', 'cursorObj', '.', 'execute', '(', '""""""\r   ALTER TABLE agent_master\r   ADD COLUMN FLAG BOOLEAN;\r   """"""', ')', 'print', '(', '""\\nagent_master file altered.""', ')', 'conn', '.', 'commit', '(', ')', 'sqllite_conn', '=', 'sql_connection', '(', ')', 'sql_table', '(', 'sqllite_conn', ')', 'if', '(', 'sqllite_conn', ')', ':', 'sqllite_conn', '.', 'close', '(', ')', 'print', '(', '""\\nThe SQLite connection is closed.""', ')']"
5,"['write', 'python', 'program', 'extract', 'specified', 'size', 'string', 'give', 'list', 'string', 'value', 'using', 'lambda']","['def', 'extract_string', '(', 'str_list1', ',', 'l', ')', ':', 'result', '=', 'list', '(', 'filter', '(', 'lambda', 'e', ':', 'len', '(', 'e', ')', '==', 'l', ',', 'str_list1', ')', ')', 'return', 'result', 'str_list1', '=', '[', ""'Python'"", ',', ""'list'"", ',', ""'exercises'"", ',', ""'practice'"", ',', ""'solution'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'str_list1', ')', 'l', '=', '8', 'print', '(', '""\\nlength of the string to extract:""', ')', 'print', '(', 'l', ')', 'print', '(', '""\\nAfter extracting strings of specified length from the said list:""', ')', 'print', '(', 'extract_string', '(', 'str_list1', ',', 'l', ')', ')']"
6,"['write', 'python', 'program', 'create', 'fibonacci', 'series', 'upto', 'n', 'using', 'lambda']","['from', 'functools', 'import', 'reduce', 'fib_series', '=', 'lambda', 'n', ':', 'reduce', '(', 'lambda', 'x', ',', '_', ':', 'x', '+', '[', 'x', '[', '-', '1', ']', '+', 'x', '[', '-', '2', ']', ']', ',', 'range', '(', 'n', '-', '2', ')', ',', '[', '0', ',', '1', ']', ')', 'print', '(', '""Fibonacci series upto 2:""', ')', 'print', '(', 'fib_series', '(', '2', ')', ')', 'print', '(', '""\\nFibonacci series upto 5:""', ')', 'print', '(', 'fib_series', '(', '5', ')', ')', 'print', '(', '""\\nFibonacci series upto 6:""', ')', 'print', '(', 'fib_series', '(', '6', ')', ')', 'print', '(', '""\\nFibonacci series upto 9:""', ')', 'print', '(', 'fib_series', '(', '9', ')', ')']"
7,"['write', 'python', 'program', 'sort', 'unsorted', 'number', 'using', 'strand', 'sort']",[]
8,"['write', 'python', 'program', 'insert', 'specified', 'element', 'given', 'list', 'every', 'nth', 'element']","['def', 'inset_element_list', '(', 'lst', ',', 'x', ',', 'n', ')', ':', 'i', '=', 'n', 'while', 'i', '<', 'len', '(', 'lst', ')', ':', 'lst', '.', 'insert', '(', 'i', ',', 'x', ')', 'i', '+=', 'n', '+', '1', 'return', 'lst', 'nums', '=', '[', '1', ',', '3', ',', '5', ',', '7', ',', '9', ',', '11', ',', '0', ',', '2', ',', '4', ',', '6', ',', '8', ',', '10', ',', '8', ',', '9', ',', '0', ',', '4', ',', '3', ',', '0', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'x', '=', '20', 'n', '=', '4', 'print', '(', '""\\nInsert""', ',', 'x', ',', '""in said list after every""', ',', 'n', ',', '""th element:""', ')', 'print', '(', 'inset_element_list', '(', 'nums', ',', 'x', ',', 'n', ')', ')', 'chars', '=', '[', ""'s'"", ',', ""'d'"", ',', ""'f'"", ',', ""'j'"", ',', ""'s'"", ',', ""'a'"", ',', ""'j'"", ',', ""'d'"", ',', ""'f'"", ',', ""'d'"", ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'chars', ')', 'x', '=', ""'Z'"", 'n', '=', '3', 'print', '(', '""\\nInsert""', ',', 'x', ',', '""in said list after every""', ',', 'n', ',', '""th element:""', ')', 'print', '(', 'inset_element_list', '(', 'chars', ',', 'x', ',', 'n', ')', ')']"
9,"['rite', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'maximum', 'minimum', 'sale', 'value', 'item']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\SaleData.xlsx'"", ')', 'table', '=', 'pd', '.', 'pivot_table', '(', 'df', ',', 'index', '=', ""'Item'"", ',', 'values', '=', ""'Sale_amt'"", ',', 'aggfunc', '=', '[', 'np', '.', 'max', ',', 'np', '.', 'min', ']', ')', 'print', '(', 'table', ')']"
10,"['write', 'numpy', 'program', 'extract', 'upper', 'triangular', 'part', 'numpy', 'matrix']","['import', 'numpy', 'as', 'np', 'num', '=', 'np', '.', 'arange', '(', '18', ')', 'arr1', '=', 'np', '.', 'reshape', '(', 'num', ',', '[', '6', ',', '3', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arr1', ')', 'result', '=', 'arr1', '[', 'np', '.', 'triu_indices', '(', '3', ')', ']', 'print', '(', '""\\nExtract upper triangular part of the said array:""', ')', 'print', '(', 'result', ')', 'result', '=', 'arr1', '[', 'np', '.', 'triu_indices', '(', '2', ')', ']', 'print', '(', '""\\nExtract upper triangular part of the said array:""', ')', 'print', '(', 'result', ')']"
11,"['write', 'python', 'program', 'find', 'maximum', 'occurring', 'character', 'given', 'string']","['def', 'get_max_occuring_char', '(', 'str1', ')', ':', 'ASCII_SIZE', '=', '256', 'ctr', '=', '[', '0', ']', '*', 'ASCII_SIZE', 'max', '=', '-', '1', 'ch', '=', ""''"", 'for', 'i', 'in', 'str1', ':', 'ctr', '[', 'ord', '(', 'i', ')', ']', '+=', '1', ';', 'for', 'i', 'in', 'str1', ':', 'if', 'max', '<', 'ctr', '[', 'ord', '(', 'i', ')', ']', ':', 'max', '=', 'ctr', '[', 'ord', '(', 'i', ')', ']', 'ch', '=', 'i', 'return', 'ch', 'print', '(', 'get_max_occuring_char', '(', '""Python: Get file creation and modification date/times""', ')', ')', 'print', '(', 'get_max_occuring_char', '(', '""abcdefghijkb""', ')', ')']"
12,"['write', 'python', 'program', 'find', 'whether', 'given', 'number', 'accept', 'user', 'even', 'odd', 'print', 'appropriate', 'message', 'user']","['num', '=', 'int', '(', 'input', '(', '""Enter a number: ""', ')', ')', 'mod', '=', 'num', '%', '2', 'if', 'mod', '>', '0', ':', 'print', '(', '""This is an odd number.""', ')', 'else', ':', 'print', '(', '""This is an even number.""', ')']"
13,"['write', 'numpy', 'program', 'create', 'new', 'vector', 'consecutive', 'two', 'value', 'given', 'vector']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'p', '=', '2', 'new_nums', '=', 'np', '.', 'zeros', '(', 'len', '(', 'nums', ')', '+', '(', 'len', '(', 'nums', ')', '-', '1', ')', '*', '(', 'p', ')', ')', 'new_nums', '[', ':', ':', 'p', '+', '1', ']', '=', 'nums', 'print', '(', '""\\nNew array:""', ')', 'print', '(', 'new_nums', ')']"
14,"['write', 'python', 'program', 'count', 'occurrence', 'word', 'given', 'sentence']","['def', 'word_count', '(', 'str', ')', ':', 'counts', '=', 'dict', '(', ')', 'words', '=', 'str', '.', 'split', '(', ')', 'for', 'word', 'in', 'words', ':', 'if', 'word', 'in', 'counts', ':', 'counts', '[', 'word', ']', '+=', '1', 'else', ':', 'counts', '[', 'word', ']', '=', '1', 'return', 'counts', 'print', '(', 'word_count', '(', ""'the quick brown fox jumps over the lazy dog.'"", ')', ')']"
15,"['write', 'python', 'program', 'accepts', 'hyphenseparated', 'sequence', 'word', 'input', 'print', 'word', 'hyphenseparated', 'sequence', 'sorting', 'alphabetically']","['items', '=', '[', 'n', 'for', 'n', 'in', 'input', '(', ')', '.', 'split', '(', ""'-'"", ')', ']', 'items', '.', 'sort', '(', ')', 'print', '(', ""'-'"", '.', 'join', '(', 'items', ')', ')']"
16,"['write', 'panda', 'program', 'insert', 'column', 'specific', 'index', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', '}', ',', 'index', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', ')', 'print', '(', '""Original DataFrame with single index:""', ')', 'print', '(', 'df', ')', 'date_of_birth', '=', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', 'idx', '=', '3', 'print', '(', '""\\nInsert \'date_of_birth\' column in 3rd position of the said DataFrame:""', ')', 'df', '.', 'insert', '(', 'loc', '=', 'idx', ',', 'column', '=', ""'date_of_birth'"", ',', 'value', '=', 'date_of_birth', ')', 'print', '(', 'df', ')']"
17,"['write', 'python', 'program', 'remove', 'last', 'n', 'number', 'element', 'given', 'list']","['def', 'remove_last_n', '(', 'nums', ',', 'N', ')', ':', 'result', '=', 'nums', '[', ':', 'len', '(', 'nums', ')', '-', 'N', ']', 'return', 'result', 'nums', '=', '[', '2', ',', '3', ',', '9', ',', '8', ',', '2', ',', '0', ',', '39', ',', '84', ',', '2', ',', '2', ',', '34', ',', '2', ',', '34', ',', '5', ',', '3', ',', '5', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums', ')', 'N', '=', '3', 'print', '(', '""\\nRemove the last""', ',', 'N', ',', '""elements from the said list:""', ')', 'print', '(', 'remove_last_n', '(', 'nums', ',', 'N', ')', ')', 'N', '=', '5', 'print', '(', '""\\nRemove the last""', ',', 'N', ',', '""elements from the said list:""', ')', 'print', '(', 'remove_last_n', '(', 'nums', ',', 'N', ')', ')', 'N', '=', '1', 'print', '(', '""\\nRemove the last""', ',', 'N', ',', '""element from the said list:""', ')', 'print', '(', 'remove_last_n', '(', 'nums', ',', 'N', ')', ')']"
18,"['write', 'python', 'program', 'find', 'index', 'position', 'value', 'maximum', 'minimum', 'value', 'given', 'list', 'number', 'using', 'lambda']","['def', 'position_max_min', '(', 'nums', ')', ':', 'max_result', '=', 'max', '(', 'enumerate', '(', 'nums', ')', ',', 'key', '=', '(', 'lambda', 'x', ':', 'x', '[', '1', ']', ')', ')', 'min_result', '=', 'min', '(', 'enumerate', '(', 'nums', ')', ',', 'key', '=', '(', 'lambda', 'x', ':', 'x', '[', '1', ']', ')', ')', 'return', 'max_result', ',', 'min_result', 'nums', '=', '[', '12', ',', '33', ',', '23', ',', '10.11', ',', '67', ',', '89', ',', '45', ',', '66.7', ',', '23', ',', '12', ',', '11', ',', '10.25', ',', '54', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'result', '=', 'position_max_min', '(', 'nums', ')', 'print', '(', '""\\nIndex position and value of the maximum value of the said list:""', ')', 'print', '(', 'result', '[', '0', ']', ')', 'print', '(', '""\\nIndex position and value of the minimum value of the said list:""', ')', 'print', '(', 'result', '[', '1', ']', ')']"
19,"['write', 'numpy', 'program', 'find', 'k', 'smallest', 'value', 'given', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'array1', '=', 'np', '.', 'array', '(', '[', '1', ',', '7', ',', '8', ',', '2', ',', '0.1', ',', '3', ',', '15', ',', '2.5', ']', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'array1', ')', 'k', '=', '4', 'result', '=', 'np', '.', 'argpartition', '(', 'array1', ',', 'k', ')', 'print', '(', '""\\nk smallest values:""', ')', 'print', '(', 'array1', '[', 'result', '[', ':', 'k', ']', ']', ')']"
20,"['write', 'numpy', 'program', 'add', 'one', 'polynomial', 'another', 'subtract', 'one', 'polynomial', 'another', 'multiply', 'one', 'polynomial', 'another', 'divide', 'one', 'polynomial', 'another']","['from', 'numpy', '.', 'polynomial', 'import', 'polynomial', 'as', 'P', 'x', '=', '(', '10', ',', '20', ',', '30', ')', 'y', '=', '(', '30', ',', '40', ',', '50', ')', 'print', '(', '""Add one polynomial to another:""', ')', 'print', '(', 'P', '.', 'polyadd', '(', 'x', ',', 'y', ')', ')', 'print', '(', '""Subtract one polynomial from another:""', ')', 'print', '(', 'P', '.', 'polysub', '(', 'x', ',', 'y', ')', ')', 'print', '(', '""Multiply one polynomial by another:""', ')', 'print', '(', 'P', '.', 'polymul', '(', 'x', ',', 'y', ')', ')', 'print', '(', '""Divide one polynomial by another:""', ')', 'print', '(', 'P', '.', 'polydiv', '(', 'x', ',', 'y', ')', ')']"
21,"['write', 'python', 'program', 'check', 'common', 'element', 'two', 'given', 'list', 'order']","['def', 'same_order', '(', 'l1', ',', 'l2', ')', ':', 'common_elements', '=', 'set', '(', 'l1', ')', '&', 'set', '(', 'l2', ')', 'l1', '=', '[', 'e', 'for', 'e', 'in', 'l1', 'if', 'e', 'in', 'common_elements', ']', 'l2', '=', '[', 'e', 'for', 'e', 'in', 'l2', 'if', 'e', 'in', 'common_elements', ']', 'return', 'l1', '==', 'l2', 'color1', '=', '[', '""red""', ',', '""green""', ',', '""black""', ',', '""orange""', ']', 'color2', '=', '[', '""red""', ',', '""pink""', ',', '""green""', ',', '""white""', ',', '""black""', ']', 'color3', '=', '[', '""white""', ',', '""orange""', ',', '""pink""', ',', '""black""', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'color1', ')', 'print', '(', 'color2', ')', 'print', '(', 'color3', ')', 'print', '(', '""\\nTest common elements between color1 and color2 are in same order?""', ')', 'print', '(', 'same_order', '(', 'color1', ',', 'color2', ')', ')', 'print', '(', '""\\nTest common elements between color1 and color3 are in same order?""', ')', 'print', '(', 'same_order', '(', 'color1', ',', 'color3', ')', ')', 'print', '(', '""\\nTest common elements between color2 and color3 are in same order?""', ')', 'print', '(', 'same_order', '(', 'color2', ',', 'color3', ')', ')']"
22,"['write', 'python', 'program', 'find', 'number', 'divisible', 'nineteen', 'thirteen', 'list', 'number', 'using', 'lambda']","['nums', '=', '[', '19', ',', '65', ',', '57', ',', '39', ',', '152', ',', '639', ',', '121', ',', '44', ',', '90', ',', '190', ']', 'print', '(', '""Orginal list:""', ')', 'print', '(', 'nums', ')', 'result', '=', 'list', '(', 'filter', '(', 'lambda', 'x', ':', '(', 'x', '%', '19', '==', '0', 'or', 'x', '%', '13', '==', '0', ')', ',', 'nums', ')', ')', 'print', '(', '""\\nNumbers of the above list divisible by nineteen or thirteen:""', ')', 'print', '(', 'result', ')']"
23,"['write', 'numpy', 'program', 'multiply', 'two', 'given', 'array', 'size', 'elementbyelement']","['import', 'numpy', 'as', 'np', 'nums1', '=', 'np', '.', 'array', '(', '[', '[', '2', ',', '5', ',', '2', ']', ',', '[', '1', ',', '5', ',', '5', ']', ']', ')', 'nums2', '=', 'np', '.', 'array', '(', '[', '[', '5', ',', '3', ',', '4', ']', ',', '[', '3', ',', '2', ',', '5', ']', ']', ')', 'print', '(', '""Array1:""', ')', 'print', '(', 'nums1', ')', 'print', '(', '""Array2:""', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nMultiply said arrays of same size element-by-element:""', ')', 'print', '(', 'np', '.', 'multiply', '(', 'nums1', ',', 'nums2', ')', ')']"
24,"['write', 'python', 'program', 'get', 'list', 'sorted', 'increasing', 'order', 'last', 'element', 'tuple', 'given', 'list', 'nonempty', 'tuples']","['def', 'last', '(', 'n', ')', ':', 'return', 'n', '[', '-', '1', ']', 'def', 'sort_list_last', '(', 'tuples', ')', ':', 'return', 'sorted', '(', 'tuples', ',', 'key', '=', 'last', ')', 'print', '(', 'sort_list_last', '(', '[', '(', '2', ',', '5', ')', ',', '(', '1', ',', '2', ')', ',', '(', '4', ',', '4', ')', ',', '(', '2', ',', '3', ')', ',', '(', '2', ',', '1', ')', ']', ')', ')']"
25,"['write', 'panda', 'program', 'replace', 'missing', 'value', 'frequent', 'value', 'present', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', 'np', '.', 'nan', ',', '70002', ',', '70004', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', 'np', '.', 'nan', ',', '65.26', ',', '110.5', ',', '948.5', ',', 'np', '.', 'nan', ',', '5760', ',', '1983.43', ',', 'np', '.', 'nan', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_amt'"", ':', '[', '10.5', ',', '20.65', ',', 'np', '.', 'nan', ',', '11.5', ',', '98.5', ',', 'np', '.', 'nan', ',', '57', ',', '19.43', ',', 'np', '.', 'nan', ',', '25.45', ',', '75.29', ',', '35.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3002', ',', '3001', ',', '3001', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5003', ',', '5001', ',', 'np', '.', 'nan', ',', '5002', ',', '5001', ',', '5001', ',', 'np', '.', 'nan', ',', '5003', ',', '5002', ',', '5003', ',', 'np', '.', 'nan', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nReplace the missing values with the most frequent values present in each column:""', ')', 'result', '=', 'df', '.', 'fillna', '(', 'df', '.', 'mode', '(', ')', '.', 'iloc', '[', '0', ']', ')', 'print', '(', 'result', ')']"
26,"['write', 'numpy', 'program', 'split', 'array', 'element', 'array', 'element', 'original', 'order']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '1', ',', '15', ')', 'print', '(', '""Original array:""', ',', 'x', ')', 'print', '(', '""After splitting:""', ')', 'print', '(', 'np', '.', 'split', '(', 'x', ',', '[', '2', ',', '6', ']', ')', ')']"
27,"['write', 'python', 'program', 'create', 'deep', 'copy', 'given', 'dictionary', 'use', 'copycopy']","['import', 'copy', 'nums_x', '=', '{', '""a""', ':', '1', ',', '""b""', ':', '2', ',', ""'cc'"", ':', '{', '""c""', ':', '3', '}', '}', 'print', '(', '""Original dictionary: ""', ',', 'nums_x', ')', 'nums_y', '=', 'copy', '.', 'deepcopy', '(', 'nums_x', ')', 'print', '(', '""\\nDeep copy of the said list:""', ')', 'print', '(', 'nums_y', ')', 'print', '(', '""\\nChange the value of an element of the original dictionary:""', ')', 'nums_x', '[', '""cc""', ']', '[', '""c""', ']', '=', '10', 'print', '(', 'nums_x', ')', 'print', '(', '""\\nSecond dictionary (Deep copy):""', ')', 'print', '(', 'nums_y', ')', 'nums', '=', '{', '""x""', ':', '1', ',', '""y""', ':', '2', ',', ""'zz'"", ':', '{', '""z""', ':', '3', '}', '}', 'nums_copy', '=', 'copy', '.', 'deepcopy', '(', 'nums', ')', 'print', '(', '""\\nOriginal dictionary :""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nDeep copy of the said list:""', ')', 'print', '(', 'nums_copy', ')', 'print', '(', '""\\nChange the value of an element of the original dictionary:""', ')', 'nums', '[', '""zz""', ']', '[', '""z""', ']', '=', '10', 'print', '(', '""\\nFirst dictionary:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nSecond dictionary (Deep copy):""', ')', 'print', '(', 'nums_copy', ')']"
28,"['write', 'panda', 'program', 'create', 'subset', 'given', 'series', 'based', 'value', 'condition']","['import', 'pandas', 'as', 'pd', 's', '=', 'pd', '.', 'Series', '(', '[', '0', ',', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', ')', 'print', '(', '""Original Data Series:""', ')', 'print', '(', 's', ')', 'print', '(', '""\\nSubset of the above Data Series:""', ')', 'n', '=', '6', 'new_s', '=', 's', '[', 's', '<', 'n', ']', 'print', '(', 'new_s', ')']"
29,"['write', 'python', 'program', 'get', 'item', 'given', 'list', 'specific', 'condition']","['def', 'first_index', '(', 'l1', ')', ':', 'return', 'sum', '(', '1', 'for', 'i', 'in', 'l1', 'if', '(', 'i', '>', '45', 'and', 'i', '%', '2', '==', '0', ')', ')', 'nums', '=', '[', '12', ',', '45', ',', '23', ',', '67', ',', '78', ',', '90', ',', '45', ',', '32', ',', '100', ',', '76', ',', '38', ',', '62', ',', '73', ',', '29', ',', '83', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'n', '=', '45', 'print', '(', '""\\nNumber of Items of the said list which are even and greater than""', ',', 'n', ')', 'print', '(', 'first_index', '(', 'nums', ')', ')']"
30,"['write', 'python', 'program', 'read', 'file', 'line', 'line', 'store', 'variable']","['def', 'file_read', '(', 'fname', ')', ':', 'with', 'open', '(', 'fname', ',', '""r""', ')', 'as', 'myfile', ':', 'data', '=', 'myfile', '.', 'readlines', '(', ')', 'print', '(', 'data', ')', 'file_read', '(', ""'test.txt'"", ')']"
31,"['write', 'python', 'program', 'get', 'current', 'value', 'recursion', 'limit']","['import', 'sys', 'print', '(', ')', 'print', '(', '""Current value of the recursion limit:""', ')', 'print', '(', 'sys', '.', 'getrecursionlimit', '(', ')', ')', 'print', '(', ')']"
32,"['write', 'python', 'program', 'swap', 'case', 'given', 'string']","['def', 'swap_case_string', '(', 'str1', ')', ':', 'result_str', '=', '""""', 'for', 'item', 'in', 'str1', ':', 'if', 'item', '.', 'isupper', '(', ')', ':', 'result_str', '+=', 'item', '.', 'lower', '(', ')', 'else', ':', 'result_str', '+=', 'item', '.', 'upper', '(', ')', 'return', 'result_str', 'print', '(', 'swap_case_string', '(', '""Python Exercises""', ')', ')', 'print', '(', 'swap_case_string', '(', '""Java""', ')', ')', 'print', '(', 'swap_case_string', '(', '""NumPy""', ')', ')']"
33,"['write', 'python', 'program', 'convert', 'address', 'like', 'amphitheatre', 'parkway', 'mountain', 'view', 'ca', 'geographic', 'coordinate', 'like', 'latitude', 'longitude']","['import', 'requests', 'geo_url', '=', ""'http://maps.googleapis.com/maps/api/geocode/json'"", 'my_address', '=', '{', ""'address'"", ':', ""'21 Ramkrishana Road, Burdwan, East Burdwan, West Bengal, India'"", ',', ""'language'"", ':', ""'en'"", '}', 'response', '=', 'requests', '.', 'get', '(', 'geo_url', ',', 'params', '=', 'my_address', ')', 'results', '=', 'response', '.', 'json', '(', ')', '[', ""'results'"", ']', 'my_geo', '=', 'results', '[', '0', ']', '[', ""'geometry'"", ']', '[', ""'location'"", ']', 'print', '(', '""Longitude:""', ',', 'my_geo', '[', ""'lng'"", ']', ',', '""\\n""', ',', '""Latitude:""', ',', 'my_geo', '[', ""'lat'"", ']', ')']"
34,"['write', 'python', 'program', 'create', 'datetime', 'given', 'timezoneaware', 'datetime', 'using', 'arrow', 'module']","['import', 'arrow', 'from', 'datetime', 'import', 'datetime', 'from', 'dateutil', 'import', 'tz', 'print', '(', '""\\nCreate a date from a given date and a given time zone:""', ')', 'd1', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2018', ',', '7', ',', '5', ')', ',', ""'US/Pacific'"", ')', 'print', '(', 'd1', ')', 'print', '(', '""\\nCreate a date from a given date and a time zone object from a string representation:""', ')', 'd2', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '7', ',', '5', ')', ',', 'tz', '.', 'gettz', '(', ""'America/Chicago'"", ')', ')', 'print', '(', 'd2', ')', 'd3', '=', 'arrow', '.', 'get', '(', 'datetime', '.', 'now', '(', 'tz', '.', 'gettz', '(', ""'US/Pacific'"", ')', ')', ')', 'print', '(', '""\\nCreate a date using current datetime and a specified time zone:""', ')', 'print', '(', 'd3', ')']"
35,"['write', 'python', 'program', 'create', 'twodimensional', 'list', 'given', 'list', 'list']","['def', 'two_dimensional_list', '(', 'nums', ')', ':', 'return', 'list', '(', 'zip', '(', '*', 'nums', ')', ')', 'print', '(', 'two_dimensional_list', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ',', '6', ']', ',', '[', '7', ',', '8', ',', '9', ']', ',', '[', '10', ',', '11', ',', '12', ']', ']', ')', ')', 'print', '(', 'two_dimensional_list', '(', '[', '[', '1', ',', '2', ']', ',', '[', '4', ',', '5', ']', ']', ')', ')']"
36,"['write', 'python', 'program', 'invert', 'dictionary', 'unique', 'hashable', 'value']","['def', 'test', '(', 'students', ')', ':', 'return', '{', 'value', ':', 'key', 'for', 'key', ',', 'value', 'in', 'students', '.', 'items', '(', ')', '}', 'students', '=', '{', ""'Theodore'"", ':', '10', ',', ""'Mathew'"", ':', '11', ',', ""'Roxanne'"", ':', '9', ',', '}', 'print', '(', 'test', '(', 'students', ')', ')']"
37,"['write', 'numpy', 'program', 'access', 'last', 'two', 'column', 'multidimensional', 'column']","['import', 'numpy', 'as', 'np', 'arra', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ',', '6', ']', ',', '[', '7', ',', '8', ',', '9', ']', ']', ')', 'print', '(', 'arra', ')', 'result', '=', 'arra', '[', ':', ',', '[', '1', ',', '2', ']', ']', 'print', '(', 'result', ')']"
38,"['write', 'python', 'program', 'create', 'cartesian', 'product', 'two', 'given', 'list', 'using', 'itertools']","['import', 'itertools', 'def', 'cartesian_product', '(', 'lists', ')', ':', 'return', 'list', '(', 'itertools', '.', 'product', '(', '*', 'lists', ')', ')', 'ls', '=', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', 'print', '(', '""Original Lists:""', ',', 'ls', ')', 'print', '(', '""Cartesian product of the said lists: ""', ',', 'cartesian_product', '(', 'ls', ')', ')', 'ls', '=', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '3', ',', '4', ',', '5', ']', ']', 'print', '(', '""\\nOriginal Lists:""', ',', 'ls', ')', 'print', '(', '""Cartesian product of the said lists: ""', ',', 'cartesian_product', '(', 'ls', ')', ')', 'ls', '=', '[', '[', ']', ',', '[', '1', ',', '2', ',', '3', ']', ']', 'print', '(', '""\\nOriginal Lists:""', ',', 'ls', ')', 'print', '(', '""Cartesian product of the said lists: ""', ',', 'cartesian_product', '(', 'ls', ')', ')', 'ls', '=', '[', '[', '1', ',', '2', ']', ',', '[', ']', ']', 'print', '(', '""\\nOriginal Lists:""', ',', 'ls', ')', 'print', '(', '""Cartesian product of the said lists: ""', ',', 'cartesian_product', '(', 'ls', ')', ')']"
39,"['write', 'numpy', 'program', 'find', 'first', 'monday', 'may']","['import', 'numpy', 'as', 'np', 'print', '(', '""First Monday in May 2017:""', ')', 'print', '(', 'np', '.', 'busday_offset', '(', ""'2017-05'"", ',', '0', ',', 'roll', '=', ""'forward'"", ',', 'weekmask', '=', ""'Mon'"", ')', ')']"
40,"['write', 'python', 'program', 'get', 'number', 'people', 'visiting', 'u', 'government', 'website', 'right']","['import', 'requests', 'from', 'lxml', 'import', 'html', 'url', '=', ""'https://www.us-cert.gov/ncas/alerts'"", 'doc', '=', 'html', '.', 'fromstring', '(', 'requests', '.', 'get', '(', 'url', ')', '.', 'text', ')', 'print', '(', '""The number of security alerts issued by US-CERT in the current year:""', ')', 'print', '(', 'len', '(', 'doc', '.', 'cssselect', '(', ""'.item-list li'"", ')', ')', ')']"
41,"['write', 'numpy', 'program', 'remove', 'leading', 'trailing', 'whitespaces', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', ""' python exercises '"", ',', ""' PHP  '"", ',', ""' java  '"", ',', ""'  C++'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""Original Array:""', ')', 'print', '(', 'x', ')', 'stripped', '=', 'np', '.', 'char', '.', 'strip', '(', 'x', ')', 'print', '(', '""\\nRemove the leading and trailing whitespaces: ""', ',', 'stripped', ')']"
42,"['write', 'python', 'program', 'create', 'table', 'insert', 'record', 'table', 'finally', 'selects', 'row', 'table', 'display', 'record']","['import', 'sqlite3', 'from', 'sqlite3', 'import', 'Error', 'def', 'sql_connection', '(', ')', ':', 'try', ':', 'conn', '=', 'sqlite3', '.', 'connect', '(', ""'mydatabase.db'"", ')', 'return', 'conn', 'except', 'Error', ':', 'print', '(', 'Error', ')', 'def', 'sql_table', '(', 'conn', ')', ':', 'cursorObj', '=', 'conn', '.', 'cursor', '(', ')', 'cursorObj', '.', 'execute', '(', '""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));""', ')', 'cursorObj', '.', 'executescript', '(', '""""""\r   INSERT INTO salesman VALUES(5001,\'James Hoog\', \'New York\', 0.15);\r   INSERT INTO salesman VALUES(5002,\'Nail Knite\', \'Paris\', 0.25);\r   INSERT INTO salesman VALUES(5003,\'Pit Alex\', \'London\', 0.15);\r   INSERT INTO salesman VALUES(5004,\'Mc Lyon\', \'Paris\', 0.35);\r   INSERT INTO salesman VALUES(5005,\'Paul Adam\', \'Rome\', 0.45);\r   """"""', ')', 'conn', '.', 'commit', '(', ')', 'cursorObj', '.', 'execute', '(', '""SELECT * FROM salesman""', ')', 'rows', '=', 'cursorObj', '.', 'fetchall', '(', ')', 'print', '(', '""Agent details:""', ')', 'for', 'row', 'in', 'rows', ':', 'print', '(', 'row', ')', 'sqllite_conn', '=', 'sql_connection', '(', ')', 'sql_table', '(', 'sqllite_conn', ')', 'if', '(', 'sqllite_conn', ')', ':', 'sqllite_conn', '.', 'close', '(', ')', 'print', '(', '""\\nThe SQLite connection is closed.""', ')']"
43,"['write', 'panda', 'program', 'calculate', 'number', 'character', 'word', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'series1', '=', 'pd', '.', 'Series', '(', '[', ""'Php'"", ',', ""'Python'"", ',', ""'Java'"", ',', ""'C#'"", ']', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'series1', ')', 'result', '=', 'series1', '.', 'map', '(', 'lambda', 'x', ':', 'len', '(', 'x', ')', ')', 'print', '(', '""\\nNumber of characters in each word in the said series:""', ')', 'print', '(', 'result', ')']"
44,"['write', 'numpy', 'program', 'broadcast', 'different', 'shape', 'array']","['import', 'numpy', 'as', 'np', 'p', '=', 'np', '.', 'array', '(', '[', '[', '0', ',', '0', ',', '0', ']', ',', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ',', '6', ']', ']', ')', 'q', '=', 'np', '.', 'array', '(', '[', '10', ',', '11', ',', '12', ']', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', '""Array-1""', ')', 'print', '(', 'p', ')', 'print', '(', '""Array-2""', ')', 'print', '(', 'q', ')', 'print', '(', '""\\nNew Array:""', ')', 'new_array1', '=', 'p', '+', 'q', 'print', '(', 'new_array1', ')']"
45,"['write', 'python', 'program', 'check', 'given', 'function', 'return', 'true', 'least', 'one', 'element', 'list']","['def', 'some', '(', 'lst', ',', 'fn', '=', 'lambda', 'x', ':', 'x', ')', ':', 'return', 'any', '(', 'map', '(', 'fn', ',', 'lst', ')', ')', 'print', '(', 'some', '(', '[', '0', ',', '1', ',', '2', ',', '0', ']', ',', 'lambda', 'x', ':', 'x', '>=', '2', ')', ')', 'print', '(', 'some', '(', '[', '5', ',', '10', ',', '20', ',', '10', ']', ',', 'lambda', 'x', ':', 'x', '<', '2', ')', ')']"
46,"['write', 'numpy', 'program', 'create', 'array', 'using', 'generator', 'function', 'generates', 'integer']","['import', 'numpy', 'as', 'np', 'def', 'generate', '(', ')', ':', 'for', 'n', 'in', 'range', '(', '15', ')', ':', 'yield', 'n', 'nums', '=', 'np', '.', 'fromiter', '(', 'generate', '(', ')', ',', 'dtype', '=', 'float', ',', 'count', '=', '-', '1', ')', 'print', '(', '""New array:""', ')', 'print', '(', 'nums', ')']"
47,"['write', 'python', 'program', 'find', 'four', 'element', 'given', 'array', 'integer', 'whose', 'sum', 'equal', 'given', 'number', 'solution', 'set', 'must', 'contain', 'duplicate', 'quadruplet']",[]
48,"['write', 'python', 'program', 'extract', 'specified', 'size', 'string', 'give', 'list', 'string', 'value']","['def', 'extract_string', '(', 'str_list1', ',', 'l', ')', ':', 'result', '=', '[', 'e', 'for', 'e', 'in', 'str_list1', 'if', 'len', '(', 'e', ')', '==', 'l', ']', 'return', 'result', 'str_list1', '=', '[', ""'Python'"", ',', ""'list'"", ',', ""'exercises'"", ',', ""'practice'"", ',', ""'solution'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'str_list1', ')', 'l', '=', '8', 'print', '(', '""\\nlength of the string to extract:""', ')', 'print', '(', 'l', ')', 'print', '(', '""\\nAfter extracting strings of specified length from the said list:""', ')', 'print', '(', 'extract_string', '(', 'str_list1', ',', 'l', ')', ')']"
49,"['write', 'python', 'program', 'count', 'number', 'time', 'specific', 'element', 'present', 'deque', 'object']","['import', 'collections', 'nums', '=', '(', '2', ',', '9', ',', '0', ',', '8', ',', '2', ',', '4', ',', '0', ',', '9', ',', '2', ',', '4', ',', '8', ',', '2', ',', '0', ',', '4', ',', '2', ',', '3', ',', '4', ',', '0', ')', 'nums_dq', '=', 'collections', '.', 'deque', '(', 'nums', ')', 'print', '(', '""Number of 2 in the sequence""', ')', 'print', '(', 'nums_dq', '.', 'count', '(', '2', ')', ')', 'print', '(', '""Number of 4 in the sequence""', ')', 'print', '(', 'nums_dq', '.', 'count', '(', '4', ')', ')']"
50,"['write', 'panda', 'program', 'check', 'empty', 'value', 'ufo', 'unidentified', 'flying', 'object', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'print', '(', 'df', '.', 'isnull', '(', ')', '.', 'sum', '(', ')', ')']"
51,"['create', 'dataframe', 'ten', 'row', 'four', 'column', 'random', 'value', 'write', 'panda', 'program', 'make', 'gradient', 'color', 'value', 'said', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'import', 'seaborn', 'as', 'sns', 'np', '.', 'random', '.', 'seed', '(', '24', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', 'np', '.', 'linspace', '(', '1', ',', '10', ',', '10', ')', '}', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df', ',', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', ',', 'columns', '=', 'list', '(', ""'BCDE'"", ')', ')', ']', ',', 'axis', '=', '1', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nDataframe - Gradient color:""', ')', 'df', '.', 'style', '.', 'background_gradient', '(', ')']"
52,"['write', 'python', 'program', 'find', 'difference', 'consecutive', 'number', 'given', 'list']","['def', 'diff_consecutive_nums', '(', 'nums', ')', ':', 'result', '=', '[', 'b', '-', 'a', 'for', 'a', ',', 'b', 'in', 'zip', '(', 'nums', '[', ':', '-', '1', ']', ',', 'nums', '[', '1', ':', ']', ')', ']', 'return', 'result', 'nums1', '=', '[', '1', ',', '1', ',', '3', ',', '4', ',', '4', ',', '5', ',', '6', ',', '7', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums1', ')', 'print', '(', '""Difference between consecutive numbers of the said list:""', ')', 'print', '(', 'diff_consecutive_nums', '(', 'nums1', ')', ')', 'nums2', '=', '[', '4', ',', '5', ',', '8', ',', '9', ',', '6', ',', '10', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums2', ')', 'print', '(', '""Difference between consecutive numbers of the said list:""', ')', 'print', '(', 'diff_consecutive_nums', '(', 'nums2', ')', ')']"
53,"['write', 'panda', 'program', 'extract', 'word', 'given', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF'"", ',', ""'zefsalf'"", ',', ""'sdfslew'"", ',', ""'zekfsdf'"", ']', ',', ""'date_of_sale'"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'05/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'address'"", ':', '[', ""'9910 Surrey Ave.'"", ',', ""'92 N. Bishop Ave.'"", ',', ""'9910 Golden Star Ave.'"", ',', ""'102 Dunbar St.'"", ',', ""'17 West Livingston Court'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'search_words', '(', 'text', ')', ':', 'result', '=', 're', '.', 'findall', '(', ""r'\\b[^\\d\\W]+\\b'"", ',', 'text', ')', 'return', '"" ""', '.', 'join', '(', 'result', ')', 'df', '[', ""'only_words'"", ']', '=', 'df', '[', ""'address'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'search_words', '(', 'x', ')', ')', 'print', '(', '""\\nOnly words:""', ')', 'print', '(', 'df', ')']"
54,"['write', 'python', 'program', 'replace', 'hour', 'minute', 'day', 'month', 'year', 'timezone', 'specified', 'value', 'current', 'datetime', 'using', 'arrow']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current date and time:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\nReplace hour and minute with 5 and 35:""', ')', 'print', '(', 'a', '.', 'replace', '(', 'hour', '=', '5', ',', 'minute', '=', '35', ')', ')', 'print', '(', '""\\nReplace day with 2:""', ')', 'print', '(', 'a', '.', 'replace', '(', 'day', '=', '2', ')', ')', 'print', '(', '""\\nReplace year with 2021:""', ')', 'print', '(', 'a', '.', 'replace', '(', 'year', '=', '2021', ')', ')', 'print', '(', '""\\nReplace month with 11:""', ')', 'print', '(', 'a', '.', 'replace', '(', 'month', '=', '11', ')', ')', 'print', '(', '""\\nReplace timezone with \'US/Pacific:""', ')', 'print', '(', 'a', '.', 'replace', '(', 'tzinfo', '=', ""'US/Pacific'"", ')', ')']"
55,"['write', 'python', 'program', 'invoke', 'given', 'function', 'specific', 'millisecond']","['from', 'time', 'import', 'sleep', 'import', 'math', 'def', 'delay', '(', 'fn', ',', 'ms', ',', '*', 'args', ')', ':', 'sleep', '(', 'ms', '/', '1000', ')', 'return', 'fn', '(', '*', 'args', ')', 'print', '(', '""Square root after specific miliseconds:""', ')', 'print', '(', 'delay', '(', 'lambda', 'x', ':', 'math', '.', 'sqrt', '(', 'x', ')', ',', '100', ',', '16', ')', ')', 'print', '(', 'delay', '(', 'lambda', 'x', ':', 'math', '.', 'sqrt', '(', 'x', ')', ',', '1000', ',', '100', ')', ')', 'print', '(', 'delay', '(', 'lambda', 'x', ':', 'math', '.', 'sqrt', '(', 'x', ')', ',', '2000', ',', '25100', ')', ')']"
56,"['write', 'panda', 'program', 'find', 'drop', 'missing', 'value', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nMissing values:""', ')', 'print', '(', 'w_a_con', '.', 'isnull', '(', ')', ')', 'print', '(', '""\\nDropping the missing values:""', ')', 'print', '(', 'w_a_con', '.', 'dropna', '(', ')', ')']"
57,"['write', 'python', 'program', 'print', 'prime', 'smaller', 'equal', 'specified', 'number']",[]
58,"['write', 'python', 'program', 'create', 'nonrepeated', 'combination', 'cartesian', 'product', 'four', 'given', 'list', 'number']","['import', 'itertools', 'as', 'it', 'mums1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ']', 'mums2', '=', '[', '5', ',', '6', ',', '7', ',', '8', ']', 'mums3', '=', '[', '9', ',', '10', ',', '11', ',', '12', ']', 'mums4', '=', '[', '13', ',', '14', ',', '15', ',', '16', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'mums1', ')', 'print', '(', 'mums2', ')', 'print', '(', 'mums3', ')', 'print', '(', 'mums4', ')', 'print', '(', '""\\nSum of the specified range:""', ')', 'for', 'i', 'in', 'it', '.', 'product', '(', '[', 'tuple', '(', 'mums1', ')', ']', ',', 'it', '.', 'permutations', '(', 'mums2', ')', ',', 'it', '.', 'permutations', '(', 'mums3', ')', ',', 'it', '.', 'permutations', '(', 'mums4', ')', ')', ':', 'print', '(', 'i', ')']"
59,"['write', 'python', 'program', 'find', 'value', 'length', 'six', 'given', 'list', 'using', 'lambda']","['weekdays', '=', '[', ""'Monday'"", ',', ""'Tuesday'"", ',', ""'Wednesday'"", ',', ""'Thursday'"", ',', ""'Friday'"", ',', ""'Saturday'"", ',', ""'Sunday'"", ']', 'days', '=', 'filter', '(', 'lambda', 'day', ':', 'day', 'if', 'len', '(', 'day', ')', '==', '6', 'else', ""''"", ',', 'weekdays', ')', 'for', 'd', 'in', 'days', ':', 'print', '(', 'd', ')']"
60,"['write', 'panda', 'program', 'replace', 'nan', 'value', 'previous', 'row', 'next', 'row', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', 'np', '.', 'nan', ',', '70002', ',', '70004', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', 'np', '.', 'nan', ',', '65.26', ',', '110.5', ',', '948.5', ',', 'np', '.', 'nan', ',', '5760', ',', '1983.43', ',', 'np', '.', 'nan', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_amt'"", ':', '[', '10.5', ',', '20.65', ',', 'np', '.', 'nan', ',', '11.5', ',', '98.5', ',', 'np', '.', 'nan', ',', '57', ',', '19.43', ',', 'np', '.', 'nan', ',', '25.45', ',', '75.29', ',', '35.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3002', ',', '3001', ',', '3001', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5003', ',', '5001', ',', 'np', '.', 'nan', ',', '5002', ',', '5001', ',', '5001', ',', 'np', '.', 'nan', ',', '5003', ',', '5002', ',', '5003', ',', 'np', '.', 'nan', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nReplacing NaNs with the value from the previous row (purch_amt):""', ')', 'df', '[', ""'purch_amt'"", ']', '.', 'fillna', '(', 'method', '=', ""'pad'"", ',', 'inplace', '=', 'True', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nReplacing NaNs with the value from the next row (sale_amt):""', ')', 'df', '[', ""'sale_amt'"", ']', '.', 'fillna', '(', 'method', '=', ""'bfill'"", ',', 'inplace', '=', 'True', ')', 'print', '(', 'df', ')']"
61,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'merge', 'sort', 'algorithm']","['def', 'mergeSort', '(', 'nlist', ')', ':', 'print', '(', '""Splitting ""', ',', 'nlist', ')', 'if', 'len', '(', 'nlist', ')', '>', '1', ':', 'mid', '=', 'len', '(', 'nlist', ')', '//', '2', 'lefthalf', '=', 'nlist', '[', ':', 'mid', ']', 'righthalf', '=', 'nlist', '[', 'mid', ':', ']', 'mergeSort', '(', 'lefthalf', ')', 'mergeSort', '(', 'righthalf', ')', 'i', '=', 'j', '=', 'k', '=', '0', 'while', 'i', '<', 'len', '(', 'lefthalf', ')', 'and', 'j', '<', 'len', '(', 'righthalf', ')', ':', 'if', 'lefthalf', '[', 'i', ']', '<', 'righthalf', '[', 'j', ']', ':', 'nlist', '[', 'k', ']', '=', 'lefthalf', '[', 'i', ']', 'i', '=', 'i', '+', '1', 'else', ':', 'nlist', '[', 'k', ']', '=', 'righthalf', '[', 'j', ']', 'j', '=', 'j', '+', '1', 'k', '=', 'k', '+', '1', 'while', 'i', '<', 'len', '(', 'lefthalf', ')', ':', 'nlist', '[', 'k', ']', '=', 'lefthalf', '[', 'i', ']', 'i', '=', 'i', '+', '1', 'k', '=', 'k', '+', '1', 'while', 'j', '<', 'len', '(', 'righthalf', ')', ':', 'nlist', '[', 'k', ']', '=', 'righthalf', '[', 'j', ']', 'j', '=', 'j', '+', '1', 'k', '=', 'k', '+', '1', 'print', '(', '""Merging ""', ',', 'nlist', ')', 'nlist', '=', '[', '14', ',', '46', ',', '43', ',', '27', ',', '57', ',', '41', ',', '45', ',', '21', ',', '70', ']', 'mergeSort', '(', 'nlist', ')', 'print', '(', 'nlist', ')']"
62,"['latitude', 'longitude', 'use', 'place', 'marker', 'map', 'position', 'map']","['from', 'lxml', 'import', 'html', 'import', 'requests', 'response', '=', 'requests', '.', 'get', '(', ""'http://catalog.data.gov/dataset?q=&sort=metadata_created+desc'"", ')', 'doc', '=', 'html', '.', 'fromstring', '(', 'response', '.', 'text', ')', 'title', '=', 'doc', '.', 'cssselect', '(', ""'h3.dataset-heading'"", ')', '[', '0', ']', '.', 'text_content', '(', ')', 'print', '(', '""The name of the most recently added dataset on data.gov:""', ')', 'print', '(', 'title', '.', 'strip', '(', ')', ')']"
63,"['write', 'numpy', 'program', 'create', 'array', 'one', 'array', 'zero']","['import', 'numpy', 'as', 'np', 'print', '(', '""Create an array of zeros""', ')', 'x', '=', 'np', '.', 'zeros', '(', '(', '1', ',', '2', ')', ')', 'print', '(', '""Default type is float""', ')', 'print', '(', 'x', ')', 'print', '(', '""Type changes to int""', ')', 'x', '=', 'np', '.', 'zeros', '(', '(', '1', ',', '2', ')', ',', 'dtype', '=', 'np', '.', 'int', ')', 'print', '(', 'x', ')', 'print', '(', '""Create an array of ones""', ')', 'y', '=', 'np', '.', 'ones', '(', '(', '1', ',', '2', ')', ')', 'print', '(', '""Default type is float""', ')', 'print', '(', 'y', ')', 'print', '(', '""Type changes to int""', ')', 'y', '=', 'np', '.', 'ones', '(', '(', '1', ',', '2', ')', ',', 'dtype', '=', 'np', '.', 'int', ')', 'print', '(', 'y', ')']"
64,"['write', 'python', 'program', 'find', 'value', 'first', 'element', 'given', 'list', 'satisfies', 'provided', 'testing', 'function']","['def', 'find', '(', 'lst', ',', 'fn', ')', ':', 'return', 'next', '(', 'x', 'for', 'x', 'in', 'lst', 'if', 'fn', '(', 'x', ')', ')', 'print', '(', 'find', '(', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', 'lambda', 'n', ':', 'n', '%', '2', '==', '1', ')', ')', 'print', '(', 'find', '(', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', 'lambda', 'n', ':', 'n', '%', '2', '==', '0', ')', ')']"
65,"['write', 'python', 'program', 'remove', 'duplicate', 'dictionary']","['student_data', '=', '{', ""'id1'"", ':', '{', ""'name'"", ':', '[', ""'Sara'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ']', ',', ""'subject_integration'"", ':', '[', ""'english, math, science'"", ']', '}', ',', ""'id2'"", ':', '{', ""'name'"", ':', '[', ""'David'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ']', ',', ""'subject_integration'"", ':', '[', ""'english, math, science'"", ']', '}', ',', ""'id3'"", ':', '{', ""'name'"", ':', '[', ""'Sara'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ']', ',', ""'subject_integration'"", ':', '[', ""'english, math, science'"", ']', '}', ',', ""'id4'"", ':', '{', ""'name'"", ':', '[', ""'Surya'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ']', ',', ""'subject_integration'"", ':', '[', ""'english, math, science'"", ']', '}', ',', '}', 'result', '=', '{', '}', 'for', 'key', ',', 'value', 'in', 'student_data', '.', 'items', '(', ')', ':', 'if', 'value', 'not', 'in', 'result', '.', 'values', '(', ')', ':', 'result', '[', 'key', ']', '=', 'value', 'print', '(', 'result', ')']"
66,"['write', 'python', 'program', 'find', 'list', 'list', 'list', 'whose', 'sum', 'element', 'highest']","['num', '=', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ',', '6', ']', ',', '[', '10', ',', '11', ',', '12', ']', ',', '[', '7', ',', '8', ',', '9', ']', ']', 'print', '(', 'max', '(', 'num', ',', 'key', '=', 'sum', ')', ')']"
67,"['write', 'python', 'program', 'get', 'top', 'story', 'google', 'news']","['import', 'bs4', 'from', 'bs4', 'import', 'BeautifulSoup', 'as', 'soup', 'from', 'urllib', '.', 'request', 'import', 'urlopen', 'news_url', '=', '""https://news.google.com/news/rss""', 'Client', '=', 'urlopen', '(', 'news_url', ')', 'xml_page', '=', 'Client', '.', 'read', '(', ')', 'Client', '.', 'close', '(', ')', 'soup_page', '=', 'soup', '(', 'xml_page', ',', '""xml""', ')', 'news_list', '=', 'soup_page', '.', 'findAll', '(', '""item""', ')', 'for', 'news', 'in', 'news_list', ':', 'print', '(', 'news', '.', 'title', '.', 'text', ')', 'print', '(', 'news', '.', 'link', '.', 'text', ')', 'print', '(', 'news', '.', 'pubDate', '.', 'text', ')', 'print', '(', '""-""', '*', '60', ')']"
68,"['write', 'python', 'program', 'check', 'value', 'dictionary']","['def', 'value_check', '(', 'students', ',', 'n', ')', ':', 'result', '=', 'all', '(', 'x', '==', 'n', 'for', 'x', 'in', 'students', '.', 'values', '(', ')', ')', 'return', 'result', 'students', '=', '{', ""'Cierra Vega'"", ':', '12', ',', ""'Alden Cantrell'"", ':', '12', ',', ""'Kierra Gentry'"", ':', '12', ',', ""'Pierre Cox'"", ':', '12', '}', 'print', '(', '""Original Dictionary:""', ')', 'print', '(', 'students', ')', 'n', '=', '12', 'print', '(', '""\\nCheck all are ""', ',', 'n', ',', '""in the dictionary.""', ')', 'print', '(', 'value_check', '(', 'students', ',', 'n', ')', ')', 'n', '=', '10', 'print', '(', '""\\nCheck all are ""', ',', 'n', ',', '""in the dictionary.""', ')', 'print', '(', 'value_check', '(', 'students', ',', 'n', ')', ')']"
69,"['write', 'python', 'program', 'compare', 'two', 'given', 'list', 'find', 'index', 'value', 'present', 'list']","['def', 'matched_index', '(', 'l1', ',', 'l2', ')', ':', 'l2', '=', 'set', '(', 'l2', ')', 'return', '[', 'i', 'for', 'i', ',', 'el', 'in', 'enumerate', '(', 'l1', ')', 'if', 'el', 'in', 'l2', ']', 'nums1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', 'nums2', '=', '[', '7', ',', '8', ',', '5', ',', '2', ',', '10', ',', '12', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""Compare said two lists and get the indices of the values present in both lists:""', ')', 'print', '(', 'matched_index', '(', 'nums1', ',', 'nums2', ')', ')', 'nums1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', 'nums2', '=', '[', '7', ',', '8', ',', '5', ',', '7', ',', '10', ',', '12', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""Compare said two lists and get the indices of the values present in both lists:""', ')', 'print', '(', 'matched_index', '(', 'nums1', ',', 'nums2', ')', ')', 'nums1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '15', ',', '6', ']', 'nums2', '=', '[', '7', ',', '8', ',', '5', ',', '7', ',', '10', ',', '12', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""Compare said two lists and get the indices of the values present in both lists:""', ')', 'print', '(', 'matched_index', '(', 'nums1', ',', 'nums2', ')', ')']"
70,"['write', 'python', 'program', 'create', 'time', 'format', 'hhmm', 'using', 'given', 'digit', 'display', 'latest', 'time', 'use', 'digit']","['import', 'itertools', 'def', 'max_time', '(', 'nums', ')', ':', 'for', 'i', 'in', 'range', '(', 'len', '(', 'nums', ')', ')', ':', 'nums', '[', 'i', ']', '*=', '-', '1', 'nums', '.', 'sort', '(', ')', 'for', 'hr1', ',', 'hr2', ',', 'm1', ',', 'm2', 'in', 'itertools', '.', 'permutations', '(', 'nums', ')', ':', 'hrs', '=', '-', '(', '10', '*', 'hr1', '+', 'hr2', ')', 'mins', '=', '-', '(', '10', '*', 'm1', '+', 'm2', ')', 'if', '60', '>', 'mins', '>=', '0', 'and', '24', '>', 'hrs', '>=', '0', ':', 'result', '=', '""{:02}:{:02}""', '.', 'format', '(', 'hrs', ',', 'mins', ')', 'break', 'return', 'result', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ']', 'print', '(', '""Original array:""', ',', 'nums', ')', 'print', '(', '""Latest time: ""', ',', 'max_time', '(', 'nums', ')', ')', 'nums', '=', '[', '1', ',', '2', ',', '4', ',', '5', ']', 'print', '(', '""\\nOriginal array:""', ',', 'nums', ')', 'print', '(', '""Latest time: ""', ',', 'max_time', '(', 'nums', ')', ')', 'nums', '=', '[', '2', ',', '2', ',', '4', ',', '5', ']', 'print', '(', '""\\nOriginal array:""', ',', 'nums', ')', 'print', '(', '""Latest time: ""', ',', 'max_time', '(', 'nums', ')', ')', 'nums', '=', '[', '2', ',', '2', ',', '4', ',', '3', ']', 'print', '(', '""\\nOriginal array:""', ',', 'nums', ')', 'print', '(', '""Latest time: ""', ',', 'max_time', '(', 'nums', ')', ')', 'nums', '=', '[', '0', ',', '2', ',', '4', ',', '3', ']', 'print', '(', '""\\nOriginal array:""', ',', 'nums', ')', 'print', '(', '""Latest time: ""', ',', 'max_time', '(', 'nums', ')', ')']"
71,"['sum', 'list', 'number', 'write', 'python', 'program', 'sum', 'first', 'number', 'second', 'divide', 'sum', 'second', 'third', 'divide']",[]
72,"['write', 'python', 'program', 'test', 'whether', 'number', 'list', 'greater', 'certain', 'number']","['num', '=', '[', '2', ',', '3', ',', '4', ',', '5', ']', 'print', '(', ')', 'print', '(', 'all', '(', 'x', '>', '1', 'for', 'x', 'in', 'num', ')', ')', 'print', '(', 'all', '(', 'x', '>', '4', 'for', 'x', 'in', 'num', ')', ')', 'print', '(', ')']"
73,"['write', 'numpy', 'program', 'test', 'whether', 'given', 'array', 'null', 'column']","['import', 'numpy', 'as', 'np', 'print', '(', '""Original array:""', ')', 'nums', '=', 'np', '.', 'random', '.', 'randint', '(', '0', ',', '3', ',', '(', '4', ',', '10', ')', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nTest whether the said array has null columns or not:""', ')', 'print', '(', '(', '~', 'nums', '.', 'any', '(', 'axis', '=', '0', ')', ')', '.', 'any', '(', ')', ')']"
74,"['write', 'numpy', 'program', 'convert', 'angle', 'degree', 'radian', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '-', '180.', ',', '-', '90.', ',', '90.', ',', '180.', ']', ')', 'r1', '=', 'np', '.', 'radians', '(', 'x', ')', 'r2', '=', 'np', '.', 'deg2rad', '(', 'x', ')', 'assert', 'np', '.', 'array_equiv', '(', 'r1', ',', 'r2', ')', 'print', '(', 'r1', ')']"
75,"['write', 'python', 'program', 'find', 'anagram', 'string', 'given', 'list', 'string', 'using', 'lambda']","['from', 'collections', 'import', 'Counter', 'texts', '=', '[', '""bcda""', ',', '""abce""', ',', '""cbda""', ',', '""cbea""', ',', '""adcb""', ']', 'str', '=', '""abcd""', 'print', '(', '""Orginal list of strings:""', ')', 'print', '(', 'texts', ')', 'result', '=', 'list', '(', 'filter', '(', 'lambda', 'x', ':', '(', 'Counter', '(', 'str', ')', '==', 'Counter', '(', 'x', ')', ')', ',', 'texts', ')', ')', 'print', '(', '""\\nAnagrams of \'abcd\' in the above string: ""', ')', 'print', '(', 'result', ')']"
76,"['rogram', 'display', 'name', 'recently', 'added', 'dataset', 'datagov']","['from', 'urllib', '.', 'request', 'import', 'urlopen', 'from', 'bs4', 'import', 'BeautifulSoup', 'html', '=', 'urlopen', '(', ""'http://www.example.com/'"", ')', 'bsh', '=', 'BeautifulSoup', '(', 'html', '.', 'read', '(', ')', ',', ""'html.parser'"", ')', 'print', '(', 'bsh', '.', 'h1', ')']"
77,"['write', 'numpy', 'program', 'extract', 'number', 'given', 'array', 'le', 'greater', 'specified', 'number']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '[', '5.54', ',', '3.38', ',', '7.99', ']', ',', '[', '3.54', ',', '4.38', ',', '6.99', ']', ',', '[', '1.54', ',', '2.39', ',', '9.29', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'n', '=', '5', 'print', '(', '""\\nElements of the said array greater than""', ',', 'n', ')', 'print', '(', 'nums', '[', 'nums', '>', 'n', ']', ')', 'n', '=', '6', 'print', '(', '""\\nElements of the said array less than""', ',', 'n', ')', 'print', '(', 'nums', '[', 'nums', '<', 'n', ']', ')']"
78,"['write', 'numpy', 'program', 'extract', 'second', 'fourth', 'element', 'second', 'fourth', 'row', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arra_data', '=', 'np', '.', 'arange', '(', '0', ',', '16', ')', '.', 'reshape', '(', '(', '4', ',', '4', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arra_data', ')', 'print', '(', '""\\nExtracted data: Second and fourth elements of the second and fourth rows ""', ')', 'print', '(', 'arra_data', '[', '1', ':', ':', '2', ',', '1', ':', ':', '2', ']', ')']"
79,"['write', 'numpy', 'program', 'split', 'given', 'array', 'multiple', 'subarrays', 'vertically', 'rowwise']","['import', 'numpy', 'as', 'np', 'print', '(', '""\\nOriginal arrays:""', ')', 'x', '=', 'np', '.', 'arange', '(', '16.0', ')', '.', 'reshape', '(', '4', ',', '4', ')', 'print', '(', 'x', ')', 'new_array1', '=', 'np', '.', 'vsplit', '(', 'x', ',', '2', ')', 'print', '(', '""\\nSplit an array into multiple sub-arrays vertically:""', ')', 'print', '(', 'new_array1', ')']"
80,"['write', 'python', 'program', 'count', 'number', 'substring', 'given', 'string', 'lowercase', 'alphabet', 'exactly', 'k', 'distinct', 'given', 'character']","['def', 'count_k_dist', '(', 'str1', ',', 'k', ')', ':', 'str_len', '=', 'len', '(', 'str1', ')', 'result', '=', '0', 'ctr', '=', '[', '0', ']', '*', '27', 'for', 'i', 'in', 'range', '(', '0', ',', 'str_len', ')', ':', 'dist_ctr', '=', '0', 'ctr', '=', '[', '0', ']', '*', '27', 'for', 'j', 'in', 'range', '(', 'i', ',', 'str_len', ')', ':', 'if', '(', 'ctr', '[', 'ord', '(', 'str1', '[', 'j', ']', ')', '-', '97', ']', '==', '0', ')', ':', 'dist_ctr', '+=', '1', 'ctr', '[', 'ord', '(', 'str1', '[', 'j', ']', ')', '-', '97', ']', '+=', '1', 'if', '(', 'dist_ctr', '==', 'k', ')', ':', 'result', '+=', '1', 'if', '(', 'dist_ctr', '>', 'k', ')', ':', 'break', 'return', 'result', 'str1', '=', 'input', '(', '""Input a string (lowercase alphabets):""', ')', 'k', '=', 'int', '(', 'input', '(', '""Input k: ""', ')', ')', 'print', '(', '""Number of substrings with exactly""', ',', 'k', ',', '""distinct characters : ""', ',', 'end', '=', '""""', ')', 'print', '(', 'count_k_dist', '(', 'str1', ',', 'k', ')', ')']"
81,"['write', 'python', 'program', 'create', 'list', 'reflecting', 'runlength', 'encoding', 'given', 'list', 'integer', 'given', 'list', 'character']","['from', 'itertools', 'import', 'groupby', 'def', 'encode_list', '(', 's_list', ')', ':', 'return', '[', '[', 'len', '(', 'list', '(', 'group', ')', ')', ',', 'key', ']', 'for', 'key', ',', 'group', 'in', 'groupby', '(', 's_list', ')', ']', 'n_list', '=', '[', '1', ',', '1', ',', '2', ',', '3', ',', '4', ',', '4.3', ',', '5', ',', '1', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'n_list', ')', 'print', '(', '""\\nList reflecting the run-length encoding from the said list:""', ')', 'print', '(', 'encode_list', '(', 'n_list', ')', ')', 'n_list', '=', ""'automatically'"", 'print', '(', '""\\nOriginal String:""', ')', 'print', '(', 'n_list', ')', 'print', '(', '""\\nList reflecting the run-length encoding from the said string:""', ')', 'print', '(', 'encode_list', '(', 'n_list', ')', ')']"
82,"['write', 'panda', 'program', 'check', 'whether', 'numeric', 'value', 'present', 'given', 'column', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Company'"", ',', ""'Company a001'"", ',', ""'2055'"", ',', ""'abcd'"", ',', ""'123345'"", ']', ',', ""'date_of_sale '"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nNumeric values present in company_code column:""', ')', 'df', '[', ""'company_code_is_digit'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'isdigit', '(', ')', ',', 'df', '[', ""'company_code'"", ']', ')', ')', 'print', '(', 'df', ')']"
83,"['write', 'python', 'program', 'check', 'specific', 'key', 'value', 'exist', 'dictionary']","['def', 'test', '(', 'dictt', ',', 'key', ',', 'value', ')', ':', 'if', 'any', '(', 'sub', '[', 'key', ']', '==', 'value', 'for', 'sub', 'in', 'dictt', ')', ':', 'return', 'True', 'return', 'False', 'students', '=', '[', '{', ""'student_id'"", ':', '1', ',', ""'name'"", ':', ""'Jean Castro'"", ',', ""'class'"", ':', ""'V'"", '}', ',', '{', ""'student_id'"", ':', '2', ',', ""'name'"", ':', ""'Lula Powell'"", ',', ""'class'"", ':', ""'V'"", '}', ',', '{', ""'student_id'"", ':', '3', ',', ""'name'"", ':', ""'Brian Howell'"", ',', ""'class'"", ':', ""'VI'"", '}', ',', '{', ""'student_id'"", ':', '4', ',', ""'name'"", ':', ""'Lynne Foster'"", ',', ""'class'"", ':', ""'VI'"", '}', ',', '{', ""'student_id'"", ':', '5', ',', ""'name'"", ':', ""'Zachary Simon'"", ',', ""'class'"", ':', ""'VII'"", '}', ']', 'print', '(', '""\\nOriginal dictionary:""', ')', 'print', '(', 'students', ')', 'print', '(', '""\\nCheck if a specific Key and a value exist in the said dictionary:""', ')', 'print', '(', 'test', '(', 'students', ',', ""'student_id'"", ',', '1', ')', ')', 'print', '(', 'test', '(', 'students', ',', ""'name'"", ',', ""'Brian Howell'"", ')', ')', 'print', '(', 'test', '(', 'students', ',', ""'class'"", ',', ""'VII'"", ')', ')', 'print', '(', 'test', '(', 'students', ',', ""'class'"", ',', ""'I'"", ')', ')', 'print', '(', 'test', '(', 'students', ',', ""'name'"", ',', ""'Brian Howelll'"", ')', ')', 'print', '(', 'test', '(', 'students', ',', ""'student_id'"", ',', '11', ')', ')']"
84,"['write', 'panda', 'program', 'split', 'given', 'dataset', 'using', 'group', 'multiple', 'column', 'drop', 'last', 'n', 'row', 'group']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', '70009', ',', '70002', ',', '70004', ',', '70007', ',', '70005', ',', '70008', ',', '70010', ',', '70003', ',', '70012', ',', '70011', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', ""'2012-10-05'"", ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3002', ',', '3001', ',', '3001', ',', '3003', ',', '3002', ',', '3002', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3003', ',', '3001', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5003', ',', '5001', ',', '5003', ',', '5002', ',', '5001', ',', '5001', ',', '5003', ',', '5003', ',', '5002', ',', '5003', ',', '5001', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nSplit the said data on \'salesman_id\', \'customer_id\' wise:""', ')', 'result', '=', 'df', '.', 'groupby', '(', '[', ""'salesman_id'"", ',', ""'customer_id'"", ']', ')', 'for', 'name', ',', 'group', 'in', 'result', ':', 'print', '(', '""\\nGroup:""', ')', 'print', '(', 'name', ')', 'print', '(', 'group', ')', 'n', '=', '2', 'print', '(', '""\\nDroping last two records:""', ')', 'result1', '=', 'df', '.', 'drop', '(', 'df', '.', 'groupby', '(', '[', ""'salesman_id'"", ',', ""'customer_id'"", ']', ')', '.', 'tail', '(', 'n', ')', '.', 'index', ',', 'axis', '=', '0', ')', 'print', '(', 'result1', ')']"
85,"['write', 'numpy', 'program', 'find', 'point', 'point', 'distance', 'random', 'vector', 'shape', 'representing', 'coordinate']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'random', '.', 'random', '(', '(', '10', ',', '2', ')', ')', 'x', ',', 'y', '=', 'np', '.', 'atleast_2d', '(', 'a', '[', ':', ',', '0', ']', ',', 'a', '[', ':', ',', '1', ']', ')', 'd', '=', 'np', '.', 'sqrt', '(', '(', 'x', '-', 'x', '.', 'T', ')', '**', '2', '+', '(', 'y', '-', 'y', '.', 'T', ')', '**', '2', ')', 'print', '(', 'd', ')']"
86,"['write', 'python', 'program', 'create', 'next', 'bigger', 'number', 'rearranging', 'digit', 'given', 'number']","['def', 'rearrange_bigger', '(', 'n', ')', ':', 'nums', '=', 'list', '(', 'str', '(', 'n', ')', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'nums', ')', '-', '2', ',', '-', '1', ',', '-', '1', ')', ':', 'if', 'nums', '[', 'i', ']', '<', 'nums', '[', 'i', '+', '1', ']', ':', 'z', '=', 'nums', '[', 'i', ':', ']', 'y', '=', 'min', '(', 'filter', '(', 'lambda', 'x', ':', 'x', '>', 'z', '[', '0', ']', ',', 'z', ')', ')', 'z', '.', 'remove', '(', 'y', ')', 'z', '.', 'sort', '(', ')', 'nums', '[', 'i', ':', ']', '=', '[', 'y', ']', '+', 'z', 'return', 'int', '(', '""""', '.', 'join', '(', 'nums', ')', ')', 'return', 'False', 'n', '=', '12', 'print', '(', '""Original number:""', ',', 'n', ')', 'print', '(', '""Next bigger number:""', ',', 'rearrange_bigger', '(', 'n', ')', ')', 'n', '=', '10', 'print', '(', '""\\nOriginal number:""', ',', 'n', ')', 'print', '(', '""Next bigger number:""', ',', 'rearrange_bigger', '(', 'n', ')', ')', 'n', '=', '201', 'print', '(', '""\\nOriginal number:""', ',', 'n', ')', 'print', '(', '""Next bigger number:""', ',', 'rearrange_bigger', '(', 'n', ')', ')', 'n', '=', '102', 'print', '(', '""\\nOriginal number:""', ',', 'n', ')', 'print', '(', '""Next bigger number:""', ',', 'rearrange_bigger', '(', 'n', ')', ')', 'n', '=', '445', 'print', '(', '""\\nOriginal number:""', ',', 'n', ')', 'print', '(', '""Next bigger number:""', ',', 'rearrange_bigger', '(', 'n', ')', ')']"
87,"['write', 'python', 'program', 'filter', 'dictionary', 'based', 'value']","['marks', '=', '{', ""'Cierra Vega'"", ':', '175', ',', ""'Alden Cantrell'"", ':', '180', ',', ""'Kierra Gentry'"", ':', '165', ',', ""'Pierre Cox'"", ':', '190', '}', 'print', '(', '""Original Dictionary:""', ')', 'print', '(', 'marks', ')', 'print', '(', '""Marks greater than 170:""', ')', 'result', '=', '{', 'key', ':', 'value', 'for', '(', 'key', ',', 'value', ')', 'in', 'marks', '.', 'items', '(', ')', 'if', 'value', '>=', '170', '}', 'print', '(', 'result', ')']"
88,"['write', 'python', 'program', 'count', 'frequency', 'element', 'given', 'unordered', 'list']","['from', 'itertools', 'import', 'groupby', 'uno_list', '=', '[', '2', ',', '1', ',', '3', ',', '8', ',', '5', ',', '1', ',', '4', ',', '2', ',', '3', ',', '4', ',', '0', ',', '8', ',', '2', ',', '0', ',', '8', ',', '4', ',', '2', ',', '3', ',', '4', ',', '2', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'uno_list', ')', 'uno_list', '.', 'sort', '(', ')', 'print', '(', 'uno_list', ')', 'print', '(', '""\\nSort the said unordered list:""', ')', 'print', '(', 'uno_list', ')', 'print', '(', '""\\nFrequency of the elements of the said unordered list:""', ')', 'result', '=', '[', 'len', '(', 'list', '(', 'group', ')', ')', 'for', 'key', ',', 'group', 'in', 'groupby', '(', 'uno_list', ')', ']', 'print', '(', 'result', ')']"
89,"['write', 'panda', 'program', 'find', 'alcohol', 'consumption', 'detail', 'year', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nThe world alcohol consumption details where year is 1987 or 1989:""', ')', 'print', '(', '(', 'w_a_con', '[', '(', 'w_a_con', '[', ""'Year'"", ']', '==', '1987', ')', '|', '(', 'w_a_con', '[', ""'Year'"", ']', '==', '1989', ')', ']', ')', '.', 'head', '(', '10', ')', ')']"
90,"['write', 'python', 'program', 'count', 'number', 'even', 'odd', 'number', 'series', 'number']","['numbers', '=', '(', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ')', 'count_odd', '=', '0', 'count_even', '=', '0', 'for', 'x', 'in', 'numbers', ':', 'if', 'not', 'x', '%', '2', ':', 'count_even', '+=', '1', 'else', ':', 'count_odd', '+=', '1', 'print', '(', '""Number of even numbers :""', ',', 'count_even', ')', 'print', '(', '""Number of odd numbers :""', ',', 'count_odd', ')']"
91,"['write', 'python', 'code', 'send', 'sort', 'data', 'url', 'query', 'string']","['import', 'requests', 'payload', '=', '{', ""'key1'"", ':', ""'value1'"", ',', ""'key2'"", ':', ""'value2'"", '}', 'print', '(', '""Parameters: ""', ',', 'payload', ')', 'r', '=', 'requests', '.', 'get', '(', ""'https://httpbin.org/get'"", ',', 'params', '=', 'payload', ')', 'print', '(', '""Print the url to check the URL has been correctly encoded or not!""', ')', 'print', '(', 'r', '.', 'url', ')', 'print', '(', '""\\nPass a list of items as a value:""', ')', 'payload', '=', '{', ""'key1'"", ':', ""'value1'"", ',', ""'key2'"", ':', '[', ""'value2'"", ',', ""'value3'"", ']', '}', 'print', '(', '""Parameters: ""', ',', 'payload', ')', 'r', '=', 'requests', '.', 'get', '(', ""'https://httpbin.org/get'"", ',', 'params', '=', 'payload', ')', 'print', '(', '""Print the url to check the URL has been correctly encoded or not!""', ')', 'print', '(', 'r', '.', 'url', ')']"
92,"['write', 'panda', 'program', 'split', 'following', 'dataframe', 'group', 'calculate', 'monthly', 'purchase', 'amount']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', '70009', ',', '70002', ',', '70004', ',', '70007', ',', '70005', ',', '70008', ',', '70010', ',', '70003', ',', '70012', ',', '70011', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'05-10-2012'"", ',', ""'09-10-2012'"", ',', ""'05-10-2012'"", ',', ""'08-17-2012'"", ',', ""'10-09-2012'"", ',', ""'07-27-2012'"", ',', ""'10-09-2012'"", ',', ""'10-10-2012'"", ',', ""'10-10-2012'"", ',', ""'06-17-2012'"", ',', ""'07-08-2012'"", ',', ""'04-25-2012'"", ']', ',', ""'customer_id'"", ':', '[', '3001', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3005', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5005', ',', '5001', ',', '5003', ',', '5002', ',', '5001', ',', '5001', ',', '5006', ',', '5003', ',', '5002', ',', '5007', ',', '5001', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'df', '[', ""'ord_date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'ord_date'"", ']', ')', 'print', '(', '""\\nMonth wise purchase amount:""', ')', 'result', '=', 'df', '.', 'set_index', '(', ""'ord_date'"", ')', '.', 'groupby', '(', 'pd', '.', 'Grouper', '(', 'freq', '=', ""'M'"", ')', ')', '.', 'agg', '(', '{', ""'purch_amt'"", ':', 'sum', '}', ')', 'print', '(', 'result', ')']"
93,"['write', 'panda', 'program', 'add', 'leading', 'zero', 'character', 'column', 'panda', 'series', 'make', 'length', 'field', 'digit']","['import', 'pandas', 'as', 'pd', 'nums', '=', '{', ""'amount'"", ':', '[', ""'10'"", ',', ""'250'"", ',', ""'3000'"", ',', ""'40000'"", ',', ""'500000'"", ']', '}', 'print', '(', '""Original dataframe:""', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', 'nums', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nAdd leading zeros:""', ')', 'df', '[', ""'amount'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'zfill', '(', '10', ')', ',', 'df', '[', ""'amount'"", ']', ')', ')', 'print', '(', 'df', ')']"
94,"['write', 'numpy', 'program', 'compute', 'reciprocal', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1.', ',', '2.', ',', '.2', ',', '.3', ']', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'r1', '=', 'np', '.', 'reciprocal', '(', 'x', ')', 'r2', '=', '1', '/', 'x', 'assert', 'np', '.', 'array_equal', '(', 'r1', ',', 'r2', ')', 'print', '(', '""Reciprocal for all elements of the said array:""', ')', 'print', '(', 'r1', ')']"
95,"['write', 'numpy', 'program', 'calculate', 'qr', 'decomposition', 'given', 'matrix']","['import', 'numpy', 'as', 'np', 'm', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', ')', 'print', '(', '""Original matrix:""', ')', 'print', '(', 'm', ')', 'result', '=', 'np', '.', 'linalg', '.', 'qr', '(', 'm', ')', 'print', '(', '""Decomposition of the said matrix:""', ')', 'print', '(', 'result', ')']"
96,"['write', 'numpy', 'program', 'extract', 'first', 'second', 'element', 'first', 'second', 'row', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arra_data', '=', 'np', '.', 'arange', '(', '0', ',', '16', ')', '.', 'reshape', '(', '(', '4', ',', '4', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arra_data', ')', 'print', '(', '""\\nExtracted data: First and second elements of the first and second rows ""', ')', 'print', '(', 'arra_data', '[', '0', ':', '2', ',', '0', ':', '2', ']', ')']"
97,"['write', 'python', 'program', 'compute', 'sum', 'digit', 'given', 'string']","['def', 'sum_digits_string', '(', 'str1', ')', ':', 'sum_digit', '=', '0', 'for', 'x', 'in', 'str1', ':', 'if', 'x', '.', 'isdigit', '(', ')', '==', 'True', ':', 'z', '=', 'int', '(', 'x', ')', 'sum_digit', '=', 'sum_digit', '+', 'z', 'return', 'sum_digit', 'print', '(', 'sum_digits_string', '(', '""123abcd45""', ')', ')', 'print', '(', 'sum_digits_string', '(', '""abcd1234""', ')', ')']"
98,"['create', 'dataframe', 'ten', 'row', 'four', 'column', 'random', 'value', 'write', 'panda', 'program', 'make', 'gradient', 'color', 'mapping', 'specified', 'column']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '24', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', 'np', '.', 'linspace', '(', '1', ',', '10', ',', '10', ')', '}', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df', ',', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', ',', 'columns', '=', 'list', '(', ""'BCDE'"", ')', ')', ']', ',', 'axis', '=', '1', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nDataframe - Gradient color:""', ')', 'df', '.', 'style', '.', 'background_gradient', '(', 'subset', '=', '[', ""'C'"", ']', ')']"
99,"['write', 'python', 'program', 'find', 'nth', 'hamming', 'number', 'user', 'itertools', 'module']","['import', 'itertools', 'from', 'heapq', 'import', 'merge', 'def', 'nth_hamming_number', '(', 'n', ')', ':', 'def', 'num_recur', '(', ')', ':', 'last', '=', '1', 'yield', 'last', 'x', ',', 'y', ',', 'z', '=', 'itertools', '.', 'tee', '(', 'num_recur', '(', ')', ',', '3', ')', 'for', 'n', 'in', 'merge', '(', '(', '2', '*', 'i', 'for', 'i', 'in', 'x', ')', ',', '(', '3', '*', 'i', 'for', 'i', 'in', 'y', ')', ',', '(', '5', '*', 'i', 'for', 'i', 'in', 'z', ')', ')', ':', 'if', 'n', '!=', 'last', ':', 'yield', 'n', 'last', '=', 'n', 'result', '=', 'itertools', '.', 'islice', '(', 'num_recur', '(', ')', ',', 'n', ')', 'return', 'list', '(', 'result', ')', '[', '-', '1', ']', 'print', '(', 'nth_hamming_number', '(', '8', ')', ')', 'print', '(', 'nth_hamming_number', '(', '14', ')', ')', 'print', '(', 'nth_hamming_number', '(', '17', ')', ')']"
100,"['write', 'python', 'program', 'find', 'last', 'occurrence', 'specified', 'item', 'given', 'list']","['def', 'last_occurrence', '(', 'l1', ',', 'ch', ')', ':', 'return', ""''"", '.', 'join', '(', 'l1', ')', '.', 'rindex', '(', 'ch', ')', 'chars', '=', '[', ""'s'"", ',', ""'d'"", ',', ""'f'"", ',', ""'s'"", ',', ""'d'"", ',', ""'f'"", ',', ""'s'"", ',', ""'f'"", ',', ""'k'"", ',', ""'o'"", ',', ""'p'"", ',', ""'i'"", ',', ""'w'"", ',', ""'e'"", ',', ""'k'"", ',', ""'c'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'chars', ')', 'ch', '=', ""'f'"", 'print', '(', '""Last occurrence of""', ',', 'ch', ',', '""in the said list:""', ')', 'print', '(', 'last_occurrence', '(', 'chars', ',', 'ch', ')', ')', 'ch', '=', ""'c'"", 'print', '(', '""Last occurrence of""', ',', 'ch', ',', '""in the said list:""', ')', 'print', '(', 'last_occurrence', '(', 'chars', ',', 'ch', ')', ')', 'ch', '=', ""'k'"", 'print', '(', '""Last occurrence of""', ',', 'ch', ',', '""in the said list:""', ')', 'print', '(', 'last_occurrence', '(', 'chars', ',', 'ch', ')', ')', 'ch', '=', ""'w'"", 'print', '(', '""Last occurrence of""', ',', 'ch', ',', '""in the said list:""', ')', 'print', '(', 'last_occurrence', '(', 'chars', ',', 'ch', ')', ')']"
101,"['write', 'python', 'program', 'convert', 'python', 'dictionary', 'object', 'sort', 'key', 'json', 'data', 'print', 'object', 'member', 'indent', 'level']","['import', 'json', 'j_str', '=', '{', ""'4'"", ':', '5', ',', ""'6'"", ':', '7', ',', ""'1'"", ':', '3', ',', ""'2'"", ':', '4', '}', 'print', '(', '""Original String:""', ')', 'print', '(', 'j_str', ')', 'print', '(', '""\\nJSON data:""', ')', 'print', '(', 'json', '.', 'dumps', '(', 'j_str', ',', 'sort_keys', '=', 'True', ',', 'indent', '=', '4', ')', ')']"
102,"['write', 'python', 'program', 'create', 'combination', 'digit', 'combo']","['numbers', '=', '[', ']', 'for', 'num', 'in', 'range', '(', '1000', ')', ':', 'num', '=', 'str', '(', 'num', ')', '.', 'zfill', '(', '3', ')', 'print', '(', 'num', ')', 'numbers', '.', 'append', '(', 'num', ')']"
103,"['write', 'python', 'program', 'create', 'iterator', 'get', 'specified', 'number', 'permutation', 'element']","['import', 'itertools', 'as', 'it', 'def', 'permutations_data', '(', 'iter', ',', 'length', ')', ':', 'return', 'it', '.', 'permutations', '(', 'iter', ',', 'length', ')', 'result', '=', 'permutations_data', '(', '[', ""'A'"", ',', ""'B'"", ',', ""'C'"", ',', ""'D'"", ']', ',', '3', ')', 'print', '(', '""\\nIterator to get specified number of permutations of elements:""', ')', 'for', 'i', 'in', 'result', ':', 'print', '(', 'i', ')', 'result', '=', 'permutations_data', '(', '""Python""', ',', '2', ')', 'print', '(', '""\\nIterator to get specified number of permutations of elements:""', ')', 'for', 'i', 'in', 'result', ':', 'print', '(', 'i', ')']"
104,"['write', 'python', 'function', 'get', 'string', 'made', 'first', 'three', 'character', 'specified', 'string', 'length', 'string', 'le', 'return', 'original', 'string']","['def', 'first_three', '(', 'str', ')', ':', 'return', 'str', '[', ':', '3', ']', 'if', 'len', '(', 'str', ')', '>', '3', 'else', 'str', 'print', '(', 'first_three', '(', ""'ipy'"", ')', ')', 'print', '(', 'first_three', '(', ""'python'"", ')', ')', 'print', '(', 'first_three', '(', ""'py'"", ')', ')']"
105,"['write', 'python', 'program', 'get', 'hourly', 'datetime', 'two', 'hour']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\nString representing the date, controlled by an explicit format string:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'strftime', '(', ""'%d-%m-%Y %H:%M:%S'"", ')', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'strftime', '(', ""'%Y-%m-%d %H:%M:%S'"", ')', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'strftime', '(', ""'%Y-%d-%m %H:%M:%S'"", ')', ')']"
106,"['write', 'python', 'program', 'display', 'formatted', 'text', 'output']","['import', 'textwrap', 'sample_text', '=', ""'''\r  Python is a widely used high-level, general-purpose, interpreted,\r  dynamic programming language. Its design philosophy emphasizes\r  code readability, and its syntax allows programmers to express\r  concepts in fewer lines of code than possible in languages such\r  as C++ or Java.\r  '''"", 'print', '(', ')', 'print', '(', 'textwrap', '.', 'fill', '(', 'sample_text', ',', 'width', '=', '50', ')', ')', 'print', '(', ')']"
107,"['write', 'python', 'function', 'find', 'maximum', 'minimum', 'number', 'sequence', 'number']","['def', 'max_min', '(', 'data', ')', ':', 'l', '=', 'data', '[', '0', ']', 's', '=', 'data', '[', '0', ']', 'for', 'num', 'in', 'data', ':', 'if', 'num', '>', 'l', ':', 'l', '=', 'num', 'elif', 'num', '<', 's', ':', 's', '=', 'num', 'return', 'l', ',', 's', 'print', '(', 'max_min', '(', '[', '0', ',', '10', ',', '15', ',', '40', ',', '-', '5', ',', '42', ',', '17', ',', '28', ',', '75', ']', ')', ')']"
108,"['write', 'panda', 'program', 'create', 'sequence', 'duration', 'increasing', 'hour']","['import', 'pandas', 'as', 'pd', 'date_range', '=', 'pd', '.', 'timedelta_range', '(', '0', ',', 'periods', '=', '49', ',', 'freq', '=', ""'H'"", ')', 'print', '(', '""Hourly range of perods 49:""', ')', 'print', '(', 'date_range', ')']"
109,"['write', 'numpy', 'program', 'sort', 'specified', 'number', 'element', 'beginning', 'given', 'array']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'random', '.', 'rand', '(', '10', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nSorted first 5 elements:""', ')', 'print', '(', 'nums', '[', 'np', '.', 'argpartition', '(', 'nums', ',', 'range', '(', '5', ')', ')', ']', ')']"
110,"['write', 'python', 'program', 'extract', 'year', 'month', 'date', 'time', 'using', 'lambda']","['import', 'datetime', 'now', '=', 'datetime', '.', 'datetime', '.', 'now', '(', ')', 'print', '(', 'now', ')', 'year', '=', 'lambda', 'x', ':', 'x', '.', 'year', 'month', '=', 'lambda', 'x', ':', 'x', '.', 'month', 'day', '=', 'lambda', 'x', ':', 'x', '.', 'day', 't', '=', 'lambda', 'x', ':', 'x', '.', 'time', '(', ')', 'print', '(', 'year', '(', 'now', ')', ')', 'print', '(', 'month', '(', 'now', ')', ')', 'print', '(', 'day', '(', 'now', ')', ')', 'print', '(', 't', '(', 'now', ')', ')']"
111,"['write', 'python', 'program', 'find', 'common', 'character', 'lexicographical', 'order', 'two', 'given', 'lower', 'case', 'string', 'common', 'letter', 'print', 'common', 'character']","['from', 'collections', 'import', 'Counter', 'def', 'common_chars', '(', 'str1', ',', 'str2', ')', ':', 'd1', '=', 'Counter', '(', 'str1', ')', 'd2', '=', 'Counter', '(', 'str2', ')', 'common_dict', '=', 'd1', '&', 'd2', 'if', 'len', '(', 'common_dict', ')', '==', '0', ':', 'return', '""No common characters.""', 'common_chars', '=', 'list', '(', 'common_dict', '.', 'elements', '(', ')', ')', 'common_chars', '=', 'sorted', '(', 'common_chars', ')', 'return', ""''"", '.', 'join', '(', 'common_chars', ')', 'str1', '=', ""'Python'"", 'str2', '=', ""'PHP'"", 'print', '(', '""Two strings: ""', '+', 'str1', '+', ""' : '"", '+', 'str2', ')', 'print', '(', 'common_chars', '(', 'str1', ',', 'str2', ')', ')', 'str1', '=', ""'Java'"", 'str2', '=', ""'PHP'"", 'print', '(', '""Two strings: ""', '+', 'str1', '+', ""' : '"", '+', 'str2', ')', 'print', '(', 'common_chars', '(', 'str1', ',', 'str2', ')', ')']"
112,"['write', 'python', 'program', 'remove', 'newline', 'python']","['str1', '=', ""'Python Exercises\\n'"", 'print', '(', 'str1', ')', 'print', '(', 'str1', '.', 'rstrip', '(', ')', ')']"
113,"['write', 'panda', 'program', 'extract', 'column', 'label', 'shape', 'data', 'type', 'dataset', 'titaniccsv']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'print', '(', '""List of columns:""', ')', 'print', '(', 'df', '.', 'columns', ')', 'print', '(', '""\\nShape of the Dataset:""', ')', 'print', '(', 'df', '.', 'shape', ')', 'print', '(', '""\\nData types of the Dataset:""', ')', 'print', '(', 'df', '.', 'dtypes', ')']"
114,"['write', 'panda', 'program', 'replace', 'arbitrary', 'value', 'value', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'A'"", ',', ""'B'"", ',', ""'C'"", ',', ""'D'"", ',', ""'A'"", ']', ',', ""'date_of_sale'"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nReplace A with c:""', ')', 'df', '=', 'df', '.', 'replace', '(', '""A""', ',', '""C""', ')', 'print', '(', 'df', ')']"
115,"['write', 'numpy', 'program', 'calculate', 'mean', 'across', 'dimension', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '10', ',', '30', ']', ',', '[', '20', ',', '60', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Mean of each column:""', ')', 'print', '(', 'x', '.', 'mean', '(', 'axis', '=', '0', ')', ')', 'print', '(', '""Mean of each row:""', ')', 'print', '(', 'x', '.', 'mean', '(', 'axis', '=', '1', ')', ')']"
116,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'survival', 'rate', 'gender', 'age', 'different', 'category', 'various', 'class', 'add', 'fare', 'dimension', 'column', 'partition', 'fare', 'column', 'category', 'based', 'value', 'present', 'fare', 'column']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'fare', '=', 'pd', '.', 'qcut', '(', 'df', '[', ""'fare'"", ']', ',', '2', ')', 'age', '=', 'pd', '.', 'cut', '(', 'df', '[', ""'age'"", ']', ',', '[', '0', ',', '10', ',', '30', ',', '60', ',', '80', ']', ')', 'result', '=', 'df', '.', 'pivot_table', '(', ""'survived'"", ',', 'index', '=', '[', ""'sex'"", ',', 'age', ']', ',', 'columns', '=', '[', 'fare', ',', ""'pclass'"", ']', ')', 'print', '(', 'result', ')']"
117,"['write', 'python', 'program', 'retrieve', 'value', 'nested', 'key', 'indicated', 'given', 'selector', 'list', 'dictionary', 'list']","['from', 'functools', 'import', 'reduce', 'from', 'operator', 'import', 'getitem', 'def', 'get', '(', 'd', ',', 'selectors', ')', ':', 'return', 'reduce', '(', 'getitem', ',', 'selectors', ',', 'd', ')', 'users', '=', '{', ""'freddy'"", ':', '{', ""'name'"", ':', '{', ""'first'"", ':', ""'Fateh'"", ',', ""'last'"", ':', ""'Harwood'"", '}', ',', ""'postIds'"", ':', '[', '1', ',', '2', ',', '3', ']', '}', '}', 'print', '(', 'get', '(', 'users', ',', '[', ""'freddy'"", ',', ""'name'"", ',', ""'last'"", ']', ')', ')', 'print', '(', 'get', '(', 'users', ',', '[', ""'freddy'"", ',', ""'postIds'"", ',', '1', ']', ')', ')']"
118,"['write', 'python', 'program', 'sort', 'unsorted', 'number', 'using', 'recursive', 'bubble', 'sort']",[]
119,"['write', 'python', 'program', 'count', 'value', 'associated', 'key', 'dictionary']","['student', '=', '[', '{', ""'id'"", ':', '1', ',', ""'success'"", ':', 'True', ',', ""'name'"", ':', ""'Lary'"", '}', ',', '{', ""'id'"", ':', '2', ',', ""'success'"", ':', 'False', ',', ""'name'"", ':', ""'Rabi'"", '}', ',', '{', ""'id'"", ':', '3', ',', ""'success'"", ':', 'True', ',', ""'name'"", ':', ""'Alex'"", '}', ']', 'print', '(', 'sum', '(', 'd', '[', ""'id'"", ']', 'for', 'd', 'in', 'student', ')', ')', 'print', '(', 'sum', '(', 'd', '[', ""'success'"", ']', 'for', 'd', 'in', 'student', ')', ')']"
120,"['write', 'numpy', 'program', 'multiply', 'array', 'dimension', 'array', 'dimension']","['import', 'numpy', 'as', 'np', 'nums1', '=', 'np', '.', 'ones', '(', '(', '2', ',', '2', ',', '3', ')', ')', 'nums2', '=', '3', '*', 'np', '.', 'ones', '(', '(', '2', ',', '2', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums1', ')', 'new_array', '=', 'nums1', '*', 'nums2', '[', ':', ',', ':', ',', 'None', ']', 'print', '(', '""\\nNew array:""', ')', 'print', '(', 'new_array', ')']"
121,"['write', 'numpy', 'program', 'swap', 'row', 'column', 'given', 'array', 'reverse', 'order']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '[', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', '[', '0', ',', '1', ',', '3', ',', '4', ']', ',', '[', '90', ',', '91', ',', '93', ',', '94', ']', ',', '[', '5', ',', '0', ',', '3', ',', '2', ']', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nSwap rows and columns of the said array in reverse order:""', ')', 'new_nums', '=', 'print', '(', 'nums', '[', ':', ':', '-', '1', ',', ':', ':', '-', '1', ']', ')', 'print', '(', 'new_nums', ')']"
122,"['write', 'numpy', 'program', 'create', 'array', 'element', 'create', 'new', 'array', 'shape', 'said', 'array', 'restores', 'reshaped', 'array', 'array']","['import', 'numpy', 'as', 'np', 'array_nums', '=', 'np', '.', 'arange', '(', '0', ',', '40', ',', '2', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'array_nums', ')', 'print', '(', '""\\nNew array of shape(5, 4):""', ')', 'new_array', '=', 'array_nums', '.', 'reshape', '(', '5', ',', '4', ')', 'print', '(', 'new_array', ')', 'print', '(', '""\\nRestore the reshaped array into a 1-D array:""', ')', 'print', '(', 'new_array', '.', 'flatten', '(', ')', ')']"
123,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'tree', 'sort']",[]
124,"['write', 'numpy', 'program', 'create', 'elementwise', 'comparison', 'equal', 'equal', 'within', 'tolerance', 'two', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '72', ',', '79', ',', '85', ',', '90', ',', '150', ',', '-', '135', ',', '120', ',', '-', '10', ',', '60', ',', '100', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '72', ',', '79', ',', '85', ',', '90', ',', '150', ',', '-', '135', ',', '120', ',', '-', '10', ',', '60', ',', '100.000001', ']', ')', 'print', '(', '""Original numbers:""', ')', 'print', '(', 'x', ')', 'print', '(', 'y', ')', 'print', '(', '""Comparison - equal:""', ')', 'print', '(', 'np', '.', 'equal', '(', 'x', ',', 'y', ')', ')', 'print', '(', '""Comparison - equal within a tolerance:""', ')', 'print', '(', 'np', '.', 'allclose', '(', 'x', ',', 'y', ')', ')']"
125,"['write', 'panda', 'program', 'split', 'given', 'dataframe', 'group', 'multiple', 'aggregation']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s001'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_Of_Birth '"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '12', ',', '12', ',', '13', ',', '13', ',', '14', ',', '12', ']', ',', ""'height'"", ':', '[', '173', ',', '192', ',', '186', ',', '167', ',', '151', ',', '159', ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', ',', ""'address'"", ':', '[', ""'street1'"", ',', ""'street2'"", ',', ""'street3'"", ',', ""'street1'"", ',', ""'street2'"", ',', ""'street4'"", ']', '}', ',', 'index', '=', '[', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ',', ""'S4'"", ',', ""'S5'"", ',', ""'S6'"", ']', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nGroup by with multiple aggregations:""', ')', 'result', '=', 'df', '.', 'groupby', '(', '[', ""'school_code'"", ',', ""'class'"", ']', ')', '.', 'agg', '(', '{', ""'height'"", ':', '[', ""'max'"", ',', ""'mean'"", ']', ',', ""'weight'"", ':', '[', ""'sum'"", ',', ""'min'"", ',', ""'count'"", ']', '}', ')', 'print', '(', 'result', ')']"
126,"['write', 'numpy', 'program', 'find', 'matrix', 'vector', 'norm']","['import', 'numpy', 'as', 'np', 'v', '=', 'np', '.', 'arange', '(', '7', ')', 'result', '=', 'np', '.', 'linalg', '.', 'norm', '(', 'v', ')', 'print', '(', '""Vector norm:""', ')', 'print', '(', 'result', ')', 'm', '=', 'np', '.', 'matrix', '(', ""'1, 2; 3, 4'"", ')', 'result1', '=', 'np', '.', 'linalg', '.', 'norm', '(', 'm', ')', 'print', '(', '""Matrix norm:""', ')', 'print', '(', 'result1', ')']"
127,"['write', 'python', 'program', 'delete', 'first', 'item', 'singly', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'singly_linked_list', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'tail', '=', 'None', 'self', '.', 'head', '=', 'None', 'self', '.', 'count', '=', '0', 'def', 'append_item', '(', 'self', ',', 'data', ')', ':', 'node', '=', 'Node', '(', 'data', ')', 'if', 'self', '.', 'head', ':', 'self', '.', 'head', '.', 'next', '=', 'node', 'self', '.', 'head', '=', 'node', 'else', ':', 'self', '.', 'tail', '=', 'node', 'self', '.', 'head', '=', 'node', 'self', '.', 'count', '+=', '1', 'def', 'delete_item', '(', 'self', ',', 'data', ')', ':', 'current', '=', 'self', '.', 'tail', 'prev', '=', 'self', '.', 'tail', 'while', 'current', ':', 'if', 'current', '.', 'data', '==', 'data', ':', 'if', 'current', '==', 'self', '.', 'tail', ':', 'self', '.', 'tail', '=', 'current', '.', 'next', 'else', ':', 'prev', '.', 'next', '=', 'current', '.', 'next', 'self', '.', 'count', '-=', '1', 'return', 'prev', '=', 'current', 'current', '=', 'current', '.', 'next', 'def', 'iterate_item', '(', 'self', ')', ':', 'current_item', '=', 'self', '.', 'tail', 'while', 'current_item', ':', 'val', '=', 'current_item', '.', 'data', 'current_item', '=', 'current_item', '.', 'next', 'yield', 'val', 'items', '=', 'singly_linked_list', '(', ')', 'items', '.', 'append_item', '(', ""'PHP'"", ')', 'items', '.', 'append_item', '(', ""'Python'"", ')', 'items', '.', 'append_item', '(', ""'C#'"", ')', 'items', '.', 'append_item', '(', ""'C++'"", ')', 'items', '.', 'append_item', '(', ""'Java'"", ')', 'print', '(', '""Original list:""', ')', 'for', 'val', 'in', 'items', '.', 'iterate_item', '(', ')', ':', 'print', '(', 'val', ')', 'print', '(', '""\\nAfter removing the first item from the list:""', ')', 'items', '.', 'delete_item', '(', ""'PHP'"", ')', 'for', 'val', 'in', 'items', '.', 'iterate_item', '(', ')', ':', 'print', '(', 'val', ')']"
128,"['write', 'python', 'program', 'find', 'difference', 'two', 'list', 'including', 'duplicate', 'element', 'use', 'collection', 'module']","['from', 'collections', 'import', 'Counter', 'l1', '=', '[', '1', ',', '1', ',', '2', ',', '3', ',', '3', ',', '4', ',', '4', ',', '5', ',', '6', ',', '7', ']', 'l2', '=', '[', '1', ',', '1', ',', '2', ',', '4', ',', '5', ',', '6', ']', 'print', '(', '""Original lists:""', ')', 'c1', '=', 'Counter', '(', 'l1', ')', 'c2', '=', 'Counter', '(', 'l2', ')', 'diff', '=', 'c1', '-', 'c2', 'print', '(', 'list', '(', 'diff', '.', 'elements', '(', ')', ')', ')']"
129,"['write', 'python', 'function', 'take', 'positive', 'integer', 'return', 'sum', 'cube', 'positive', 'integer', 'smaller', 'specified', 'number']","['def', 'sum_of_cubes', '(', 'n', ')', ':', 'n', '-=', '1', 'total', '=', '0', 'while', 'n', '>', '0', ':', 'total', '+=', 'n', '*', 'n', '*', 'n', 'n', '-=', '1', 'return', 'total', 'print', '(', '""Sum of cubes smaller than the specified number: ""', ',', 'sum_of_cubes', '(', '3', ')', ')']"
130,"['write', 'panda', 'program', 'import', 'excel', 'data', 'panda', 'dataframe', 'find', 'list', 'specified', 'customer', 'name']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\coalpublic2013.xlsx'"", ')', 'df', '.', 'query', '(', '\'Mine_Name == [""Shoal Creek Mine"", ""Piney Woods Preparation Plant""]\'', ')', '.', 'head', '(', ')']"
131,"['write', 'python', 'program', 'create', 'new', 'arrow', 'object', 'cloned', 'current', 'one']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'cloned', '=', 'a', '.', 'clone', '(', ')', 'print', '(', '""\\nCloned datetime:""', ')', 'print', '(', 'cloned', ')']"
132,"['write', 'numpy', 'program', 'create', 'array', 'one', 'diagonal', 'zero', 'elsewhere']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'eye', '(', '3', ')', 'print', '(', 'x', ')']"
133,"['write', 'numpy', 'program', 'extract', 'first', 'element', 'second', 'row', 'fourth', 'element', 'fourth', 'row', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arra_data', '=', 'np', '.', 'arange', '(', '0', ',', '16', ')', '.', 'reshape', '(', '(', '4', ',', '4', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arra_data', ')', 'print', '(', '""\\nExtracted data: First element of the second row and fourth element of fourth row  ""', ')', 'print', '(', 'arra_data', '[', '[', '1', ',', '3', ']', ',', '[', '0', ',', '3', ']', ']', ')']"
134,"['write', 'python', 'program', 'get', 'date', 'time', 'property', 'datetime', 'function', 'using', 'arrow', 'module']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current date:""', ')', 'print', '(', 'a', '.', 'date', '(', ')', ')', 'print', '(', '""\\nCurrent time:""', ')', 'print', '(', 'a', '.', 'time', '(', ')', ')']"
135,"['write', 'python', 'program', 'get', 'size', 'file']","['import', 'os', 'file_size', '=', 'os', '.', 'path', '.', 'getsize', '(', '""abc.txt""', ')', 'print', '(', '""\\nThe size of abc.txt is :""', ',', 'file_size', ',', '""Bytes""', ')', 'print', '(', ')']"
136,"['create', 'dataframe', 'ten', 'row', 'four', 'column', 'random', 'value', 'write', 'panda', 'program', 'display', 'bar', 'chart', 'dataframe', 'specified', 'column']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '24', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', 'np', '.', 'linspace', '(', '1', ',', '10', ',', '10', ')', '}', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df', ',', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', ',', 'columns', '=', 'list', '(', ""'BCDE'"", ')', ')', ']', ',', 'axis', '=', '1', ')', 'df', '.', 'iloc', '[', '0', ',', '2', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '3', ',', '3', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '4', ',', '1', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '9', ',', '4', ']', '=', 'np', '.', 'nan', 'print', '(', '""Original array:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nBar charts in dataframe:""', ')', 'df', '.', 'style', '.', 'bar', '(', 'subset', '=', '[', ""'B'"", ',', ""'C'"", ']', ',', 'color', '=', ""'#d65f5f'"", ')']"
137,"['write', 'panda', 'program', 'create', 'graphical', 'analysis', 'ufo', 'unidentified', 'flying', 'object', 'sighted', 'month']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'import', 'seaborn', 'as', 'sns', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'df', '[', '""ufo_yr""', ']', '=', 'df', '.', 'Date_time', '.', 'dt', '.', 'month', 'months_data', '=', 'df', '.', 'ufo_yr', '.', 'value_counts', '(', ')', 'months_index', '=', 'months_data', '.', 'index', 'months_values', '=', 'months_data', '.', 'get_values', '(', ')', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '15', ',', '8', ')', ')', 'plt', '.', 'xticks', '(', 'rotation', '=', '60', ')', 'plt', '.', 'title', '(', ""'UFO sighted by Month'"", ')', 'plt', '.', 'xlabel', '(', '""Months""', ')', 'plt', '.', 'ylabel', '(', '""Number of sighting""', ')', 'months_plot', '=', 'sns', '.', 'barplot', '(', 'x', '=', 'months_index', '[', ':', '60', ']', ',', 'y', '=', 'months_values', '[', ':', '60', ']', ',', 'palette', '=', '""Oranges""', ')']"
138,"['write', 'python', 'program', 'sort', 'unsorted', 'number', 'using', 'recursive', 'quick', 'sort']","['def', 'quick_sort', '(', 'nums', ':', 'list', ')', '->', 'list', ':', 'if', 'len', '(', 'nums', ')', '<=', '1', ':', 'return', 'nums', 'else', ':', 'return', '(', 'quick_sort', '(', '[', 'el', 'for', 'el', 'in', 'nums', '[', '1', ':', ']', 'if', 'el', '<=', 'nums', '[', '0', ']', ']', ')', '+', '[', 'nums', '[', '0', ']', ']', '+', 'quick_sort', '(', '[', 'el', 'for', 'el', 'in', 'nums', '[', '1', ':', ']', 'if', 'el', '>', 'nums', '[', '0', ']', ']', ')', ')', 'nums', '=', '[', '4', ',', '3', ',', '5', ',', '1', ',', '2', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""After applying Recursive Quick Sort the said list becomes:""', ')', 'print', '(', 'quick_sort', '(', 'nums', ')', ')', 'nums', '=', '[', '5', ',', '9', ',', '10', ',', '3', ',', '-', '4', ',', '5', ',', '178', ',', '92', ',', '46', ',', '-', '18', ',', '0', ',', '7', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""After applying Recursive Quick Sort the said list becomes:""', ')', 'print', '(', 'quick_sort', '(', 'nums', ')', ')', 'nums', '=', '[', '1.1', ',', '1', ',', '0', ',', '-', '1', ',', '-', '1.1', ',', '.1', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""After applying Recursive Quick Sort the said list becomes:""', ')', 'print', '(', 'quick_sort', '(', 'nums', ')', ')']"
139,"['write', 'python', 'program', 'convert', 'timezone', 'local', 'utc', 'utc', 'local', 'specified', 'zone']","['import', 'arrow', 'utc', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""utc:""', ')', 'print', '(', 'utc', ')', 'print', '(', '""\\nutc to local:""', ')', 'print', '(', 'utc', '.', 'to', '(', ""'local'"", ')', ')', 'print', '(', '""\\nlocal to utc:""', ')', 'print', '(', 'utc', '.', 'to', '(', ""'local'"", ')', '.', 'to', '(', ""'utc'"", ')', ')', 'print', '(', '""\\nutc to specific location:""', ')', 'print', '(', 'utc', '.', 'to', '(', ""'US/Pacific'"", ')', ')']"
140,"['write', 'python', 'program', 'find', 'difference', 'two', 'list', 'including', 'duplicate', 'element']","['def', 'list_difference', '(', 'l1', ',', 'l2', ')', ':', 'result', '=', 'list', '(', 'l1', ')', 'for', 'el', 'in', 'l2', ':', 'result', '.', 'remove', '(', 'el', ')', 'return', 'result', 'l1', '=', '[', '1', ',', '1', ',', '2', ',', '3', ',', '3', ',', '4', ',', '4', ',', '5', ',', '6', ',', '7', ']', 'l2', '=', '[', '1', ',', '1', ',', '2', ',', '4', ',', '5', ',', '6', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'l1', ')', 'print', '(', 'l2', ')', 'print', '(', '""\\nDifference between two said list including duplicate elements):""', ')', 'print', '(', 'list_difference', '(', 'l1', ',', 'l2', ')', ')']"
141,"['create', 'dataframe', 'ten', 'row', 'four', 'column', 'random', 'value', 'write', 'panda', 'program', 'display', 'dataframe', 'heatmap', 'style']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'import', 'seaborn', 'as', 'sns', 'np', '.', 'random', '.', 'seed', '(', '24', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', 'np', '.', 'linspace', '(', '1', ',', '10', ',', '10', ')', '}', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df', ',', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', ',', 'columns', '=', 'list', '(', ""'BCDE'"", ')', ')', ']', ',', 'axis', '=', '1', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nDataframe - Heatmap style:""', ')', 'cm', '=', 'sns', '.', 'light_palette', '(', '""red""', ',', 'as_cmap', '=', 'True', ')', 'df', '.', 'style', '.', 'background_gradient', '(', 'cmap', '=', ""'viridis'"", ')']"
142,"['write', 'python', 'program', 'remove', 'tag', 'given', 'tree', 'html', 'document', 'destroy', 'content']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_content', '=', '\'<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>\'', 'soup', '=', 'BeautifulSoup', '(', 'html_content', ',', '""lxml""', ')', 'print', '(', '""Original Markup:""', ')', 'a_tag', '=', 'soup', '.', 'a', 'print', '(', 'a_tag', ')', 'new_tag', '=', 'soup', '.', 'a', '.', 'decompose', '(', ')', 'print', '(', '""After decomposing:""', ')', 'print', '(', 'new_tag', ')']"
143,"['write', 'python', 'program', 'convert', 'given', 'number', 'integer', 'list', 'digit']","['def', 'digitize', '(', 'n', ')', ':', 'return', 'list', '(', 'map', '(', 'int', ',', 'str', '(', 'n', ')', ')', ')', 'print', '(', 'digitize', '(', '123', ')', ')', 'print', '(', 'digitize', '(', '1347823', ')', ')']"
144,"['rite', 'python', 'program', 'accepts', 'sequence', 'line', 'blank', 'line', 'terminate', 'input', 'print', 'line', 'output', 'character', 'lower', 'case']","['lines', '=', '[', ']', 'while', 'True', ':', 'l', '=', 'input', '(', ')', 'if', 'l', ':', 'lines', '.', 'append', '(', 'l', '.', 'upper', '(', ')', ')', 'else', ':', 'break', ';', 'for', 'l', 'in', 'lines', ':', 'print', '(', 'l', ')']"
145,"['write', 'python', 'program', 'remove', 'tag', 'string', 'given', 'tree', 'html', 'document', 'replace', 'given', 'tag', 'string']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_markup', '=', '\'<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>\'', 'soup', '=', 'BeautifulSoup', '(', 'html_markup', ',', '""lxml""', ')', 'print', '(', '""Original markup:""', ')', 'a_tag', '=', 'soup', '.', 'a', 'print', '(', 'a_tag', ')', 'new_tag', '=', 'soup', '.', 'new_tag', '(', '""b""', ')', 'new_tag', '.', 'string', '=', '""PHP""', 'b_tag', '=', 'a_tag', '.', 'i', '.', 'replace_with', '(', 'new_tag', ')', 'print', '(', '""New Markup:""', ')', 'print', '(', 'a_tag', ')']"
146,"['write', 'panda', 'program', 'extract', 'unique', 'sentence', 'given', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF'"", ',', ""'zefsalf'"", ',', ""'sdfslew'"", ',', ""'zekfsdf'"", ']', ',', ""'date_of_sale'"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'05/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'address'"", ':', '[', ""'9910 Surrey Avenue\\n9910 Surrey Avenue'"", ',', ""'92 N. Bishop Avenue'"", ',', ""'9910 Golden Star Avenue'"", ',', ""'102 Dunbar St.\\n102 Dunbar St.'"", ',', ""'17 West Livingston Court'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'find_unique_sentence', '(', 'str1', ')', ':', 'result', '=', 're', '.', 'findall', '(', ""r'(?sm)(^[^\\r\\n]+$)(?!.*^\\1$)'"", ',', 'str1', ')', 'return', 'result', 'df', '[', ""'unique_sentence'"", ']', '=', 'df', '[', ""'address'"", ']', '.', 'apply', '(', 'lambda', 'st', ':', 'find_unique_sentence', '(', 'st', ')', ')', 'print', '(', '""\\nExtract unique sentences :""', ')', 'print', '(', 'df', ')']"
147,"['write', 'panda', 'program', 'filter', 'record', 'average', 'consumption', 'beverage', 'per', 'person', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nFilter all records where the average consumption of beverages per person from .5 to 2.50.:""', ')', 'print', '(', 'w_a_con', '[', '(', 'w_a_con', '[', ""'Display Value'"", ']', '<', '2.5', ')', '&', '(', 'w_a_con', '[', ""'Display Value'"", ']', '>', '.5', ')', ']', '.', 'head', '(', ')', ')']"
148,"['write', 'panda', 'program', 'extract', 'element', 'given', 'positional', 'index', 'along', 'axis', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'sales_arrays', '=', '[', '[', ""'sale1'"", ',', ""'sale1'"", ',', ""'sale3'"", ',', ""'sale3'"", ',', ""'sale2'"", ',', ""'sale2'"", ',', ""'sale4'"", ',', ""'sale4'"", ']', ',', '[', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ']', ']', 'sales_tuples', '=', 'list', '(', 'zip', '(', '*', 'sales_arrays', ')', ')', 'sales_index', '=', 'pd', '.', 'MultiIndex', '.', 'from_tuples', '(', 'sales_tuples', ',', 'names', '=', '[', ""'sale'"", ',', ""'city'"", ']', ')', 'print', '(', '""\\nConstruct a Dataframe using the said MultiIndex levels:""', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '8', ',', '5', ')', ',', 'index', '=', 'sales_index', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nSelect 1st, 2nd and 3rd row of the said DataFrame:""', ')', 'positions', '=', '[', '1', ',', '2', ',', '5', ']', 'print', '(', 'df', '.', 'take', '(', '[', '1', ',', '2', ',', '5', ']', ')', ')', 'print', '(', '""\\nTake elements at indices 1 and 2 along the axis 1 (column selection):""', ')', 'print', '(', 'df', '.', 'take', '(', '[', '1', ',', '2', ']', ',', 'axis', '=', '1', ')', ')', 'print', '(', '""\\nTake elements at indices 4 and 3 using negative integers along the axis 1 (column selection):""', ')', 'print', '(', 'df', '.', 'take', '(', '[', '-', '1', ',', '-', '2', ']', ',', 'axis', '=', '1', ')', ')']"
149,"['write', 'python', 'program', 'find', 'pair', 'highest', 'product', 'given', 'array', 'integer']","['def', 'max_Product', '(', 'arr', ')', ':', 'arr_len', '=', 'len', '(', 'arr', ')', 'if', '(', 'arr_len', '<', '2', ')', ':', 'print', '(', '""No pairs exists""', ')', 'return', 'x', '=', 'arr', '[', '0', ']', ';', 'y', '=', 'arr', '[', '1', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'arr_len', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ',', 'arr_len', ')', ':', 'if', '(', 'arr', '[', 'i', ']', '*', 'arr', '[', 'j', ']', '>', 'x', '*', 'y', ')', ':', 'x', '=', 'arr', '[', 'i', ']', ';', 'y', '=', 'arr', '[', 'j', ']', 'return', 'x', ',', 'y', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '7', ',', '0', ',', '8', ',', '4', ']', 'print', '(', '""Original array:""', ',', 'nums', ')', 'print', '(', '""Maximum product pair is:""', ',', 'max_Product', '(', 'nums', ')', ')', 'nums', '=', '[', '0', ',', '-', '1', ',', '-', '2', ',', '-', '4', ',', '5', ',', '0', ',', '-', '6', ']', 'print', '(', '""\\nOriginal array:""', ',', 'nums', ')', 'print', '(', '""Maximum product pair is:""', ',', 'max_Product', '(', 'nums', ')', ')']"
150,"['write', 'python', 'program', 'move', 'zero', 'digit', 'end', 'given', 'list', 'number']","['def', 'test', '(', 'lst', ')', ':', 'result', '=', 'sorted', '(', 'lst', ',', 'key', '=', 'lambda', 'x', ':', 'not', 'x', ')', 'return', 'result', 'nums', '=', '[', '3', ',', '4', ',', '0', ',', '0', ',', '0', ',', '6', ',', '2', ',', '0', ',', '6', ',', '7', ',', '6', ',', '0', ',', '0', ',', '0', ',', '9', ',', '10', ',', '7', ',', '4', ',', '4', ',', '5', ',', '3', ',', '0', ',', '0', ',', '2', ',', '9', ',', '7', ',', '1', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nMove all zero digits to end of the said list of numbers:""', ')', 'print', '(', 'test', '(', 'nums', ')', ')']"
151,"['write', 'numpy', 'program', 'compute', 'crosscorrelation', 'two', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '0', ',', '1', ',', '3', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '2', ',', '4', ',', '5', ']', ')', 'print', '(', '""\\nOriginal array1:""', ')', 'print', '(', 'x', ')', 'print', '(', '""\\nOriginal array1:""', ')', 'print', '(', 'y', ')', 'print', '(', '""\\nCross-correlation of the said arrays:\\n""', ',', 'np', '.', 'cov', '(', 'x', ',', 'y', ')', ')']"
152,"['write', 'python', 'program', 'get', 'actual', 'module', 'object', 'given', 'object']","['from', 'inspect', 'import', 'getmodule', 'from', 'math', 'import', 'sqrt', 'print', '(', 'getmodule', '(', 'sqrt', ')', ')']"
153,"['write', 'python', 'program', 'extract', 'nth', 'element', 'given', 'list', 'tuples', 'using', 'lambda']","['def', 'extract_nth_element', '(', 'test_list', ',', 'n', ')', ':', 'result', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', '(', 'x', '[', 'n', ']', ')', ',', 'test_list', ')', ')', 'return', 'result', 'students', '=', '[', '(', ""'Greyson Fulton'"", ',', '98', ',', '99', ')', ',', '(', ""'Brady Kent'"", ',', '97', ',', '96', ')', ',', '(', ""'Wyatt Knott'"", ',', '91', ',', '94', ')', ',', '(', ""'Beau Turnbull'"", ',', '94', ',', '98', ')', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'students', ')', 'n', '=', '0', 'print', '(', '""\\nExtract nth element ( n =""', ',', 'n', ',', '"") from the said list of tuples:""', ')', 'print', '(', 'extract_nth_element', '(', 'students', ',', 'n', ')', ')', 'n', '=', '2', 'print', '(', '""\\nExtract nth element ( n =""', ',', 'n', ',', '"") from the said list of tuples:""', ')', 'print', '(', 'extract_nth_element', '(', 'students', ',', 'n', ')', ')']"
154,"['write', 'numpy', 'program', 'add', 'extra', 'column', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '10', ',', '20', ',', '30', ']', ',', '[', '40', ',', '50', ',', '60', ']', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '[', '100', ']', ',', '[', '200', ']', ']', ')', 'print', '(', 'np', '.', 'append', '(', 'x', ',', 'y', ',', 'axis', '=', '1', ')', ')']"
155,"['write', 'python', 'program', 'calculate', 'product', 'given', 'list', 'number', 'using', 'lambda']","['import', 'functools', 'def', 'remove_duplicates', '(', 'nums', ')', ':', 'result', '=', 'functools', '.', 'reduce', '(', 'lambda', 'x', ',', 'y', ':', 'x', '*', 'y', ',', 'nums', ',', '1', ')', 'return', 'result', 'nums1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', 'nums2', '=', '[', '2.2', ',', '4.12', ',', '6.6', ',', '8.1', ',', '8.3', ']', 'print', '(', '""list1:""', ',', 'nums1', ')', 'print', '(', '""Product of the said list numbers:""', ')', 'print', '(', 'remove_duplicates', '(', 'nums1', ')', ')', 'print', '(', '""\\nlist2:""', ',', 'nums2', ')', 'print', '(', '""Product of the said list numbers:""', ')', 'print', '(', 'remove_duplicates', '(', 'nums2', ')', ')']"
156,"['write', 'python', 'program', 'parse', 'string', 'representing', 'time', 'according', 'format']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\ntime.struct_time, in the current timezone:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'timetuple', '(', ')', ')']"
157,"['write', 'numpy', 'program', 'create', 'random', 'array', 'extract', 'first', 'five', 'row', 'array', 'store', 'variable']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'random', '.', 'rand', '(', '10', ',', '4', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'y', '=', 'x', '[', ':', '5', ',', ':', ']', 'print', '(', '""First 5 rows of the above array:""', ')', 'print', '(', 'y', ')']"
158,"['write', 'panda', 'program', 'find', 'average', 'consumption', 'wine', 'per', 'person', 'greater', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nAverage consumption of wine per person greater than 2:""', ')', 'print', '(', 'w_a_con', '[', '(', 'w_a_con', '[', ""'Beverage Types'"", ']', '==', ""'Wine'"", ')', '&', '(', 'w_a_con', '[', ""'Display Value'"", ']', '>', '.2', ')', ']', '.', 'count', '(', ')', ')']"
159,"['write', 'panda', 'program', 'convert', 'series', 'list', 'one', 'series']","['import', 'pandas', 'as', 'pd', 's', '=', 'pd', '.', 'Series', '(', '[', '[', ""'Red'"", ',', ""'Green'"", ',', ""'White'"", ']', ',', '[', ""'Red'"", ',', ""'Black'"", ']', ',', '[', ""'Yellow'"", ']', ']', ')', 'print', '(', '""Original Series of list""', ')', 'print', '(', 's', ')', 's', '=', 's', '.', 'apply', '(', 'pd', '.', 'Series', ')', '.', 'stack', '(', ')', '.', 'reset_index', '(', 'drop', '=', 'True', ')', 'print', '(', '""One Series""', ')', 'print', '(', 's', ')']"
160,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'time', 'sort']",[]
161,"['write', 'python', 'program', 'convert', 'timezone', 'local', 'utc', 'utc', 'local', 'specified', 'zone']","['import', 'arrow', 'utc', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""utc:""', ')', 'print', '(', 'utc', ')', 'print', '(', '""\\nutc to local:""', ')', 'print', '(', 'utc', '.', 'to', '(', ""'local'"", ')', ')', 'print', '(', '""\\nlocal to utc:""', ')', 'print', '(', 'utc', '.', 'to', '(', ""'local'"", ')', '.', 'to', '(', ""'utc'"", ')', ')', 'print', '(', '""\\nutc to specific location:""', ')', 'print', '(', 'utc', '.', 'to', '(', ""'US/Pacific'"", ')', ')']"
162,"['write', 'numpy', 'program', 'subtract', 'mean', 'row', 'given', 'matrix']","['import', 'numpy', 'as', 'np', 'print', '(', '""Original matrix:\\n""', ')', 'X', '=', 'np', '.', 'random', '.', 'rand', '(', '5', ',', '10', ')', 'print', '(', 'X', ')', 'print', '(', '""\\nSubtract the mean of each row of the said matrix:\\n""', ')', 'Y', '=', 'X', '-', 'X', '.', 'mean', '(', 'axis', '=', '1', ',', 'keepdims', '=', 'True', ')', 'print', '(', 'Y', ')']"
163,"['write', 'numpy', 'program', 'test', 'whether', 'two', 'array', 'elementwise', 'equal', 'within', 'tolerance']","['import', 'numpy', 'as', 'np', 'print', '(', '""Test if two arrays are element-wise equal within a tolerance:""', ')', 'print', '(', 'np', '.', 'allclose', '(', '[', '1e10', ',', '1e-7', ']', ',', '[', '1.00001e10', ',', '1e-8', ']', ')', ')', 'print', '(', 'np', '.', 'allclose', '(', '[', '1e10', ',', '1e-8', ']', ',', '[', '1.00001e10', ',', '1e-9', ']', ')', ')', 'print', '(', 'np', '.', 'allclose', '(', '[', '1e10', ',', '1e-8', ']', ',', '[', '1.0001e10', ',', '1e-9', ']', ')', ')', 'print', '(', 'np', '.', 'allclose', '(', '[', '1.0', ',', 'np', '.', 'nan', ']', ',', '[', '1.0', ',', 'np', '.', 'nan', ']', ')', ')', 'print', '(', 'np', '.', 'allclose', '(', '[', '1.0', ',', 'np', '.', 'nan', ']', ',', '[', '1.0', ',', 'np', '.', 'nan', ']', ',', 'equal_nan', '=', 'True', ')', ')']"
164,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'count', 'manager', 'wise', 'sale', 'mean', 'value', 'sale', 'amount']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\SaleData.xlsx'"", ')', 'print', '(', 'pd', '.', 'pivot_table', '(', 'df', ',', 'index', '=', '[', '""Manager""', ']', ',', 'values', '=', '[', '""Sale_amt""', ']', ',', 'aggfunc', '=', '[', 'np', '.', 'mean', ',', 'len', ']', ')', ')']"
165,"['write', 'python', 'program', 'select', 'sunday', 'specified', 'year']","['from', 'datetime', 'import', 'date', ',', 'timedelta', 'def', 'all_sundays', '(', 'year', ')', ':', 'dt', '=', 'date', '(', 'year', ',', '1', ',', '1', ')', 'dt', '+=', 'timedelta', '(', 'days', '=', '6', '-', 'dt', '.', 'weekday', '(', ')', ')', 'while', 'dt', '.', 'year', '==', 'year', ':', 'yield', 'dt', 'dt', '+=', 'timedelta', '(', 'days', '=', '7', ')', 'for', 's', 'in', 'all_sundays', '(', '2020', ')', ':', 'print', '(', 's', ')']"
166,"['write', 'panda', 'program', 'print', 'concise', 'summary', 'dataset', 'titaniccsv']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'df', '.', 'info', '(', ')', 'print', '(', 'result', ')']"
167,"['write', 'python', 'program', 'create', 'object', 'writing', 'iterate', 'row', 'print', 'value']","['import', 'csv', 'import', 'sys', 'with', 'open', '(', ""'temp.csv'"", ',', ""'wt'"", ')', 'as', 'f', ':', 'writer', '=', 'csv', '.', 'writer', '(', 'f', ')', 'writer', '.', 'writerow', '(', '(', ""'id1'"", ',', ""'id2'"", ',', ""'date'"", ')', ')', 'for', 'i', 'in', 'range', '(', '3', ')', ':', 'row', '=', '(', 'i', '+', '1', ',', 'chr', '(', 'ord', '(', ""'a'"", ')', '+', 'i', ')', ',', ""'01/{:02d}/2019'"", '.', 'format', '(', 'i', '+', '1', ')', ',', ')', 'writer', '.', 'writerow', '(', 'row', ')', 'print', '(', 'open', '(', ""'temp.csv'"", ',', ""'rt'"", ')', '.', 'read', '(', ')', ')']"
168,"['write', 'python', 'program', 'remove', 'duplicate', 'dictionary', 'given', 'list']","['def', 'remove_duplicate_dictionary', '(', 'list_color', ')', ':', 'result', '=', '[', 'dict', '(', 'e', ')', 'for', 'e', 'in', '{', 'tuple', '(', 'd', '.', 'items', '(', ')', ')', 'for', 'd', 'in', 'list_color', '}', ']', 'return', 'result', 'list_color', '=', '[', '{', ""'Green'"", ':', ""'#008000'"", '}', ',', '{', ""'Black'"", ':', ""'#000000'"", '}', ',', '{', ""'Blue'"", ':', ""'#0000FF'"", '}', ',', '{', ""'Green'"", ':', ""'#008000'"", '}', ']', 'print', '(', '""Original list with duplicate dictionary:""', ')', 'print', '(', 'list_color', ')', 'print', '(', '""\\nAfter removing duplicate dictionary of the said list:""', ')', 'print', '(', 'remove_duplicate_dictionary', '(', 'list_color', ')', ')']"
169,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'compute', 'survival', 'total', 'class', 'along', 'group']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'df', '.', 'pivot_table', '(', ""'survived'"", ',', 'index', '=', ""'sex'"", ',', 'columns', '=', ""'class'"", ',', 'margins', '=', 'True', ')', 'print', '(', 'result', ')']"
170,"['write', 'python', 'program', 'remove', 'first', 'specified', 'number', 'element', 'given', 'list', 'satisfying', 'condition']","['def', 'condition_match', '(', 'x', ')', ':', 'return', '(', '(', 'x', '%', '2', ')', '==', '0', ')', 'def', 'remove_items_con', '(', 'data', ',', 'N', ')', ':', 'ctr', '=', '1', 'result', '=', '[', ']', 'for', 'x', 'in', 'data', ':', 'if', 'ctr', '>', 'N', 'or', 'not', 'condition_match', '(', 'x', ')', ':', 'result', '.', 'append', '(', 'x', ')', 'else', ':', 'ctr', '=', 'ctr', '+', '1', 'return', 'result', 'nums', '=', '[', '3', ',', '10', ',', '4', ',', '7', ',', '5', ',', '7', ',', '8', ',', '3', ',', '3', ',', '4', ',', '5', ',', '9', ',', '3', ',', '4', ',', '9', ',', '8', ',', '5', ']', 'N', '=', '4', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nRemove first 4 even numbers from the said list:""', ')', 'print', '(', 'remove_items_con', '(', 'nums', ',', 'N', ')', ')']"
171,"['write', 'python', 'program', 'convert', 'list', 'multiple', 'integer', 'single', 'integer']","['L', '=', '[', '11', ',', '33', ',', '50', ']', 'print', '(', '""Original List: ""', ',', 'L', ')', 'x', '=', 'int', '(', '""""', '.', 'join', '(', 'map', '(', 'str', ',', 'L', ')', ')', ')', 'print', '(', '""Single Integer: ""', ',', 'x', ')']"
172,"['write', 'python', 'program', 'find', 'value', 'last', 'element', 'given', 'list', 'satisfies', 'provided', 'testing', 'function']","['def', 'find_last', '(', 'lst', ',', 'fn', ')', ':', 'return', 'next', '(', 'x', 'for', 'x', 'in', 'lst', '[', ':', ':', '-', '1', ']', 'if', 'fn', '(', 'x', ')', ')', 'print', '(', 'find_last', '(', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', 'lambda', 'n', ':', 'n', '%', '2', '==', '1', ')', ')', 'print', '(', 'find_last', '(', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', 'lambda', 'n', ':', 'n', '%', '2', '==', '0', ')', ')']"
173,"['write', 'python', 'program', 'change', 'position', 'every', 'nth', 'value', 'list']","['from', 'itertools', 'import', 'zip_longest', ',', 'chain', ',', 'tee', 'def', 'replace2copy', '(', 'lst', ')', ':', 'lst1', ',', 'lst2', '=', 'tee', '(', 'iter', '(', 'lst', ')', ',', '2', ')', 'return', 'list', '(', 'chain', '.', 'from_iterable', '(', 'zip_longest', '(', 'lst', '[', '1', ':', ':', '2', ']', ',', 'lst', '[', ':', ':', '2', ']', ')', ')', ')', 'n', '=', '[', '0', ',', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', 'print', '(', 'replace2copy', '(', 'n', ')', ')']"
174,"['write', 'python', 'program', 'multiply', 'number', 'given', 'list', 'using', 'lambda']","['from', 'functools', 'import', 'reduce', 'def', 'mutiple_list', '(', 'nums', ')', ':', 'result', '=', 'reduce', '(', 'lambda', 'x', ',', 'y', ':', 'x', '*', 'y', ',', 'nums', ')', 'return', 'result', 'nums', '=', '[', '4', ',', '3', ',', '2', ',', '2', ',', '-', '1', ',', '18', ']', 'print', '(', '""Original list: ""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Mmultiply all the numbers of the said list:""', ',', 'mutiple_list', '(', 'nums', ')', ')', 'nums', '=', '[', '2', ',', '4', ',', '8', ',', '8', ',', '3', ',', '2', ',', '9', ']', 'print', '(', '""\\nOriginal list: ""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Mmultiply all the numbers of the said list:""', ',', 'mutiple_list', '(', 'nums', ')', ')']"
175,"['write', 'python', 'program', 'remove', 'unwanted', 'character', 'given', 'string']","['def', 'remove_chars', '(', 'str1', ',', 'unwanted_chars', ')', ':', 'for', 'i', 'in', 'unwanted_chars', ':', 'str1', '=', 'str1', '.', 'replace', '(', 'i', ',', ""''"", ')', 'return', 'str1', 'str1', '=', '""Pyth*^on Exercis^es""', 'str2', '=', '""A%^!B#*CD""', 'unwanted_chars', '=', '[', '""#""', ',', '""*""', ',', '""!""', ',', '""^""', ',', '""%""', ']', 'print', '(', '""Original String : ""', '+', 'str1', ')', 'print', '(', '""After removing unwanted characters:""', ')', 'print', '(', 'remove_chars', '(', 'str1', ',', 'unwanted_chars', ')', ')', 'print', '(', '""\\nOriginal String : ""', '+', 'str2', ')', 'print', '(', '""After removing unwanted characters:""', ')', 'print', '(', 'remove_chars', '(', 'str2', ',', 'unwanted_chars', ')', ')']"
176,"['write', 'python', 'program', 'compute', 'average', 'n']","['import', 'itertools', 'as', 'it', 'nums', '=', '[', '[', '0', ',', '1', ',', '2', ']', ',', '[', '2', ',', '3', ',', '4', ']', ',', '[', '3', ',', '4', ',', '5', ',', '6', ']', ',', '[', '7', ',', '8', ',', '9', ',', '10', ',', '11', ']', ',', '[', '12', ',', '13', ',', '14', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'def', 'get_avg', '(', 'x', ')', ':', 'x', '=', '[', 'i', 'for', 'i', 'in', 'x', 'if', 'i', 'is', 'not', 'None', ']', 'return', 'sum', '(', 'x', ',', '0.0', ')', '/', 'len', '(', 'x', ')', 'result', '=', 'map', '(', 'get_avg', ',', 'it', '.', 'zip_longest', '(', '*', 'nums', ')', ')', 'print', '(', '""\\nAverage of n-th elements in the said list of lists with different lengths:""', ')', 'print', '(', 'list', '(', 'result', ')', ')']"
177,"['write', 'python', 'program', 'find', 'detail', 'given', 'zip', 'code', 'using', 'nominatim', 'api', 'geopy', 'package']","['from', 'geopy', '.', 'geocoders', 'import', 'Nominatim', 'geolocator', '=', 'Nominatim', '(', 'user_agent', '=', '""geoapiExercises""', ')', 'zipcode1', '=', '""99501""', 'print', '(', '""\\nZipcode:""', ',', 'zipcode1', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'zipcode1', ')', 'print', '(', '""Details of the said pincode:""', ')', 'print', '(', 'location', '.', 'address', ')', 'zipcode2', '=', '""CA9 3HX""', 'print', '(', '""\\nZipcode:""', ',', 'zipcode2', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'zipcode2', ')', 'print', '(', '""Details of the said pincode:""', ')', 'print', '(', 'location', '.', 'address', ')', 'zipcode3', '=', '""61000""', 'print', '(', '""\\nZipcode:""', ',', 'zipcode3', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'zipcode3', ')', 'print', '(', '""Details of the said pincode:""', ')', 'print', '(', 'location', '.', 'address', ')', 'zipcode4', '=', '""713101""', 'print', '(', '""\\nZipcode:""', ',', 'zipcode4', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'zipcode4', ')', 'print', '(', '""Details of the said pincode:""', ')', 'print', '(', 'location', '.', 'address', ')']"
178,"['write', 'numpy', 'program', 'insert', 'space', 'character', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', ""'python exercises'"", ',', ""'PHP'"", ',', ""'java'"", ',', ""'C++'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""Original Array:""', ')', 'print', '(', 'x', ')', 'r', '=', 'np', '.', 'char', '.', 'join', '(', '"" ""', ',', 'x', ')', 'print', '(', 'r', ')']"
179,"['write', 'python', 'program', 'merge', 'list', 'item', 'given', 'list', 'using', 'index', 'value']","['def', 'merge_some_chars', '(', 'lst', ',', 'merge_from', ',', 'merge_to', ')', ':', 'result', '=', 'lst', 'result', '[', 'merge_from', ':', 'merge_to', ']', '=', '[', ""''"", '.', 'join', '(', 'result', '[', 'merge_from', ':', 'merge_to', ']', ')', ']', 'return', 'result', 'chars', '=', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", ',', ""'e'"", ',', ""'f'"", ',', ""'g'"", ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'chars', ')', 'merge_from', '=', '2', 'merge_to', '=', '4', 'print', '(', '""\\nMerge items from""', ',', 'merge_from', ',', '""to""', ',', 'merge_to', ',', '""in the said List:""', ')', 'print', '(', 'merge_some_chars', '(', 'chars', ',', 'merge_from', ',', 'merge_to', ')', ')', 'chars', '=', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", ',', ""'e'"", ',', ""'f'"", ',', ""'g'"", ']', 'merge_from', '=', '3', 'merge_to', '=', '7', 'print', '(', '""\\nMerge items from""', ',', 'merge_from', ',', '""to""', ',', 'merge_to', ',', '""in the said List:""', ')', 'print', '(', 'merge_some_chars', '(', 'chars', ',', 'merge_from', ',', 'merge_to', ')', ')']"
180,"['write', 'python', 'function', 'check', 'whether', 'number', 'perfect']","['def', 'perfect_number', '(', 'n', ')', ':', 'sum', '=', '0', 'for', 'x', 'in', 'range', '(', '1', ',', 'n', ')', ':', 'if', 'n', '%', 'x', '==', '0', ':', 'sum', '+=', 'x', 'return', 'sum', '==', 'n', 'print', '(', 'perfect_number', '(', '6', ')', ')']"
181,"['write', 'panda', 'program', 'split', 'given', 'dataset', 'group', 'two', 'column', 'convert', 'column', 'dataframe', 'dictionary', 'column', 'header', 'key']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_Of_Birth '"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '12', ',', '12', ',', '13', ',', '13', ',', '14', ',', '12', ']', ',', ""'height'"", ':', '[', '173', ',', '192', ',', '186', ',', '167', ',', '151', ',', '159', ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', ',', ""'address'"", ':', '[', ""'street1'"", ',', ""'street2'"", ',', ""'street3'"", ',', ""'street1'"", ',', ""'street2'"", ',', ""'street4'"", ']', '}', ',', 'index', '=', '[', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ',', ""'S4'"", ',', ""'S5'"", ',', ""'S6'"", ']', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'dict_data_list', '=', 'list', '(', ')', 'for', 'gg', ',', 'dd', 'in', 'df', '.', 'groupby', '(', '[', ""'school_code'"", ',', ""'class'"", ']', ')', ':', 'group', '=', 'dict', '(', 'zip', '(', '[', ""'school_code'"", ',', ""'class'"", ']', ',', 'gg', ')', ')', 'ocolumns_list', '=', 'list', '(', ')', 'for', '_', ',', 'data', 'in', 'dd', '.', 'iterrows', '(', ')', ':', 'data', '=', 'data', '.', 'drop', '(', 'labels', '=', '[', ""'school_code'"", ',', ""'class'"", ']', ')', 'ocolumns_list', '.', 'append', '(', 'data', '.', 'to_dict', '(', ')', ')', 'group', '[', ""'other_columns'"", ']', '=', 'ocolumns_list', 'dict_data_list', '.', 'append', '(', 'group', ')', 'print', '(', 'dict_data_list', ')']"
182,"['write', 'python', 'program', 'find', 'common', 'element', 'count', 'specified', 'text']","['from', 'collections', 'import', 'Counter', 's', '=', ""'lkseropewdssafsdfafkpwe'"", 'print', '(', '""Original string: ""', '+', 's', ')', 'print', '(', '""Most common three characters of the said string:""', ')', 'print', '(', 'Counter', '(', 's', ')', '.', 'most_common', '(', '3', ')', ')']"
183,"['write', 'numpy', 'program', 'round', 'array', 'element', 'given', 'number', 'decimal']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'round', '(', '[', '1.45', ',', '1.50', ',', '1.55', ']', ')', 'print', '(', 'x', ')', 'x', '=', 'np', '.', 'round', '(', '[', '0.28', ',', '.50', ',', '.64', ']', ',', 'decimals', '=', '1', ')', 'print', '(', 'x', ')', 'x', '=', 'np', '.', 'round', '(', '[', '.5', ',', '1.5', ',', '2.5', ',', '3.5', ',', '4.5', ']', ')', 'print', '(', 'x', ')']"
184,"['write', 'panda', 'program', 'find', 'index', 'first', 'occurrence', 'smallest', 'largest', 'value', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'nums', '=', 'pd', '.', 'Series', '(', '[', '1', ',', '3', ',', '7', ',', '12', ',', '88', ',', '23', ',', '3', ',', '1', ',', '9', ',', '0', ']', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Index of the first occurrence of the smallest and largest value of the said series:""', ')', 'print', '(', 'nums', '.', 'idxmin', '(', ')', ')', 'print', '(', 'nums', '.', 'idxmax', '(', ')', ')']"
185,"['write', 'numpy', 'program', 'generate', 'random', 'number']","['import', 'numpy', 'as', 'np', 'rand_num', '=', 'np', '.', 'random', '.', 'normal', '(', '0', ',', '1', ',', '1', ')', 'print', '(', '""Random number between 0 and 1:""', ')', 'print', '(', 'rand_num', ')']"
186,"['write', 'python', 'program', 'count', 'number', 'unique', 'sublists', 'within', 'given', 'list']","['def', 'unique_sublists', '(', 'input_list', ')', ':', 'result', '=', '{', '}', 'for', 'l', 'in', 'input_list', ':', 'result', '.', 'setdefault', '(', 'tuple', '(', 'l', ')', ',', 'list', '(', ')', ')', '.', 'append', '(', '1', ')', 'for', 'a', ',', 'b', 'in', 'result', '.', 'items', '(', ')', ':', 'result', '[', 'a', ']', '=', 'sum', '(', 'b', ')', 'return', 'result', 'list1', '=', '[', '[', '1', ',', '3', ']', ',', '[', '5', ',', '7', ']', ',', '[', '1', ',', '3', ']', ',', '[', '13', ',', '15', ',', '17', ']', ',', '[', '5', ',', '7', ']', ',', '[', '9', ',', '11', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""Number of unique lists of the said list:""', ')', 'print', '(', 'unique_sublists', '(', 'list1', ')', ')', 'color1', '=', '[', '[', '""green""', ',', '""orange""', ']', ',', '[', '""black""', ']', ',', '[', '""green""', ',', '""orange""', ']', ',', '[', '""white""', ']', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'color1', ')', 'print', '(', '""Number of unique lists of the said list:""', ')', 'print', '(', 'unique_sublists', '(', 'color1', ')', ')']"
187,"['write', 'python', 'program', 'calculate', 'time', 'run', 'difference', 'start', 'current', 'time', 'program']","['from', 'timeit', 'import', 'default_timer', 'def', 'timer', '(', 'n', ')', ':', 'start', '=', 'default_timer', '(', ')', 'for', 'row', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'print', '(', 'row', ')', 'print', '(', 'default_timer', '(', ')', '-', 'start', ')', 'timer', '(', '5', ')', 'timer', '(', '15', ')']"
188,"['write', 'python', 'program', 'concatenate', 'elementwise', 'three', 'given', 'list']","['def', 'concatenate_lists', '(', 'l1', ',', 'l2', ',', 'l3', ')', ':', 'return', '[', 'i', '+', 'j', '+', 'k', 'for', 'i', ',', 'j', ',', 'k', 'in', 'zip', '(', 'l1', ',', 'l2', ',', 'l3', ')', ']', 'l1', '=', '[', ""'0'"", ',', ""'1'"", ',', ""'2'"", ',', ""'3'"", ',', ""'4'"", ']', 'l2', '=', '[', ""'red'"", ',', ""'green'"", ',', ""'black'"", ',', ""'blue'"", ',', ""'white'"", ']', 'l3', '=', '[', ""'100'"", ',', ""'200'"", ',', ""'300'"", ',', ""'400'"", ',', ""'500'"", ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'l1', ')', 'print', '(', 'l2', ')', 'print', '(', 'l3', ')', 'print', '(', '""\\nConcatenate element-wise three said lists:""', ')', 'print', '(', 'concatenate_lists', '(', 'l1', ',', 'l2', ',', 'l3', ')', ')']"
189,"['write', 'python', 'program', 'delete', 'specific', 'row', 'given', 'sqlite', 'table']","['import', 'sqlite3', 'from', 'sqlite3', 'import', 'Error', 'def', 'sql_connection', '(', ')', ':', 'try', ':', 'conn', '=', 'sqlite3', '.', 'connect', '(', ""'mydatabase.db'"", ')', 'return', 'conn', 'except', 'Error', ':', 'print', '(', 'Error', ')', 'def', 'sql_table', '(', 'conn', ')', ':', 'cursorObj', '=', 'conn', '.', 'cursor', '(', ')', 'cursorObj', '.', 'execute', '(', '""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));""', ')', 'cursorObj', '.', 'executescript', '(', '""""""\r   INSERT INTO salesman VALUES(5001,\'James Hoog\', \'New York\', 0.15);\r   INSERT INTO salesman VALUES(5002,\'Nail Knite\', \'Paris\', 0.25);\r   INSERT INTO salesman VALUES(5003,\'Pit Alex\', \'London\', 0.15);\r   INSERT INTO salesman VALUES(5004,\'Mc Lyon\', \'Paris\', 0.35);\r   INSERT INTO salesman VALUES(5005,\'Paul Adam\', \'Rome\', 0.45);\r   """"""', ')', 'cursorObj', '.', 'execute', '(', '""SELECT * FROM salesman""', ')', 'rows', '=', 'cursorObj', '.', 'fetchall', '(', ')', 'print', '(', '""Agent details:""', ')', 'for', 'row', 'in', 'rows', ':', 'print', '(', 'row', ')', 'print', '(', '""\\nDelete Salesman of ID 5003:""', ')', 's_id', '=', '5003', 'cursorObj', '.', 'execute', '(', '""""""\r   DELETE FROM salesman\r   WHERE salesman_id = ?\r   """"""', ',', '(', 's_id', ',', ')', ')', 'conn', '.', 'commit', '(', ')', 'cursorObj', '.', 'execute', '(', '""SELECT * FROM salesman""', ')', 'rows', '=', 'cursorObj', '.', 'fetchall', '(', ')', 'print', '(', '""\\nAfter updating Agent details:""', ')', 'for', 'row', 'in', 'rows', ':', 'print', '(', 'row', ')', 'sqllite_conn', '=', 'sql_connection', '(', ')', 'sql_table', '(', 'sqllite_conn', ')', 'if', '(', 'sqllite_conn', ')', ':', 'sqllite_conn', '.', 'close', '(', ')', 'print', '(', '""\\nThe SQLite connection is closed.""', ')']"
190,"['write', 'python', 'program', 'find', 'list', 'maximum', 'minimum', 'length', 'using', 'lambda']","['def', 'max_length_list', '(', 'input_list', ')', ':', 'max_length', '=', 'max', '(', 'len', '(', 'x', ')', 'for', 'x', 'in', 'input_list', ')', 'max_list', '=', 'max', '(', 'input_list', ',', 'key', '=', 'lambda', 'i', ':', 'len', '(', 'i', ')', ')', 'return', '(', 'max_length', ',', 'max_list', ')', 'def', 'min_length_list', '(', 'input_list', ')', ':', 'min_length', '=', 'min', '(', 'len', '(', 'x', ')', 'for', 'x', 'in', 'input_list', ')', 'min_list', '=', 'min', '(', 'input_list', ',', 'key', '=', 'lambda', 'i', ':', 'len', '(', 'i', ')', ')', 'return', '(', 'min_length', ',', 'min_list', ')', 'list1', '=', '[', '[', '0', ']', ',', '[', '1', ',', '3', ']', ',', '[', '5', ',', '7', ']', ',', '[', '9', ',', '11', ']', ',', '[', '13', ',', '15', ',', '17', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""\\nList with maximum length of lists:""', ')', 'print', '(', 'max_length_list', '(', 'list1', ')', ')', 'print', '(', '""\\nList with minimum length of lists:""', ')', 'print', '(', 'min_length_list', '(', 'list1', ')', ')']"
191,"['write', 'python', 'program', 'convert', 'given', 'string', 'camelcase']","['from', 're', 'import', 'sub', 'def', 'camel_case', '(', 's', ')', ':', 's', '=', 'sub', '(', 'r""(_|-)+""', ',', '"" ""', ',', 's', ')', '.', 'title', '(', ')', '.', 'replace', '(', '"" ""', ',', '""""', ')', 'return', ""''"", '.', 'join', '(', '[', 's', '[', '0', ']', '.', 'lower', '(', ')', ',', 's', '[', '1', ':', ']', ']', ')', 'print', '(', 'camel_case', '(', ""'JavaScript'"", ')', ')', 'print', '(', 'camel_case', '(', ""'Foo-Bar'"", ')', ')', 'print', '(', 'camel_case', '(', ""'foo_bar'"", ')', ')', 'print', '(', 'camel_case', '(', ""'--foo.bar'"", ')', ')', 'print', '(', 'camel_case', '(', ""'Foo-BAR'"", ')', ')', 'print', '(', 'camel_case', '(', ""'fooBAR'"", ')', ')', 'print', '(', 'camel_case', '(', ""'foo bar'"", ')', ')']"
192,"['write', 'python', 'program', 'find', 'common', 'item', 'two', 'list']","['color1', '=', '""Red""', ',', '""Green""', ',', '""Orange""', ',', '""White""', 'color2', '=', '""Black""', ',', '""Green""', ',', '""White""', ',', '""Pink""', 'print', '(', 'set', '(', 'color1', ')', '&', 'set', '(', 'color2', ')', ')']"
193,"['write', 'python', 'program', 'create', 'doubly', 'linked', 'list', 'append', 'item', 'iterate', 'list', 'print', 'forward']","['class', 'Node', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ',', 'next', '=', 'None', ',', 'prev', '=', 'None', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'next', 'self', '.', 'prev', '=', 'prev', 'class', 'doubly_linked_list', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'tail', '=', 'None', 'self', '.', 'count', '=', '0', 'def', 'append_item', '(', 'self', ',', 'data', ')', ':', 'new_item', '=', 'Node', '(', 'data', ',', 'None', ',', 'None', ')', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_item', 'self', '.', 'tail', '=', 'self', '.', 'head', 'else', ':', 'new_item', '.', 'prev', '=', 'self', '.', 'tail', 'self', '.', 'tail', '.', 'next', '=', 'new_item', 'self', '.', 'tail', '=', 'new_item', 'self', '.', 'count', '+=', '1', 'def', 'print_foward', '(', 'self', ')', ':', 'for', 'node', 'in', 'self', '.', 'iter', '(', ')', ':', 'print', '(', 'node', ')', 'def', 'iter', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'item_val', '=', 'current', '.', 'data', 'current', '=', 'current', '.', 'next', 'yield', 'item_val', 'items', '=', 'doubly_linked_list', '(', ')', 'items', '.', 'append_item', '(', ""'PHP'"", ')', 'items', '.', 'append_item', '(', ""'Python'"", ')', 'items', '.', 'append_item', '(', ""'C#'"", ')', 'items', '.', 'append_item', '(', ""'C++'"", ')', 'items', '.', 'append_item', '(', ""'Java'"", ')', 'print', '(', '""Items in the Doubly linked list: ""', ')', 'items', '.', 'print_foward', '(', ')']"
194,"['write', 'numpy', 'program', 'rearrange', 'dimension', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '24', ')', '.', 'reshape', '(', '(', '6', ',', '4', ')', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'x', ')', 'new_array', '=', 'np', '.', 'transpose', '(', 'x', ')', 'print', '(', '""After reverse the dimensions:""', ')', 'print', '(', 'new_array', ')']"
195,"['write', 'panda', 'program', 'create', 'series', 'timestamps', 'dataframe', 'integer', 'string', 'column', 'also', 'create', 'series', 'timestamps', 'using', 'specified', 'column']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'year'"", ':', '[', '2018', ',', '2019', ',', '2020', ']', ',', ""'month'"", ':', '[', '2', ',', '3', ',', '4', ']', ',', ""'day'"", ':', '[', '4', ',', '5', ',', '6', ']', ',', ""'hour'"", ':', '[', '2', ',', '3', ',', '4', ']', '}', ')', 'print', '(', '""Original dataframe:""', ')', 'print', '(', 'df', ')', 'result', '=', 'pd', '.', 'to_datetime', '(', 'df', ')', 'print', '(', '""\\nSeries of Timestamps from the said dataframe:""', ')', 'print', '(', 'result', ')', 'print', '(', '""\\nSeries of Timestamps using specified columns:""', ')', 'print', '(', 'pd', '.', 'to_datetime', '(', 'df', '[', '[', ""'year'"", ',', ""'month'"", ',', ""'day'"", ']', ']', ')', ')']"
196,"['write', 'python', 'program', 'create', 'datetime', 'integer', 'float', 'string', 'timestamps', 'using', 'arrow', 'module']","['import', 'arrow', 'i', '=', 'arrow', '.', 'get', '(', '1857900545', ')', 'print', '(', '""Date from integers: ""', ')', 'print', '(', 'i', ')', 'f', '=', 'arrow', '.', 'get', '(', '1857900545.234323', ')', 'print', '(', '""\\nDate from floats: ""', ')', 'print', '(', 'f', ')', 's', '=', 'arrow', '.', 'get', '(', ""'1857900545'"", ')', 'print', '(', '""\\nDate from Strings: ""', ')', 'print', '(', 's', ')']"
197,"['write', 'python', 'program', 'merge', 'two', 'list', 'list', 'list', 'combining', 'element', 'input', 'list', 'based', 'position']","['def', 'merge_lists', '(', '*', 'args', ',', 'fill_value', '=', 'None', ')', ':', 'max_length', '=', 'max', '(', '[', 'len', '(', 'lst', ')', 'for', 'lst', 'in', 'args', ']', ')', 'result', '=', '[', ']', 'for', 'i', 'in', 'range', '(', 'max_length', ')', ':', 'result', '.', 'append', '(', '[', 'args', '[', 'k', ']', '[', 'i', ']', 'if', 'i', '<', 'len', '(', 'args', '[', 'k', ']', ')', 'else', 'fill_value', 'for', 'k', 'in', 'range', '(', 'len', '(', 'args', ')', ')', ']', ')', 'return', 'result', 'print', '(', '""After merging lists into a list of lists:""', ')', 'print', '(', 'merge_lists', '(', '[', ""'a'"", ',', ""'b'"", ']', ',', '[', '1', ',', '2', ']', ',', '[', 'True', ',', 'False', ']', ')', ')', 'print', '(', 'merge_lists', '(', '[', ""'a'"", ']', ',', '[', '1', ',', '2', ']', ',', '[', 'True', ',', 'False', ']', ')', ')', 'print', '(', 'merge_lists', '(', '[', ""'a'"", ']', ',', '[', '1', ',', '2', ']', ',', '[', 'True', ',', 'False', ']', ',', 'fill_value', '=', ""'_'"", ')', ')']"
198,"['write', 'numpy', 'program', 'stack', 'array', 'sequence', 'horizontally', 'column', 'wise']","['import', 'numpy', 'as', 'np', 'print', '(', '""\\nOriginal arrays:""', ')', 'x', '=', 'np', '.', 'arange', '(', '9', ')', '.', 'reshape', '(', '3', ',', '3', ')', 'y', '=', 'x', '*', '3', 'print', '(', '""Array-1""', ')', 'print', '(', 'x', ')', 'print', '(', '""Array-2""', ')', 'print', '(', 'y', ')', 'new_array', '=', 'np', '.', 'hstack', '(', '(', 'x', ',', 'y', ')', ')', 'print', '(', '""\\nStack arrays in sequence horizontally:""', ')', 'print', '(', 'new_array', ')']"
199,"['rite', 'python', 'program', 'find', 'first', 'repeated', 'word', 'given', 'string']","['def', 'first_repeated_word', '(', 'str1', ')', ':', 'temp', '=', 'set', '(', ')', 'for', 'word', 'in', 'str1', '.', 'split', '(', ')', ':', 'if', 'word', 'in', 'temp', ':', 'return', 'word', ';', 'else', ':', 'temp', '.', 'add', '(', 'word', ')', 'return', ""'None'"", 'print', '(', 'first_repeated_word', '(', '""ab ca bc ab""', ')', ')', 'print', '(', 'first_repeated_word', '(', '""ab ca bc ab ca ab bc""', ')', ')', 'print', '(', 'first_repeated_word', '(', '""ab ca bc ca ab bc""', ')', ')', 'print', '(', 'first_repeated_word', '(', '""ab ca bc""', ')', ')']"
200,"['create', 'dataframe', 'ten', 'row', 'four', 'column', 'random', 'value', 'convert', 'value', 'nan', 'value', 'write', 'panda', 'program', 'highlight', 'nan', 'value']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '24', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', 'np', '.', 'linspace', '(', '1', ',', '10', ',', '10', ')', '}', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df', ',', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', ',', 'columns', '=', 'list', '(', ""'BCDE'"", ')', ')', ']', ',', 'axis', '=', '1', ')', 'df', '.', 'iloc', '[', '0', ',', '2', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '3', ',', '3', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '4', ',', '1', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '9', ',', '4', ']', '=', 'np', '.', 'nan', 'print', '(', '""Original array:""', ')', 'print', '(', 'df', ')', 'def', 'color_negative_red', '(', 'val', ')', ':', 'color', '=', ""'red'"", 'if', 'val', '<', '0', 'else', ""'black'"", 'return', ""'color: %s'"", '%', 'color', 'print', '(', '""\\nNegative numbers red and positive numbers black:""', ')', 'df', '.', 'style', '.', 'highlight_null', '(', 'null_color', '=', ""'red'"", ')']"
201,"['write', 'python', 'program', 'generate', 'number', 'specified', 'range', 'except', 'specific', 'number']","['from', 'random', 'import', 'choice', 'def', 'generate_random', '(', 'start_range', ',', 'end_range', ',', 'nums', ')', ':', 'result', '=', 'choice', '(', '[', 'i', 'for', 'i', 'in', 'range', '(', 'start_range', ',', 'end_range', ')', 'if', 'i', 'not', 'in', 'nums', ']', ')', 'return', 'result', 'start_range', '=', '1', 'end_range', '=', '10', 'nums', '=', '[', '2', ',', '9', ',', '10', ']', 'print', '(', '""\\nGenerate a number in a specified range (1, 10) except [2, 9, 10]""', ')', 'print', '(', 'generate_random', '(', 'start_range', ',', 'end_range', ',', 'nums', ')', ')', 'start_range', '=', '-', '5', 'end_range', '=', '5', 'nums', '=', '[', '-', '5', ',', '0', ',', '4', ',', '3', ',', '2', ']', 'print', '(', '""\\nGenerate a number in a specified range (-5, 5) except [-5,0,4,3,2]""', ')', 'print', '(', 'generate_random', '(', 'start_range', ',', 'end_range', ',', 'nums', ')', ')']"
202,"['write', 'python', 'program', 'add', 'tag', 'content', 'given', 'html', 'document']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_doc', '=', '\'<a href=""http://example.com/"">HTML<i>w3resource.com</i></a>\'', 'soup', '=', 'BeautifulSoup', '(', 'html_doc', ',', '""lxml""', ')', 'print', '(', '""\\nOriginal Markup:""', ')', 'print', '(', 'soup', '.', 'a', ')', 'soup', '.', 'a', '.', 'append', '(', '""CSS""', ')', 'print', '(', '""\\nAfter append a text in the new link:""', ')', 'print', '(', 'soup', '.', 'a', ')']"
203,"['write', 'numpy', 'program', 'create', 'array', 'element']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '1e3', ')', 'print', '(', 'x', ')']"
204,"['write', 'numpy', 'program', 'suppresses', 'use', 'scientific', 'notation', 'small', 'number', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1.6e-10', ',', '1.6', ',', '1200', ',', '.235', ']', ')', 'print', '(', '""Original array elements:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Print array values with precision 3:""', ')', 'np', '.', 'set_printoptions', '(', 'suppress', '=', 'True', ')', 'print', '(', 'x', ')']"
205,"['write', 'python', 'program', 'join', 'adjacent', 'member', 'given', 'list']","['def', 'test', '(', 'lst', ')', ':', 'result', '=', '[', 'x', '+', 'y', 'for', 'x', ',', 'y', 'in', 'zip', '(', 'lst', '[', ':', ':', '2', ']', ',', 'lst', '[', '1', ':', ':', '2', ']', ')', ']', 'return', 'result', 'nums', '=', '[', ""'1'"", ',', ""'2'"", ',', ""'3'"", ',', ""'4'"", ',', ""'5'"", ',', ""'6'"", ',', ""'7'"", ',', ""'8'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nJoin adjacent members of a given list:""', ')', 'print', '(', 'test', '(', 'nums', ')', ')', 'nums', '=', '[', ""'1'"", ',', ""'2'"", ',', ""'3'"", ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nJoin adjacent members of a given list:""', ')', 'print', '(', 'test', '(', 'nums', ')', ')']"
206,"['write', 'python', 'program', 'compare', 'two', 'unordered', 'list', 'set']","['from', 'collections', 'import', 'Counter', 'def', 'compare_lists', '(', 'x', ',', 'y', ')', ':', 'return', 'Counter', '(', 'x', ')', '==', 'Counter', '(', 'y', ')', 'n1', '=', '[', '20', ',', '10', ',', '30', ',', '10', ',', '20', ',', '30', ']', 'n2', '=', '[', '30', ',', '20', ',', '10', ',', '30', ',', '20', ',', '50', ']', 'print', '(', 'compare_lists', '(', 'n1', ',', 'n2', ')', ')']"
207,"['write', 'panda', 'program', 'get', 'length', 'string', 'present', 'given', 'column', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF'"", ',', ""'skfsalf'"", ',', ""'sdfslew'"", ',', ""'safsdf'"", ']', ',', ""'date_of_sale '"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nLength of the string in a column:""', ')', 'df', '[', ""'company_code_length'"", ']', '=', 'df', '[', ""'company_code'"", ']', '.', 'apply', '(', 'len', ')', 'print', '(', 'df', ')']"
208,"['write', 'python', 'program', 'create', 'new', 'arrow', 'object', 'representing', 'floor', 'timespan', 'arrow', 'object', 'given', 'timeframe', 'using', 'arrow', 'module', 'timeframe', 'datetime', 'property', 'like', 'day', 'hour', 'minute']","['import', 'arrow', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', ')', 'print', '(', '""Hour ceiling:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'floor', '(', ""'hour'"", ')', ')', 'print', '(', '""\\nMinute ceiling:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'floor', '(', ""'minute'"", ')', ')', 'print', '(', '""\\nSecond ceiling:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'floor', '(', ""'second'"", ')', ')']"
209,"['write', 'python', 'program', 'cast', 'provided', 'value', 'list', 'one']","['def', 'cast_list', '(', 'val', ')', ':', 'return', 'list', '(', 'val', ')', 'if', 'isinstance', '(', 'val', ',', '(', 'tuple', ',', 'list', ',', 'set', ',', 'dict', ')', ')', 'else', '[', 'val', ']', 'd1', '=', '[', '1', ']', 'print', '(', 'type', '(', 'd1', ')', ')', 'print', '(', 'cast_list', '(', 'd1', ')', ')', 'd2', '=', '(', ""'Red'"", ',', ""'Green'"", ')', 'print', '(', 'type', '(', 'd2', ')', ')', 'print', '(', 'cast_list', '(', 'd2', ')', ')', 'd3', '=', '{', ""'Red'"", ',', ""'Green'"", '}', 'print', '(', 'type', '(', 'd3', ')', ')', 'print', '(', 'cast_list', '(', 'd3', ')', ')', 'd4', '=', '{', '1', ':', ""'Red'"", ',', '2', ':', ""'Green'"", ',', '3', ':', ""'Black'"", '}', 'print', '(', 'type', '(', 'd4', ')', ')', 'print', '(', 'cast_list', '(', 'd4', ')', ')']"
210,"['write', 'python', 'program', 'convert', 'list', 'dictionary', 'list', 'value', 'corresponding', 'specified', 'key']","['def', 'test', '(', 'lsts', ',', 'key', ')', ':', 'return', '[', 'x', '.', 'get', '(', 'key', ')', 'for', 'x', 'in', 'lsts', ']', 'students', '=', '[', '{', ""'name'"", ':', ""'Theodore'"", ',', ""'age'"", ':', '18', '}', ',', '{', ""'name'"", ':', ""'Mathew'"", ',', ""'age'"", ':', '22', '}', ',', '{', ""'name'"", ':', ""'Roxanne'"", ',', ""'age'"", ':', '20', '}', ',', '{', ""'name'"", ':', ""'David'"", ',', ""'age'"", ':', '18', '}', ']', 'print', '(', '""Original list of dictionaries:""', ')', 'print', '(', 'students', ')', 'print', '(', '""\\nConvert a list of dictionaries into a list of values corresponding to the specified key:""', ')', 'print', '(', 'test', '(', 'students', ',', ""'age'"", ')', ')']"
211,"['write', 'python', 'program', 'get', 'factorial', 'nonnegative', 'integer']","['def', 'factorial', '(', 'n', ')', ':', 'if', 'n', '<=', '1', ':', 'return', '1', 'else', ':', 'return', 'n', '*', '(', 'factorial', '(', 'n', '-', '1', ')', ')', 'print', '(', 'factorial', '(', '5', ')', ')']"
212,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'survival', 'rate', 'gender', 'age', 'wise', 'various', 'class']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'df', '.', 'pivot_table', '(', ""'survived'"", ',', 'index', '=', '[', ""'sex'"", ',', ""'age'"", ']', ',', 'columns', '=', ""'class'"", ')', 'print', '(', 'result', ')']"
213,"['write', 'numpy', 'program', 'compute', 'xy', 'elementwise', 'x', 'two', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '1', ',', '2', ']', ']', ')', 'print', '(', '""Array1: ""', ')', 'print', '(', 'x', ')', 'print', '(', '""Array1: ""', ')', 'print', '(', 'y', ')', 'print', '(', '""Result- x^y:""', ')', 'r1', '=', 'np', '.', 'power', '(', 'x', ',', 'y', ')', 'print', '(', 'r1', ')']"
214,"['write', 'python', 'program', 'search', 'country', 'name', 'given', 'state', 'name', 'using', 'nominatim', 'api', 'geopy', 'package']","['from', 'geopy', '.', 'geocoders', 'import', 'Nominatim', 'geolocator', '=', 'Nominatim', '(', 'user_agent', '=', '""geoapiExercises""', ')', 'state1', '=', '""Uttar Pradesh""', 'print', '(', '""State Name:""', ',', 'state1', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'state1', ')', 'print', '(', '""State Name/Country Name: ""', ')', 'print', '(', 'location', '.', 'address', ')', 'state2', '=', '"" Illinois""', 'print', '(', '""\\nState Name:""', ',', 'state2', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'state2', ')', 'print', '(', '""State Name/Country Name: ""', ')', 'print', '(', 'location', '.', 'address', ')', 'state3', '=', '""Normandy""', 'print', '(', '""\\nState Name:""', ',', 'state3', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'state3', ')', 'print', '(', '""State Name/Country Name: ""', ')', 'print', '(', 'location', '.', 'address', ')', 'state4', '=', '""Jerusalem District""', 'print', '(', '""\\nState Name:""', ',', 'state4', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'state4', ')', 'print', '(', '""State Name/Country Name: ""', ')', 'print', '(', 'location', '.', 'address', ')']"
215,"['write', 'python', 'program', 'append', 'item', 'specified', 'list']","['from', 'array', 'import', '*', 'num_list', '=', '[', '1', ',', '2', ',', '6', ',', '-', '8', ']', 'array_num', '=', 'array', '(', ""'i'"", ',', '[', ']', ')', 'print', '(', '""Items in the list: ""', '+', 'str', '(', 'num_list', ')', ')', 'print', '(', '""Append items from the list: ""', ')', 'array_num', '.', 'fromlist', '(', 'num_list', ')', 'print', '(', '""Items in the array: ""', '+', 'str', '(', 'array_num', ')', ')']"
216,"['write', 'numpy', 'program', 'create', 'array', 'integer']","['import', 'numpy', 'as', 'np', 'array', '=', 'np', '.', 'arange', '(', '30', ',', '71', ')', 'print', '(', '""Array of the integers from 30 to70""', ')', 'print', '(', 'array', ')']"
217,"['write', 'python', 'function', 'check', 'whether', 'number', 'divisible', 'another', 'number', 'accept', 'two', 'integer', 'value', 'form', 'user']","['def', 'multiple', '(', 'm', ',', 'n', ')', ':', 'return', 'True', 'if', 'm', '%', 'n', '==', '0', 'else', 'False', 'print', '(', 'multiple', '(', '20', ',', '5', ')', ')', 'print', '(', 'multiple', '(', '7', ',', '2', ')', ')']"
218,"['write', 'numpy', 'program', 'generate', 'matrix', 'product', 'two', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', '[', '[', '1', ',', '0', ']', ',', '[', '1', ',', '1', ']', ']', 'y', '=', '[', '[', '3', ',', '1', ']', ',', '[', '2', ',', '2', ']', ']', 'print', '(', '""Matrices and vectors.""', ')', 'print', '(', '""x:""', ')', 'print', '(', 'x', ')', 'print', '(', '""y:""', ')', 'print', '(', 'y', ')', 'print', '(', '""Matrix product of above two arrays:""', ')', 'print', '(', 'np', '.', 'matmul', '(', 'x', ',', 'y', ')', ')']"
219,"['write', 'numpy', 'program', 'find', 'element', 'within', 'range', 'given', 'array', 'number']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '1', ',', '3', ',', '7', ',', '9', ',', '10', ',', '13', ',', '14', ',', '17', ',', '29', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'a', ')', 'result', '=', 'np', '.', 'where', '(', 'np', '.', 'logical_and', '(', 'a', '>=', '7', ',', 'a', '<=', '20', ')', ')', 'print', '(', '""\\nElements within range: index position""', ')', 'print', '(', 'result', ')']"
220,"['write', 'panda', 'program', 'find', 'year', 'nonzero', 'value', 'year', 'nonzero', 'value', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nFind which years have all non-zero values:""', ')', 'print', '(', 'w_a_con', '.', 'loc', '[', ':', ',', 'w_a_con', '.', 'all', '(', ')', ']', ')', 'print', '(', '""\\nFind which years have any non-zero values:""', ')', 'print', '(', 'w_a_con', '.', 'loc', '[', ':', ',', 'w_a_con', '.', 'any', '(', ')', ']', ')']"
221,"['write', 'panda', 'program', 'generate', 'sequence', 'fixedfrequency', 'date', 'time', 'span', 'interval']","['import', 'pandas', 'as', 'pd', 'print', '(', '""Sequences of fixed-frequency dates and time spans (1 H):\\n""', ')', 'r1', '=', 'pd', '.', 'date_range', '(', ""'2030-01-01'"", ',', 'periods', '=', '10', ',', 'freq', '=', ""'H'"", ')', 'print', '(', 'r1', ')', 'print', '(', '""\\nSequences of fixed-frequency dates and time spans (3 H):\\n""', ')', 'r2', '=', 'pd', '.', 'date_range', '(', ""'2030-01-01'"", ',', 'periods', '=', '10', ',', 'freq', '=', ""'3H'"", ')', 'print', '(', 'r2', ')']"
222,"['write', 'python', 'program', 'display', 'number', 'comma', 'separator']","['x', '=', '3000000', 'y', '=', '30000000', 'print', '(', '""\\nOriginal Number: ""', ',', 'x', ')', 'print', '(', '""Formatted Number with comma separator: ""', '+', '""{:,}""', '.', 'format', '(', 'x', ')', ')', ';', 'print', '(', '""Original Number: ""', ',', 'y', ')', 'print', '(', '""Formatted Number with comma separator: ""', '+', '""{:,}""', '.', 'format', '(', 'y', ')', ')', ';', 'print', '(', ')']"
223,"['write', 'numpy', 'program', 'convert', 'given', 'list', 'array', 'convert', 'list', 'check', 'initial', 'list', 'final', 'list', 'equal']","['import', 'numpy', 'as', 'np', 'a', '=', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', 'x', '=', 'np', '.', 'array', '(', 'a', ')', 'a2', '=', 'x', '.', 'tolist', '(', ')', 'print', '(', 'a', '==', 'a2', ')']"
224,"['write', 'python', 'program', 'reverse', 'string']","['def', 'string_reverse', '(', 'str1', ')', ':', 'rstr1', '=', ""''"", 'index', '=', 'len', '(', 'str1', ')', 'while', 'index', '>', '0', ':', 'rstr1', '+=', 'str1', '[', 'index', '-', '1', ']', 'index', '=', 'index', '-', '1', 'return', 'rstr1', 'print', '(', 'string_reverse', '(', ""'1234abcd'"", ')', ')']"
225,"['write', 'panda', 'program', 'find', 'integer', 'index', 'row', 'missing', 'data', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_of_birth'"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'weight'"", ':', '[', '35', ',', 'None', ',', '33', ',', '30', ',', '31', ',', 'None', ']', '}', ',', 'index', '=', '[', ""'t1'"", ',', ""'t2'"", ',', ""'t3'"", ',', ""'t4'"", ',', ""'t5'"", ',', ""'t6'"", ']', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'index', '=', 'df', '[', ""'weight'"", ']', '.', 'index', '[', 'df', '[', ""'weight'"", ']', '.', 'apply', '(', 'np', '.', 'isnan', ')', ']', 'df_index', '=', 'df', '.', 'index', '.', 'values', '.', 'tolist', '(', ')', 'print', '(', '""\\nInteger index of rows with missing data in \'weight\' column of the said dataframe:""', ')', 'print', '(', '[', 'df_index', '.', 'index', '(', 'i', ')', 'for', 'i', 'in', 'index', ']', ')']"
226,"['write', 'python', 'program', 'combine', 'line', 'first', 'file', 'corresponding', 'line', 'second', 'file']","['with', 'open', '(', ""'abc.txt'"", ')', 'as', 'fh1', ',', 'open', '(', ""'test.txt'"", ')', 'as', 'fh2', ':', 'for', 'line1', ',', 'line2', 'in', 'zip', '(', 'fh1', ',', 'fh2', ')', ':', 'print', '(', 'line1', '+', 'line2', ')']"
227,"['write', 'python', 'program', 'pair', 'consecutive', 'element', 'given', 'list']","['def', 'pair_consecutive_elements', '(', 'lst', ')', ':', 'result', '=', '[', '[', 'lst', '[', 'i', ']', ',', 'lst', '[', 'i', '+', '1', ']', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'lst', ')', '-', '1', ')', ']', 'return', 'result', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Pair up the consecutive elements of the said list:""', ')', 'print', '(', 'pair_consecutive_elements', '(', 'nums', ')', ')', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Pair up the consecutive elements of the said list:""', ')', 'print', '(', 'pair_consecutive_elements', '(', 'nums', ')', ')']"
228,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'survival', 'gender', 'class', 'affected']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'df', '.', 'groupby', '(', '[', ""'sex'"", ',', ""'class'"", ']', ')', '[', ""'survived'"", ']', '.', 'aggregate', '(', ""'mean'"", ')', '.', 'unstack', '(', ')', 'print', '(', 'result', ')']"
229,"['write', 'python', 'program', 'find', 'maximum', 'minimum', 'product', 'pair', 'tuple', 'within', 'given', 'list']","['def', 'tuple_max_val', '(', 'nums', ')', ':', 'result_max', '=', 'max', '(', '[', 'abs', '(', 'x', '*', 'y', ')', 'for', 'x', ',', 'y', 'in', 'nums', ']', ')', 'result_min', '=', 'min', '(', '[', 'abs', '(', 'x', '*', 'y', ')', 'for', 'x', ',', 'y', 'in', 'nums', ']', ')', 'return', 'result_max', ',', 'result_min', 'nums', '=', '[', '(', '2', ',', '7', ')', ',', '(', '2', ',', '6', ')', ',', '(', '1', ',', '8', ')', ',', '(', '4', ',', '9', ')', ']', 'print', '(', '""The original list, tuple : ""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nMaximum and minimum product from the pairs of the said tuple of list:""', ')', 'print', '(', 'tuple_max_val', '(', 'nums', ')', ')']"
230,"['write', 'python', 'program', 'interleave', 'multiple', 'list', 'length', 'use', 'itertools', 'module']","['import', 'itertools', 'def', 'interleave_multiple_lists', '(', 'list1', ',', 'list2', ',', 'list3', ')', ':', 'result', '=', 'list', '(', 'itertools', '.', 'chain', '(', '*', 'zip', '(', 'list1', ',', 'list2', ',', 'list3', ')', ')', ')', 'return', 'result', 'list1', '=', '[', '100', ',', '200', ',', '300', ',', '400', ',', '500', ',', '600', ',', '700', ']', 'list2', '=', '[', '10', ',', '20', ',', '30', ',', '40', ',', '50', ',', '60', ',', '70', ']', 'list3', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ']', 'print', '(', '""Original list:""', ')', 'print', '(', '""list1:""', ',', 'list1', ')', 'print', '(', '""list2:""', ',', 'list2', ')', 'print', '(', '""list3:""', ',', 'list3', ')', 'print', '(', '""\\nInterleave multiple lists:""', ')', 'print', '(', 'interleave_multiple_lists', '(', 'list1', ',', 'list2', ',', 'list3', ')', ')']"
231,"['write', 'numpy', 'program', 'extract', 'row', 'unequal', 'value', 'eg', 'matrix']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'random', '.', 'randint', '(', '0', ',', '4', ',', '(', '6', ',', '3', ')', ')', 'print', '(', '""Original vector:""', ')', 'print', '(', 'nums', ')', 'new_nums', '=', 'np', '.', 'logical_and', '.', 'reduce', '(', 'nums', '[', ':', ',', '1', ':', ']', '==', 'nums', '[', ':', ',', ':', '-', '1', ']', ',', 'axis', '=', '1', ')', 'result', '=', 'nums', '[', '~', 'new_nums', ']', 'print', '(', '""\\nRows with unequal values:""', ')', 'print', '(', 'result', ')']"
232,"['write', 'python', 'script', 'take', 'input', 'user', 'display', 'input', 'back', 'upper', 'lower', 'case']","['user_input', '=', 'input', '(', '""What\'s your favourite language? ""', ')', 'print', '(', '""My favourite language is ""', ',', 'user_input', '.', 'upper', '(', ')', ')', 'print', '(', '""My favourite language is ""', ',', 'user_input', '.', 'lower', '(', ')', ')']"
233,"['write', 'python', 'program', 'find', 'sibling', 'tag', 'given', 'html', 'document']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_doc', '=', '""""""\r<html>\r<head>\r<meta http-equiv=""Content-Type"" content=""text/html;\rcharset=iso-8859-1"">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from\rw3resource.com</a></p>\r<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from \rw3resource.com</a></p>\r<a class=""sister"" href=""http://example.com/lacie"" id=""link1"">Lacie</a>\r<a class=""sister"" href=""http://example.com/tillie""  id=""link2"">Tillie</a>\r</body>\r</html>\r""""""', 'soup', '=', 'BeautifulSoup', '(', 'html_doc', ',', '""lxml""', ')', 'print', '(', '""\\nSiblings of tags:""', ')', 'print', '(', 'soup', '.', 'select', '(', '""#link1 ~ .sister""', ')', ')', 'print', '(', 'soup', '.', 'select', '(', '""#link1 + .sister""', ')', ')']"
234,"['write', 'python', 'program', 'extract', 'display', 'image', 'link']","['import', 'requests', 'r', '=', 'requests', '.', 'get', '(', '""https://analytics.usa.gov/data/live/browsers.json""', ')', 'print', '(', '""90 days of visits broken down by browser for all sites:""', ')', 'print', '(', 'r', '.', 'json', '(', ')', '[', ""'totals'"", ']', '[', ""'browser'"", ']', ')']"
235,"['write', 'numpy', 'program', 'add', 'new', 'row', 'empty', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'arr', '=', 'np', '.', 'empty', '(', '(', '0', ',', '3', ')', ',', 'int', ')', 'print', '(', '""Empty array:""', ')', 'print', '(', 'arr', ')', 'arr', '=', 'np', '.', 'append', '(', 'arr', ',', 'np', '.', 'array', '(', '[', '[', '10', ',', '20', ',', '30', ']', ']', ')', ',', 'axis', '=', '0', ')', 'arr', '=', 'np', '.', 'append', '(', 'arr', ',', 'np', '.', 'array', '(', '[', '[', '40', ',', '50', ',', '60', ']', ']', ')', ',', 'axis', '=', '0', ')', 'print', '(', '""After adding two new arrays:""', ')', 'print', '(', 'arr', ')']"
236,"['write', 'python', 'program', 'find', 'href', 'first', 'tag', 'given', 'html', 'document']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_doc', '=', '""""""\r<html>\r<head>\r<meta http-equiv=""Content-Type"" content=""text/html;\rcharset=iso-8859-1"">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from w3resource.com</a></p>\r<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from \rw3resource.com</a></p>\r</body>\r</html>\r""""""', 'soup', '=', 'BeautifulSoup', '(', 'html_doc', ',', ""'html.parser'"", ')', 'print', '(', '""href of the first <a> tag:""', ')', 'print', '(', 'soup', '.', 'find', '(', ""'a'"", ')', '.', 'attrs', '[', ""'href'"", ']', ')']"
237,"['write', 'python', 'program', 'convert', 'integer', 'binary', 'keep', 'leading', 'zero']","['x', '=', '12', 'print', '(', 'format', '(', 'x', ',', ""'08b'"", ')', ')', 'print', '(', 'format', '(', 'x', ',', ""'010b'"", ')', ')']"
238,"['write', 'python', 'program', 'reverse', 'string', 'given', 'list', 'string', 'value', 'using', 'lambda']","['def', 'reverse_strings_list', '(', 'string_list', ')', ':', 'result', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', '""""', '.', 'join', '(', 'reversed', '(', 'x', ')', ')', ',', 'string_list', ')', ')', 'return', 'result', 'colors_list', '=', '[', '""Red""', ',', '""Green""', ',', '""Blue""', ',', '""White""', ',', '""Black""', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'colors_list', ')', 'print', '(', '""\\nReverse strings of the said given list:""', ')', 'print', '(', 'reverse_strings_list', '(', 'colors_list', ')', ')']"
239,"['write', 'numpy', 'program', 'count', 'frequency', 'unique', 'value', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '10', ',', '10', ',', '20', ',', '10', ',', '20', ',', '20', ',', '20', ',', '30', ',', '30', ',', '50', ',', '40', ',', '40', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'a', ')', 'unique_elements', ',', 'counts_elements', '=', 'np', '.', 'unique', '(', 'a', ',', 'return_counts', '=', 'True', ')', 'print', '(', '""Frequency of unique values of the said array:""', ')', 'print', '(', 'np', '.', 'asarray', '(', '(', 'unique_elements', ',', 'counts_elements', ')', ')', ')']"
240,"['write', 'numpy', 'program', 'calculate', 'difference', 'neighboring', 'element', 'elementwise', 'prepend', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '3', ',', '5', ',', '7', ',', '0', ']', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'r1', '=', 'np', '.', 'ediff1d', '(', 'x', ',', 'to_begin', '=', '[', '0', ',', '0', ']', ',', 'to_end', '=', '[', '200', ']', ')', 'r2', '=', 'np', '.', 'insert', '(', 'np', '.', 'append', '(', 'np', '.', 'diff', '(', 'x', ')', ',', '200', ')', ',', '0', ',', '[', '0', ',', '0', ']', ')', 'assert', 'np', '.', 'array_equiv', '(', 'r1', ',', 'r2', ')', 'print', '(', '""Difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to the said array:""', ')', 'print', '(', 'r2', ')']"
241,"['write', 'python', 'program', 'calculate', 'area', 'sector']","['def', 'sectorarea', '(', ')', ':', 'pi', '=', '22', '/', '7', 'radius', '=', 'float', '(', 'input', '(', ""'Radius of Circle: '"", ')', ')', 'angle', '=', 'float', '(', 'input', '(', ""'angle measure: '"", ')', ')', 'if', 'angle', '>=', '360', ':', 'print', '(', '""Angle is not possible""', ')', 'return', 'sur_area', '=', '(', 'pi', '*', 'radius', '**', '2', ')', '*', '(', 'angle', '/', '360', ')', 'print', '(', '""Sector Area: ""', ',', 'sur_area', ')', 'sectorarea', '(', ')']"
242,"['write', 'numpy', 'program', 'print', 'full', 'numpy', 'array', 'without', 'truncation']","['import', 'numpy', 'as', 'np', 'import', 'sys', 'nums', '=', 'np', '.', 'arange', '(', '2000', ')', 'np', '.', 'set_printoptions', '(', 'threshold', '=', 'sys', '.', 'maxsize', ')', 'print', '(', 'nums', ')']"
243,"['write', 'python', 'program', 'extract', 'text', 'given', 'web', 'page']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup', 'url', '=', ""'https://www.python.org/'"", 'reqs', '=', 'requests', '.', 'get', '(', 'url', ')', 'soup', '=', 'BeautifulSoup', '(', 'reqs', '.', 'text', ',', ""'lxml'"", ')', 'print', '(', '""Text from the said page:""', ')', 'print', '(', 'soup', '.', 'get_text', '(', ')', ')']"
244,"['write', 'python', 'program', 'convert', 'given', 'dictionary', 'list', 'tuples']","['def', 'test', '(', 'd', ')', ':', 'return', 'list', '(', 'd', '.', 'items', '(', ')', ')', 'd', '=', '{', ""'Red'"", ':', '1', ',', ""'Green'"", ':', '3', ',', ""'White'"", ':', '5', ',', ""'Black'"", ':', '2', ',', ""'Pink'"", ':', '4', '}', 'print', '(', '""Original Dictionary:""', ')', 'print', '(', 'd', ')', 'print', '(', '""\\nConvert the said dictionary to a list of tuples:""', ')', 'print', '(', 'test', '(', 'd', ')', ')']"
245,"['write', 'panda', 'program', 'select', 'row', 'filtering', 'one', 'column', 'multiindex', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_of_birth'"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'weight'"", ':', '[', '35', ',', '37', ',', '33', ',', '30', ',', '31', ',', '32', ']', ',', ""'tcode'"", ':', '[', ""'t1'"", ',', ""'t2'"", ',', ""'t3'"", ',', ""'t4'"", ',', ""'t5'"", ',', ""'t6'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nCreate MultiIndex on \'tcode\' and \'school_code\':""', ')', 'df', '=', 'df', '.', 'set_index', '(', '[', ""'tcode'"", ',', ""'school_code'"", ']', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nSelect rows(s) from \'tcode\' column:""', ')', 'print', '(', 'df', '.', 'query', '(', '""tcode == \'t2\'""', ')', ')', 'print', '(', '""\\nSelect rows(s) from \'school_code\' column:""', ')', 'print', '(', 'df', '.', 'query', '(', '""school_code == \'s001\'""', ')', ')', 'print', '(', '""\\nSelect rows(s) from \'tcode\' and \'scode\' columns:""', ')', 'print', '(', 'df', '.', 'query', '(', '(', '""tcode == \'t1\'""', ')', 'and', '(', '""school_code == \'s001\'""', ')', ')', ')']"
246,"['write', 'python', 'program', 'find', 'smallest', 'largest', 'word', 'given', 'string']","['def', 'smallest_largest_words', '(', 'str1', ')', ':', 'word', '=', '""""', ';', 'all_words', '=', '[', ']', ';', 'str1', '=', 'str1', '+', '"" ""', ';', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'str1', ')', ')', ':', 'if', '(', 'str1', '[', 'i', ']', '!=', ""' '"", ')', ':', 'word', '=', 'word', '+', 'str1', '[', 'i', ']', ';', 'else', ':', 'all_words', '.', 'append', '(', 'word', ')', ';', 'word', '=', '""""', ';', 'small', '=', 'large', '=', 'all_words', '[', '0', ']', ';', 'for', 'k', 'in', 'range', '(', '0', ',', 'len', '(', 'all_words', ')', ')', ':', 'if', '(', 'len', '(', 'small', ')', '>', 'len', '(', 'all_words', '[', 'k', ']', ')', ')', ':', 'small', '=', 'all_words', '[', 'k', ']', ';', 'if', '(', 'len', '(', 'large', ')', '<', 'len', '(', 'all_words', '[', 'k', ']', ')', ')', ':', 'large', '=', 'all_words', '[', 'k', ']', ';', 'return', 'small', ',', 'large', ';', 'str1', '=', '""Write a Java program to sort an array of given integers using Quick sort Algorithm.""', ';', 'print', '(', '""Original Strings:\\n""', ',', 'str1', ')', 'small', ',', 'large', '=', 'smallest_largest_words', '(', 'str1', ')', 'print', '(', '""Smallest word: ""', '+', 'small', ')', ';', 'print', '(', '""Largest word: ""', '+', 'large', ')', ';']"
247,"['write', 'python', 'program', 'find', 'length', 'given', 'dictionary', 'value']","['def', 'test', '(', 'dictt', ')', ':', 'result', '=', '{', '}', 'for', 'val', 'in', 'dictt', '.', 'values', '(', ')', ':', 'result', '[', 'val', ']', '=', 'len', '(', 'val', ')', 'return', 'result', 'color_dict', '=', '{', '1', ':', ""'red'"", ',', '2', ':', ""'green'"", ',', '3', ':', ""'black'"", ',', '4', ':', ""'white'"", ',', '5', ':', ""'black'"", '}', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'color_dict', ')', 'print', '(', '""Length of dictionary values:""', ')', 'print', '(', 'test', '(', 'color_dict', ')', ')', 'color_dict', '=', '{', ""'1'"", ':', ""'Austin Little'"", ',', ""'2'"", ':', ""'Natasha Howard'"", ',', ""'3'"", ':', ""'Alfred Mullins'"", ',', ""'4'"", ':', ""'Jamie Rowe'"", '}', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'color_dict', ')', 'print', '(', '""Length of dictionary values:""', ')', 'print', '(', 'test', '(', 'color_dict', ')', ')']"
248,"['write', 'python', 'program', 'extract', 'year', 'month', 'date', 'value', 'current', 'datetime', 'using', 'arrow', 'module']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Year:""', ')', 'print', '(', 'a', '.', 'year', ')', 'print', '(', '""\\nMonth:""', ')', 'print', '(', 'a', '.', 'month', ')', 'print', '(', '""\\nDate:""', ')', 'print', '(', 'a', '.', 'day', ')']"
249,"['write', 'panda', 'program', 'extract', 'word', 'starting', 'capital', 'word', 'given', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF'"", ',', ""'zefsalf'"", ',', ""'sdfslew'"", ',', ""'zekfsdf'"", ']', ',', ""'date_of_sale'"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'05/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'address'"", ':', '[', ""'9910 Surrey Avenue'"", ',', ""'92 N. Bishop Avenue'"", ',', ""'9910 Golden Star Avenue'"", ',', ""'102 Dunbar St.'"", ',', ""'17 West Livingston Court'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'find_capital_word', '(', 'str1', ')', ':', 'result', '=', 're', '.', 'findall', '(', ""r'\\b[A-Z]\\w+'"", ',', 'str1', ')', 'return', 'result', 'df', '[', ""'caps_word_in'"", ']', '=', 'df', '[', ""'address'"", ']', '.', 'apply', '(', 'lambda', 'cw', ':', 'find_capital_word', '(', 'cw', ')', ')', 'print', '(', '""\\nExtract words starting with capital words from the sentences\':""', ')', 'print', '(', 'df', ')']"
250,"['write', 'python', 'program', 'join', 'one', 'path', 'component', 'together', 'split', 'given', 'path', 'directory', 'file']","['import', 'os', 'path', '=', ""r'g:\\\\testpath\\\\a.txt'"", 'print', '(', '""Original path:""', ')', 'print', '(', 'path', ')', 'print', '(', '""\\nDir and file name of the said path:""', ')', 'print', '(', 'os', '.', 'path', '.', 'split', '(', 'path', ')', ')', 'print', '(', '""\\nJoin one or more path components together:""', ')', 'print', '(', 'os', '.', 'path', '.', 'join', '(', ""r'g:\\\\testpath\\\\'"", ',', ""'a.txt'"", ')', ')']"
251,"['write', 'python', 'program', 'randomize', 'order', 'value', 'list', 'returning', 'new', 'list']","['from', 'copy', 'import', 'deepcopy', 'from', 'random', 'import', 'randint', 'def', 'shuffle_list', '(', 'lst', ')', ':', 'temp_lst', '=', 'deepcopy', '(', 'lst', ')', 'm', '=', 'len', '(', 'temp_lst', ')', 'while', '(', 'm', ')', ':', 'm', '-=', '1', 'i', '=', 'randint', '(', '0', ',', 'm', ')', 'temp_lst', '[', 'm', ']', ',', 'temp_lst', '[', 'i', ']', '=', 'temp_lst', '[', 'i', ']', ',', 'temp_lst', '[', 'm', ']', 'return', 'temp_lst', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', 'print', '(', '""Original list: ""', ',', 'nums', ')', 'print', '(', '""\\nShuffle the elements of the said list:""', ')', 'print', '(', 'shuffle_list', '(', 'nums', ')', ')']"
252,"['write', 'python', 'program', 'count', 'pair', 'three', 'given', 'list']","['def', 'count_same_pair', '(', 'nums1', ',', 'nums2', ',', 'nums3', ')', ':', 'result', '=', 'sum', '(', 'm', '==', 'n', '==', 'o', 'for', 'm', ',', 'n', ',', 'o', 'in', 'zip', '(', 'nums1', ',', 'nums2', ',', 'nums3', ')', ')', 'return', 'result', 'nums1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', 'nums2', '=', '[', '2', ',', '2', ',', '3', ',', '1', ',', '2', ',', '6', ',', '7', ',', '9', ']', 'nums3', '=', '[', '2', ',', '1', ',', '3', ',', '1', ',', '2', ',', '6', ',', '7', ',', '9', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', 'nums3', ')', 'print', '(', '""\\nNumber of same pair of the said three given lists:""', ')', 'print', '(', 'count_same_pair', '(', 'nums1', ',', 'nums2', ',', 'nums3', ')', ')']"
253,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'multiple', 'index', 'data', 'set', 'titaniccsv']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'pd', '.', 'pivot_table', '(', 'df', ',', 'index', '=', '[', '""sex""', ',', '""age""', ']', ',', 'aggfunc', '=', 'np', '.', 'sum', ')', 'print', '(', 'result', ')']"
254,"['write', 'python', 'program', 'get', 'volume', 'sphere', 'radius']",[]
255,"['write', 'python', 'program', 'traverse', 'given', 'list', 'reverse', 'order', 'also', 'print', 'element', 'original', 'index']","['color', '=', '[', '""red""', ',', '""green""', ',', '""white""', ',', '""black""', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'color', ')', 'print', '(', '""\\nTraverse the said list in reverse order:""', ')', 'for', 'i', 'in', 'reversed', '(', 'color', ')', ':', 'print', '(', 'i', ')', 'print', '(', '""\\nTraverse the said list in reverse order with original index:""', ')', 'for', 'i', ',', 'el', 'in', 'reversed', '(', 'list', '(', 'enumerate', '(', 'color', ')', ')', ')', ':', 'print', '(', 'i', ',', 'el', ')']"
256,"['write', 'numpy', 'program', 'create', 'array', 'zero', 'three', 'column', 'type', 'integer', 'float', 'character']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'zeros', '(', '(', '3', ',', ')', ',', 'dtype', '=', '(', ""'i4,f4,a40'"", ')', ')', 'new_data', '=', '[', '(', '1', ',', '2.', ',', '""Albert Einstein""', ')', ',', '(', '2', ',', '2.', ',', '""Edmond Halley""', ')', ',', '(', '3', ',', '3.', ',', '""Gertrude B. Elion""', ')', ']', 'x', '[', ':', ']', '=', 'new_data', 'print', '(', 'x', ')']"
257,"['write', 'numpy', 'program', 'stack', 'array', 'row', 'wise']","['import', 'numpy', 'as', 'np', 'print', '(', '""\\nOriginal arrays:""', ')', 'x', '=', 'np', '.', 'array', '(', '(', '1', ',', '2', ',', '3', ')', ')', 'y', '=', 'np', '.', 'array', '(', '(', '2', ',', '3', ',', '4', ')', ')', 'print', '(', '""Array-1""', ')', 'print', '(', 'x', ')', 'print', '(', '""Array-2""', ')', 'print', '(', 'y', ')', 'new_array', '=', 'np', '.', 'row_stack', '(', '(', 'x', ',', 'y', ')', ')', 'print', '(', '""\\nStack 1-D arrays as rows wise:""', ')', 'print', '(', 'new_array', ')']"
258,"['write', 'panda', 'program', 'add', 'day', 'reporting', 'date', 'unidentified', 'flying', 'object', 'ufo']","['import', 'pandas', 'as', 'pd', 'from', 'datetime', 'import', 'timedelta', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'print', '(', '""Original Dataframe:""', ')', 'print', '(', 'df', '.', 'head', '(', ')', ')', 'print', '(', '""\\nAdd 100 days with reporting date:""', ')', 'df', '[', ""'New_doc_dt'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '+', 'timedelta', '(', 'days', '=', '180', ')', 'print', '(', 'df', ')']"
259,"['write', 'numpy', 'program', 'compute', 'numerical', 'negative', 'value', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '0', ',', '1', ',', '-', '1', ']', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'r1', '=', 'np', '.', 'negative', '(', 'x', ')', 'r2', '=', '-', 'x', 'assert', 'np', '.', 'array_equal', '(', 'r1', ',', 'r2', ')', 'print', '(', '""Numerical negative value for all elements of the said array:""', ')', 'print', '(', 'r1', ')']"
260,"['write', 'python', 'program', 'sort', 'sublist', 'string', 'given', 'list', 'list', 'using', 'lambda']","['def', 'sort_sublists', '(', 'input_list', ')', ':', 'result', '=', '[', 'sorted', '(', 'x', ',', 'key', '=', 'lambda', 'x', ':', 'x', '[', '0', ']', ')', 'for', 'x', 'in', 'input_list', ']', 'return', 'result', 'color1', '=', '[', '[', '""green""', ',', '""orange""', ']', ',', '[', '""black""', ',', '""white""', ']', ',', '[', '""white""', ',', '""black""', ',', '""orange""', ']', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'color1', ')', 'print', '(', '""\\nAfter sorting each sublist of the said list of lists:""', ')', 'print', '(', 'sort_sublists', '(', 'color1', ')', ')']"
261,"['write', 'python', 'program', 'generate', 'combination', 'n', 'distinct', 'object', 'taken', 'element', 'given', 'list']","['def', 'combination', '(', 'n', ',', 'n_list', ')', ':', 'if', 'n', '<=', '0', ':', 'yield', '[', ']', 'return', 'for', 'i', 'in', 'range', '(', 'len', '(', 'n_list', ')', ')', ':', 'c_num', '=', 'n_list', '[', 'i', ':', 'i', '+', '1', ']', 'for', 'a_num', 'in', 'combination', '(', 'n', '-', '1', ',', 'n_list', '[', 'i', '+', '1', ':', ']', ')', ':', 'yield', 'c_num', '+', 'a_num', 'n_list', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'n_list', ')', 'n', '=', '2', 'result', '=', 'combination', '(', 'n', ',', 'n_list', ')', 'print', '(', '""\\nCombinations of""', ',', 'n', ',', '""distinct objects:""', ')', 'for', 'e', 'in', 'result', ':', 'print', '(', 'e', ')']"
262,"['write', 'python', 'program', 'find', 'index', 'position', 'maximum', 'minimum', 'value', 'given', 'list', 'number']","['def', 'position_max_min', '(', 'nums', ')', ':', 'max_val', '=', 'max', '(', 'nums', ')', 'min_val', '=', 'min', '(', 'nums', ')', 'max_result', '=', '[', 'i', 'for', 'i', ',', 'j', 'in', 'enumerate', '(', 'nums', ')', 'if', 'j', '==', 'max_val', ']', 'min_result', '=', '[', 'i', 'for', 'i', ',', 'j', 'in', 'enumerate', '(', 'nums', ')', 'if', 'j', '==', 'min_val', ']', 'return', 'max_result', ',', 'min_result', 'nums', '=', '[', '12', ',', '33', ',', '23', ',', '10', ',', '67', ',', '89', ',', '45', ',', '667', ',', '23', ',', '12', ',', '11', ',', '10', ',', '54', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'result', '=', 'position_max_min', '(', 'nums', ')', 'print', '(', '""\\nIndex positions of the maximum value of the said list:""', ')', 'print', '(', 'result', '[', '0', ']', ')', 'print', '(', '""\\nIndex positions of the minimum value of the said list:""', ')', 'print', '(', 'result', '[', '1', ']', ')']"
263,"['write', 'numpy', 'program', 'get', 'power', 'array', 'value', 'elementwise']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '7', ')', 'print', '(', '""Original array""', ')', 'print', '(', 'x', ')', 'print', '(', '""First array elements raised to powers from second array, element-wise:""', ')', 'print', '(', 'np', '.', 'power', '(', 'x', ',', '3', ')', ')']"
264,"['write', 'python', 'program', 'create', 'ctime', 'formatted', 'representation', 'date', 'time', 'using', 'arrow', 'module']","['import', 'arrow', 'print', '(', '""Ctime formatted representation of the date and time:""', ')', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', '.', 'ctime', '(', ')', 'print', '(', 'a', ')']"
265,"['write', 'numpy', 'program', 'create', 'display', 'every', 'element', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '12', ')', '.', 'reshape', '(', '3', ',', '4', ')', 'for', 'x', 'in', 'np', '.', 'nditer', '(', 'x', ')', ':', 'print', '(', 'x', ',', 'end', '=', ""' '"", ')', 'print', '(', ')']"
266,"['write', 'panda', 'program', 'import', 'excel', 'data', 'employeexlsx', 'panda', 'dataframe', 'find', 'list', 'employee']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\employee.xlsx'"", ')', 'df', '[', 'df', '[', ""'hire_date'"", ']', '>=', ""'20070101'"", ']']"
267,"['write', 'numpy', 'program', 'create', 'array', 'border', 'inside']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'ones', '(', '(', '5', ',', '5', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""1 on the border and 0 inside in the array""', ')', 'x', '[', '1', ':', '-', '1', ',', '1', ':', '-', '1', ']', '=', '0', 'print', '(', 'x', ')']"
268,"['write', 'numpy', 'program', 'get', 'n', 'largest', 'value', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '10', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'np', '.', 'random', '.', 'shuffle', '(', 'x', ')', 'n', '=', '1', 'print', '(', 'x', '[', 'np', '.', 'argsort', '(', 'x', ')', '[', '-', 'n', ':', ']', ']', ')']"
269,"['write', 'python', 'program', 'find', 'number', 'within', 'given', 'range', 'every', 'number', 'divisible', 'every', 'digit', 'contains']","['def', 'divisible_by_digits', '(', 'start_num', ',', 'end_num', ')', ':', 'return', '[', 'n', 'for', 'n', 'in', 'range', '(', 'start_num', ',', 'end_num', '+', '1', ')', 'if', 'not', 'any', '(', 'map', '(', 'lambda', 'x', ':', 'int', '(', 'x', ')', '==', '0', 'or', 'n', '%', 'int', '(', 'x', ')', '!=', '0', ',', 'str', '(', 'n', ')', ')', ')', ']', 'print', '(', 'divisible_by_digits', '(', '1', ',', '22', ')', ')']"
270,"['write', 'python', 'program', 'extract', 'tag', 'examplecom']","['from', 'urllib', '.', 'request', 'import', 'urlopen', 'from', 'bs4', 'import', 'BeautifulSoup', 'html', '=', 'urlopen', '(', ""'https://en.wikipedia.org/wiki/Main_Page'"", ')', 'bs', '=', 'BeautifulSoup', '(', 'html', ',', '""html.parser""', ')', 'titles', '=', 'bs', '.', 'find_all', '(', '[', ""'h1'"", ',', ""'h2'"", ',', ""'h3'"", ',', ""'h4'"", ',', ""'h5'"", ',', ""'h6'"", ']', ')', 'print', '(', ""'List all the header tags :'"", ',', '*', 'titles', ',', 'sep', '=', ""'\\n\\n'"", ')']"
271,"['write', 'python', 'program', 'remove', 'specified', 'item', 'using', 'index', 'array']","['from', 'array', 'import', '*', 'array_num', '=', 'array', '(', ""'i'"", ',', '[', '1', ',', '3', ',', '5', ',', '7', ',', '9', ']', ')', 'print', '(', '""Original array: ""', '+', 'str', '(', 'array_num', ')', ')', 'print', '(', '""Remove the third item form the array:""', ')', 'array_num', '.', 'pop', '(', '2', ')', 'print', '(', '""New array: ""', '+', 'str', '(', 'array_num', ')', ')']"
272,"['write', 'python', 'program', 'sort', 'given', 'list', 'list', 'length', 'value', 'using', 'lambda']","['def', 'sort_sublists', '(', 'input_list', ')', ':', 'result', '=', 'sorted', '(', 'input_list', ',', 'key', '=', 'lambda', 'l', ':', '(', 'len', '(', 'l', ')', ',', 'l', ')', ')', 'return', 'result', 'list1', '=', '[', '[', '2', ']', ',', '[', '0', ']', ',', '[', '1', ',', '3', ']', ',', '[', '0', ',', '7', ']', ',', '[', '9', ',', '11', ']', ',', '[', '13', ',', '15', ',', '17', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""\\nSort the list of lists by length and value:""', ')', 'print', '(', 'sort_sublists', '(', 'list1', ')', ')']"
273,"['write', 'python', 'program', 'find', 'index', 'position', 'largest', 'value', 'smaller', 'given', 'number', 'sorted', 'list', 'using', 'binary', 'search', 'bisect']","['from', 'bisect', 'import', 'bisect_left', 'def', 'Binary_Search', '(', 'l', ',', 'x', ')', ':', 'i', '=', 'bisect_left', '(', 'l', ',', 'x', ')', 'if', 'i', ':', 'return', '(', 'i', '-', '1', ')', 'else', ':', 'return', '-', '1', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '8', ',', '8', ',', '10', ',', '12', ']', 'x', '=', '5', 'num_position', '=', 'Binary_Search', '(', 'nums', ',', 'x', ')', 'if', 'num_position', '==', '-', '1', ':', 'print', '(', '""Not found..!""', ')', 'else', ':', 'print', '(', '""Largest value smaller than ""', ',', 'x', ',', '"" is at index ""', ',', 'num_position', ')']"
274,"['write', 'numpy', 'program', 'get', 'copy', 'matrix', 'element', 'kth', 'diagonal', 'zeroed']","['import', 'numpy', 'as', 'np', 'result', '=', 'np', '.', 'triu', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ',', '6', ']', ',', '[', '7', ',', '8', ',', '9', ']', ',', '[', '10', ',', '11', ',', '12', ']', ']', ',', '-', '1', ')', 'print', '(', '""\\nCopy of a matrix with the elements below the k-th diagonal zeroed:""', ')', 'print', '(', 'result', ')']"
275,"['write', 'python', 'program', 'iterates', 'integer', 'multiple', 'three', 'print', 'fizz', 'instead', 'number', 'multiple', 'five', 'print', 'buzz', 'number', 'multiple', 'three', 'five', 'print', 'fizzbuzz']","['for', 'fizzbuzz', 'in', 'range', '(', '51', ')', ':', 'if', 'fizzbuzz', '%', '3', '==', '0', 'and', 'fizzbuzz', '%', '5', '==', '0', ':', 'print', '(', '""fizzbuzz""', ')', 'continue', 'elif', 'fizzbuzz', '%', '3', '==', '0', ':', 'print', '(', '""fizz""', ')', 'continue', 'elif', 'fizzbuzz', '%', '5', '==', '0', ':', 'print', '(', '""buzz""', ')', 'continue', 'print', '(', 'fizzbuzz', ')']"
276,"['write', 'python', 'program', 'get', 'list', 'n', 'element', 'removed', 'left', 'right']","['def', 'drop_left_right', '(', 'a', ',', 'n', '=', '1', ')', ':', 'return', 'a', '[', 'n', ':', ']', ',', 'a', '[', ':', '-', 'n', ']', 'nums', '=', '[', '1', ',', '2', ',', '3', ']', 'print', '(', '""Original list elements:""', ')', 'print', '(', 'nums', ')', 'result', '=', 'drop_left_right', '(', 'nums', ')', 'print', '(', '""Remove 1 element from left of the said list:""', ')', 'print', '(', 'result', '[', '0', ']', ')', 'print', '(', '""Remove 1 element from right of the said list:""', ')', 'print', '(', 'result', '[', '1', ']', ')', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums', ')', 'result', '=', 'drop_left_right', '(', 'nums', ',', '2', ')', 'print', '(', '""Remove 2 elements from left of the said list:""', ')', 'print', '(', 'result', '[', '0', ']', ')', 'print', '(', '""Remove 2 elements from right of the said list:""', ')', 'print', '(', 'result', '[', '1', ']', ')', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums', ')', 'result', '=', 'drop_left_right', '(', 'nums', ')', 'print', '(', '""Remove 7 elements from left of the said list:""', ')', 'print', '(', 'result', '[', '0', ']', ')', 'print', '(', '""Remove 7 elements from right of the said list:""', ')', 'print', '(', 'result', '[', '1', ']', ')']"
277,"['write', 'python', 'program', 'list', 'table', 'given', 'sqlite', 'database', 'file']","['import', 'sqlite3', 'from', 'sqlite3', 'import', 'Error', 'def', 'sql_connection', '(', ')', ':', 'try', ':', 'conn', '=', 'sqlite3', '.', 'connect', '(', ""'mydatabase.db'"", ')', 'return', 'conn', 'except', 'Error', ':', 'print', '(', 'Error', ')', 'def', 'sql_table', '(', 'conn', ')', ':', 'cursorObj', '=', 'conn', '.', 'cursor', '(', ')', 'cursorObj', '.', 'execute', '(', '""CREATE TABLE agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);""', ')', 'cursorObj', '.', 'execute', '(', '""CREATE TABLE temp_agent_master(agent_code char(6),agent_name char(40),working_area char(35),commission decimal(10,2),phone_no char(15) NULL);""', ')', 'print', '(', '""List of tables:""', ')', 'cursorObj', '.', 'execute', '(', '""SELECT name FROM sqlite_master WHERE type=\'table\';""', ')', 'print', '(', 'cursorObj', '.', 'fetchall', '(', ')', ')', 'conn', '.', 'commit', '(', ')', 'sqllite_conn', '=', 'sql_connection', '(', ')', 'sql_table', '(', 'sqllite_conn', ')', 'if', '(', 'sqllite_conn', ')', ':', 'sqllite_conn', '.', 'close', '(', ')', 'print', '(', '""\\nThe SQLite connection is closed.""', ')']"
278,"['write', 'python', 'program', 'split', 'value', 'two', 'group', 'based', 'result', 'given', 'filter', 'list']","['def', 'bifurcate', '(', 'colors', ',', 'filter', ')', ':', 'return', '[', '[', 'x', 'for', 'x', ',', 'flag', 'in', 'zip', '(', 'colors', ',', 'filter', ')', 'if', 'flag', ']', ',', '[', 'x', 'for', 'x', ',', 'flag', 'in', 'zip', '(', 'colors', ',', 'filter', ')', 'if', 'not', 'flag', ']', ']', 'print', '(', 'bifurcate', '(', '[', ""'red'"", ',', ""'green'"", ',', ""'blue'"", ',', ""'pink'"", ']', ',', '[', 'True', ',', 'True', ',', 'False', ',', 'True', ']', ')', ')']"
279,"['write', 'python', 'program', 'store', 'given', 'dictionary', 'json', 'file']","['d', '=', '{', '""students""', ':', '[', '{', '""firstName""', ':', '""Nikki""', ',', '""lastName""', ':', '""Roysden""', '}', ',', '{', '""firstName""', ':', '""Mervin""', ',', '""lastName""', ':', '""Friedland""', '}', ',', '{', '""firstName""', ':', '""Aron ""', ',', '""lastName""', ':', '""Wilkins""', '}', ']', ',', '""teachers""', ':', '[', '{', '""firstName""', ':', '""Amberly""', ',', '""lastName""', ':', '""Calico""', '}', ',', '{', '""firstName""', ':', '""Regine""', ',', '""lastName""', ':', '""Agtarap""', '}', ']', '}', 'print', '(', '""Original dictionary:""', ')', 'print', '(', 'd', ')', 'print', '(', 'type', '(', 'd', ')', ')', 'import', 'json', 'with', 'open', '(', '""dictionary""', ',', '""w""', ')', 'as', 'f', ':', 'json', '.', 'dump', '(', 'd', ',', 'f', ',', 'indent', '=', '4', ',', 'sort_keys', '=', 'True', ')', 'print', '(', '""\\nJson file to dictionary:""', ')', 'with', 'open', '(', ""'dictionary'"", ')', 'as', 'f', ':', 'data', '=', 'json', '.', 'load', '(', 'f', ')', 'print', '(', 'data', ')']"
280,"['write', 'python', 'program', 'add', 'two', 'object', 'object', 'integer', 'type']","['def', 'add_numbers', '(', 'a', ',', 'b', ')', ':', 'if', 'not', '(', 'isinstance', '(', 'a', ',', 'int', ')', 'and', 'isinstance', '(', 'b', ',', 'int', ')', ')', ':', 'return', '""Inputs must be integers!""', 'return', 'a', '+', 'b', 'print', '(', 'add_numbers', '(', '10', ',', '20', ')', ')', 'print', '(', 'add_numbers', '(', '10', ',', '20.23', ')', ')', 'print', '(', 'add_numbers', '(', ""'5'"", ',', '6', ')', ')', 'print', '(', 'add_numbers', '(', ""'5'"", ',', ""'6'"", ')', ')']"
281,"['write', 'python', 'program', 'count', 'number', 'item', 'given', 'doubly', 'linked', 'list']","['class', 'Node', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ',', 'next', '=', 'None', ',', 'prev', '=', 'None', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'next', 'self', '.', 'prev', '=', 'prev', 'class', 'doubly_linked_list', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'tail', '=', 'None', 'self', '.', 'count', '=', '0', 'def', 'append_item', '(', 'self', ',', 'data', ')', ':', 'new_item', '=', 'Node', '(', 'data', ',', 'None', ',', 'None', ')', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_item', 'self', '.', 'tail', '=', 'self', '.', 'head', 'else', ':', 'new_item', '.', 'prev', '=', 'self', '.', 'tail', 'self', '.', 'tail', '.', 'next', '=', 'new_item', 'self', '.', 'tail', '=', 'new_item', 'self', '.', 'count', '+=', '1', 'items', '=', 'doubly_linked_list', '(', ')', 'items', '.', 'append_item', '(', ""'PHP'"", ')', 'items', '.', 'append_item', '(', ""'Python'"", ')', 'items', '.', 'append_item', '(', ""'C#'"", ')', 'items', '.', 'append_item', '(', ""'C++'"", ')', 'items', '.', 'append_item', '(', ""'Java'"", ')', 'items', '.', 'append_item', '(', ""'SQL'"", ')', 'print', '(', '""Number of items of the  Doubly linked list:""', ',', 'items', '.', 'count', ')']"
282,"['write', 'panda', 'program', 'combine', 'column', 'two', 'potentially', 'differentlyindexed', 'dataframes', 'single', 'result', 'dataframe']","['import', 'pandas', 'as', 'pd', 'data1', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', '[', ""'A0'"", ',', ""'A1'"", ',', ""'A2'"", ']', ',', ""'B'"", ':', '[', ""'B0'"", ',', ""'B1'"", ',', ""'B2'"", ']', '}', ',', 'index', '=', '[', ""'K0'"", ',', ""'K1'"", ',', ""'K2'"", ']', ')', 'data2', '=', 'pd', '.', 'DataFrame', '(', '{', ""'C'"", ':', '[', ""'C0'"", ',', ""'C2'"", ',', ""'C3'"", ']', ',', ""'D'"", ':', '[', ""'D0'"", ',', ""'D2'"", ',', ""'D3'"", ']', '}', ',', 'index', '=', '[', ""'K0'"", ',', ""'K2'"", ',', ""'K3'"", ']', ')', 'print', '(', '""Original DataFrames:""', ')', 'print', '(', 'data1', ')', 'print', '(', '""--------------------""', ')', 'print', '(', 'data2', ')', 'print', '(', '""\\nMerged Data (Joining on index):""', ')', 'result', '=', 'data1', '.', 'join', '(', 'data2', ')', 'print', '(', 'result', ')']"
283,"['write', 'python', 'program', 'count', 'number', 'item', 'dictionary', 'value', 'list']","['dict', '=', '{', ""'Alex'"", ':', '[', ""'subj1'"", ',', ""'subj2'"", ',', ""'subj3'"", ']', ',', ""'David'"", ':', '[', ""'subj1'"", ',', ""'subj2'"", ']', '}', 'ctr', '=', 'sum', '(', 'map', '(', 'len', ',', 'dict', '.', 'values', '(', ')', ')', ')', 'print', '(', 'ctr', ')']"
284,"['write', 'python', 'program', 'find', 'element', 'given', 'list', 'string', 'contain', 'specific', 'substring', 'using', 'lambda']","['def', 'find_substring', '(', 'str1', ',', 'sub_str', ')', ':', 'result', '=', 'list', '(', 'filter', '(', 'lambda', 'x', ':', 'sub_str', 'in', 'x', ',', 'str1', ')', ')', 'return', 'result', 'colors', '=', '[', '""red""', ',', '""black""', ',', '""white""', ',', '""green""', ',', '""orange""', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'colors', ')', 'sub_str', '=', '""ack""', 'print', '(', '""\\nSubstring to search:""', ')', 'print', '(', 'sub_str', ')', 'print', '(', '""Elements of the said list that contain specific substring:""', ')', 'print', '(', 'find_substring', '(', 'colors', ',', 'sub_str', ')', ')', 'sub_str', '=', '""abc""', 'print', '(', '""\\nSubstring to search:""', ')', 'print', '(', 'sub_str', ')', 'print', '(', '""Elements of the said list that contain specific substring:""', ')', 'print', '(', 'find_substring', '(', 'colors', ',', 'sub_str', ')', ')']"
285,"['write', 'panda', 'program', 'generate', 'holiday', 'two', 'date', 'using', 'u', 'federal', 'holiday', 'calendar']","['import', 'pandas', 'as', 'pd', 'from', 'pandas', '.', 'tseries', '.', 'holiday', 'import', '*', 'sdt', '=', 'datetime', '(', '2021', ',', '1', ',', '1', ')', 'edt', '=', 'datetime', '(', '2030', ',', '12', ',', '31', ')', 'print', '(', '""Holidays between 2021-01-01 and 2030-12-31 using the US federal holiday calendar.""', ')', 'cal', '=', 'USFederalHolidayCalendar', '(', ')', 'for', 'dt', 'in', 'cal', '.', 'holidays', '(', 'start', '=', 'sdt', ',', 'end', '=', 'edt', ')', ':', 'print', '(', 'dt', ')']"
286,"['write', 'numpy', 'program', 'get', 'diagonal', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'np_array', '=', 'np', '.', 'arange', '(', '3', '*', '4', '*', '5', ')', '.', 'reshape', '(', '3', ',', '4', ',', '5', ')', 'print', '(', '""Original Numpy array:""', ')', 'print', '(', 'np_array', ')', 'print', '(', '""Type: ""', ',', 'type', '(', 'np_array', ')', ')', 'result', '=', 'np', '.', 'diagonal', '(', 'np_array', ',', 'axis1', '=', '1', ',', 'axis2', '=', '2', ')', 'print', '(', '""\\n2D diagonals: ""', ')', 'print', '(', 'result', ')', 'print', '(', '""Type: ""', ',', 'type', '(', 'result', ')', ')']"
287,"['write', 'python', 'program', 'solve', 'fibonacci', 'sequence', 'using', 'recursion']","['def', 'fibonacci', '(', 'n', ')', ':', 'if', 'n', '==', '1', 'or', 'n', '==', '2', ':', 'return', '1', 'else', ':', 'return', '(', 'fibonacci', '(', 'n', '-', '1', ')', '+', '(', 'fibonacci', '(', 'n', '-', '2', ')', ')', ')', 'print', '(', 'fibonacci', '(', '7', ')', ')']"
288,"['write', 'numpy', 'program', 'access', 'array', 'column']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '9', ')', '.', 'reshape', '(', '3', ',', '3', ')', 'print', '(', '""Original array elements:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Access an array by column:""', ')', 'print', '(', '""First column:""', ')', 'print', '(', 'x', '[', ':', ',', '0', ']', ')', 'print', '(', '""Second column:""', ')', 'print', '(', 'x', '[', ':', ',', '1', ']', ')', 'print', '(', '""Third column:""', ')', 'print', '(', 'x', '[', ':', ',', '2', ']', ')']"
289,"['write', 'python', 'program', 'get', 'sum', 'nonnegative', 'integer']","['def', 'sumDigits', '(', 'n', ')', ':', 'if', 'n', '==', '0', ':', 'return', '0', 'else', ':', 'return', 'n', '%', '10', '+', 'sumDigits', '(', 'int', '(', 'n', '/', '10', ')', ')', 'print', '(', 'sumDigits', '(', '345', ')', ')', 'print', '(', 'sumDigits', '(', '45', ')', ')']"
290,"['write', 'numpy', 'program', 'create', 'display', 'every', 'element', 'numpy', 'array', 'fortran', 'order']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '12', ')', '.', 'reshape', '(', '3', ',', '4', ')', 'print', '(', '""Elements of the array in Fortan array:""', ')', 'for', 'x', 'in', 'np', '.', 'nditer', '(', 'x', ',', 'order', '=', '""F""', ')', ':', 'print', '(', 'x', ',', 'end', '=', ""' '"", ')', 'print', '(', '""\\n""', ')']"
291,"['write', 'python', 'program', 'check', 'whether', 'specified', 'list', 'sorted']","['def', 'is_sort_list', '(', 'nums', ')', ':', 'result', '=', 'all', '(', 'nums', '[', 'i', ']', '<=', 'nums', '[', 'i', '+', '1', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'nums', ')', '-', '1', ')', ')', 'return', 'result', 'nums1', '=', '[', '1', ',', '2', ',', '4', ',', '6', ',', '8', ',', '10', ',', '12', ',', '14', ',', '16', ',', '17', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums1', ')', 'print', '(', '""\\nIs the said list is sorted!""', ')', 'print', '(', 'is_sort_list', '(', 'nums1', ')', ')', 'nums2', '=', '[', '2', ',', '3', ',', '8', ',', '4', ',', '7', ',', '9', ',', '8', ',', '2', ',', '6', ',', '5', ',', '1', ',', '6', ',', '1', ',', '2', ',', '3', ',', '4', ',', '6', ',', '9', ',', '1', ',', '2', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums1', ')', 'print', '(', '""\\nIs the said list is sorted!""', ')', 'print', '(', 'is_sort_list', '(', 'nums2', ')', ')']"
292,"['write', 'numpy', 'program', 'create', 'identity', 'matrix']","['import', 'numpy', 'as', 'np', 'array_2D', '=', 'np', '.', 'identity', '(', '3', ')', 'print', '(', ""'3x3 matrix:'"", ')', 'print', '(', 'array_2D', ')']"
293,"['write', 'python', 'program', 'get', 'string', 'representing', 'date', 'controlled', 'explicit', 'format', 'string']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\nString representing the date, controlled by an explicit format string:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'strftime', '(', ""'%d-%m-%Y %H:%M:%S'"", ')', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'strftime', '(', ""'%Y-%m-%d %H:%M:%S'"", ')', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'strftime', '(', ""'%Y-%d-%m %H:%M:%S'"", ')', ')']"
294,"['write', 'python', 'program', 'remove', 'first', 'occurrence', 'specified', 'element', 'array']","['from', 'array', 'import', '*', 'array_num', '=', 'array', '(', ""'i'"", ',', '[', '1', ',', '3', ',', '5', ',', '3', ',', '7', ',', '1', ',', '9', ',', '3', ']', ')', 'print', '(', '""Original array: ""', '+', 'str', '(', 'array_num', ')', ')', 'print', '(', '""Remove the first occurrence of 3 from the said array:""', ')', 'array_num', '.', 'remove', '(', '3', ')', 'print', '(', '""New array: ""', '+', 'str', '(', 'array_num', ')', ')']"
295,"['write', 'panda', 'program', 'extract', 'word', 'mention', 'someone', 'tweet', 'using', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', '10', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'tweets'"", ':', '[', ""'@Obama says goodbye'"", ',', ""'Retweets for @cash'"", ',', ""'A political endorsement in @Indonesia'"", ',', ""'1 dog = many #retweets'"", ',', ""'Just a simple #egg'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'find_at_word', '(', 'text', ')', ':', 'word', '=', 're', '.', 'findall', '(', ""r'(?<[email\xa0protected])\\w+'"", ',', 'text', ')', 'return', '"" ""', '.', 'join', '(', 'word', ')', 'df', '[', ""'at_word'"", ']', '=', 'df', '[', ""'tweets'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'find_at_word', '(', 'x', ')', ')', 'print', '(', '""\\Extracting @word from dataframe columns:""', ')', 'print', '(', 'df', ')']"
296,"['write', 'python', 'program', 'calculate', 'sum', 'positive', 'negative', 'number', 'given', 'list', 'number', 'using', 'lambda', 'function']","['nums', '=', '[', '2', ',', '4', ',', '-', '6', ',', '-', '9', ',', '11', ',', '-', '12', ',', '14', ',', '-', '5', ',', '17', ']', 'print', '(', '""Original list:""', ',', 'nums', ')', 'total_negative_nums', '=', 'list', '(', 'filter', '(', 'lambda', 'nums', ':', 'nums', '<', '0', ',', 'nums', ')', ')', 'total_positive_nums', '=', 'list', '(', 'filter', '(', 'lambda', 'nums', ':', 'nums', '>', '0', ',', 'nums', ')', ')', 'print', '(', '""Sum of the positive numbers: ""', ',', 'sum', '(', 'total_negative_nums', ')', ')', 'print', '(', '""Sum of the negative numbers: ""', ',', 'sum', '(', 'total_positive_nums', ')', ')']"
297,"['write', 'panda', 'program', 'split', 'following', 'dataframe', 'group', 'group', 'month', 'year', 'based', 'order', 'date', 'find', 'total', 'purchase', 'amount', 'year', 'wise', 'month', 'wise']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', '70009', ',', '70002', ',', '70004', ',', '70007', ',', '70005', ',', '70008', ',', '70010', ',', '70003', ',', '70012', ',', '70011', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'05-10-2012'"", ',', ""'09-10-2012'"", ',', ""'05-10-2013'"", ',', ""'08-17-2013'"", ',', ""'10-09-2013'"", ',', ""'07-27-2014'"", ',', ""'10-09-2012'"", ',', ""'10-10-2012'"", ',', ""'10-10-2012'"", ',', ""'06-17-2014'"", ',', ""'07-08-2012'"", ',', ""'04-25-2012'"", ']', ',', ""'customer_id'"", ':', '[', '3001', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3005', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5005', ',', '5001', ',', '5003', ',', '5002', ',', '5001', ',', '5001', ',', '5006', ',', '5003', ',', '5002', ',', '5007', ',', '5001', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'df', '[', ""'ord_date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'ord_date'"", ']', ')', 'print', '(', '""\\nYear wise Month wise purchase amount:""', ')', 'result', '=', 'df', '.', 'groupby', '(', '[', 'df', '[', ""'ord_date'"", ']', '.', 'dt', '.', 'year', ',', 'df', '[', ""'ord_date'"", ']', '.', 'dt', '.', 'month', ']', ')', '.', 'agg', '(', '{', ""'purch_amt'"", ':', 'sum', '}', ')', 'print', '(', 'result', ')']"
298,"['write', 'python', 'code', 'create', 'program', 'bitonic', 'sort']",[]
299,"['write', 'python', 'program', 'get', 'cumulative', 'sum', 'element', 'given', 'list']","['from', 'itertools', 'import', 'accumulate', 'def', 'cumsum', '(', 'lst', ')', ':', 'return', 'list', '(', 'accumulate', '(', 'lst', ')', ')', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ']', 'print', '(', '""Original list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Cumulative sum of the elements of the said list:""', ')', 'print', '(', 'cumsum', '(', 'nums', ')', ')', 'nums', '=', '[', '-', '1', ',', '-', '2', ',', '-', '3', ',', '4', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Cumulative sum of the elements of the said list:""', ')', 'print', '(', 'cumsum', '(', 'nums', ')', ')']"
300,"['write', 'numpy', 'program', 'create', 'array', 'look', 'like', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'tri', '(', '4', ',', '3', ',', '-', '1', ')', 'print', '(', 'x', ')']"
301,"['write', 'python', 'program', 'extract', 'common', 'index', 'element', 'one', 'given', 'list']","['def', 'extract_index_ele', '(', 'l1', ',', 'l2', ',', 'l3', ')', ':', 'result', '=', '[', ']', 'for', 'm', ',', 'n', ',', 'o', 'in', 'zip', '(', 'l1', ',', 'l2', ',', 'l3', ')', ':', 'if', '(', 'm', '==', 'n', '==', 'o', ')', ':', 'result', '.', 'append', '(', 'm', ')', 'return', 'result', 'nums1', '=', '[', '1', ',', '1', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ']', 'nums2', '=', '[', '0', ',', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '7', ']', 'nums3', '=', '[', '0', ',', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '7', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', 'nums3', ')', 'print', '(', '""\\nCommon index elements of the said lists:""', ')', 'print', '(', 'extract_index_ele', '(', 'nums1', ',', 'nums2', ',', 'nums3', ')', ')']"
302,"['write', 'panda', 'program', 'check', 'specified', 'value', 'exists', 'single', 'multiple', 'column', 'index', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_of_birth'"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', '}', ',', 'index', '=', '[', ""'t1'"", ',', ""'t2'"", ',', ""'t3'"", ',', ""'t4'"", ',', ""'t5'"", ',', ""'t6'"", ']', ')', 'print', '(', '""Original DataFrame with single index:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nCheck a value is exist in single column index dataframe:""', ')', 'print', '(', ""'t1'"", 'in', 'df', '.', 'index', ')', 'print', '(', ""'t11'"", 'in', 'df', '.', 'index', ')', 'print', '(', '""\\nCreate MultiIndex using columns \'t_id\', ‘school_code’ and \'class\':""', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_of_birth'"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', ',', ""'t_id'"", ':', '[', ""'t1'"", ',', ""'t2'"", ',', ""'t3'"", ',', ""'t4'"", ',', ""'t5'"", ',', ""'t6'"", ']', '}', ')', 'df1', '=', 'df', '.', 'set_index', '(', '[', ""'t_id'"", ',', ""'school_code'"", ',', ""'class'"", ']', ')', 'print', '(', 'df1', ')', 'print', '(', '""\\nCheck a value is exist in multiple columns index dataframe:""', ')', 'print', '(', ""'t4'"", 'in', 'df1', '.', 'index', '.', 'levels', '[', '0', ']', ')', 'print', '(', ""'t4'"", 'in', 'df1', '.', 'index', '.', 'levels', '[', '1', ']', ')', 'print', '(', ""'t4'"", 'in', 'df1', '.', 'index', '.', 'levels', '[', '2', ']', ')']"
303,"['write', 'python', 'program', 'count', 'element', 'list', 'element', 'tuple']","['num', '=', '[', '10', ',', '20', ',', '30', ',', '(', '10', ',', '20', ')', ',', '40', ']', 'ctr', '=', '0', 'for', 'n', 'in', 'num', ':', 'if', 'isinstance', '(', 'n', ',', 'tuple', ')', ':', 'break', 'ctr', '+=', '1', 'print', '(', 'ctr', ')']"
304,"['write', 'panda', 'program', 'create', 'stacked', 'histogram', 'plot', 'opening', 'closing', 'high', 'low', 'stock', 'price', 'alphabet', 'inc', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-9-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'df2', '=', 'df1', '[', '[', ""'Open'"", ',', ""'Close'"", ',', ""'High'"", ',', ""'Low'"", ']', ']', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '25', ',', '25', ')', ')', 'df2', '.', 'plot', '.', 'hist', '(', 'stacked', '=', 'True', ',', 'bins', '=', '20', ')', 'plt', '.', 'suptitle', '(', ""'Opening/Closing/High/Low stock prices of Alphabet Inc.,\\n From 01-04-2020 to 30-09-2020'"", ',', 'fontsize', '=', '12', ',', 'color', '=', ""'blue'"", ')', 'plt', '.', 'show', '(', ')']"
305,"['write', 'python', 'program', 'add', 'number', 'element', 'given', 'list', 'number']","['def', 'add_val_to_list', '(', 'lst', ',', 'add_val', ')', ':', 'result', '=', 'lst', 'result', '=', '[', 'x', '+', 'add_val', 'for', 'x', 'in', 'result', ']', 'return', 'result', 'nums', '=', '[', '3', ',', '8', ',', '9', ',', '4', ',', '5', ',', '0', ',', '5', ',', '0', ',', '3', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums', ')', 'add_val', '=', '3', 'print', '(', '""\\nAdd""', ',', 'add_val', ',', '""to each element in the said list:""', ')', 'print', '(', 'add_val_to_list', '(', 'nums', ',', 'add_val', ')', ')', 'nums', '=', '[', '3.2', ',', '8', ',', '9.9', ',', '4.2', ',', '5', ',', '0.1', ',', '5', ',', '3.11', ',', '0', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums', ')', 'add_val', '=', '.51', 'print', '(', '""\\nAdd""', ',', 'add_val', ',', '""to each element in the said list:""', ')', 'print', '(', 'add_val_to_list', '(', 'nums', ',', 'add_val', ')', ')']"
306,"['write', 'python', 'program', 'create', 'multidimensional', 'list', 'list', 'list', 'zero']","['nums', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '3', ')', ':', 'nums', '.', 'append', '(', '[', ']', ')', 'for', 'j', 'in', 'range', '(', '2', ')', ':', 'nums', '[', 'i', ']', '.', 'append', '(', '0', ')', 'print', '(', '""Multidimensional list:""', ')', 'print', '(', 'nums', ')']"
307,"['write', 'panda', 'program', 'find', 'position', 'number', 'multiple', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'num_series', '=', 'pd', '.', 'Series', '(', 'np', '.', 'random', '.', 'randint', '(', '1', ',', '10', ',', '9', ')', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'num_series', ')', 'result', '=', 'np', '.', 'argwhere', '(', 'num_series', '%', '5', '==', '0', ')', 'print', '(', '""Positions of numbers that are multiples of 5:""', ')', 'print', '(', 'result', ')']"
308,"['write', 'python', 'program', 'get', 'n', 'nonnegative', 'integer', 'copy', 'first', 'character', 'given', 'string', 'return', 'n', 'copy', 'whole', 'string', 'length', 'le']","['def', 'substring_copy', '(', 'str', ',', 'n', ')', ':', 'flen', '=', '2', 'if', 'flen', '>', 'len', '(', 'str', ')', ':', 'flen', '=', 'len', '(', 'str', ')', 'substr', '=', 'str', '[', ':', 'flen', ']', 'result', '=', '""""', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'result', '=', 'result', '+', 'substr', 'return', 'result', 'print', '(', 'substring_copy', '(', ""'abcdef'"", ',', '2', ')', ')', 'print', '(', 'substring_copy', '(', ""'p'"", ',', '3', ')', ')', ';']"
309,"['write', 'numpy', 'program', 'partition', 'given', 'array', 'specified', 'position', 'move', 'smaller', 'element', 'value', 'left', 'partition', 'remaining', 'value', 'right', 'arbitrary', 'order', 'based', 'random', 'choice']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '70', ',', '50', ',', '20', ',', '30', ',', '-', '11', ',', '60', ',', '50', ',', '40', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nAfter partitioning on 4 the position:""', ')', 'print', '(', 'np', '.', 'partition', '(', 'nums', ',', '4', ')', ')']"
310,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'total', 'sale', 'amount', 'region', 'wise', 'manager', 'wise', 'sale', 'man', 'wise', 'manager', 'douglas']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\SaleData.xlsx'"", ')', 'table', '=', 'pd', '.', 'pivot_table', '(', 'df', ',', 'index', '=', '[', '""Region""', ',', '""Manager""', ',', '""SalesMan""', ']', ',', 'values', '=', '""Sale_amt""', ')', 'print', '(', 'table', '.', 'query', '(', '\'Manager == [""Douglas""]\'', ')', ')']"
311,"['write', 'python', 'program', 'check', 'whether', 'specified', 'list', 'sorted', 'using', 'lambda']","['def', 'is_sort_list', '(', 'nums', ',', 'key', '=', 'lambda', 'x', ':', 'x', ')', ':', 'for', 'i', ',', 'e', 'in', 'enumerate', '(', 'nums', '[', '1', ':', ']', ')', ':', 'if', 'key', '(', 'e', ')', '<', 'key', '(', 'nums', '[', 'i', ']', ')', ':', 'return', 'False', 'return', 'True', 'nums1', '=', '[', '1', ',', '2', ',', '4', ',', '6', ',', '8', ',', '10', ',', '12', ',', '14', ',', '16', ',', '17', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums1', ')', 'print', '(', '""\\nIs the said list is sorted!""', ')', 'print', '(', 'is_sort_list', '(', 'nums1', ')', ')', 'nums2', '=', '[', '2', ',', '3', ',', '8', ',', '4', ',', '7', ',', '9', ',', '8', ',', '2', ',', '6', ',', '5', ',', '1', ',', '6', ',', '1', ',', '2', ',', '3', ',', '4', ',', '6', ',', '9', ',', '1', ',', '2', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums1', ')', 'print', '(', '""\\nIs the said list is sorted!""', ')', 'print', '(', 'is_sort_list', '(', 'nums2', ')', ')']"
312,"['write', 'python', 'program', 'rotate', 'deque', 'object', 'specified', 'number', 'positive', 'time']","['import', 'collections', 'dq_object', '=', 'collections', '.', 'deque', '(', ')', 'dq_object', '.', 'append', '(', '2', ')', 'dq_object', '.', 'append', '(', '4', ')', 'dq_object', '.', 'append', '(', '6', ')', 'dq_object', '.', 'append', '(', '8', ')', 'dq_object', '.', 'append', '(', '10', ')', 'print', '(', '""Deque before rotation:""', ')', 'print', '(', 'dq_object', ')', 'dq_object', '.', 'rotate', '(', ')', 'print', '(', '""\\nDeque after 1 positive rotation:""', ')', 'print', '(', 'dq_object', ')', 'dq_object', '.', 'rotate', '(', '2', ')', 'print', '(', '""\\nDeque after 2 positive rotations:""', ')', 'print', '(', 'dq_object', ')']"
313,"['write', 'python', 'code', 'send', 'request', 'web', 'page', 'stop', 'waiting', 'response', 'given', 'number', 'second', 'event', 'time', 'request', 'raise', 'timeout', 'exception']","['import', 'requests', 'print', '(', '""timeout = 0.001""', ')', 'try', ':', 'r', '=', 'requests', '.', 'get', '(', ""'https://github.com/'"", ',', 'timeout', '=', '0.001', ')', 'print', '(', 'r', '.', 'text', ')', 'except', 'requests', '.', 'exceptions', '.', 'RequestException', 'as', 'e', ':', 'print', '(', 'e', ')', 'print', '(', '""\\ntimeout = 1.0""', ')', 'try', ':', 'r', '=', 'requests', '.', 'get', '(', ""'https://github.com/'"", ',', 'timeout', '=', '1.0', ')', 'print', '(', '""Connected....!""', ')', 'except', 'requests', '.', 'exceptions', '.', 'RequestException', 'as', 'e', ':', 'print', '(', 'e', ')']"
314,"['write', 'python', 'program', 'create', 'doubly', 'linked', 'list', 'print', 'node', 'current', 'position', 'first', 'node']","['class', 'Node', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ',', 'next', '=', 'None', ',', 'prev', '=', 'None', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'next', 'self', '.', 'prev', '=', 'prev', 'class', 'doubly_linked_list', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'tail', '=', 'None', 'self', '.', 'count', '=', '0', 'def', 'append_item', '(', 'self', ',', 'data', ')', ':', 'new_item', '=', 'Node', '(', 'data', ',', 'None', ',', 'None', ')', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_item', 'self', '.', 'tail', '=', 'self', '.', 'head', 'else', ':', 'new_item', '.', 'prev', '=', 'self', '.', 'tail', 'self', '.', 'tail', '.', 'next', '=', 'new_item', 'self', '.', 'tail', '=', 'new_item', 'self', '.', 'count', '+=', '1', 'def', 'print_foward', '(', 'self', ')', ':', 'for', 'node', 'in', 'self', '.', 'iter', '(', ')', ':', 'print', '(', 'node', ')', 'def', 'print_backward', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'tail', 'while', 'current', ':', 'print', '(', 'current', '.', 'data', ')', 'current', '=', 'current', '.', 'prev', 'def', 'iter', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'item_val', '=', 'current', '.', 'data', 'current', '=', 'current', '.', 'next', 'yield', 'item_val', 'items', '=', 'doubly_linked_list', '(', ')', 'items', '.', 'append_item', '(', ""'PHP'"", ')', 'items', '.', 'append_item', '(', ""'Python'"", ')', 'items', '.', 'append_item', '(', ""'C#'"", ')', 'items', '.', 'append_item', '(', ""'C++'"", ')', 'items', '.', 'append_item', '(', ""'Java'"", ')', 'print', '(', '""Print Items in the Doubly linked backwards:""', ')', 'items', '.', 'print_backward', '(', ')']"
315,"['write', 'panda', 'program', 'convert', 'specified', 'character', 'column', 'title', 'case', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF'"", ',', ""'zefsalf'"", ',', ""'sdfslew'"", ',', ""'zekfsdf'"", ']', ',', ""'date_of_sale'"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nTitle cases:""', ')', 'df', '[', ""'company_code_title_cases'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'title', '(', ')', ',', 'df', '[', ""'company_code'"", ']', ')', ')', 'print', '(', 'df', ')']"
316,"['write', 'panda', 'program', 'convert', 'given', 'series', 'dataframe', 'index', 'another', 'column', 'dataframe']","['import', 'numpy', 'as', 'np', 'import', 'pandas', 'as', 'pd', 'char_list', '=', 'list', '(', ""'ABCDEFGHIJKLMNOP'"", ')', 'num_arra', '=', 'np', '.', 'arange', '(', '8', ')', 'num_dict', '=', 'dict', '(', 'zip', '(', 'char_list', ',', 'num_arra', ')', ')', 'num_ser', '=', 'pd', '.', 'Series', '(', 'num_dict', ')', 'df', '=', 'num_ser', '.', 'to_frame', '(', ')', '.', 'reset_index', '(', ')', 'print', '(', 'df', '.', 'head', '(', ')', ')']"
317,"['write', 'numpy', 'program', 'make', 'element', 'given', 'string', 'numeric', 'string', 'digit', 'zero', 'left']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', ""'2'"", ',', ""'11'"", ',', ""'234'"", ',', ""'1234'"", ',', ""'12345'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""\\nOriginal Array:""', ')', 'print', '(', 'x', ')', 'r', '=', 'np', '.', 'char', '.', 'zfill', '(', 'x', ',', '5', ')', 'print', '(', '""\\nNumeric string of 5 digits with zeros:""', ')', 'print', '(', 'r', ')']"
318,"['write', 'python', 'program', 'create', 'list', 'unique', 'value', 'filtered']","['from', 'collections', 'import', 'Counter', 'def', 'filter_unique', '(', 'lst', ')', ':', 'return', '[', 'item', 'for', 'item', ',', 'count', 'in', 'Counter', '(', 'lst', ')', '.', 'items', '(', ')', 'if', 'count', '>', '1', ']', 'print', '(', 'filter_unique', '(', '[', '1', ',', '2', ',', '2', ',', '3', ',', '4', ',', '4', ',', '5', ']', ')', ')']"
319,"['write', 'python', 'program', 'set', 'random', 'seed', 'get', 'random', 'number', 'use', 'randomrandom']","['import', 'random', 'print', '(', '""Set a random seed and get a random number between 0 and 1:""', ')', 'random', '.', 'seed', '(', '0', ')', 'new_random_value', '=', 'random', '.', 'random', '(', ')', 'print', '(', 'new_random_value', ')', 'random', '.', 'seed', '(', '1', ')', 'new_random_value', '=', 'random', '.', 'random', '(', ')', 'print', '(', 'new_random_value', ')', 'random', '.', 'seed', '(', '2', ')', 'new_random_value', '=', 'random', '.', 'random', '(', ')', 'print', '(', 'new_random_value', ')']"
320,"['create', 'array', 'shape', 'tidx', 'array', 'length', 'ie', 'contains', 'j', 'element', 'index', 'denotes', 'element', 'k', 'chosen']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'random', '.', 'randint', '(', '0', ',', '10', ',', '(', '3', ',', '4', ',', '8', ')', ')', 'print', '(', '""Original array and shape:""', ')', 'print', '(', 'a', ')', 'print', '(', 'a', '.', 'shape', ')', 'print', '(', '""--------------------------------""', ')', 'tidx', '=', 'np', '.', 'random', '.', 'randint', '(', '0', ',', '3', ',', '4', ')', 'print', '(', '""tidex: ""', ',', 'tidx', ')', 'print', '(', '""Result:""', ')', 'print', '(', 'a', '[', 'tidx', ',', 'np', '.', 'arange', '(', 'len', '(', 'tidx', ')', ')', ',', ':', ']', ')']"
321,"['write', 'panda', 'program', 'split', 'given', 'dataset', 'group', 'one', 'column', 'apply', 'aggregate', 'function', 'column', 'another', 'aggregate', 'function', 'rest', 'column', 'dataframe']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'salesman_id'"", ':', '[', '5002', ',', '5005', ',', '5001', ',', '5003', ',', '5002', ',', '5001', ',', '5001', ',', '5006', ',', '5003', ',', '5002', ',', '5007', ',', '5001', ']', ',', ""'sale_jan'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '1760', ',', '2983.43', ',', '480.4', ',', '1250.45', ',', '75.29', ',', '1045.6', ']', ',', ""'sale_feb'"", ':', '[', '250.5', ',', '170.65', ',', '15.26', ',', '110.5', ',', '598.5', ',', '1400.6', ',', '2760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_mar'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_apr'"", ':', '[', '150.5', ',', '270.65', ',', '95.26', ',', '210.5', ',', '948.5', ',', '2400.6', ',', '760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_may'"", ':', '[', '130.5', ',', '270.65', ',', '65.26', ',', '310.5', ',', '948.5', ',', '2400.6', ',', '760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_jun'"", ':', '[', '150.5', ',', '270.65', ',', '45.26', ',', '110.5', ',', '948.5', ',', '3400.6', ',', '5760', ',', '983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_jul'"", ':', '[', '950.5', ',', '270.65', ',', '65.26', ',', '210.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_aug'"", ':', '[', '150.5', ',', '70.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_sep'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '200.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_oct'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_nov'"", ':', '[', '150.5', ',', '270.65', ',', '95.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_dec'"", ':', '[', '150.5', ',', '70.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\Result after group on salesman_id and apply different aggregate functions:""', ')', 'df', '=', 'df', '.', 'groupby', '(', ""'salesman_id'"", ')', '.', 'agg', '(', 'lambda', 'x', ':', 'x', '.', 'sum', '(', ')', 'if', 'x', '.', 'name', 'in', '[', ""'sale_jan'"", ',', ""'sale_feb'"", ',', ""'sale_mar'"", ']', 'else', 'x', '.', 'mean', '(', ')', ')', 'print', '(', 'df', ')']"
322,"['write', 'numpy', 'program', 'using', 'numpy', 'sum', 'multiple']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '1', ',', '100', ')', 'n', '=', 'x', '[', '(', 'x', '%', '3', '==', '0', ')', '|', '(', 'x', '%', '5', '==', '0', ')', ']', 'print', '(', 'n', '[', ':', '1000', ']', ')', 'print', '(', 'n', '.', 'sum', '(', ')', ')']"
323,"['write', 'panda', 'program', 'import', 'excel', 'data', 'dataframe', 'find', 'detail', 'labor', 'hour']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\coalpublic2013.xlsx'"", ')', 'df', '[', 'df', '[', '""Labor_Hours""', ']', '>', '20000', ']', '.', 'head', '(', ')']"
324,"['write', 'python', 'program', 'iterate', 'given', 'list', 'cyclically', 'specific', 'index', 'position']","['def', 'cyclically_iteration', '(', 'lst', ',', 'spec_index', ')', ':', 'result', '=', '[', ']', 'length', '=', 'len', '(', 'lst', ')', 'for', 'i', 'in', 'range', '(', 'length', ')', ':', 'element_index', '=', 'spec_index', '%', 'length', 'result', '.', 'append', '(', 'lst', '[', 'element_index', ']', ')', 'spec_index', '+=', '1', 'return', 'result', 'chars', '=', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", ',', ""'e'"", ',', ""'f'"", ',', ""'g'"", ',', ""'h'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'chars', ')', 'spec_index', '=', '3', 'print', '(', '""\\nIterate the said  list cyclically on specific index position""', ',', 'spec_index', ',', '"":""', ')', 'print', '(', 'cyclically_iteration', '(', 'chars', ',', 'spec_index', ')', ')', 'spec_index', '=', '5', 'print', '(', '""\\nIterate the said  list cyclically on specific index position""', ',', 'spec_index', ',', '"":""', ')', 'print', '(', 'cyclically_iteration', '(', 'chars', ',', 'spec_index', ')', ')']"
325,"['write', 'panda', 'program', 'interpolate', 'missing', 'value', 'using', 'linear', 'interpolation', 'method', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', 'np', '.', 'nan', ',', '70002', ',', '70004', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', 'np', '.', 'nan', ',', '65.26', ',', '110.5', ',', '948.5', ',', 'np', '.', 'nan', ',', '5760', ',', '1983.43', ',', 'np', '.', 'nan', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_amt'"", ':', '[', '10.5', ',', '20.65', ',', 'np', '.', 'nan', ',', '11.5', ',', '98.5', ',', 'np', '.', 'nan', ',', '57', ',', '19.43', ',', 'np', '.', 'nan', ',', '25.45', ',', '75.29', ',', '35.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3002', ',', '3001', ',', '3001', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5003', ',', '5001', ',', 'np', '.', 'nan', ',', '5002', ',', '5001', ',', '5001', ',', 'np', '.', 'nan', ',', '5003', ',', '5002', ',', '5003', ',', 'np', '.', 'nan', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nInterpolate the missing values using the Linear Interpolation method (purch_amt):""', ')', 'df', '[', ""'purch_amt'"", ']', '.', 'interpolate', '(', 'method', '=', ""'linear'"", ',', 'direction', '=', ""'forward'"", ',', 'inplace', '=', 'True', ')', 'print', '(', 'df', ')']"
326,"['write', 'python', 'program', 'read', 'random', 'line', 'file']","['import', 'random', 'def', 'random_line', '(', 'fname', ')', ':', 'lines', '=', 'open', '(', 'fname', ')', '.', 'read', '(', ')', '.', 'splitlines', '(', ')', 'return', 'random', '.', 'choice', '(', 'lines', ')', 'print', '(', 'random_line', '(', ""'test.txt'"", ')', ')']"
327,"['write', 'python', 'program', 'print', 'square', 'cube', 'symbol', 'area', 'rectangle', 'volume', 'cylinder']","['area', '=', '1256.66', 'volume', '=', '1254.725', 'decimals', '=', '2', 'print', '(', '""The area of the rectangle is {0:.{1}f}cm\\u00b2""', '.', 'format', '(', 'area', ',', 'decimals', ')', ')', 'decimals', '=', '3', 'print', '(', '""The volume of the cylinder is {0:.{1}f}cm\\u00b3""', '.', 'format', '(', 'volume', ',', 'decimals', ')', ')']"
328,"['write', 'numpy', 'program', 'compare', 'two', 'given', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ']', ')', 'b', '=', 'np', '.', 'array', '(', '[', '4', ',', '5', ']', ')', 'print', '(', '""Array a: ""', ',', 'a', ')', 'print', '(', '""Array b: ""', ',', 'b', ')', 'print', '(', '""a > b""', ')', 'print', '(', 'np', '.', 'greater', '(', 'a', ',', 'b', ')', ')', 'print', '(', '""a >= b""', ')', 'print', '(', 'np', '.', 'greater_equal', '(', 'a', ',', 'b', ')', ')', 'print', '(', '""a < b""', ')', 'print', '(', 'np', '.', 'less', '(', 'a', ',', 'b', ')', ')', 'print', '(', '""a <= b""', ')', 'print', '(', 'np', '.', 'less_equal', '(', 'a', ',', 'b', ')', ')']"
329,"['write', 'panda', 'program', 'split', 'following', 'given', 'dataframe', 'group', 'based', 'school', 'code', 'call', 'specific', 'group', 'name', 'group']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'student_data', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_Of_Birth '"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '12', ',', '12', ',', '13', ',', '13', ',', '14', ',', '12', ']', ',', ""'height'"", ':', '[', '173', ',', '192', ',', '186', ',', '167', ',', '151', ',', '159', ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', ',', ""'address'"", ':', '[', ""'street1'"", ',', ""'street2'"", ',', ""'street3'"", ',', ""'street1'"", ',', ""'street2'"", ',', ""'street4'"", ']', '}', ',', 'index', '=', '[', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ',', ""'S4'"", ',', ""'S5'"", ',', ""'S6'"", ']', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'student_data', ')', 'print', '(', ""'\\nSplit the said data on school_code wise:'"", ')', 'grouped', '=', 'student_data', '.', 'groupby', '(', '[', ""'school_code'"", ']', ')', 'print', '(', '""Call school code \'s001\':""', ')', 'print', '(', 'grouped', '.', 'get_group', '(', ""'s001'"", ')', ')', 'print', '(', '""\\nCall school code \'s004\':""', ')', 'print', '(', 'grouped', '.', 'get_group', '(', ""'s004'"", ')', ')']"
330,"['write', 'python', 'program', 'compute', 'sum', 'digit', 'number', 'given', 'list', 'positive', 'integer']","['from', 'itertools', 'import', 'chain', 'def', 'sum_of_digits', '(', 'nums', ')', ':', 'return', 'sum', '(', 'int', '(', 'y', ')', 'for', 'y', 'in', '(', 'chain', '(', '*', '[', 'str', '(', 'x', ')', 'for', 'x', 'in', 'nums', ']', ')', ')', ')', 'nums', '=', '[', '10', ',', '2', ',', '56', ']', 'print', '(', '""Original tuple: ""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Sum of digits of each number of the said list of integers:""', ')', 'print', '(', 'sum_of_digits', '(', 'nums', ')', ')', 'nums', '=', '[', '10', ',', '20', ',', '4', ',', '5', ',', '70', ']', 'print', '(', '""\\nOriginal tuple: ""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Sum of digits of each number of the said list of integers:""', ')', 'print', '(', 'sum_of_digits', '(', 'nums', ')', ')']"
331,"['write', 'python', 'program', 'ass', 'file', 'closed']","['f', '=', 'open', '(', ""'abc.txt'"", ',', ""'r'"", ')', 'print', '(', 'f', '.', 'closed', ')', 'f', '.', 'close', '(', ')', 'print', '(', 'f', '.', 'closed', ')']"
332,"['write', 'python', 'program', 'interleave', 'two', 'given', 'list', 'another', 'list', 'randomly']","['import', 'random', 'def', 'randomly_interleave', '(', 'nums1', ',', 'nums2', ')', ':', 'result', '=', '[', 'x', '.', 'pop', '(', '0', ')', 'for', 'x', 'in', 'random', '.', 'sample', '(', '[', 'nums1', ']', '*', 'len', '(', 'nums1', ')', '+', '[', 'nums2', ']', '*', 'len', '(', 'nums2', ')', ',', 'len', '(', 'nums1', ')', '+', 'len', '(', 'nums2', ')', ')', ']', 'return', 'result', 'nums1', '=', '[', '1', ',', '2', ',', '7', ',', '8', ',', '3', ',', '7', ']', 'nums2', '=', '[', '4', ',', '3', ',', '8', ',', '9', ',', '4', ',', '3', ',', '8', ',', '9', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nInterleave two given list into another list randomly:""', ')', 'print', '(', 'randomly_interleave', '(', 'nums1', ',', 'nums2', ')', ')']"
333,"['given', 'variable', 'write', 'python', 'program', 'print']","['x', '=', '30', 'y', '=', '20', 'print', '(', '""\\n%d+%d=%d""', '%', '(', 'x', ',', 'y', ',', 'x', '+', 'y', ')', ')', 'print', '(', ')']"
334,"['write', 'python', 'program', 'find', 'character', 'list', 'string', 'occur', 'le', 'given', 'number']","['from', 'collections', 'import', 'Counter', 'from', 'itertools', 'import', 'chain', 'def', 'max_aggregate', '(', 'list_str', ',', 'N', ')', ':', 'temp', '=', '(', 'set', '(', 'sub', ')', 'for', 'sub', 'in', 'list_str', ')', 'counts', '=', 'Counter', '(', 'chain', '.', 'from_iterable', '(', 'temp', ')', ')', 'gt_N', '=', '[', 'chr', 'for', 'chr', ',', 'count', 'in', 'counts', '.', 'items', '(', ')', 'if', 'count', '>', 'N', ']', 'lt_N', '=', '[', 'chr', 'for', 'chr', ',', 'count', 'in', 'counts', '.', 'items', '(', ')', 'if', 'count', '<', 'N', ']', 'return', 'gt_N', ',', 'lt_N', 'list_str', '=', '[', ""'abcd'"", ',', ""'iabhef'"", ',', ""'dsalsdf'"", ',', ""'sdfsas'"", ',', ""'jlkdfgd'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list_str', ')', 'N', '=', '3', 'result', '=', 'max_aggregate', '(', 'list_str', ',', 'N', ')', 'print', '(', '""\\nCharacters of the said list of strings which occur more than:""', ',', 'N', ')', 'print', '(', 'result', '[', '0', ']', ')', 'print', '(', '""\\nCharacters of the said list of strings which occur less than:""', ',', 'N', ')', 'print', '(', 'result', '[', '1', ']', ')']"
335,"['write', 'numpy', 'program', 'add', 'two', 'zero', 'beginning', 'element', 'given', 'array', 'string', 'value']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', ""'1.12'"", ',', ""'2.23'"", ',', ""'3.71'"", ',', ""'4.23'"", ',', ""'5.11'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nAdd two zeros to the beginning of each element of the said array:""', ')', 'print', '(', 'np', '.', 'char', '.', 'add', '(', ""'00'"", ',', 'nums', ')', ')', 'print', '(', '""\\nAlternate method:""', ')', 'print', '(', 'np', '.', 'char', '.', 'rjust', '(', 'nums', ',', '6', ',', 'fillchar', '=', ""'0'"", ')', ')']"
336,"['write', 'numpy', 'program', 'count', 'occurrence', 'specified', 'item', 'given', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '10', ',', '20', ',', '20', ',', '20', ',', '20', ',', '0', ',', '20', ',', '30', ',', '30', ',', '30', ',', '0', ',', '0', ',', '20', ',', '20', ',', '0', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'print', '(', 'np', '.', 'count_nonzero', '(', 'nums', '==', '10', ')', ')', 'print', '(', 'np', '.', 'count_nonzero', '(', 'nums', '==', '20', ')', ')', 'print', '(', 'np', '.', 'count_nonzero', '(', 'nums', '==', '30', ')', ')', 'print', '(', 'np', '.', 'count_nonzero', '(', 'nums', '==', '0', ')', ')']"
337,"['write', 'python', 'program', 'sort', 'given', 'positive', 'number', 'descendingascending', 'order']","['def', 'test_dsc', '(', 'n', ')', ':', 'return', 'int', '(', ""''"", '.', 'join', '(', 'sorted', '(', 'str', '(', 'n', ')', ',', 'reverse', '=', 'True', ')', ')', ')', 'def', 'test_asc', '(', 'n', ')', ':', 'return', 'int', '(', ""''"", '.', 'join', '(', 'sorted', '(', 'list', '(', 'str', '(', 'n', ')', ')', ')', ')', '[', ':', ':', '1', ']', ')', 'n', '=', '134543', 'print', '(', '""Original Number: ""', ',', 'n', ')', ';', 'print', '(', '""Descending order of the said number: ""', ',', 'test_dsc', '(', 'n', ')', ')', ';', 'print', '(', '""Ascending order of the said number: ""', ',', 'test_asc', '(', 'n', ')', ')', ';', 'n', '=', '43750973', 'print', '(', '""\\nOriginal Number: ""', ',', 'n', ')', ';', 'print', '(', '""Descending order of the said number: ""', ',', 'test_dsc', '(', 'n', ')', ')', ';', 'print', '(', '""Ascending order of the said number: ""', ',', 'test_asc', '(', 'n', ')', ')', ';']"
338,"['write', 'python', 'program', 'check', 'whether', 'string', 'contains', 'letter', 'alphabet']","['import', 'string', 'alphabet', '=', 'set', '(', 'string', '.', 'ascii_lowercase', ')', 'input_string', '=', ""'The quick brown fox jumps over the lazy dog'"", 'print', '(', 'set', '(', 'input_string', '.', 'lower', '(', ')', ')', '>=', 'alphabet', ')', 'input_string', '=', ""'The quick brown fox jumps over the lazy cat'"", 'print', '(', 'set', '(', 'input_string', '.', 'lower', '(', ')', ')', '>=', 'alphabet', ')']"
339,"['write', 'python', 'program', 'delete', 'specific', 'item', 'given', 'doubly', 'linked', 'list']","['class', 'Node', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ',', 'value', '=', 'None', ',', 'next', '=', 'None', ',', 'prev', '=', 'None', ')', ':', 'self', '.', 'value', '=', 'value', 'self', '.', 'next', '=', 'next', 'self', '.', 'prev', '=', 'prev', 'class', 'doubly_linked_list', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'tail', '=', 'None', 'self', '.', 'count', '=', '0', 'def', 'append_item', '(', 'self', ',', 'value', ')', ':', 'new_item', '=', 'Node', '(', 'value', ',', 'None', ',', 'None', ')', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_item', 'self', '.', 'tail', '=', 'self', '.', 'head', 'else', ':', 'new_item', '.', 'prev', '=', 'self', '.', 'tail', 'self', '.', 'tail', '.', 'next', '=', 'new_item', 'self', '.', 'tail', '=', 'new_item', 'self', '.', 'count', '+=', '1', 'def', 'iter', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'item_val', '=', 'current', '.', 'value', 'current', '=', 'current', '.', 'next', 'yield', 'item_val', 'def', 'print_foward', '(', 'self', ')', ':', 'for', 'node', 'in', 'self', '.', 'iter', '(', ')', ':', 'print', '(', 'node', ')', 'def', 'search_item', '(', 'self', ',', 'val', ')', ':', 'for', 'node', 'in', 'self', '.', 'iter', '(', ')', ':', 'if', 'val', '==', 'node', ':', 'return', 'True', 'return', 'False', 'def', 'delete', '(', 'self', ',', 'value', ')', ':', 'current', '=', 'self', '.', 'head', 'node_deleted', '=', 'False', 'if', 'current', 'is', 'None', ':', 'node_deleted', '=', 'False', 'elif', 'current', '.', 'value', '==', 'value', ':', 'self', '.', 'head', '=', 'current', '.', 'next', 'self', '.', 'head', '.', 'prev', '=', 'None', 'node_deleted', '=', 'True', 'elif', 'self', '.', 'tail', '.', 'value', '==', 'value', ':', 'self', '.', 'tail', '=', 'self', '.', 'tail', '.', 'prev', 'self', '.', 'tail', '.', 'next', '=', 'None', 'node_deleted', '=', 'True', 'else', ':', 'while', 'current', ':', 'if', 'current', '.', 'value', '==', 'value', ':', 'current', '.', 'prev', '.', 'next', '=', 'current', '.', 'next', 'current', '.', 'next', '.', 'prev', '=', 'current', '.', 'prev', 'node_deleted', '=', 'True', 'current', '=', 'current', '.', 'next', 'if', 'node_deleted', ':', 'self', '.', 'count', '-=', '1', 'items', '=', 'doubly_linked_list', '(', ')', 'items', '.', 'append_item', '(', ""'PHP'"", ')', 'items', '.', 'append_item', '(', ""'Python'"", ')', 'items', '.', 'append_item', '(', ""'C#'"", ')', 'items', '.', 'append_item', '(', ""'C++'"", ')', 'items', '.', 'append_item', '(', ""'Java'"", ')', 'items', '.', 'append_item', '(', ""'SQL'"", ')', 'print', '(', '""Original list:""', ')', 'items', '.', 'print_foward', '(', ')', 'items', '.', 'delete', '(', '""Java""', ')', 'items', '.', 'delete', '(', '""Python""', ')', 'print', '(', '""\\nList after deleting two items:""', ')', 'items', '.', 'print_foward', '(', ')']"
340,"['write', 'numpy', 'program', 'convert', 'list', 'tuple', 'array']","['import', 'numpy', 'as', 'np', 'my_list', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', 'print', '(', '""List to array: ""', ')', 'print', '(', 'np', '.', 'asarray', '(', 'my_list', ')', ')', 'my_tuple', '=', '(', '[', '8', ',', '4', ',', '6', ']', ',', '[', '1', ',', '2', ',', '3', ']', ')', 'print', '(', '""Tuple to array: ""', ')', 'print', '(', 'np', '.', 'asarray', '(', 'my_tuple', ')', ')']"
341,"['write', 'panda', 'program', 'create', 'plot', 'distribution', 'ufo', 'unidentified', 'flying', 'object', 'observation', 'time']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'import', 'seaborn', 'as', 'sns', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'duration_sec'"", ']', '=', '(', 'df', '[', ""'length_of_encounter_seconds'"", ']', '.', 'astype', '(', 'float', ')', ')', '/', '60', 's', '=', 'df', '[', '""duration_sec""', ']', '.', 'quantile', '(', '0.95', ')', 'temp', '=', 'df', '[', ""'duration_sec'"", ']', 'temp', '=', 'temp', '.', 'sort_values', '(', ')', 'temp', '=', 'temp', '[', 'temp', '<', 's', ']', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '10', ',', '8', ')', ')', 'sns', '.', 'distplot', '(', 'temp', ')', 'plt', '.', 'xlabel', '(', ""'Duration(min)'"", ',', 'fontsize', '=', '20', ')', 'plt', '.', 'ylabel', '(', '""Frequency""', ',', 'fontsize', '=', '15', ')', 'plt', '.', 'xticks', '(', 'fontsize', '=', '12', ')', 'plt', '.', 'title', '(', '""-Distribution of UFO obervation time-""', ',', 'fontsize', '=', '20', ')', 'plt', '.', 'show', '(', ')']"
342,"['write', 'numpy', 'program', 'find', 'union', 'two', 'array', 'union', 'return', 'unique', 'sorted', 'array', 'value', 'either', 'two', 'input', 'array']","['import', 'numpy', 'as', 'np', 'array1', '=', 'np', '.', 'array', '(', '[', '0', ',', '10', ',', '20', ',', '40', ',', '60', ',', '80', ']', ')', 'print', '(', '""Array1: ""', ',', 'array1', ')', 'array2', '=', '[', '10', ',', '30', ',', '40', ',', '50', ',', '70', ']', 'print', '(', '""Array2: ""', ',', 'array2', ')', 'print', '(', '""Unique sorted array of values that are in either of the two input arrays:""', ')', 'print', '(', 'np', '.', 'union1d', '(', 'array1', ',', 'array2', ')', ')']"
343,"['write', 'python', 'program', 'sum', 'item', 'dictionary']","['my_dict', '=', '{', ""'data1'"", ':', '100', ',', ""'data2'"", ':', '-', '54', ',', ""'data3'"", ':', '247', '}', 'print', '(', 'sum', '(', 'my_dict', '.', 'values', '(', ')', ')', ')']"
344,"['write', 'python', 'program', 'find', 'ration', 'positive', 'number', 'negative', 'number', 'zero', 'array', 'integer']","['from', 'array', 'import', 'array', 'def', 'plusMinus', '(', 'nums', ')', ':', 'n', '=', 'len', '(', 'nums', ')', 'n1', '=', 'n2', '=', 'n3', '=', '0', 'for', 'x', 'in', 'nums', ':', 'if', 'x', '>', '0', ':', 'n1', '+=', '1', 'elif', 'x', '<', '0', ':', 'n2', '+=', '1', 'else', ':', 'n3', '+=', '1', 'return', 'round', '(', 'n1', '/', 'n', ',', '2', ')', ',', 'round', '(', 'n2', '/', 'n', ',', '2', ')', ',', 'round', '(', 'n3', '/', 'n', ',', '2', ')', 'nums', '=', 'array', '(', ""'i'"", ',', '[', '0', ',', '1', ',', '2', ',', '-', '1', ',', '-', '5', ',', '6', ',', '0', ',', '-', '3', ',', '-', '2', ',', '3', ',', '4', ',', '6', ',', '8', ']', ')', 'print', '(', '""Original array:""', ',', 'nums', ')', 'nums_arr', '=', 'list', '(', 'map', '(', 'int', ',', 'nums', ')', ')', 'result', '=', 'plusMinus', '(', 'nums_arr', ')', 'print', '(', '""Ratio of positive numbers, negative numbers and zeroes:""', ')', 'print', '(', 'result', ')', 'nums', '=', 'array', '(', ""'i'"", ',', '[', '2', ',', '1', ',', '2', ',', '-', '1', ',', '-', '5', ',', '6', ',', '4', ',', '-', '3', ',', '-', '2', ',', '3', ',', '4', ',', '6', ',', '8', ']', ')', 'print', '(', '""\\nOriginal array:""', ',', 'nums', ')', 'nums_arr', '=', 'list', '(', 'map', '(', 'int', ',', 'nums', ')', ')', 'result', '=', 'plusMinus', '(', 'nums_arr', ')', 'print', '(', '""Ratio of positive numbers, negative numbers and zeroes:""', ')', 'print', '(', 'result', ')']"
345,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'selection', 'sort', 'algorithm']","['def', 'selectionSort', '(', 'nlist', ')', ':', 'for', 'fillslot', 'in', 'range', '(', 'len', '(', 'nlist', ')', '-', '1', ',', '0', ',', '-', '1', ')', ':', 'maxpos', '=', '0', 'for', 'location', 'in', 'range', '(', '1', ',', 'fillslot', '+', '1', ')', ':', 'if', 'nlist', '[', 'location', ']', '>', 'nlist', '[', 'maxpos', ']', ':', 'maxpos', '=', 'location', 'temp', '=', 'nlist', '[', 'fillslot', ']', 'nlist', '[', 'fillslot', ']', '=', 'nlist', '[', 'maxpos', ']', 'nlist', '[', 'maxpos', ']', '=', 'temp', 'nlist', '=', '[', '14', ',', '46', ',', '43', ',', '27', ',', '57', ',', '41', ',', '45', ',', '21', ',', '70', ']', 'selectionSort', '(', 'nlist', ')', 'print', '(', 'nlist', ')']"
346,"['write', 'python', 'program', 'interleave', 'multiple', 'list', 'length']","['def', 'interleave_multiple_lists', '(', 'list1', ',', 'list2', ',', 'list3', ')', ':', 'result', '=', '[', 'el', 'for', 'pair', 'in', 'zip', '(', 'list1', ',', 'list2', ',', 'list3', ')', 'for', 'el', 'in', 'pair', ']', 'return', 'result', 'list1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ']', 'list2', '=', '[', '10', ',', '20', ',', '30', ',', '40', ',', '50', ',', '60', ',', '70', ']', 'list3', '=', '[', '100', ',', '200', ',', '300', ',', '400', ',', '500', ',', '600', ',', '700', ']', 'print', '(', '""Original list:""', ')', 'print', '(', '""list1:""', ',', 'list1', ')', 'print', '(', '""list2:""', ',', 'list2', ')', 'print', '(', '""list3:""', ',', 'list3', ')', 'print', '(', '""\\nInterleave multiple lists:""', ')', 'print', '(', 'interleave_multiple_lists', '(', 'list1', ',', 'list2', ',', 'list3', ')', ')']"
347,"['write', 'python', 'program', 'combine', 'two', 'dictionary', 'creating', 'list', 'value', 'key']","['from', 'collections', 'import', 'defaultdict', 'def', 'test', '(', '*', 'dicts', ')', ':', 'result', '=', 'defaultdict', '(', 'list', ')', 'for', 'el', 'in', 'dicts', ':', 'for', 'key', 'in', 'el', ':', 'result', '[', 'key', ']', '.', 'append', '(', 'el', '[', 'key', ']', ')', 'return', 'dict', '(', 'result', ')', 'd1', '=', '{', ""'w'"", ':', '50', ',', ""'x'"", ':', '100', ',', ""'y'"", ':', ""'Green'"", ',', ""'z'"", ':', '400', '}', 'd2', '=', '{', ""'x'"", ':', '300', ',', ""'y'"", ':', ""'Red'"", ',', ""'z'"", ':', '600', '}', 'print', '(', '""Original dictionaries:""', ')', 'print', '(', 'd1', ')', 'print', '(', 'd2', ')', 'print', '(', '""\\nCombined dictionaries, creating a list of values for each key:""', ')', 'print', '(', 'test', '(', 'd1', ',', 'd2', ')', ')']"
348,"['write', 'panda', 'program', 'drop', 'index', 'level', 'multilevel', 'column', 'index', 'dataframe']","['import', 'pandas', 'as', 'pd', 'cols', '=', 'pd', '.', 'MultiIndex', '.', 'from_tuples', '(', '[', '(', '""a""', ',', '""x""', ')', ',', '(', '""a""', ',', '""y""', ')', ',', '(', '""a""', ',', '""z""', ')', ']', ')', 'print', '(', '""\\nConstruct a Dataframe using the said MultiIndex levels: ""', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '3', ',', '4', ',', '5', ']', ',', '[', '5', ',', '6', ',', '7', ']', ']', ',', 'columns', '=', 'cols', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nRemove the top level index:""', ')', 'df', '.', 'columns', '=', 'df', '.', 'columns', '.', 'droplevel', '(', '0', ')', 'print', '(', 'df', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '3', ',', '4', ',', '5', ']', ',', '[', '5', ',', '6', ',', '7', ']', ']', ',', 'columns', '=', 'cols', ')', 'print', '(', '""\\nOriginal dataframe:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nRemove the index next to top level:""', ')', 'df', '.', 'columns', '=', 'df', '.', 'columns', '.', 'droplevel', '(', '1', ')', 'print', '(', 'df', ')']"
349,"['write', 'panda', 'program', 'get', 'sighting', 'day', 'unidentified', 'flying', 'object', 'ufo']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'print', '(', '""Original Dataframe:""', ')', 'print', '(', 'df', '.', 'head', '(', ')', ')', 'print', '(', '""\\nSighting days of the unidentified flying object (ufo) between 1949-10-10 and 1960-10-10:""', ')', 'selected_period', '=', 'df', '[', '(', 'df', '[', ""'Date_time'"", ']', '>=', ""'1950-01-01 00:00:00'"", ')', '&', '(', 'df', '[', ""'Date_time'"", ']', '<=', ""'1960-12-31 23:59:59'"", ')', ']', 'print', '(', 'selected_period', ')']"
350,"['write', 'python', 'program', 'make', 'iterator', 'drop', 'element', 'iterable', 'soon', 'element', 'positive', 'number']","['import', 'itertools', 'as', 'it', 'def', 'drop_while', '(', 'nums', ')', ':', 'return', 'it', '.', 'dropwhile', '(', 'lambda', 'x', ':', 'x', '<', '0', ',', 'nums', ')', 'nums', '=', '[', '-', '1', ',', '-', '2', ',', '-', '3', ',', '4', ',', '-', '10', ',', '2', ',', '0', ',', '5', ',', '12', ']', 'print', '(', '""Original list: ""', ',', 'nums', ')', 'result', '=', 'drop_while', '(', 'nums', ')', 'print', '(', '""Drops elements from the iterable when a positive number arises \\n""', ',', 'list', '(', 'result', ')', ')', 'def', 'negative_num', '(', 'x', ')', ':', 'return', 'x', '<', '0', 'def', 'drop_while', '(', 'nums', ')', ':', 'return', 'it', '.', 'dropwhile', '(', 'negative_num', ',', 'nums', ')', 'nums', '=', '[', '-', '1', ',', '-', '2', ',', '-', '3', ',', '4', ',', '-', '10', ',', '2', ',', '0', ',', '5', ',', '12', ']', 'print', '(', '""Original list: ""', ',', 'nums', ')', 'result', '=', 'drop_while', '(', 'nums', ')', 'print', '(', '""Drops elements from the iterable when a positive number arises \\n""', ',', 'list', '(', 'result', ')', ')']"
351,"['write', 'python', 'program', 'remove', 'empty', 'list', 'given', 'list', 'list']","['list1', '=', '[', '[', ']', ',', '[', ']', ',', '[', ']', ',', ""'Red'"", ',', ""'Green'"", ',', '[', '1', ',', '2', ']', ',', ""'Blue'"", ',', '[', ']', ',', '[', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""\\nAfter deleting the empty lists from the said lists of lists""', ')', 'list2', '=', '[', 'x', 'for', 'x', 'in', 'list1', 'if', 'x', ']', 'print', '(', 'list2', ')']"
352,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'cocktail', 'shaker', 'sort']","['def', 'cocktail_shaker_sort', '(', 'nums', ')', ':', 'for', 'i', 'in', 'range', '(', 'len', '(', 'nums', ')', '-', '1', ',', '0', ',', '-', '1', ')', ':', 'is_swapped', '=', 'False', 'for', 'j', 'in', 'range', '(', 'i', ',', '0', ',', '-', '1', ')', ':', 'if', 'nums', '[', 'j', ']', '<', 'nums', '[', 'j', '-', '1', ']', ':', 'nums', '[', 'j', ']', ',', 'nums', '[', 'j', '-', '1', ']', '=', 'nums', '[', 'j', '-', '1', ']', ',', 'nums', '[', 'j', ']', 'is_swapped', '=', 'True', 'for', 'j', 'in', 'range', '(', 'i', ')', ':', 'if', 'nums', '[', 'j', ']', '>', 'nums', '[', 'j', '+', '1', ']', ':', 'nums', '[', 'j', ']', ',', 'nums', '[', 'j', '+', '1', ']', '=', 'nums', '[', 'j', '+', '1', ']', ',', 'nums', '[', 'j', ']', 'is_swapped', '=', 'True', 'if', 'not', 'is_swapped', ':', 'return', 'nums', 'num1', '=', 'input', '(', ""'Input comma separated numbers:\\n'"", ')', '.', 'strip', '(', ')', 'nums', '=', '[', 'int', '(', 'item', ')', 'for', 'item', 'in', 'num1', '.', 'split', '(', ""','"", ')', ']', 'print', '(', 'cocktail_shaker_sort', '(', 'nums', ')', ')']"
353,"['write', 'python', 'program', 'check', 'whether', 'given', 'string', 'contains', 'capital', 'letter', 'lower', 'case', 'letter', 'number', 'minimum', 'length']","['def', 'check_string', '(', 's', ')', ':', 'messg', '=', '[', ']', 'if', 'not', 'any', '(', 'x', '.', 'isupper', '(', ')', 'for', 'x', 'in', 's', ')', ':', 'messg', '.', 'append', '(', ""'String must have 1 upper case character.'"", ')', 'if', 'not', 'any', '(', 'x', '.', 'islower', '(', ')', 'for', 'x', 'in', 's', ')', ':', 'messg', '.', 'append', '(', ""'String must have 1 lower case character.'"", ')', 'if', 'not', 'any', '(', 'x', '.', 'isdigit', '(', ')', 'for', 'x', 'in', 's', ')', ':', 'messg', '.', 'append', '(', ""'String must have 1 number.'"", ')', 'if', 'len', '(', 's', ')', '<', '8', ':', 'messg', '.', 'append', '(', ""'String length should be atleast 8.'"", ')', 'if', 'not', 'messg', ':', 'messg', '.', 'append', '(', ""'Valid string.'"", ')', 'return', 'messg', 's', '=', 'input', '(', '""Input the string: ""', ')', 'print', '(', 'check_string', '(', 's', ')', ')']"
354,"['write', 'numpy', 'program', 'extract', 'first', 'third', 'fifth', 'element', 'third', 'fifth', 'row', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arra_data', '=', 'np', '.', 'arange', '(', '0', ',', '36', ')', '.', 'reshape', '(', '(', '6', ',', '6', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arra_data', ')', 'print', '(', '""\\nExtracted data: First, third and fifth elements of the third and fifth rows""', ')', 'print', '(', 'arra_data', '[', '2', ':', ':', '2', ',', ':', ':', '2', ']', ')']"
355,"['write', 'python', 'program', 'check', 'given', 'function', 'generator', 'use', 'typesgeneratortype']","['import', 'types', 'def', 'a', '(', 'x', ')', ':', 'yield', 'x', 'def', 'b', '(', 'x', ')', ':', 'return', 'x', 'def', 'add', '(', 'x', ',', 'y', ')', ':', 'return', 'x', '+', 'y', 'print', '(', 'isinstance', '(', 'a', '(', '456', ')', ',', 'types', '.', 'GeneratorType', ')', ')', 'print', '(', 'isinstance', '(', 'b', '(', '823', ')', ',', 'types', '.', 'GeneratorType', ')', ')', 'print', '(', 'isinstance', '(', 'add', '(', '8', ',', '2', ')', ',', 'types', '.', 'GeneratorType', ')', ')']"
356,"['write', 'python', 'program', 'find', 'string', 'similarity', 'two', 'given', 'string']","['import', 'difflib', 'def', 'string_similarity', '(', 'str1', ',', 'str2', ')', ':', 'result', '=', 'difflib', '.', 'SequenceMatcher', '(', 'a', '=', 'str1', '.', 'lower', '(', ')', ',', 'b', '=', 'str2', '.', 'lower', '(', ')', ')', 'return', 'result', '.', 'ratio', '(', ')', 'str1', '=', ""'Python Exercises'"", 'str2', '=', ""'Python Exercises'"", 'print', '(', '""Original string:""', ')', 'print', '(', 'str1', ')', 'print', '(', 'str2', ')', 'print', '(', '""Similarity between two said strings:""', ')', 'print', '(', 'string_similarity', '(', 'str1', ',', 'str2', ')', ')', 'str1', '=', ""'Python Exercises'"", 'str2', '=', ""'Python Exercise'"", 'print', '(', '""\\nOriginal string:""', ')', 'print', '(', 'str1', ')', 'print', '(', 'str2', ')', 'print', '(', '""Similarity between two said strings:""', ')', 'print', '(', 'string_similarity', '(', 'str1', ',', 'str2', ')', ')', 'str1', '=', ""'Python Exercises'"", 'str2', '=', ""'Python Ex.'"", 'print', '(', '""\\nOriginal string:""', ')', 'print', '(', 'str1', ')', 'print', '(', 'str2', ')', 'print', '(', '""Similarity between two said strings:""', ')', 'print', '(', 'string_similarity', '(', 'str1', ',', 'str2', ')', ')', 'str1', '=', ""'Python Exercises'"", 'str2', '=', ""'Python'"", 'print', '(', '""\\nOriginal string:""', ')', 'print', '(', 'str1', ')', 'print', '(', 'str2', ')', 'print', '(', '""Similarity between two said strings:""', ')', 'print', '(', 'string_similarity', '(', 'str1', ',', 'str2', ')', ')', 'str1', '=', ""'Python Exercises'"", 'str1', '=', ""'Java Exercises'"", 'print', '(', '""\\nOriginal string:""', ')', 'print', '(', 'str1', ')', 'print', '(', 'str2', ')', 'print', '(', '""Similarity between two said strings:""', ')', 'print', '(', 'string_similarity', '(', 'str1', ',', 'str2', ')', ')']"
357,"['write', 'python', 'program', 'convert', 'pair', 'value', 'sorted', 'unique', 'array']","['L', '=', '[', '(', '1', ',', '2', ')', ',', '(', '3', ',', '4', ')', ',', '(', '1', ',', '2', ')', ',', '(', '5', ',', '6', ')', ',', '(', '7', ',', '8', ')', ',', '(', '1', ',', '2', ')', ',', '(', '3', ',', '4', ')', ',', '(', '3', ',', '4', ')', ',', '(', '7', ',', '8', ')', ',', '(', '9', ',', '10', ')', ']', 'print', '(', '""Original List: ""', ',', 'L', ')', 'print', '(', '""Sorted Unique Data:""', ',', 'sorted', '(', 'set', '(', ')', '.', 'union', '(', '*', 'L', ')', ')', ')']"
358,"['write', 'numpy', 'program', 'calculate', 'cumulative', 'sum', 'element', 'along', 'given', 'axis', 'sum', 'row', 'column', 'sum', 'column', 'row', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ',', '6', ']', ']', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'print', '(', '""Cumulative sum of the elements along a given axis:""', ')', 'r', '=', 'np', '.', 'cumsum', '(', 'x', ')', 'print', '(', 'r', ')', 'print', '(', '""\\nSum over rows for each of the 3 columns:""', ')', 'r', '=', 'np', '.', 'cumsum', '(', 'x', ',', 'axis', '=', '0', ')', 'print', '(', 'r', ')', 'print', '(', '""\\nSum over columns for each of the 2 rows:""', ')', 'r', '=', 'np', '.', 'cumsum', '(', 'x', ',', 'axis', '=', '1', ')', 'print', '(', 'r', ')']"
359,"['write', 'python', 'program', 'check', 'multiple', 'key', 'exists', 'dictionary']","['student', '=', '{', ""'name'"", ':', ""'Alex'"", ',', ""'class'"", ':', ""'V'"", ',', ""'roll_id'"", ':', ""'2'"", '}', 'print', '(', 'student', '.', 'keys', '(', ')', '>=', '{', ""'class'"", ',', ""'name'"", '}', ')', 'print', '(', 'student', '.', 'keys', '(', ')', '>=', '{', ""'name'"", ',', ""'Alex'"", '}', ')', 'print', '(', 'student', '.', 'keys', '(', ')', '>=', '{', ""'roll_id'"", ',', ""'name'"", '}', ')']"
360,"['write', 'python', 'program', 'create', 'two', 'string', 'given', 'string', 'create', 'first', 'string', 'using', 'character', 'occurs', 'create', 'second', 'string', 'consists', 'multitime', 'occurring', 'character', 'said', 'string']","['from', 'collections', 'import', 'Counter', 'def', 'generateStrings', '(', 'input', ')', ':', 'str_char_ctr', '=', 'Counter', '(', 'input', ')', 'part1', '=', '[', 'key', 'for', '(', 'key', ',', 'count', ')', 'in', 'str_char_ctr', '.', 'items', '(', ')', 'if', 'count', '==', '1', ']', 'part2', '=', '[', 'key', 'for', '(', 'key', ',', 'count', ')', 'in', 'str_char_ctr', '.', 'items', '(', ')', 'if', 'count', '>', '1', ']', 'part1', '.', 'sort', '(', ')', 'part2', '.', 'sort', '(', ')', 'return', 'part1', ',', 'part2', 'input', '=', '""aabbcceffgh""', 's1', ',', 's2', '=', 'generateStrings', '(', 'input', ')', 'print', '(', ""''"", '.', 'join', '(', 's1', ')', ')', 'print', '(', ""''"", '.', 'join', '(', 's2', ')', ')']"
361,"['write', 'panda', 'program', 'check', 'whether', 'lower', 'case', 'upper', 'case', 'present', 'given', 'column', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'ABCD'"", ',', ""'EFGF'"", ',', ""'hhhh'"", ',', ""'abcd'"", ',', ""'EAWQaaa'"", ']', ',', ""'date_of_sale '"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nIs lower (company_code)?""', ')', 'df', '[', ""'company_code_ul_cases'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'islower', '(', ')', ',', 'df', '[', ""'company_code'"", ']', ')', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nIs Upper (company_code)?""', ')', 'df', '[', ""'company_code_ul_cases'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'isupper', '(', ')', ',', 'df', '[', ""'company_code'"", ']', ')', ')', 'print', '(', 'df', ')']"
362,"['write', 'python', 'program', 'find', 'minimum', 'maximum', 'value', 'tuple', 'position', 'given', 'list', 'tuples']","['def', 'max_min_list_tuples', '(', 'nums', ')', ':', 'zip', '(', '*', 'nums', ')', 'result1', '=', 'map', '(', 'max', ',', 'zip', '(', '*', 'nums', ')', ')', 'result2', '=', 'map', '(', 'min', ',', 'zip', '(', '*', 'nums', ')', ')', 'return', 'list', '(', 'result1', ')', ',', 'list', '(', 'result2', ')', 'nums', '=', '[', '(', '2', ',', '3', ')', ',', '(', '2', ',', '4', ')', ',', '(', '0', ',', '6', ')', ',', '(', '7', ',', '1', ')', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'result', '=', 'max_min_list_tuples', '(', 'nums', ')', 'print', '(', '""\\nMaximum value  for each tuple position in the said list of tuples:""', ')', 'print', '(', 'result', '[', '0', ']', ')', 'print', '(', '""\\nMinimum value  for each tuple position in the said list of tuples:""', ')', 'print', '(', 'result', '[', '1', ']', ')']"
363,"['write', 'python', 'program', 'convert', 'given', 'list', 'string', 'list', 'list']","['def', 'strings_to_listOflists', '(', 'colors', ')', ':', 'result', '=', '[', 'list', '(', 'word', ')', 'for', 'word', 'in', 'colors', ']', 'return', 'result', 'colors', '=', '[', '""Red""', ',', '""Maroon""', ',', '""Yellow""', ',', '""Olive""', ']', 'print', '(', ""'Original list of strings:'"", ')', 'print', '(', 'colors', ')', 'print', '(', '""\\nConvert the said list of strings into list of lists:""', ')', 'print', '(', 'strings_to_listOflists', '(', 'colors', ')', ')']"
364,"['write', 'panda', 'program', 'print', 'dataframe', 'without', 'index']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_of_birth'"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', '}', ',', 'index', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', ')', 'print', '(', '""Original DataFrame with single index:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nDataFrame without index:""', ')', 'print', '(', 'df', '.', 'to_string', '(', 'index', '=', 'False', ')', ')']"
365,"['write', 'python', 'program', 'display', 'information', 'o', 'script', 'running']","['import', 'platform', 'as', 'pl', 'os_profile', '=', '[', ""'architecture'"", ',', ""'linux_distribution'"", ',', ""'mac_ver'"", ',', ""'machine'"", ',', ""'node'"", ',', ""'platform'"", ',', ""'processor'"", ',', ""'python_build'"", ',', ""'python_compiler'"", ',', ""'python_version'"", ',', ""'release'"", ',', ""'system'"", ',', ""'uname'"", ',', ""'version'"", ',', ']', 'for', 'key', 'in', 'os_profile', ':', 'if', 'hasattr', '(', 'pl', ',', 'key', ')', ':', 'print', '(', 'key', '+', '"": ""', '+', 'str', '(', 'getattr', '(', 'pl', ',', 'key', ')', '(', ')', ')', ')']"
366,"['write', 'numpy', 'program', 'create', 'matrix', 'fill', 'checkerboard', 'pattern']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'ones', '(', '(', '3', ',', '3', ')', ')', 'print', '(', '""Checkerboard pattern:""', ')', 'x', '=', 'np', '.', 'zeros', '(', '(', '8', ',', '8', ')', ',', 'dtype', '=', 'int', ')', 'x', '[', '1', ':', ':', '2', ',', ':', ':', '2', ']', '=', '1', 'x', '[', ':', ':', '2', ',', '1', ':', ':', '2', ']', '=', '1', 'print', '(', 'x', ')']"
367,"['write', 'python', 'program', 'filter', 'height', 'width', 'student', 'stored', 'dictionary']","['def', 'filter_data', '(', 'students', ')', ':', 'result', '=', '{', 'k', ':', 's', 'for', 'k', ',', 's', 'in', 'students', '.', 'items', '(', ')', 'if', 's', '[', '0', ']', '>=', '6.0', 'and', 's', '[', '1', ']', '>=', '70', '}', 'return', 'result', 'students', '=', '{', ""'Cierra Vega'"", ':', '(', '6.2', ',', '70', ')', ',', ""'Alden Cantrell'"", ':', '(', '5.9', ',', '65', ')', ',', ""'Kierra Gentry'"", ':', '(', '6.0', ',', '68', ')', ',', ""'Pierre Cox'"", ':', '(', '5.8', ',', '66', ')', '}', 'print', '(', '""Original Dictionary:""', ')', 'print', '(', 'students', ')', 'print', '(', '""\\nHeight > 6ft and Weight> 70kg:""', ')', 'print', '(', 'filter_data', '(', 'students', ')', ')']"
368,"['write', 'numpy', 'program', 'find', 'nearest', 'value', 'given', 'value', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'random', '.', 'uniform', '(', '1', ',', '12', ',', '5', ')', 'v', '=', '4', 'n', '=', 'x', '.', 'flat', '[', 'np', '.', 'abs', '(', 'x', '-', 'v', ')', '.', 'argmin', '(', ')', ']', 'print', '(', 'n', ')']"
369,"['write', 'numpy', 'program', 'create', 'twodimensional', 'array', 'specified', 'format']","['import', 'numpy', 'as', 'np', 'print', '(', '""Create an array of shape (15,10):""', ')', 'print', '(', '""Command-1""', ')', 'print', '(', 'np', '.', 'arange', '(', '1', ',', '151', ')', '.', 'reshape', '(', '15', ',', '10', ')', ')', 'print', '(', '""\\nCommand-2""', ')', 'print', '(', 'np', '.', 'arange', '(', '1', ',', '151', ')', '.', 'reshape', '(', '-', '1', ',', '10', ')', ')', 'print', '(', '""\\nCommand-3""', ')', 'print', '(', 'np', '.', 'arange', '(', '1', ',', '151', ')', '.', 'reshape', '(', '15', ',', '-', '1', ')', ')']"
370,"['write', 'numpy', 'program', 'create', 'array', 'shape', 'reverse', 'row', 'said', 'array', 'reversing', 'row', 'row', 'row', 'row', 'row']","['import', 'numpy', 'as', 'np', 'array_nums', '=', 'np', '.', 'arange', '(', '20', ')', '.', 'reshape', '(', '4', ',', '5', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'array_nums', ')', 'print', '(', '""\\nAfter reversing:""', ')', 'array_nums', '[', ':', ']', '=', 'array_nums', '[', '3', ':', ':', '-', '1', ']', 'print', '(', 'array_nums', ')']"
371,"['write', 'python', 'program', 'select', 'random', 'element', 'list', 'set', 'dictionary', 'value', 'file', 'directory', 'use', 'randomchoice']","['import', 'random', 'import', 'os', 'print', '(', '""Select a random element from a list:""', ')', 'elements', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', 'print', '(', 'random', '.', 'choice', '(', 'elements', ')', ')', 'print', '(', 'random', '.', 'choice', '(', 'elements', ')', ')', 'print', '(', 'random', '.', 'choice', '(', 'elements', ')', ')', 'print', '(', '""\\nSelect a random element from a set:""', ')', 'elements', '=', 'set', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ')', 'print', '(', 'random', '.', 'choice', '(', 'tuple', '(', 'elements', ')', ')', ')', 'print', '(', 'random', '.', 'choice', '(', 'tuple', '(', 'elements', ')', ')', ')', 'print', '(', 'random', '.', 'choice', '(', 'tuple', '(', 'elements', ')', ')', ')', 'print', '(', '""\\nSelect a random value from a dictionary:""', ')', 'd', '=', '{', '""a""', ':', '1', ',', '""b""', ':', '2', ',', '""c""', ':', '3', ',', '""d""', ':', '4', ',', '""e""', ':', '5', '}', 'key', '=', 'random', '.', 'choice', '(', 'list', '(', 'd', ')', ')', 'print', '(', 'd', '[', 'key', ']', ')', 'key', '=', 'random', '.', 'choice', '(', 'list', '(', 'd', ')', ')', 'print', '(', 'd', '[', 'key', ']', ')', 'key', '=', 'random', '.', 'choice', '(', 'list', '(', 'd', ')', ')', 'print', '(', 'd', '[', 'key', ']', ')', 'print', '(', '""\\nSelect a random file from a directory.:""', ')', 'print', '(', 'random', '.', 'choice', '(', 'os', '.', 'listdir', '(', '""/""', ')', ')', ')']"
372,"['write', 'numpy', 'program', 'set', 'zero', 'lower', 'triangle', 'along', 'last', 'two', 'ax', 'threedimensional', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arra', '=', 'np', '.', 'ones', '(', '(', '1', ',', '8', ',', '8', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arra', ')', 'result', '=', 'np', '.', 'triu', '(', 'arra', ',', 'k', '=', '1', ')', 'print', '(', '""\\nResult:""', ')', 'print', '(', 'result', ')']"
373,"['write', 'python', 'program', 'create', 'keyvalue', 'list', 'pairing', 'given', 'dictionary']","['from', 'itertools', 'import', 'product', 'def', 'test', '(', 'dictt', ')', ':', 'result', '=', '[', 'dict', '(', 'zip', '(', 'dictt', ',', 'sub', ')', ')', 'for', 'sub', 'in', 'product', '(', '*', 'dictt', '.', 'values', '(', ')', ')', ']', 'return', 'result', 'students', '=', '{', '1', ':', '[', ""'Jean Castro'"", ']', ',', '2', ':', '[', ""'Lula Powell'"", ']', ',', '3', ':', '[', ""'Brian Howell'"", ']', ',', '4', ':', '[', ""'Lynne Foster'"", ']', ',', '5', ':', '[', ""'Zachary Simon'"", ']', '}', 'print', '(', '""\\nOriginal dictionary:""', ')', 'print', '(', 'students', ')', 'print', '(', '""\\nA key-value list pairings of the said dictionary:""', ')', 'print', '(', 'test', '(', 'students', ')', ')']"
374,"['write', 'python', 'program', 'generate', 'random', 'alphabetical', 'character', 'alphabetical', 'string', 'alphabetical', 'string', 'fixed', 'length', 'use', 'randomchoice']","['import', 'random', 'import', 'string', 'print', '(', '""Generate a random alphabetical character:""', ')', 'print', '(', 'random', '.', 'choice', '(', 'string', '.', 'ascii_letters', ')', ')', 'print', '(', '""\\nGenerate a random alphabetical string:""', ')', 'max_length', '=', '255', 'str1', '=', '""""', 'for', 'i', 'in', 'range', '(', 'random', '.', 'randint', '(', '1', ',', 'max_length', ')', ')', ':', 'str1', '+=', 'random', '.', 'choice', '(', 'string', '.', 'ascii_letters', ')', 'print', '(', 'str1', ')', 'print', '(', '""\\nGenerate a random alphabetical string of a fixed length:""', ')', 'str1', '=', '""""', 'for', 'i', 'in', 'range', '(', '10', ')', ':', 'str1', '+=', 'random', '.', 'choice', '(', 'string', '.', 'ascii_letters', ')', 'print', '(', 'str1', ')']"
375,"['write', 'numpy', 'program', 'calculate', 'cumulative', 'product', 'element', 'along', 'given', 'axis', 'sum', 'row', 'column', 'product', 'column', 'row', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ',', '6', ']', ']', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'print', '(', '""Cumulative product  of the elements along a given axis:""', ')', 'r', '=', 'np', '.', 'cumprod', '(', 'x', ')', 'print', '(', 'r', ')', 'print', '(', '""\\nProduct over rows for each of the 3 columns:""', ')', 'r', '=', 'np', '.', 'cumprod', '(', 'x', ',', 'axis', '=', '0', ')', 'print', '(', 'r', ')', 'print', '(', '""\\nProduct  over columns for each of the 2 rows:""', ')', 'r', '=', 'np', '.', 'cumprod', '(', 'x', ',', 'axis', '=', '1', ')', 'print', '(', 'r', ')']"
376,"['write', 'python', 'program', 'search', 'date', 'given', 'string', 'using', 'arrow', 'module']","['import', 'arrow', 'print', '(', '""\\nSearch a date from a string:""', ')', 'd1', '=', 'arrow', '.', 'get', '(', ""'David was born in 11 June 2003'"", ',', ""'DD MMMM YYYY'"", ')', 'print', '(', 'd1', ')']"
377,"['write', 'panda', 'program', 'create', 'new', 'dataframe', 'based', 'existing', 'series', 'using', 'specified', 'argument', 'override', 'existing', 'column', 'name']","['import', 'pandas', 'as', 'pd', 's1', '=', 'pd', '.', 'Series', '(', '[', '0', ',', '1', ',', '2', ',', '3', ']', ',', 'name', '=', ""'col1'"", ')', 's2', '=', 'pd', '.', 'Series', '(', '[', '0', ',', '1', ',', '2', ',', '3', ']', ')', 's3', '=', 'pd', '.', 'Series', '(', '[', '0', ',', '1', ',', '4', ',', '5', ']', ',', 'name', '=', ""'col3'"", ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 's1', ',', 's2', ',', 's3', ']', ',', 'axis', '=', '1', ',', 'keys', '=', '[', ""'column1'"", ',', ""'column2'"", ',', ""'column3'"", ']', ')', 'print', '(', 'df', ')']"
378,"['write', 'python', 'program', 'create', 'possible', 'permutation', 'given', 'collection', 'distinct', 'number']","['def', 'permute', '(', 'nums', ')', ':', 'result_perms', '=', '[', '[', ']', ']', 'for', 'n', 'in', 'nums', ':', 'new_perms', '=', '[', ']', 'for', 'perm', 'in', 'result_perms', ':', 'for', 'i', 'in', 'range', '(', 'len', '(', 'perm', ')', '+', '1', ')', ':', 'new_perms', '.', 'append', '(', 'perm', '[', ':', 'i', ']', '+', '[', 'n', ']', '+', 'perm', '[', 'i', ':', ']', ')', 'result_perms', '=', 'new_perms', 'return', 'result_perms', 'my_nums', '=', '[', '1', ',', '2', ',', '3', ']', 'print', '(', '""Original Cofllection: ""', ',', 'my_nums', ')', 'print', '(', '""Collection of distinct numbers:\\n""', ',', 'permute', '(', 'my_nums', ')', ')']"
379,"['write', 'python', 'program', 'find', 'maximum', 'minimum', 'value', 'given', 'list', 'tuples', 'using', 'lambda', 'function']","['def', 'max_min_list_tuples', '(', 'class_students', ')', ':', 'return_max', '=', 'max', '(', 'class_students', ',', 'key', '=', 'lambda', 'item', ':', 'item', '[', '1', ']', ')', '[', '1', ']', 'return_min', '=', 'min', '(', 'class_students', ',', 'key', '=', 'lambda', 'item', ':', 'item', '[', '1', ']', ')', '[', '1', ']', 'return', 'return_max', ',', 'return_min', 'class_students', '=', '[', '(', ""'V'"", ',', '62', ')', ',', '(', ""'VI'"", ',', '68', ')', ',', '(', ""'VII'"", ',', '72', ')', ',', '(', ""'VIII'"", ',', '70', ')', ',', '(', ""'IX'"", ',', '74', ')', ',', '(', ""'X'"", ',', '65', ')', ']', 'print', '(', '""Original list with tuples:""', ')', 'print', '(', 'class_students', ')', 'print', '(', '""\\nMaximum and minimum values of the said list of tuples:""', ')', 'print', '(', 'max_min_list_tuples', '(', 'class_students', ')', ')']"
380,"['write', 'python', 'program', 'append', 'item', 'inerrable', 'end', 'array']","['from', 'array', 'import', '*', 'array_num', '=', 'array', '(', ""'i'"", ',', '[', '1', ',', '3', ',', '5', ',', '7', ',', '9', ']', ')', 'print', '(', '""Original array: ""', '+', 'str', '(', 'array_num', ')', ')', 'array_num', '.', 'extend', '(', 'array_num', ')', 'print', '(', '""Extended array: ""', '+', 'str', '(', 'array_num', ')', ')']"
381,"['write', 'python', 'function', 'take', 'list', 'word', 'return', 'longest', 'word', 'length', 'longest', 'one']","['def', 'find_longest_word', '(', 'words_list', ')', ':', 'word_len', '=', '[', ']', 'for', 'n', 'in', 'words_list', ':', 'word_len', '.', 'append', '(', '(', 'len', '(', 'n', ')', ',', 'n', ')', ')', 'word_len', '.', 'sort', '(', ')', 'return', 'word_len', '[', '-', '1', ']', '[', '0', ']', ',', 'word_len', '[', '-', '1', ']', '[', '1', ']', 'result', '=', 'find_longest_word', '(', '[', '""PHP""', ',', '""Exercises""', ',', '""Backend""', ']', ')', 'print', '(', '""\\nLongest word: ""', ',', 'result', '[', '1', ']', ')', 'print', '(', '""Length of the longest word: ""', ',', 'result', '[', '0', ']', ')']"
382,"['write', 'python', 'program', 'configure', 'rounding', 'round', 'nearest', 'tie', 'going', 'towards', 'tie', 'going', 'away', 'use']","['import', 'decimal', 'print', '(', '""Configure the rounding to round to the nearest, with ties going towards 0:""', ')', 'decimal', '.', 'getcontext', '(', ')', '.', 'prec', '=', '1', 'decimal', '.', 'getcontext', '(', ')', '.', 'rounding', '=', 'decimal', '.', 'ROUND_HALF_DOWN', 'print', '(', 'decimal', '.', 'Decimal', '(', '10', ')', '/', 'decimal', '.', 'Decimal', '(', '4', ')', ')', 'print', '(', '""\\nConfigure the rounding to round to the nearest, with ties going away from 0:""', ')', 'decimal', '.', 'getcontext', '(', ')', '.', 'prec', '=', '1', 'decimal', '.', 'getcontext', '(', ')', '.', 'rounding', '=', 'decimal', '.', 'ROUND_HALF_UP', 'print', '(', 'decimal', '.', 'Decimal', '(', '10', ')', '/', 'decimal', '.', 'Decimal', '(', '4', ')', ')']"
383,"['write', 'python', 'program', 'access', 'unique', 'key', 'value', 'python', 'object']","['import', 'json', 'python_obj', '=', '\'{""a"":  1, ""a"":  2, ""a"":  3, ""a"": 4, ""b"": 1, ""b"": 2}\'', 'print', '(', '""Original Python object:""', ')', 'print', '(', 'python_obj', ')', 'json_obj', '=', 'json', '.', 'loads', '(', 'python_obj', ')', 'print', '(', '""\\nUnique Key in a JSON object:""', ')', 'print', '(', 'json_obj', ')']"
384,"['write', 'numpy', 'program', 'read', 'csv', 'data', 'file', 'store', 'record', 'array']","['from', 'numpy', 'import', 'genfromtxt', 'csv_data', '=', 'genfromtxt', '(', ""'fdata.csv'"", ',', 'dtype', '=', '[', ""'S10'"", ',', ""'float32'"", ',', ""'float32'"", ',', ""'float32'"", ',', ""'float32'"", ']', ',', 'delimiter', '=', '"",""', ')', 'print', '(', 'csv_data', ')']"
385,"['create', 'dataframe', 'ten', 'row', 'four', 'column', 'random', 'value', 'write', 'panda', 'program', 'highlight', 'dataframes', 'specific', 'column']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '24', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', 'np', '.', 'linspace', '(', '1', ',', '10', ',', '10', ')', '}', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df', ',', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', ',', 'columns', '=', 'list', '(', ""'BCDE'"", ')', ')', ']', ',', 'axis', '=', '1', ')', 'df', '.', 'iloc', '[', '0', ',', '2', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '3', ',', '3', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '4', ',', '1', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '9', ',', '4', ']', '=', 'np', '.', 'nan', 'print', '(', '""Original array:""', ')', 'print', '(', 'df', ')', 'def', 'highlight_cols', '(', 's', ')', ':', 'color', '=', ""'grey'"", 'return', ""'background-color: %s'"", '%', 'color', 'print', '(', '""\\nHighlight specific columns:""', ')', 'df', '.', 'style', '.', 'applymap', '(', 'highlight_cols', ',', 'subset', '=', 'pd', '.', 'IndexSlice', '[', ':', ',', '[', ""'B'"", ',', ""'C'"", ']', ']', ')']"
386,"['write', 'python', 'function', 'accepts', 'string', 'calculate', 'number', 'upper', 'case', 'letter', 'lower', 'case', 'letter']","['def', 'string_test', '(', 's', ')', ':', 'd', '=', '{', '""UPPER_CASE""', ':', '0', ',', '""LOWER_CASE""', ':', '0', '}', 'for', 'c', 'in', 's', ':', 'if', 'c', '.', 'isupper', '(', ')', ':', 'd', '[', '""UPPER_CASE""', ']', '+=', '1', 'elif', 'c', '.', 'islower', '(', ')', ':', 'd', '[', '""LOWER_CASE""', ']', '+=', '1', 'else', ':', 'pass', 'print', '(', '""Original String : ""', ',', 's', ')', 'print', '(', '""No. of Upper case characters : ""', ',', 'd', '[', '""UPPER_CASE""', ']', ')', 'print', '(', '""No. of Lower case Characters : ""', ',', 'd', '[', '""LOWER_CASE""', ']', ')', 'string_test', '(', ""'The quick Brown Fox'"", ')']"
387,"['write', 'python', 'program', 'create', 'list', 'containing', 'power', 'said', 'number', 'base', 'raised', 'corresponding', 'number', 'index', 'using', 'python', 'map']","['bases_num', '=', '[', '10', ',', '20', ',', '30', ',', '40', ',', '50', ',', '60', ',', '70', ',', '80', ',', '90', ',', '100', ']', 'index', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', 'print', '(', '""Base numbers abd index: ""', ')', 'print', '(', 'bases_num', ')', 'print', '(', 'index', ')', 'result', '=', 'list', '(', 'map', '(', 'pow', ',', 'bases_num', ',', 'index', ')', ')', 'print', '(', '""\\nPower of said number in bases raised to the corresponding number in the index:""', ')', 'print', '(', 'result', ')']"
388,"['write', 'panda', 'program', 'extract', 'year', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', '10', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'c0001'"", ',', ""'c0002'"", ',', ""'c0003'"", ',', ""'c0003'"", ',', ""'c0004'"", ']', ',', ""'year'"", ':', '[', ""'year 1800'"", ',', ""'year 1700'"", ',', ""'year 2300'"", ',', ""'year 1900'"", ',', ""'year 2200'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'find_year', '(', 'text', ')', ':', 'result', '=', 're', '.', 'findall', '(', 'r""\\b(18[0-9]{2}|19[0-8][0-9]|199[0-9]|2[01][0-9]{2}|2200)\\b""', ',', 'text', ')', 'return', 'result', 'df', '[', ""'year_range'"", ']', '=', 'df', '[', ""'year'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'find_year', '(', 'x', ')', ')', 'print', '(', '""\\Extracting year between 1800 to 2200:""', ')', 'print', '(', 'df', ')']"
389,"['write', 'panda', 'program', 'extract', 'day', 'name', 'specified', 'date', 'add', 'day', 'business', 'day', 'specified', 'date']","['import', 'pandas', 'as', 'pd', 'newday', '=', 'pd', '.', 'Timestamp', '(', ""'2020-02-07'"", ')', 'print', '(', '""First date:""', ')', 'print', '(', 'newday', ')', 'print', '(', '""\\nThe day name of the said date:""', ')', 'print', '(', 'newday', '.', 'day_name', '(', ')', ')', 'print', '(', '""\\nAdd 2 days with the said date:""', ')', 'newday1', '=', 'newday', '+', 'pd', '.', 'Timedelta', '(', ""'2 day'"", ')', 'print', '(', 'newday1', '.', 'day_name', '(', ')', ')', 'print', '(', '""\\nNext business day:""', ')', 'nbday', '=', 'newday', '+', 'pd', '.', 'offsets', '.', 'BDay', '(', ')', 'print', '(', 'nbday', '.', 'day_name', '(', ')', ')']"
390,"['write', 'python', 'program', 'read', 'current', 'line', 'given', 'csv', 'file', 'use', 'csvreader']","['import', 'csv', 'f', '=', 'open', '(', '""employees.csv""', ',', 'newline', '=', ""''"", ')', 'csv_reader', '=', 'csv', '.', 'reader', '(', 'f', ')', 'print', '(', 'next', '(', 'csv_reader', ')', ')', 'print', '(', 'next', '(', 'csv_reader', ')', ')', 'print', '(', 'next', '(', 'csv_reader', ')', ')']"
391,"['write', 'python', 'program', 'read', 'square', 'matrix', 'console', 'print', 'sum', 'matrix', 'primary', 'diagonal', 'accept', 'size', 'square', 'matrix', 'element', 'column', 'separated', 'space', 'every', 'row', 'input', 'user']","['size', '=', 'int', '(', 'input', '(', '""Input the size of the matrix: ""', ')', ')', 'matrix', '=', '[', '[', '0', ']', '*', 'size', 'for', 'row', 'in', 'range', '(', '0', ',', 'size', ')', ']', 'for', 'x', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'line', '=', 'list', '(', 'map', '(', 'int', ',', 'input', '(', ')', '.', 'split', '(', ')', ')', ')', 'for', 'y', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'matrix', '[', 'x', ']', '[', 'y', ']', '=', 'line', '[', 'y', ']', 'matrix_sum_diagonal', '=', 'sum', '(', 'matrix', '[', 'size', '-', 'i', '-', '1', ']', '[', 'size', '-', 'i', '-', '1', ']', 'for', 'i', 'in', 'range', '(', 'size', ')', ')', 'print', '(', '""Sum of matrix primary diagonal:""', ')', 'print', '(', 'matrix_sum_diagonal', ')']"
392,"['write', 'panda', 'program', 'import', 'data', 'given', 'excel', 'data', 'employeexlsx', 'panda', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\employee.xlsx'"", ',', 'sheet_name', '=', '1', ')', 'print', '(', 'df', ')']"
393,"['write', 'numpy', 'program', 'convert', 'given', 'array', 'byte', 'load', 'array']","['import', 'numpy', 'as', 'np', 'import', 'os', 'a', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'a', ')', 'a_bytes', '=', 'a', '.', 'tostring', '(', ')', 'a2', '=', 'np', '.', 'fromstring', '(', 'a_bytes', ',', 'dtype', '=', 'a', '.', 'dtype', ')', 'print', '(', '""After loading, content of the text file:""', ')', 'print', '(', 'a2', ')', 'print', '(', 'np', '.', 'array_equal', '(', 'a', ',', 'a2', ')', ')']"
394,"['write', 'panda', 'program', 'create', 'monthly', 'time', 'period', 'display', 'list', 'name', 'current', 'local', 'scope']","['import', 'pandas', 'as', 'pd', 'mtp', '=', 'pd', '.', 'Period', '(', ""'2021-11'"", ',', ""'M'"", ')', 'print', '(', '""Monthly time perid: ""', ',', 'mtp', ')', 'print', '(', '""\\nList of names in the current local scope:""', ')', 'print', '(', 'dir', '(', 'mtp', ')', ')']"
395,"['write', 'numpy', 'program', 'sort', 'along', 'first', 'last', 'axis', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '[', '4', ',', '6', ']', ',', '[', '2', ',', '1', ']', ']', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'a', ')', 'print', '(', '""Sort along the first axis: ""', ')', 'x', '=', 'np', '.', 'sort', '(', 'a', ',', 'axis', '=', '0', ')', 'print', '(', 'x', ')', 'print', '(', '""Sort along the last axis: ""', ')', 'y', '=', 'np', '.', 'sort', '(', 'x', ',', 'axis', '=', '1', ')', 'print', '(', 'y', ')']"
396,"['write', 'numpy', 'program', 'move', 'specified', 'axis', 'backwards', 'lie', 'given', 'position']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'ones', '(', '(', '2', ',', '3', ',', '4', ',', '5', ')', ')', 'print', '(', 'np', '.', 'rollaxis', '(', 'x', ',', '3', ',', '1', ')', '.', 'shape', ')']"
397,"['write', 'numpy', 'program', 'check', 'whether', 'element', 'given', 'array', 'start', 'p']","['import', 'numpy', 'as', 'np', 'x1', '=', 'np', '.', 'array', '(', '[', ""'Python'"", ',', ""'PHP'"", ',', ""'JS'"", ',', ""'examples'"", ',', ""'html'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""\\nOriginal Array:""', ')', 'print', '(', 'x1', ')', 'print', '(', '""Test if each element of the said array starts with \'P\':""', ')', 'r', '=', 'np', '.', 'char', '.', 'startswith', '(', 'x1', ',', '""P""', ')', 'print', '(', 'r', ')']"
398,"['write', 'panda', 'program', 'construct', 'dataframe', 'using', 'multiindex', 'level', 'column', 'index']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'sales_arrays', '=', '[', '[', ""'sale1'"", ',', ""'sale1'"", ',', ""'sale2'"", ',', ""'sale2'"", ',', ""'sale3'"", ',', ""'sale3'"", ',', ""'sale4'"", ',', ""'sale4'"", ']', ',', '[', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ']', ']', 'sales_tuples', '=', 'list', '(', 'zip', '(', '*', 'sales_arrays', ')', ')', 'print', '(', '""Create a MultiIndex:""', ')', 'sales_index', '=', 'pd', '.', 'MultiIndex', '.', 'from_tuples', '(', 'sales_tuples', ',', 'names', '=', '[', ""'sale'"", ',', ""'city'"", ']', ')', 'print', '(', 'sales_tuples', ')', 'print', '(', '""\\nConstruct a Dataframe using the said MultiIndex levels: ""', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '8', ',', '5', ')', ',', 'index', '=', 'sales_index', ')', 'print', '(', 'df', ')']"
399,"['create', 'dataframe', 'ten', 'row', 'four', 'column', 'random', 'value', 'write', 'panda', 'program', 'highlight', 'entire', 'row', 'yellow', 'specific', 'column', 'value', 'greater']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '24', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', 'np', '.', 'linspace', '(', '1', ',', '10', ',', '10', ')', '}', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df', ',', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', ',', 'columns', '=', 'list', '(', ""'BCDE'"", ')', ')', ']', ',', 'axis', '=', '1', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nDataframe - table style:""', ')', 'def', 'highlight_greaterthan', '(', 'x', ')', ':', 'if', 'x', '.', 'C', '>', '.5', ':', 'return', '[', ""'background-color: yellow'"", ']', '*', '5', 'else', ':', 'return', '[', ""'background-color: white'"", ']', '*', '5', 'df', '.', 'style', '.', 'apply', '(', 'highlight_greaterthan', ',', 'axis', '=', '1', ')']"
400,"['see', 'sample', 'solutiona']","['import', 're', 'p', '=', 'input', '(', '""Input your password""', ')', 'x', '=', 'True', 'while', 'x', ':', 'if', '(', 'len', '(', 'p', ')', '<', '6', 'or', 'len', '(', 'p', ')', '>', '12', ')', ':', 'break', 'elif', 'not', 're', '.', 'search', '(', '""[a-z]""', ',', 'p', ')', ':', 'break', 'elif', 'not', 're', '.', 'search', '(', '""[0-9]""', ',', 'p', ')', ':', 'break', 'elif', 'not', 're', '.', 'search', '(', '""[A-Z]""', ',', 'p', ')', ':', 'break', 'elif', 'not', 're', '.', 'search', '(', '""[$#@]""', ',', 'p', ')', ':', 'break', 'elif', 're', '.', 'search', '(', '""\\s""', ',', 'p', ')', ':', 'break', 'else', ':', 'print', '(', '""Valid Password""', ')', 'x', '=', 'False', 'break', 'if', 'x', ':', 'print', '(', '""Not a Valid Password""', ')']"
401,"['write', 'numpy', 'program', 'create', 'array', 'value', 'determine', 'size', 'memory', 'occupied', 'array']","['import', 'numpy', 'as', 'np', 'X', '=', 'np', '.', 'array', '(', '[', '1', ',', '7', ',', '13', ',', '105', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'X', ')', 'print', '(', '""Size of the memory occupied by the said array:""', ')', 'print', '(', '""%d bytes""', '%', '(', 'X', '.', 'size', '*', 'X', '.', 'itemsize', ')', ')']"
402,"['write', 'python', 'program', 'accepts', 'integer', 'n', 'computes', 'value', 'nnnnnn']","['a', '=', 'int', '(', 'input', '(', '""Input an integer : ""', ')', ')', 'n1', '=', 'int', '(', '""%s""', '%', 'a', ')', 'n2', '=', 'int', '(', '""%s%s""', '%', '(', 'a', ',', 'a', ')', ')', 'n3', '=', 'int', '(', '""%s%s%s""', '%', '(', 'a', ',', 'a', ',', 'a', ')', ')', 'print', '(', 'n1', '+', 'n2', '+', 'n3', ')']"
403,"['write', 'python', 'program', 'find', 'tuple', 'smallest', 'second', 'index', 'value', 'list', 'tuples']","['x', '=', '[', '(', '4', ',', '1', ')', ',', '(', '1', ',', '2', ')', ',', '(', '6', ',', '0', ')', ']', 'print', '(', 'min', '(', 'x', ',', 'key', '=', 'lambda', 'n', ':', '(', 'n', '[', '1', ']', ',', '-', 'n', '[', '0', ']', ')', ')', ')']"
404,"['create', 'dataframe', 'ten', 'row', 'four', 'column', 'random', 'value', 'write', 'panda', 'program', 'display', 'dataframe', 'table', 'style']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '24', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', 'np', '.', 'linspace', '(', '1', ',', '10', ',', '10', ')', '}', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df', ',', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', ',', 'columns', '=', 'list', '(', ""'BCDE'"", ')', ')', ']', ',', 'axis', '=', '1', ')', 'df', '.', 'iloc', '[', '0', ',', '2', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '3', ',', '3', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '4', ',', '1', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '9', ',', '4', ']', '=', 'np', '.', 'nan', 'print', '(', '""Original array:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nDataframe - table style:""', ')', 'th_props', '=', '[', '(', ""'font-size'"", ',', ""'12px'"", ')', ',', '(', ""'text-align'"", ',', ""'center'"", ')', ',', '(', ""'font-weight'"", ',', ""'bold'"", ')', ',', '(', ""'color'"", ',', ""'#6d6d6d'"", ')', ',', '(', ""'background-color'"", ',', ""'#f7ffff'"", ')', ']', 'td_props', '=', '[', '(', ""'font-size'"", ',', ""'12px'"", ')', ']', 'styles', '=', '[', 'dict', '(', 'selector', '=', '""th""', ',', 'props', '=', 'th_props', ')', ',', 'dict', '(', 'selector', '=', '""td""', ',', 'props', '=', 'td_props', ')', ']', '(', 'df', '.', 'style', '.', 'set_table_styles', '(', 'styles', ')', ')']"
405,"['write', 'numpy', 'program', 'convert', 'panda', 'dataframe', 'numpy', 'array', 'header']","['import', 'numpy', 'as', 'np', 'import', 'pandas', 'as', 'pd', 'np_array', '=', 'np', '.', 'random', '.', 'rand', '(', '12', ',', '3', ')', 'print', '(', '""Original Numpy array:""', ')', 'print', '(', 'np_array', ')', 'print', '(', '""Type: ""', ',', 'type', '(', 'np_array', ')', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'rand', '(', '12', ',', '3', ')', ',', 'columns', '=', '[', ""'A'"", ',', ""'B'"", ',', ""'C'"", ']', ')', 'print', '(', '""\\nPanda\'s DataFrame: ""', ')', 'print', '(', 'df', ')', 'print', '(', '""Type: ""', ',', 'type', '(', 'df', ')', ')']"
406,"['write', 'numpy', 'program', 'calculate', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1.', ',', '2.', ',', '3.', ',', '4.', ']', ',', 'np', '.', 'float32', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'print', '(', '""\\n2^p for all the elements of the said array:""', ')', 'r1', '=', 'np', '.', 'exp2', '(', 'x', ')', 'r2', '=', '2', '**', 'x', 'assert', 'np', '.', 'allclose', '(', 'r1', ',', 'r2', ')', 'print', '(', 'r1', ')']"
407,"['create', 'dataframe', 'ten', 'row', 'four', 'column', 'random', 'value', 'write', 'panda', 'program', 'set', 'dataframe', 'background', 'color', 'black', 'font', 'color', 'yellow']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '24', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', 'np', '.', 'linspace', '(', '1', ',', '10', ',', '10', ')', '}', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df', ',', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', ',', 'columns', '=', 'list', '(', ""'BCDE'"", ')', ')', ']', ',', 'axis', '=', '1', ')', 'df', '.', 'iloc', '[', '0', ',', '2', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '3', ',', '3', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '4', ',', '1', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '9', ',', '4', ']', '=', 'np', '.', 'nan', 'print', '(', '""Original array:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nBackground:black - fontcolor:yelow""', ')', 'df', '.', 'style', '.', 'set_properties', '(', '**', '{', ""'background-color'"", ':', ""'black'"", ',', ""'color'"", ':', ""'yellow'"", '}', ')']"
408,"['write', 'numpy', 'program', 'extract', 'first', 'third', 'element', 'first', 'third', 'row', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arra_data', '=', 'np', '.', 'arange', '(', '0', ',', '16', ')', '.', 'reshape', '(', '(', '4', ',', '4', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arra_data', ')', 'print', '(', '""\\nExtracted data: First and third elements of the first and third rows ""', ')', 'print', '(', 'arra_data', '[', ':', ':', '2', ',', ':', ':', '2', ']', ')']"
409,"['write', 'python', 'program', 'sum', 'three', 'given', 'integer', 'however', 'two', 'value', 'equal', 'sum', 'zero']","['def', 'sum', '(', 'x', ',', 'y', ',', 'z', ')', ':', 'if', 'x', '==', 'y', 'or', 'y', '==', 'z', 'or', 'x', '==', 'z', ':', 'sum', '=', '0', 'else', ':', 'sum', '=', 'x', '+', 'y', '+', 'z', 'return', 'sum', 'print', '(', 'sum', '(', '2', ',', '1', ',', '2', ')', ')', 'print', '(', 'sum', '(', '3', ',', '2', ',', '2', ')', ')', 'print', '(', 'sum', '(', '2', ',', '2', ',', '2', ')', ')', 'print', '(', 'sum', '(', '1', ',', '2', ',', '3', ')', ')']"
410,"['write', 'panda', 'program', 'sort', 'multiindex', 'dataframe', 'also', 'sort', 'various', 'level', 'index']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'sales_arrays', '=', '[', '[', ""'sale1'"", ',', ""'sale1'"", ',', ""'sale3'"", ',', ""'sale3'"", ',', ""'sale2'"", ',', ""'sale2'"", ',', ""'sale4'"", ',', ""'sale4'"", ']', ',', '[', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ']', ']', 'sales_tuples', '=', 'list', '(', 'zip', '(', '*', 'sales_arrays', ')', ')', 'sales_index', '=', 'pd', '.', 'MultiIndex', '.', 'from_tuples', '(', 'sales_tuples', ',', 'names', '=', '[', ""'sale'"", ',', ""'city'"", ']', ')', 'print', '(', 'sales_tuples', ')', 'print', '(', '""\\nConstruct a Dataframe using the said MultiIndex levels: ""', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '8', ',', '5', ')', ',', 'index', '=', 'sales_index', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nSort on MultiIndex DataFrame:""', ')', 'df1', '=', 'df', '.', 'sort_index', '(', ')', 'print', '(', '""\\nSort on Index level=0 of the DataFrame:""', ')', 'df2', '=', 'df', '.', 'sort_index', '(', 'level', '=', '0', ')', 'print', '(', 'df2', ')', 'print', '(', '""\\nSort on Index level=1 of the DataFrame:""', ')', 'df2', '=', 'df', '.', 'sort_index', '(', 'level', '=', '1', ')', 'print', '(', 'df2', ')', 'print', '(', '""\\nPass a level name to sort the DataFrame:""', ')', 'df3', '=', 'df', '.', 'sort_index', '(', 'level', '=', '""city""', ')', 'print', '(', 'df3', ')']"
411,"['write', 'numpy', 'program', 'compute', 'sum', 'element', 'sum', 'column', 'sum', 'row', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '0', ',', '1', ']', ',', '[', '2', ',', '3', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Sum of all elements:""', ')', 'print', '(', 'np', '.', 'sum', '(', 'x', ')', ')', 'print', '(', '""Sum of each column:""', ')', 'print', '(', 'np', '.', 'sum', '(', 'x', ',', 'axis', '=', '0', ')', ')', 'print', '(', '""Sum of each row:""', ')', 'print', '(', 'np', '.', 'sum', '(', 'x', ',', 'axis', '=', '1', ')', ')']"
412,"['write', 'python', 'program', 'extract', 'specified', 'number', 'element', 'given', 'list', 'follows', 'continuously']","['from', 'itertools', 'import', 'groupby', 'def', 'extract_elements', '(', 'nums', ',', 'n', ')', ':', 'result', '=', '[', 'i', 'for', 'i', ',', 'j', 'in', 'groupby', '(', 'nums', ')', 'if', 'len', '(', 'list', '(', 'j', ')', ')', '==', 'n', ']', 'return', 'result', 'nums1', '=', '[', '1', ',', '1', ',', '3', ',', '4', ',', '4', ',', '5', ',', '6', ',', '7', ']', 'n', '=', '2', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums1', ')', 'print', '(', '""Extract 2 number of elements from the said list which follows each other continuously:""', ')', 'print', '(', 'extract_elements', '(', 'nums1', ',', 'n', ')', ')', 'nums2', '=', '[', '0', ',', '1', ',', '2', ',', '3', ',', '4', ',', '4', ',', '4', ',', '4', ',', '5', ',', '7', ']', 'n', '=', '4', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums2', ')', 'print', '(', '""Extract 4 number of elements from the said list which follows each other continuously:""', ')', 'print', '(', 'extract_elements', '(', 'nums2', ',', 'n', ')', ')']"
413,"['write', 'python', 'program', 'sort', 'given', 'list', 'tuples', 'specified', 'element']","['def', 'sort_on_specific_item', '(', 'lst', ',', 'n', ')', ':', 'result', '=', 'sorted', '(', '(', 'lst', ')', ',', 'key', '=', 'lambda', 'x', ':', 'x', '[', 'n', ']', ')', 'return', 'result', 'items', '=', '[', '(', ""'item2'"", ',', '10', ',', '10.12', ')', ',', '(', ""'item3'"", ',', '15', ',', '25.10', ')', ',', '(', ""'item1'"", ',', '11', ',', '24.50', ')', ',', '(', ""'item4'"", ',', '12', ',', '22.50', ')', ']', 'print', '(', '""Original list of tuples:""', ')', 'print', '(', 'items', ')', 'print', '(', '""\\nSort on 1st element of the tuple of the said list:""', ')', 'n', '=', '0', 'print', '(', 'sort_on_specific_item', '(', 'items', ',', 'n', ')', ')', 'print', '(', '""\\nSort on 2nd element of the tuple of the said list:""', ')', 'n', '=', '1', 'print', '(', 'sort_on_specific_item', '(', 'items', ',', 'n', ')', ')', 'print', '(', '""\\nSort on 3rd element of the tuple of the said list:""', ')', 'n', '=', '2', 'print', '(', 'sort_on_specific_item', '(', 'items', ',', 'n', ')', ')']"
414,"['write', 'numpy', 'program', 'move', 'ax', 'array', 'new', 'position', 'ax', 'remain', 'original', 'order']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'zeros', '(', '(', '2', ',', '3', ',', '4', ')', ')', 'print', '(', 'np', '.', 'moveaxis', '(', 'x', ',', '0', ',', '-', '1', ')', '.', 'shape', ')', 'print', '(', 'np', '.', 'moveaxis', '(', 'x', ',', '-', '1', ',', '0', ')', '.', 'shape', ')']"
415,"['write', 'python', 'program', 'scramble', 'letter', 'string', 'given', 'list']","['from', 'random', 'import', 'shuffle', 'def', 'shuffle_word', '(', 'text_list', ')', ':', 'text_list', '=', 'list', '(', 'text_list', ')', 'shuffle', '(', 'text_list', ')', 'return', ""''"", '.', 'join', '(', 'text_list', ')', 'text_list', '=', '[', ""'Python'"", ',', ""'list'"", ',', ""'exercises'"", ',', ""'practice'"", ',', ""'solution'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'text_list', ')', 'print', '(', '""\\nAfter scrambling the letters of the strings of the said list:""', ')', 'result', '=', '[', 'shuffle_word', '(', 'word', ')', 'for', 'word', 'in', 'text_list', ']', 'print', '(', 'result', ')']"
416,"['write', 'python', 'program', 'get', 'frequent', 'element', 'given', 'list', 'number']","['def', 'most_frequent', '(', 'nums', ')', ':', 'return', 'max', '(', 'set', '(', 'nums', ')', ',', 'key', '=', 'nums', '.', 'count', ')', 'print', '(', 'most_frequent', '(', '[', '1', ',', '2', ',', '1', ',', '2', ',', '3', ',', '2', ',', '1', ',', '4', ',', '2', ']', ')', ')', 'nums', '=', '[', '2', ',', '3', ',', '8', ',', '4', ',', '7', ',', '9', ',', '8', ',', '2', ',', '6', ',', '5', ',', '1', ',', '6', ',', '1', ',', '2', ',', '3', ',', '2', ',', '4', ',', '6', ',', '9', ',', '1', ',', '2', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Item with maximum frequency of the said list:""', ')', 'print', '(', 'most_frequent', '(', 'nums', ')', ')', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '1', ',', '2', ',', '3', ',', '2', ',', '1', ',', '4', ',', '3', ',', '3', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Item with maximum frequency of the said list:""', ')', 'print', '(', 'most_frequent', '(', 'nums', ')', ')']"
417,"['write', 'python', 'program', 'find', 'smallest', 'multiple', 'first', 'n', 'number', 'also', 'display', 'factor']","['def', 'smallest_multiple', '(', 'n', ')', ':', 'if', '(', 'n', '<=', '2', ')', ':', 'return', 'n', 'i', '=', 'n', '*', '2', 'factors', '=', '[', 'number', 'for', 'number', 'in', 'range', '(', 'n', ',', '1', ',', '-', '1', ')', 'if', 'number', '*', '2', '>', 'n', ']', 'print', '(', 'factors', ')', 'while', 'True', ':', 'for', 'a', 'in', 'factors', ':', 'if', 'i', '%', 'a', '!=', '0', ':', 'i', '+=', 'n', 'break', 'if', '(', 'a', '==', 'factors', '[', '-', '1', ']', 'and', 'i', '%', 'a', '==', '0', ')', ':', 'return', 'i', 'print', '(', 'smallest_multiple', '(', '13', ')', ')', 'print', '(', 'smallest_multiple', '(', '11', ')', ')', 'print', '(', 'smallest_multiple', '(', '2', ')', ')', 'print', '(', 'smallest_multiple', '(', '1', ')', ')']"
418,"['write', 'numpy', 'program', 'copy', 'data', 'given', 'array', 'another', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '24', ',', '27', ',', '30', ',', '29', ',', '18', ',', '14', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'y', '=', 'np', '.', 'empty_like', '(', 'x', ')', 'y', '[', ':', ']', '=', 'x', 'print', '(', '""\\nCopy of the said array:""', ')', 'print', '(', 'y', ')']"
419,"['write', 'panda', 'program', 'split', 'dataset', 'group', 'two', 'column', 'sort', 'aggregated', 'result', 'within', 'group']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', '70009', ',', '70002', ',', '70004', ',', '70007', ',', '70005', ',', '70008', ',', '70010', ',', '70003', ',', '70012', ',', '70011', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', ""'2012-10-05'"", ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3001', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3005', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5005', ',', '5001', ',', '5003', ',', '5002', ',', '5001', ',', '5001', ',', '5006', ',', '5003', ',', '5002', ',', '5007', ',', '5001', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'df_agg', '=', 'df', '.', 'groupby', '(', '[', ""'customer_id'"", ',', ""'salesman_id'"", ']', ')', '.', 'agg', '(', '{', ""'purch_amt'"", ':', 'sum', '}', ')', 'result', '=', 'df_agg', '[', ""'purch_amt'"", ']', '.', 'groupby', '(', 'level', '=', '0', ',', 'group_keys', '=', 'False', ')', 'print', '(', '""\\nGroup on \'customer_id\', \'salesman_id\' and then sort sum of purch_amt within the groups:""', ')', 'print', '(', 'result', '.', 'nlargest', '(', ')', ')']"
420,"['write', 'python', 'program', 'find', 'index', 'none', 'item', 'given', 'list']","['def', 'relative_order', '(', 'lst', ')', ':', 'result', '=', '[', 'i', 'for', 'i', 'in', 'range', '(', 'len', '(', 'lst', ')', ')', 'if', 'lst', '[', 'i', ']', '==', 'None', ']', 'return', 'result', 'nums', '=', '[', '1', ',', 'None', ',', '5', ',', '4', ',', 'None', ',', '0', ',', 'None', ',', 'None', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nIndexes of all None items of the list:""', ')', 'print', '(', 'relative_order', '(', 'nums', ')', ')']"
421,"['write', 'python', 'program', 'split', 'given', 'multiline', 'string', 'list', 'line']","['def', 'split_lines', '(', 's', ')', ':', 'return', 's', '.', 'split', '(', ""'\\n'"", ')', 'print', '(', '""Original string:""', ')', 'print', '(', '""This\\nis a\\nmultiline\\nstring.\\n""', ')', 'print', '(', '""Split the said multiline string into a list of lines:""', ')', 'print', '(', 'split_lines', '(', ""'This\\nis a\\nmultiline\\nstring.\\n'"", ')', ')']"
422,"['write', 'python', 'program', 'write', 'python', 'list', 'list', 'csv', 'file', 'writing', 'csv', 'file', 'read', 'csv', 'file', 'display', 'content']","['import', 'csv', 'data', '=', '[', '[', '10', ',', ""'a1'"", ',', '1', ']', ',', '[', '12', ',', ""'a2'"", ',', '3', ']', ',', '[', '14', ',', ""'a3'"", ',', '5', ']', ',', '[', '16', ',', ""'a4'"", ',', '7', ']', ',', '[', '18', ',', ""'a5'"", ',', '9', ']', ']', 'with', 'open', '(', '""temp.csv""', ',', '""w""', ',', 'newline', '=', '""""', ')', 'as', 'f', ':', 'writer', '=', 'csv', '.', 'writer', '(', 'f', ')', 'writer', '.', 'writerows', '(', 'data', ')', 'with', 'open', '(', ""'temp.csv'"", ',', 'newline', '=', ""''"", ')', 'as', 'csvfile', ':', 'data', '=', 'csv', '.', 'reader', '(', 'csvfile', ',', 'delimiter', '=', ""' '"", ')', 'for', 'row', 'in', 'data', ':', 'print', '(', ""', '"", '.', 'join', '(', 'row', ')', ')']"
423,"['write', 'python', 'program', 'check', 'whether', 'given', 'string', 'contains', 'capital', 'letter', 'lower', 'case', 'letter', 'number', 'minimum', 'length', 'using', 'lambda']","['def', 'check_string', '(', 'str1', ')', ':', 'messg', '=', '[', 'lambda', 'str1', ':', 'any', '(', 'x', '.', 'isupper', '(', ')', 'for', 'x', 'in', 'str1', ')', 'or', ""'String must have 1 upper case character.'"", ',', 'lambda', 'str1', ':', 'any', '(', 'x', '.', 'islower', '(', ')', 'for', 'x', 'in', 'str1', ')', 'or', ""'String must have 1 lower case character.'"", ',', 'lambda', 'str1', ':', 'any', '(', 'x', '.', 'isdigit', '(', ')', 'for', 'x', 'in', 'str1', ')', 'or', ""'String must have 1 number.'"", ',', 'lambda', 'str1', ':', 'len', '(', 'str1', ')', '>=', '7', 'or', ""'String length should be atleast 8.'"", ',', ']', 'result', '=', '[', 'x', 'for', 'x', 'in', '[', 'i', '(', 'str1', ')', 'for', 'i', 'in', 'messg', ']', 'if', 'x', '!=', 'True', ']', 'if', 'not', 'result', ':', 'result', '.', 'append', '(', ""'Valid string.'"", ')', 'return', 'result', 's', '=', 'input', '(', '""Input the string: ""', ')', 'print', '(', 'check_string', '(', 's', ')', ')']"
424,"['write', 'python', 'program', 'run', 'operating', 'system', 'command', 'using', 'o', 'module']","['import', 'os', 'if', 'os', '.', 'name', '==', '""nt""', ':', 'command', '=', '""dir""', 'else', ':', 'command', '=', '""ls -l""', 'os', '.', 'system', '(', 'command', ')']"
425,"['write', 'panda', 'program', 'create', 'subtotal', 'labor', 'hour', 'msha', 'id', 'given', 'excel', 'data']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\coalpublic2013.xlsx'"", ')', 'df_sub', '=', 'df', '[', '[', '""MSHA ID""', ',', '""Labor_Hours""', ']', ']', '.', 'groupby', '(', ""'MSHA ID'"", ')', '.', 'sum', '(', ')', 'df_sub']"
426,"['write', 'python', 'program', 'count', 'number', 'row', 'given', 'sqlite', 'table']","['import', 'sqlite3', 'from', 'sqlite3', 'import', 'Error', 'def', 'sql_connection', '(', ')', ':', 'try', ':', 'conn', '=', 'sqlite3', '.', 'connect', '(', ""'mydatabase.db'"", ')', 'return', 'conn', 'except', 'Error', ':', 'print', '(', 'Error', ')', 'def', 'sql_table', '(', 'conn', ')', ':', 'cursorObj', '=', 'conn', '.', 'cursor', '(', ')', 'cursorObj', '.', 'execute', '(', '""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));""', ')', 'print', '(', '""Number of records before inserting rows:""', ')', 'cursor', '=', 'cursorObj', '.', 'execute', '(', ""'select * from salesman;'"", ')', 'print', '(', 'len', '(', 'cursor', '.', 'fetchall', '(', ')', ')', ')', 'cursorObj', '.', 'executescript', '(', '""""""\r    INSERT INTO salesman VALUES(5001,\'James Hoog\', \'New York\', 0.15);\r    INSERT INTO salesman VALUES(5002,\'Nail Knite\', \'Paris\', 0.25);\r    INSERT INTO salesman VALUES(5003,\'Pit Alex\', \'London\', 0.15);\r    INSERT INTO salesman VALUES(5004,\'Mc Lyon\', \'Paris\', 0.35);\r    INSERT INTO salesman VALUES(5005,\'Paul Adam\', \'Rome\', 0.45);\r    """"""', ')', 'conn', '.', 'commit', '(', ')', 'print', '(', '""\\nNumber of records after inserting rows:""', ')', 'cursor', '=', 'cursorObj', '.', 'execute', '(', ""'select * from salesman;'"", ')', 'print', '(', 'len', '(', 'cursor', '.', 'fetchall', '(', ')', ')', ')', 'sqllite_conn', '=', 'sql_connection', '(', ')', 'sql_table', '(', 'sqllite_conn', ')', 'if', '(', 'sqllite_conn', ')', ':', 'sqllite_conn', '.', 'close', '(', ')', 'print', '(', '""\\nThe SQLite connection is closed.""', ')']"
427,"['write', 'python', 'program', 'count', 'frequency', 'consecutive', 'duplicate', 'element', 'given', 'list', 'number']","['def', 'count_dups', '(', 'nums', ')', ':', 'element', '=', '[', ']', 'freque', '=', '[', ']', 'if', 'not', 'nums', ':', 'return', 'element', 'running_count', '=', '1', 'for', 'i', 'in', 'range', '(', 'len', '(', 'nums', ')', '-', '1', ')', ':', 'if', 'nums', '[', 'i', ']', '==', 'nums', '[', 'i', '+', '1', ']', ':', 'running_count', '+=', '1', 'else', ':', 'freque', '.', 'append', '(', 'running_count', ')', 'element', '.', 'append', '(', 'nums', '[', 'i', ']', ')', 'running_count', '=', '1', 'freque', '.', 'append', '(', 'running_count', ')', 'element', '.', 'append', '(', 'nums', '[', 'i', '+', '1', ']', ')', 'return', 'element', ',', 'freque', 'nums', '=', '[', '1', ',', '2', ',', '2', ',', '2', ',', '4', ',', '4', ',', '4', ',', '5', ',', '5', ',', '5', ',', '5', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nConsecutive duplicate elements and their frequency:""', ')', 'print', '(', 'count_dups', '(', 'nums', ')', ')']"
428,"['write', 'numpy', 'program', 'convert', 'given', 'vector', 'integer', 'matrix', 'binary', 'representation']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '0', ',', '1', ',', '3', ',', '5', ',', '7', ',', '9', ',', '11', ',', '13', ',', '15', ']', ')', 'print', '(', '""Original vector:""', ')', 'print', '(', 'nums', ')', 'bin_nums', '=', '(', '(', 'nums', '.', 'reshape', '(', '-', '1', ',', '1', ')', '&', '(', '2', '**', 'np', '.', 'arange', '(', '8', ')', ')', ')', '!=', '0', ')', '.', 'astype', '(', 'int', ')', 'print', '(', '""\\nBinary representation of the said vector:""', ')', 'print', '(', 'bin_nums', '[', ':', ',', ':', ':', '-', '1', ']', ')']"
429,"['write', 'numpy', 'program', 'create', 'empty', 'full', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'empty', '(', '(', '3', ',', '4', ')', ')', 'print', '(', 'x', ')', 'y', '=', 'np', '.', 'full', '(', '(', '3', ',', '3', ')', ',', '6', ')', 'print', '(', 'y', ')']"
430,"['write', 'python', 'program', 'find', 'tag', 'list', 'first', 'four', 'webpage', 'pythonorg']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup', 'url', '=', ""'https://www.python.org/'"", 'reqs', '=', 'requests', '.', 'get', '(', 'url', ')', 'soup', '=', 'BeautifulSoup', '(', 'reqs', '.', 'text', ',', ""'lxml'"", ')', 'print', '(', '""First four h2 tags from the webpage python.org.:""', ')', 'print', '(', 'soup', '.', 'find_all', '(', ""'h2'"", ')', '[', '0', ':', '4', ']', ')']"
431,"['write', 'panda', 'program', 'check', 'whether', 'proper', 'case', 'title', 'case', 'present', 'given', 'column', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF'"", ',', ""'Hhhh'"", ',', ""'abcd'"", ',', ""'EAWQaaa'"", ']', ',', ""'date_of_sale '"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nIs proper case or title case?""', ')', 'df', '[', ""'company_code_is_title'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'istitle', '(', ')', ',', 'df', '[', ""'company_code'"", ']', ')', ')', 'print', '(', 'df', ')']"
432,"['write', 'panda', 'program', 'calculate', 'one', 'two', 'three', 'business', 'day', 'specified', 'date', 'also', 'find', 'next', 'business', 'month', 'end', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'from', 'pandas', '.', 'tseries', '.', 'offsets', 'import', '*', 'import', 'datetime', 'from', 'datetime', 'import', 'datetime', ',', 'date', 'dt', '=', 'datetime', '(', '2020', ',', '1', ',', '4', ')', 'print', '(', '""Specified date:""', ')', 'print', '(', 'dt', ')', 'print', '(', '""\\nOne business day from the said date:""', ')', 'obday', '=', 'dt', '+', 'BusinessDay', '(', ')', 'print', '(', 'obday', ')', 'print', '(', '""\\nTwo business days from the said date:""', ')', 'tbday', '=', 'dt', '+', '2', '*', 'BusinessDay', '(', ')', 'print', '(', 'tbday', ')', 'print', '(', '""\\nThree business days from the said date:""', ')', 'thbday', '=', 'dt', '+', '3', '*', 'BusinessDay', '(', ')', 'print', '(', 'thbday', ')', 'print', '(', '""\\nNext business month end from the said date:""', ')', 'nbday', '=', 'dt', '+', 'BMonthEnd', '(', ')', 'print', '(', 'nbday', ')']"
433,"['write', 'panda', 'program', 'filter', 'record', 'region', 'contains', 'ea', 'substring', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'new_w_a_con', '=', 'w_a_con', '.', 'dropna', '(', ')', 'print', '(', '""\\nMatch if  a given column has a particular sub string:""', ')', 'print', '(', 'new_w_a_con', '[', 'new_w_a_con', '[', '""WHO region""', ']', '.', 'str', '.', 'contains', '(', '""Ea""', ')', ']', ')']"
434,"['write', 'python', 'program', 'extract', 'single', 'keyvalue', 'pair', 'dictionary', 'variable']","['d', '=', '{', ""'Red'"", ':', ""'Green'"", '}', '(', 'c1', ',', 'c2', ')', ',', '=', 'd', '.', 'items', '(', ')', 'print', '(', 'c1', ')', 'print', '(', 'c2', ')']"
435,"['write', 'python', 'program', 'test', 'whether', 'passed', 'letter', 'vowel']","['def', 'is_vowel', '(', 'char', ')', ':', 'all_vowels', '=', ""'aeiou'"", 'return', 'char', 'in', 'all_vowels', 'print', '(', 'is_vowel', '(', ""'c'"", ')', ')', 'print', '(', 'is_vowel', '(', ""'e'"", ')', ')']"
436,"['write', 'python', 'program', 'generate', 'group', 'five', 'consecutive', 'number', 'list']","['l', '=', '[', '[', '5', '*', 'i', '+', 'j', 'for', 'j', 'in', 'range', '(', '1', ',', '6', ')', ']', 'for', 'i', 'in', 'range', '(', '5', ')', ']', 'print', '(', 'l', ')']"
437,"['rite', 'python', 'program', 'get', 'unique', 'enumeration', 'value']","['import', 'enum', 'class', 'Countries', '(', 'enum', '.', 'Enum', ')', ':', 'Afghanistan', '=', '93', 'Albania', '=', '355', 'Algeria', '=', '213', 'Andorra', '=', '376', 'Angola', '=', '244', 'India', '=', '355', 'USA', '=', '213', 'for', 'result', 'in', 'Countries', ':', 'print', '(', ""'{:15} = {}'"", '.', 'format', '(', 'result', '.', 'name', ',', 'result', '.', 'value', ')', ')']"
438,"['write', 'python', 'program', 'find', 'class', 'wise', 'roll', 'number', 'tupleoftuples']","['from', 'collections', 'import', 'defaultdict', 'classes', '=', '(', '(', ""'V'"", ',', '1', ')', ',', '(', ""'VI'"", ',', '1', ')', ',', '(', ""'V'"", ',', '2', ')', ',', '(', ""'VI'"", ',', '2', ')', ',', '(', ""'VI'"", ',', '3', ')', ',', '(', ""'VII'"", ',', '1', ')', ',', ')', 'class_rollno', '=', 'defaultdict', '(', 'list', ')', 'for', 'class_name', ',', 'roll_id', 'in', 'classes', ':', 'class_rollno', '[', 'class_name', ']', '.', 'append', '(', 'roll_id', ')', 'print', '(', 'class_rollno', ')']"
439,"['write', 'python', 'program', 'generate', 'list', 'containing', 'fibonacci', 'sequence', 'nth', 'term']","['def', 'fibonacci_nums', '(', 'n', ')', ':', 'if', 'n', '<=', '0', ':', 'return', '[', '0', ']', 'sequence', '=', '[', '0', ',', '1', ']', 'while', 'len', '(', 'sequence', ')', '<=', 'n', ':', 'next_value', '=', 'sequence', '[', 'len', '(', 'sequence', ')', '-', '1', ']', '+', 'sequence', '[', 'len', '(', 'sequence', ')', '-', '2', ']', 'sequence', '.', 'append', '(', 'next_value', ')', 'return', 'sequence', 'print', '(', '""First 7 Fibonacci numbers:""', ')', 'print', '(', 'fibonacci_nums', '(', '7', ')', ')', 'print', '(', '""\\nFirst 15 Fibonacci numbers:""', ')', 'print', '(', 'fibonacci_nums', '(', '15', ')', ')', 'print', '(', '""\\nFirst 50 Fibonacci numbers:""', ')', 'print', '(', 'fibonacci_nums', '(', '50', ')', ')']"
440,"['write', 'python', 'program', 'find', 'next', 'previous', 'palindrome', 'specified', 'number']","['def', 'Previous_Palindrome', '(', 'num', ')', ':', 'for', 'x', 'in', 'range', '(', 'num', '-', '1', ',', '0', ',', '-', '1', ')', ':', 'if', 'str', '(', 'x', ')', '==', 'str', '(', 'x', ')', '[', ':', ':', '-', '1', ']', ':', 'return', 'x', 'print', '(', 'Previous_Palindrome', '(', '99', ')', ')', ';', 'print', '(', 'Previous_Palindrome', '(', '1221', ')', ')', ';']"
441,"['write', 'python', 'program', 'convert', 'true', 'false']","['x', '=', ""'true'"", 'x', '=', 'int', '(', 'x', '==', ""'true'"", ')', 'print', '(', 'x', ')', 'x', '=', ""'abcd'"", 'x', '=', 'int', '(', 'x', '==', ""'true'"", ')', 'print', '(', 'x', ')']"
442,"['write', 'python', 'program', 'remove', 'specific', 'word', 'given', 'list', 'using', 'lambda']","['def', 'remove_words', '(', 'list1', ',', 'remove_words', ')', ':', 'result', '=', 'list', '(', 'filter', '(', 'lambda', 'word', ':', 'word', 'not', 'in', 'remove_words', ',', 'list1', ')', ')', 'return', 'result', 'colors', '=', '[', ""'orange'"", ',', ""'red'"", ',', ""'green'"", ',', ""'blue'"", ',', ""'white'"", ',', ""'black'"", ']', 'remove_colors', '=', '[', ""'orange'"", ',', ""'black'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'colors', ')', 'print', '(', '""\\nRemove words:""', ')', 'print', '(', 'remove_colors', ')', 'print', '(', '""\\nAfter removing the specified words from the said list:""', ')', 'print', '(', 'remove_words', '(', 'colors', ',', 'remove_colors', ')', ')']"
443,"['write', 'numpy', 'program', 'create', 'array', 'random', 'value', 'extract', 'array', 'said', 'array']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'random', '.', 'random', '(', '(', '8', ',', '8', ',', '3', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nExtract array of shape (6,6,3) from the said array:""', ')', 'new_nums', '=', 'nums', '[', ':', '6', ',', ':', '6', ',', ':', ']', 'print', '(', 'new_nums', ')']"
444,"['write', 'panda', 'program', 'check', 'equality', 'two', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'nums1', '=', 'pd', '.', 'Series', '(', '[', '1', ',', '8', ',', '7', ',', '5', ',', '6', ',', '5', ',', '3', ',', '4', ',', '7', ',', '1', ']', ')', 'nums2', '=', 'pd', '.', 'Series', '(', '[', '1', ',', '8', ',', '7', ',', '5', ',', '6', ',', '5', ',', '3', ',', '4', ',', '7', ',', '1', ']', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""Check 2 series are equal or not?""', ')', 'print', '(', 'nums1', '==', 'nums2', ')']"
445,"['write', 'numpy', 'program', 'compute', 'factor', 'given', 'array', 'singular', 'value', 'decomposition']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '0', ',', '0', ',', '0', ',', '2', ']', ',', '[', '0', ',', '0', ',', '3', ',', '0', ',', '0', ']', ',', '[', '0', ',', '0', ',', '0', ',', '0', ',', '0', ']', ',', '[', '0', ',', '2', ',', '0', ',', '0', ',', '0', ']', ']', ',', 'dtype', '=', 'np', '.', 'float32', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'a', ')', 'U', ',', 's', ',', 'V', '=', 'np', '.', 'linalg', '.', 'svd', '(', 'a', ',', 'full_matrices', '=', 'False', ')', 'q', ',', 'r', '=', 'np', '.', 'linalg', '.', 'qr', '(', 'a', ')', 'print', '(', '""Factor of a given array  by Singular Value Decomposition:""', ')', 'print', '(', '""U=\\n""', ',', 'U', ',', '""\\ns=\\n""', ',', 's', ',', '""\\nV=\\n""', ',', 'V', ')']"
446,"['write', 'panda', 'program', 'extract', 'single', 'row', 'row', 'specific', 'value', 'multiindex', 'level', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'sales_arrays', '=', '[', '[', ""'sale1'"", ',', ""'sale1'"", ',', ""'sale2'"", ',', ""'sale2'"", ',', ""'sale3'"", ',', ""'sale3'"", ',', ""'sale4'"", ',', ""'sale4'"", ']', ',', '[', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ']', ']', 'sales_tuples', '=', 'list', '(', 'zip', '(', '*', 'sales_arrays', ')', ')', 'sales_index', '=', 'pd', '.', 'MultiIndex', '.', 'from_tuples', '(', 'sales_tuples', ',', 'names', '=', '[', ""'sale'"", ',', ""'city'"", ']', ')', 'print', '(', 'sales_tuples', ')', 'print', '(', '""\\nConstruct a Dataframe using the said MultiIndex levels: ""', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '8', ',', '5', ')', ',', 'index', '=', 'sales_index', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nExtract a single row from the said dataframe:""', ')', 'print', '(', 'df', '.', 'loc', '[', '(', ""'sale2'"", ',', ""'city2'"", ')', ']', ')', 'print', '(', '""\\nExtract a single row from the said dataframe:""', ')', 'print', '(', 'df', '.', 'loc', '[', '(', ""'sale2'"", ',', ""'city2'"", ')', ']', ')', 'print', '(', '""\\nExtract number of rows from the said dataframe:""', ')', 'print', '(', 'df', '.', 'loc', '[', ""'sale1'"", ']', ')', 'print', '(', '""\\nExtract number of rows from the said dataframe:""', ')', 'print', '(', 'df', '.', 'loc', '[', ""'sale3'"", ']', ')', 'print', '(', '""\\nExtract a single value from the said dataframe:""', ')', 'print', '(', 'df', '.', 'loc', '[', '(', ""'sale1'"", ',', ""'city2'"", ')', ',', '1', ']', ')', 'print', '(', '""\\nExtract a single value from the said dataframe:""', ')', 'print', '(', 'df', '.', 'loc', '[', '(', ""'sale4'"", ',', ""'city1'"", ')', ',', '4', ']', ')']"
447,"['write', 'panda', 'program', 'calculate', 'total', 'number', 'missing', 'value', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', '70002', ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ']', ',', ""'purch_amt'"", ':', '[', 'np', '.', 'nan', ',', '270.65', ',', '65.26', ',', 'np', '.', 'nan', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', 'np', '.', 'nan', ']', ',', ""'ord_date'"", ':', '[', 'np', '.', 'nan', ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', 'np', '.', 'nan', ']', ',', ""'customer_id'"", ':', '[', 'np', '.', 'nan', ',', '3001', ',', '3001', ',', 'np', '.', 'nan', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', 'np', '.', 'nan', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nTotal number of missing values of the said DataFrame:""', ')', 'result', '=', 'df', '.', 'isna', '(', ')', '.', 'sum', '(', ')', '.', 'sum', '(', ')', 'print', '(', 'result', ')']"
448,"['write', 'python', 'program', 'sum', 'amicable', 'number', 'specified', 'number']","['def', 'amicable_numbers_sum', '(', 'limit', ')', ':', 'if', 'not', 'isinstance', '(', 'limit', ',', 'int', ')', ':', 'return', '""Input is not an integer!""', 'if', 'limit', '<', '1', ':', 'return', '""Input must be bigger than 0!""', 'amicables', '=', 'set', '(', ')', 'for', 'num', 'in', 'range', '(', '2', ',', 'limit', '+', '1', ')', ':', 'if', 'num', 'in', 'amicables', ':', 'continue', 'sum_fact', '=', 'sum', '(', '[', 'fact', 'for', 'fact', 'in', 'range', '(', '1', ',', 'num', ')', 'if', 'num', '%', 'fact', '==', '0', ']', ')', 'sum_fact2', '=', 'sum', '(', '[', 'fact', 'for', 'fact', 'in', 'range', '(', '1', ',', 'sum_fact', ')', 'if', 'sum_fact', '%', 'fact', '==', '0', ']', ')', 'if', 'num', '==', 'sum_fact2', 'and', 'num', '!=', 'sum_fact', ':', 'amicables', '.', 'add', '(', 'num', ')', 'amicables', '.', 'add', '(', 'sum_fact2', ')', 'return', 'sum', '(', 'amicables', ')', 'print', '(', 'amicable_numbers_sum', '(', '9999', ')', ')', 'print', '(', 'amicable_numbers_sum', '(', '999', ')', ')', 'print', '(', 'amicable_numbers_sum', '(', '99', ')', ')']"
449,"['write', 'python', 'program', 'remove', 'newline', 'character', 'file']","['def', 'remove_newlines', '(', 'fname', ')', ':', 'flist', '=', 'open', '(', 'fname', ')', '.', 'readlines', '(', ')', 'return', '[', 's', '.', 'rstrip', '(', ""'\\n'"", ')', 'for', 's', 'in', 'flist', ']', 'print', '(', 'remove_newlines', '(', '""test.txt""', ')', ')']"
450,"['write', 'numpy', 'program', 'find', 'frequent', 'value', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'random', '.', 'randint', '(', '0', ',', '10', ',', '40', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Most frequent value in the above array:""', ')', 'print', '(', 'np', '.', 'bincount', '(', 'x', ')', '.', 'argmax', '(', ')', ')']"
451,"['write', 'python', 'program', 'find', 'lower', 'upper', 'mixed', 'case', 'combination', 'given', 'string']","['import', 'itertools', 'def', 'combination', '(', 'str1', ')', ':', 'result', '=', 'map', '(', ""''"", '.', 'join', ',', 'itertools', '.', 'product', '(', '*', '(', '(', 'c', '.', 'lower', '(', ')', ',', 'c', '.', 'upper', '(', ')', ')', 'for', 'c', 'in', 'str1', ')', ')', ')', 'return', 'list', '(', 'result', ')', 'st', '=', '""abc""', 'print', '(', '""Original string:""', ')', 'print', '(', 'st', ')', 'print', '(', '""All lower and upper mixed case combinations of the said string:""', ')', 'print', '(', 'combination', '(', 'st', ')', ')', 'st', '=', '""w3r""', 'print', '(', '""\\nOriginal string:""', ')', 'print', '(', 'st', ')', 'print', '(', '""All lower and upper mixed case combinations of the said string:""', ')', 'print', '(', 'combination', '(', 'st', ')', ')', 'st', '=', '""Python""', 'print', '(', '""\\nOriginal string:""', ')', 'print', '(', 'st', ')', 'print', '(', '""All lower and upper mixed case combinations of the said string:""', ')', 'print', '(', 'combination', '(', 'st', ')', ')']"
452,"['write', 'panda', 'program', 'extract', 'item', 'given', 'position', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'num_series', '=', 'pd', '.', 'Series', '(', 'list', '(', ""'2390238923902390239023'"", ')', ')', 'element_pos', '=', '[', '0', ',', '2', ',', '6', ',', '11', ',', '21', ']', 'print', '(', '""Original Series:""', ')', 'print', '(', 'num_series', ')', 'result', '=', 'num_series', '.', 'take', '(', 'element_pos', ')', 'print', '(', '""\\nExtract items at given positions of the said series:""', ')', 'print', '(', 'result', ')']"
453,"['write', 'python', 'program', 'find', 'nested', 'list', 'element', 'present', 'another', 'list', 'using', 'lambda']","['def', 'intersection_nested_lists', '(', 'l1', ',', 'l2', ')', ':', 'result', '=', '[', 'list', '(', 'filter', '(', 'lambda', 'x', ':', 'x', 'in', 'l1', ',', 'sublist', ')', ')', 'for', 'sublist', 'in', 'l2', ']', 'return', 'result', 'nums1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ',', '11', ',', '12', ',', '13', ',', '14', ']', 'nums2', '=', '[', '[', '12', ',', '18', ',', '23', ',', '25', ',', '45', ']', ',', '[', '7', ',', '11', ',', '19', ',', '24', ',', '28', ']', ',', '[', '1', ',', '5', ',', '8', ',', '18', ',', '15', ',', '16', ']', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nIntersection of said nested lists:""', ')', 'print', '(', 'intersection_nested_lists', '(', 'nums1', ',', 'nums2', ')', ')']"
454,"['write', 'numpy', 'program', 'extract', 'element', 'first', 'fourth', 'column', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arra_data', '=', 'np', '.', 'arange', '(', '0', ',', '16', ')', '.', 'reshape', '(', '(', '4', ',', '4', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arra_data', ')', 'print', '(', '""\\nExtracted data: All the elements of the first and fourth columns ""', ')', 'print', '(', 'arra_data', '[', ':', ',', '[', '0', ',', '3', ']', ']', ')']"
455,"['write', 'python', 'program', 'check', 'whether', 'follows', 'sequence', 'given', 'pattern', 'array']","['def', 'is_samePatterns', '(', 'colors', ',', 'patterns', ')', ':', 'if', 'len', '(', 'colors', ')', '!=', 'len', '(', 'patterns', ')', ':', 'return', 'False', 'sdict', '=', '{', '}', 'pset', '=', 'set', '(', ')', 'sset', '=', 'set', '(', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'patterns', ')', ')', ':', 'pset', '.', 'add', '(', 'patterns', '[', 'i', ']', ')', 'sset', '.', 'add', '(', 'colors', '[', 'i', ']', ')', 'if', 'patterns', '[', 'i', ']', 'not', 'in', 'sdict', '.', 'keys', '(', ')', ':', 'sdict', '[', 'patterns', '[', 'i', ']', ']', '=', '[', ']', 'keys', '=', 'sdict', '[', 'patterns', '[', 'i', ']', ']', 'keys', '.', 'append', '(', 'colors', '[', 'i', ']', ')', 'sdict', '[', 'patterns', '[', 'i', ']', ']', '=', 'keys', 'if', 'len', '(', 'pset', ')', '!=', 'len', '(', 'sset', ')', ':', 'return', 'False', 'for', 'values', 'in', 'sdict', '.', 'values', '(', ')', ':', 'for', 'i', 'in', 'range', '(', 'len', '(', 'values', ')', '-', '1', ')', ':', 'if', 'values', '[', 'i', ']', '!=', 'values', '[', 'i', '+', '1', ']', ':', 'return', 'False', 'return', 'True', 'print', '(', 'is_samePatterns', '(', '[', '""red""', ',', '""green""', ',', '""green""', ']', ',', '[', '""a""', ',', '""b""', ',', '""b""', ']', ')', ')', 'print', '(', 'is_samePatterns', '(', '[', '""red""', ',', '""green""', ',', '""greenn""', ']', ',', '[', '""a""', ',', '""b""', ',', '""b""', ']', ')', ')']"
456,"['write', 'python', 'program', 'create', 'dictionary', 'key', 'x', 'z', 'key', 'value', 'list', 'respectively', 'access', 'fifth', 'value', 'key', 'dictionary']","['from', 'pprint', 'import', 'pprint', 'dict_nums', '=', 'dict', '(', 'x', '=', 'list', '(', 'range', '(', '11', ',', '20', ')', ')', ',', 'y', '=', 'list', '(', 'range', '(', '21', ',', '30', ')', ')', ',', 'z', '=', 'list', '(', 'range', '(', '31', ',', '40', ')', ')', ')', 'pprint', '(', 'dict_nums', ')', 'print', '(', 'dict_nums', '[', '""x""', ']', '[', '4', ']', ')', 'print', '(', 'dict_nums', '[', '""y""', ']', '[', '4', ']', ')', 'print', '(', 'dict_nums', '[', '""z""', ']', '[', '4', ']', ')', 'for', 'k', ',', 'v', 'in', 'dict_nums', '.', 'items', '(', ')', ':', 'print', '(', 'k', ',', '""has value""', ',', 'v', ')']"
457,"['write', 'panda', 'program', 'create', 'yearly', 'time', 'period', 'specified', 'year', 'display', 'property', 'period']","['import', 'pandas', 'as', 'pd', 'ytp', '=', 'pd', '.', 'Period', '(', ""'2020'"", ',', ""'A-DEC'"", ')', 'print', '(', '""Yearly time perid:""', ',', 'ytp', ')', 'print', '(', '""\\nAll the properties of the said period:""', ')', 'print', '(', 'dir', '(', 'ytp', ')', ')']"
458,"['write', 'python', 'program', 'set', 'indentation', 'first', 'line']","['import', 'textwrap', 'sample_text', '=', ""'''\rPython is a widely used high-level, general-purpose, interpreted, dynamic\rprogramming language. Its design philosophy emphasizes code readability,\rand its syntax allows programmers to express concepts in fewer lines of\rcode than possible in languages such as C++ or Java.\r    '''"", 'text1', '=', 'textwrap', '.', 'dedent', '(', 'sample_text', ')', '.', 'strip', '(', ')', 'print', '(', ')', 'print', '(', 'textwrap', '.', 'fill', '(', 'text1', ',', 'initial_indent', '=', ""''"", ',', 'subsequent_indent', '=', ""' '"", '*', '4', ',', 'width', '=', '80', ',', ')', ')', 'print', '(', ')']"
459,"['write', 'numpy', 'program', 'reverse', 'array', 'first', 'element', 'becomes', 'last']","['import', 'numpy', 'as', 'np', 'import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '12', ',', '38', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Reverse array:""', ')', 'x', '=', 'x', '[', ':', ':', '-', '1', ']', 'print', '(', 'x', ')']"
460,"['write', 'python', 'program', 'display', 'examination', 'schedule', 'extract', 'date']","['exam_st_date', '=', '(', '11', ',', '12', ',', '2014', ')', 'print', '(', '""The examination will start from : %i / %i / %i""', '%', 'exam_st_date', ')']"
461,"['write', 'python', 'program', 'count', 'number', 'nonempty', 'substring', 'given', 'string']","['def', 'number_of_substrings', '(', 'str', ')', ':', 'str_len', '=', 'len', '(', 'str', ')', ';', 'return', 'int', '(', 'str_len', '*', '(', 'str_len', '+', '1', ')', '/', '2', ')', ';', 'str1', '=', 'input', '(', '""Input a string: ""', ')', 'print', '(', '""Number of substrings:""', ')', 'print', '(', 'number_of_substrings', '(', 'str1', ')', ')']"
462,"['write', 'panda', 'program', 'change', 'order', 'index', 'given', 'series']","['import', 'pandas', 'as', 'pd', 's', '=', 'pd', '.', 'Series', '(', 'data', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ',', 'index', '=', '[', ""'A'"", ',', ""'B'"", ',', ""'C'"", ',', ""'D'"", ',', ""'E'"", ']', ')', 'print', '(', '""Original Data Series:""', ')', 'print', '(', 's', ')', 's', '=', 's', '.', 'reindex', '(', 'index', '=', '[', ""'B'"", ',', ""'A'"", ',', ""'C'"", ',', ""'D'"", ',', ""'E'"", ']', ')', 'print', '(', '""Data Series after changing the order of index:""', ')', 'print', '(', 's', ')']"
463,"['write', 'numpy', 'program', 'compute', 'cross', 'product', 'two', 'given', 'vector']","['import', 'numpy', 'as', 'np', 'p', '=', '[', '[', '1', ',', '0', ']', ',', '[', '0', ',', '1', ']', ']', 'q', '=', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', 'print', '(', '""original matrix:""', ')', 'print', '(', 'p', ')', 'print', '(', 'q', ')', 'result1', '=', 'np', '.', 'cross', '(', 'p', ',', 'q', ')', 'result2', '=', 'np', '.', 'cross', '(', 'q', ',', 'p', ')', 'print', '(', '""cross product of the said two vectors(p, q):""', ')', 'print', '(', 'result1', ')', 'print', '(', '""cross product of the said two vectors(q, p):""', ')', 'print', '(', 'result2', ')']"
464,"['write', 'python', 'program', 'remove', 'none', 'value', 'given', 'list']","['def', 'remove_none', '(', 'nums', ')', ':', 'result', '=', '[', 'x', 'for', 'x', 'in', 'nums', 'if', 'x', 'is', 'not', 'None', ']', 'return', 'result', 'nums', '=', '[', '12', ',', '0', ',', 'None', ',', '23', ',', 'None', ',', '-', '55', ',', '234', ',', '89', ',', 'None', ',', '0', ',', '6', ',', '-', '12', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nRemove None value from the said list:""', ')', 'print', '(', 'remove_none', '(', 'nums', ')', ')']"
465,"['write', 'python', 'program', 'print', 'nested', 'list', 'list', 'new', 'line', 'using', 'print', 'function']","['colors', '=', '[', '[', ""'Red'"", ']', ',', '[', ""'Green'"", ']', ',', '[', ""'Black'"", ']', ']', 'print', '(', ""'\\n'"", '.', 'join', '(', '[', 'str', '(', 'lst', ')', 'for', 'lst', 'in', 'colors', ']', ')', ')']"
466,"['write', 'python', 'program', 'search', 'specific', 'item', 'given', 'doubly', 'linked', 'list', 'return', 'true', 'item', 'found', 'otherwise', 'return', 'false']","['class', 'Node', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ',', 'next', '=', 'None', ',', 'prev', '=', 'None', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'next', 'self', '.', 'prev', '=', 'prev', 'class', 'doubly_linked_list', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'tail', '=', 'None', 'self', '.', 'count', '=', '0', 'def', 'append_item', '(', 'self', ',', 'data', ')', ':', 'new_item', '=', 'Node', '(', 'data', ',', 'None', ',', 'None', ')', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_item', 'self', '.', 'tail', '=', 'self', '.', 'head', 'else', ':', 'new_item', '.', 'prev', '=', 'self', '.', 'tail', 'self', '.', 'tail', '.', 'next', '=', 'new_item', 'self', '.', 'tail', '=', 'new_item', 'self', '.', 'count', '+=', '1', 'def', 'iter', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'item_val', '=', 'current', '.', 'data', 'current', '=', 'current', '.', 'next', 'yield', 'item_val', 'def', 'print_foward', '(', 'self', ')', ':', 'for', 'node', 'in', 'self', '.', 'iter', '(', ')', ':', 'print', '(', 'node', ')', 'def', 'search_item', '(', 'self', ',', 'val', ')', ':', 'for', 'node', 'in', 'self', '.', 'iter', '(', ')', ':', 'if', 'val', '==', 'node', ':', 'return', 'True', 'return', 'False', 'items', '=', 'doubly_linked_list', '(', ')', 'items', '.', 'append_item', '(', ""'PHP'"", ')', 'items', '.', 'append_item', '(', ""'Python'"", ')', 'items', '.', 'append_item', '(', ""'C#'"", ')', 'items', '.', 'append_item', '(', ""'C++'"", ')', 'items', '.', 'append_item', '(', ""'Java'"", ')', 'items', '.', 'append_item', '(', ""'SQL'"", ')', 'print', '(', '""Original list:""', ')', 'items', '.', 'print_foward', '(', ')', 'print', '(', '""\\n""', ')', 'if', 'items', '.', 'search_item', '(', ""'SQL'"", ')', ':', 'print', '(', '""True""', ')', 'else', ':', 'print', '(', '""False""', ')', 'if', 'items', '.', 'search_item', '(', ""'C+'"", ')', ':', 'print', '(', '""True""', ')', 'else', ':', 'print', '(', '""False""', ')']"
467,"['write', 'numpy', 'program', 'convert', 'sequence', 'depth', 'wise', 'along', 'third', 'axis', 'two', 'array', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '[', '10', ']', ',', '[', '20', ']', ',', '[', '30', ']', ']', ')', 'b', '=', 'np', '.', 'array', '(', '[', '[', '40', ']', ',', '[', '50', ']', ',', '[', '60', ']', ']', ')', 'c', '=', 'np', '.', 'dstack', '(', '(', 'a', ',', 'b', ')', ')', 'print', '(', 'c', ')']"
468,"['write', 'panda', 'program', 'check', 'whether', 'two', 'given', 'word', 'present', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', '10', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'c0001'"", ',', ""'c0002'"", ',', ""'c0003'"", ',', ""'c0003'"", ',', ""'c0004'"", ']', ',', ""'address'"", ':', '[', ""'9910 Surrey Ave.'"", ',', ""'92 N. Bishop Ave.'"", ',', ""'9910 Golden Star Ave.'"", ',', ""'102 Dunbar St.'"", ',', ""'17 West Livingston Court'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'test_and_cond', '(', 'text', ')', ':', 'result', '=', 're', '.', 'findall', '(', ""r'(?=.*Ave.)(?=.*9910).*'"", ',', 'text', ')', 'return', '"" ""', '.', 'join', '(', 'result', ')', 'df', '[', ""'check_two_words'"", ']', '=', 'df', '[', ""'address'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'test_and_cond', '(', 'x', ')', ')', 'print', '(', '""\\nPresent two words!""', ')', 'print', '(', 'df', ')']"
469,"['write', 'python', 'program', 'create', 'dictionary', 'grouping', 'sequence', 'keyvalue', 'pair', 'dictionary', 'list', 'use', 'collection', 'module']","['from', 'collections', 'import', 'defaultdict', 'def', 'grouping_dictionary', '(', 'l', ')', ':', 'd', '=', 'defaultdict', '(', 'list', ')', 'for', 'k', ',', 'v', 'in', 'l', ':', 'd', '[', 'k', ']', '.', 'append', '(', 'v', ')', 'return', 'd', 'colors', '=', '[', '(', ""'yellow'"", ',', '1', ')', ',', '(', ""'blue'"", ',', '2', ')', ',', '(', ""'yellow'"", ',', '3', ')', ',', '(', ""'blue'"", ',', '4', ')', ',', '(', ""'red'"", ',', '1', ')', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'colors', ')', 'print', '(', '""\\nGrouping a sequence of key-value pairs into a dictionary of lists:""', ')', 'print', '(', 'grouping_dictionary', '(', 'colors', ')', ')']"
470,"['write', 'numpy', 'program', 'test', 'elementwise', 'complex', 'number', 'real', 'number', 'given', 'array', 'also', 'test', 'whether', 'given', 'number', 'scalar', 'type']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '1', '+', '1j', ',', '1', '+', '0j', ',', '4.5', ',', '3', ',', '2', ',', '2j', ']', ')', 'print', '(', '""Original array""', ')', 'print', '(', 'a', ')', 'print', '(', '""Checking for complex number:""', ')', 'print', '(', 'np', '.', 'iscomplex', '(', 'a', ')', ')', 'print', '(', '""Checking for real number:""', ')', 'print', '(', 'np', '.', 'isreal', '(', 'a', ')', ')', 'print', '(', '""Checking for scalar type:""', ')', 'print', '(', 'np', '.', 'isscalar', '(', '3.1', ')', ')', 'print', '(', 'np', '.', 'isscalar', '(', '[', '3.1', ']', ')', ')']"
471,"['write', 'panda', 'program', 'create', 'time', 'series', 'object', 'time', 'zone']","['import', 'pandas', 'as', 'pd', 'print', '(', '""Timezone: Europe/Berlin:""', ')', 'print', '(', '""Using pytz:""', ')', 'date_pytz', '=', 'pd', '.', 'Timestamp', '(', ""'2019-01-01'"", ',', 'tz', '=', ""'Europe/Berlin'"", ')', 'print', '(', 'date_pytz', '.', 'tz', ')', 'print', '(', '""Using dateutil:""', ')', 'date_util', '=', 'pd', '.', 'Timestamp', '(', ""'2019-01-01'"", ',', 'tz', '=', ""'dateutil/Europe/Berlin'"", ')', 'print', '(', 'date_util', '.', 'tz', ')', 'print', '(', '""\\nUS/Pacific:""', ')', 'print', '(', '""Using pytz:""', ')', 'date_pytz', '=', 'pd', '.', 'Timestamp', '(', ""'2019-01-01'"", ',', 'tz', '=', ""'US/Pacific'"", ')', 'print', '(', 'date_pytz', '.', 'tz', ')', 'print', '(', '""Using dateutil:""', ')', 'date_util', '=', 'pd', '.', 'Timestamp', '(', ""'2019-01-01'"", ',', 'tz', '=', ""'dateutil/US/Pacific'"", ')', 'print', '(', 'date_util', '.', 'tz', ')']"
472,"['write', 'numpy', 'program', 'check', 'whether', 'numpy', 'array', 'contains', 'specified', 'row']","['import', 'numpy', 'as', 'np', 'num', '=', 'np', '.', 'arange', '(', '20', ')', 'arr1', '=', 'np', '.', 'reshape', '(', 'num', ',', '[', '4', ',', '5', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arr1', ')', 'print', '(', '[', '0', ',', '1', ',', '2', ',', '3', ',', '4', ']', 'in', 'arr1', '.', 'tolist', '(', ')', ')', 'print', '(', '[', '0', ',', '1', ',', '2', ',', '3', ',', '5', ']', 'in', 'arr1', '.', 'tolist', '(', ')', ')', 'print', '(', '[', '15', ',', '16', ',', '17', ',', '18', ',', '19', ']', 'in', 'arr1', '.', 'tolist', '(', ')', ')']"
473,"['write', 'numpy', 'program', 'check', 'whether', 'numpy', 'array', 'empty']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '2', ',', '3', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', ']', ')', 'print', '(', 'x', '.', 'size', ')', 'print', '(', 'y', '.', 'size', ')']"
474,"['write', 'python', 'program', 'accepts', 'comma', 'separated', 'sequence', 'word', 'input', 'print', 'unique', 'word', 'sorted', 'form', 'alphanumerically']","['items', '=', 'input', '(', '""Input comma separated sequence of words""', ')', 'words', '=', '[', 'word', 'for', 'word', 'in', 'items', '.', 'split', '(', '"",""', ')', ']', 'print', '(', '"",""', '.', 'join', '(', 'sorted', '(', 'list', '(', 'set', '(', 'words', ')', ')', ')', ')', ')']"
475,"['write', 'python', 'program', 'set', 'new', 'value', 'item', 'singly', 'linked', 'list', 'using', 'index', 'value']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'singly_linked_list', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'tail', '=', 'None', 'self', '.', 'head', '=', 'None', 'self', '.', 'count', '=', '0', 'def', 'append_item', '(', 'self', ',', 'data', ')', ':', 'node', '=', 'Node', '(', 'data', ')', 'if', 'self', '.', 'head', ':', 'self', '.', 'head', '.', 'next', '=', 'node', 'self', '.', 'head', '=', 'node', 'else', ':', 'self', '.', 'tail', '=', 'node', 'self', '.', 'head', '=', 'node', 'self', '.', 'count', '+=', '1', 'def', '__getitem__', '(', 'self', ',', 'index', ')', ':', 'if', 'index', '>', 'self', '.', 'count', '-', '1', ':', 'return', '""Index out of range""', 'current_val', '=', 'self', '.', 'tail', 'for', 'n', 'in', 'range', '(', 'index', ')', ':', 'current_val', '=', 'current_val', '.', 'next', 'return', 'current_val', '.', 'data', 'def', '__setitem__', '(', 'self', ',', 'index', ',', 'value', ')', ':', 'if', 'index', '>', 'self', '.', 'count', '-', '1', ':', 'raise', 'Exception', '(', '""Index out of range.""', ')', 'current', '=', 'self', '.', 'tail', 'for', 'n', 'in', 'range', '(', 'index', ')', ':', 'current', '=', 'current', '.', 'next', 'current', '.', 'data', '=', 'value', 'items', '=', 'singly_linked_list', '(', ')', 'items', '.', 'append_item', '(', ""'PHP'"", ')', 'items', '.', 'append_item', '(', ""'Python'"", ')', 'items', '.', 'append_item', '(', ""'C#'"", ')', 'items', '.', 'append_item', '(', ""'C++'"", ')', 'items', '.', 'append_item', '(', ""'Java'"", ')', 'print', '(', '""Modify items by index:""', ')', 'items', '[', '1', ']', '=', '""SQL""', 'print', '(', '""New value: ""', ',', 'items', '[', '1', ']', ')', 'items', '[', '4', ']', '=', '""Perl""', 'print', '(', '""New value: ""', ',', 'items', '[', '4', ']', ')']"
476,"['write', 'python', 'program', 'update', 'specific', 'column', 'value', 'given', 'table', 'select', 'row', 'updating', 'said', 'table']","['import', 'sqlite3', 'from', 'sqlite3', 'import', 'Error', 'def', 'sql_connection', '(', ')', ':', 'try', ':', 'conn', '=', 'sqlite3', '.', 'connect', '(', ""'mydatabase.db'"", ')', 'return', 'conn', 'except', 'Error', ':', 'print', '(', 'Error', ')', 'def', 'sql_table', '(', 'conn', ')', ':', 'cursorObj', '=', 'conn', '.', 'cursor', '(', ')', 'cursorObj', '.', 'execute', '(', '""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));""', ')', 'cursorObj', '.', 'executescript', '(', '""""""\r    INSERT INTO salesman VALUES(5001,\'James Hoog\', \'New York\', 0.15);\r    INSERT INTO salesman VALUES(5002,\'Nail Knite\', \'Paris\', 0.25);\r    INSERT INTO salesman VALUES(5003,\'Pit Alex\', \'London\', 0.15);\r    INSERT INTO salesman VALUES(5004,\'Mc Lyon\', \'Paris\', 0.35);\r    INSERT INTO salesman VALUES(5005,\'Paul Adam\', \'Rome\', 0.45);\r    """"""', ')', 'cursorObj', '.', 'execute', '(', '""SELECT * FROM salesman""', ')', 'rows', '=', 'cursorObj', '.', 'fetchall', '(', ')', 'print', '(', '""Agent details:""', ')', 'for', 'row', 'in', 'rows', ':', 'print', '(', 'row', ')', 'print', '(', '""\\nUpdate commission .15 to .45 where id is 5003:""', ')', 'sql_update_query', '=', '""""""Update salesman set commission = .45 where salesman_id = 5003""""""', 'cursorObj', '.', 'execute', '(', 'sql_update_query', ')', 'conn', '.', 'commit', '(', ')', 'print', '(', '""Record Updated successfully ""', ')', 'cursorObj', '.', 'execute', '(', '""SELECT * FROM salesman""', ')', 'rows', '=', 'cursorObj', '.', 'fetchall', '(', ')', 'print', '(', '""\\nAfter updating Agent details:""', ')', 'for', 'row', 'in', 'rows', ':', 'print', '(', 'row', ')', 'sqllite_conn', '=', 'sql_connection', '(', ')', 'sql_table', '(', 'sqllite_conn', ')', 'if', '(', 'sqllite_conn', ')', ':', 'sqllite_conn', '.', 'close', '(', ')', 'print', '(', '""\\nThe SQLite connection is closed.""', ')']"
477,"['write', 'python', 'program', 'find', 'k']","['class', 'TreeNode', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ',', 'x', ')', ':', 'self', '.', 'val', '=', 'x', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'def', 'kth_smallest', '(', 'root', ',', 'k', ')', ':', 'stack', '=', '[', ']', 'while', 'root', 'or', 'stack', ':', 'while', 'root', ':', 'stack', '.', 'append', '(', 'root', ')', 'root', '=', 'root', '.', 'left', 'root', '=', 'stack', '.', 'pop', '(', ')', 'k', '-=', '1', 'if', 'k', '==', '0', ':', 'break', 'root', '=', 'root', '.', 'right', 'return', 'root', '.', 'val', 'root', '=', 'TreeNode', '(', '8', ')', 'root', '.', 'left', '=', 'TreeNode', '(', '5', ')', 'root', '.', 'right', '=', 'TreeNode', '(', '14', ')', 'root', '.', 'left', '.', 'left', '=', 'TreeNode', '(', '4', ')', 'root', '.', 'left', '.', 'right', '=', 'TreeNode', '(', '6', ')', 'root', '.', 'left', '.', 'right', '.', 'left', '=', 'TreeNode', '(', '8', ')', 'root', '.', 'left', '.', 'right', '.', 'right', '=', 'TreeNode', '(', '7', ')', 'root', '.', 'right', '.', 'right', '=', 'TreeNode', '(', '24', ')', 'root', '.', 'right', '.', 'right', '.', 'left', '=', 'TreeNode', '(', '22', ')', 'print', '(', 'kth_smallest', '(', 'root', ',', '2', ')', ')', 'print', '(', 'kth_smallest', '(', 'root', ',', '3', ')', ')']"
478,"['write', 'panda', 'program', 'count', 'yearcountry', 'wise', 'frequency', 'reporting', 'date', 'unidentified', 'flying', 'objectufo']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'print', '(', '""Original Dataframe:""', ')', 'print', '(', 'df', '.', 'head', '(', ')', ')', 'df', '[', ""'Year'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', '""%d""', '%', '(', 'x', '.', 'year', ')', ')', 'result', '=', 'df', '.', 'groupby', '(', '[', ""'Year'"", ',', ""'country'"", ']', ')', '.', 'size', '(', ')', 'print', '(', '""\\nCountry-year wise frequency of reporting dates of UFO:""', ')', 'print', '(', 'result', ')']"
479,"['write', 'python', 'program', 'create', 'iterator', 'return', 'consecutive', 'key', 'group', 'iterable']","['import', 'itertools', 'as', 'it', 'print', '(', '""Iterate over characters of a string and display\\nconsecutive keys and groups from the iterable:""', ')', 'str1', '=', ""'AAAAJJJJHHHHNWWWEERRRSSSOOIIU'"", 'data_groupby', '=', 'it', '.', 'groupby', '(', 'str1', ')', 'for', 'key', ',', 'group', 'in', 'data_groupby', ':', 'print', '(', ""'Key:'"", ',', 'key', ')', 'print', '(', ""'Group:'"", ',', 'list', '(', 'group', ')', ')', 'print', '(', '""\\nIterate over elements of a list and display\\nconsecutive keys and groups from the iterable:""', ')', 'str1', '=', ""'AAAAJJJJHHHHNWWWEERRRSSSOOIIU'"", 'str1', '=', '[', '1', ',', '2', ',', '2', ',', '3', ',', '4', ',', '4', ',', '5', ',', '5', ',', '5', ',', '6', ',', '6', ',', '7', ',', '7', ',', '7', ',', '8', ']', 'data_groupby', '=', 'it', '.', 'groupby', '(', 'str1', ')', 'for', 'key', ',', 'group', 'in', 'data_groupby', ':', 'print', '(', ""'Key:'"", ',', 'key', ')', 'print', '(', ""'Group:'"", ',', 'list', '(', 'group', ')', ')']"
480,"['write', 'python', 'program', 'remove', 'element', 'given', 'deque', 'object']","['import', 'collections', 'odd_nums', '=', '(', '1', ',', '3', ',', '5', ',', '7', ',', '9', ')', 'odd_deque', '=', 'collections', '.', 'deque', '(', 'odd_nums', ')', 'print', '(', '""Original Deque object with odd numbers:""', ')', 'print', '(', 'odd_deque', ')', 'print', '(', '""Deque length: %d""', '%', '(', 'len', '(', 'odd_deque', ')', ')', ')', 'odd_deque', '.', 'clear', '(', ')', 'print', '(', '""Deque object after removing all numbers-""', ')', 'print', '(', 'odd_deque', ')', 'print', '(', '""Deque length:%d""', '%', '(', 'len', '(', 'odd_deque', ')', ')', ')']"
481,"['write', 'numpy', 'program', 'create', 'array', 'shape', 'swap']","['import', 'numpy', 'as', 'np', 'array_nums', '=', 'np', '.', 'arange', '(', '20', ')', '.', 'reshape', '(', '4', ',', '5', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'array_nums', ')', 'print', '(', '""\\nAfter swapping column1 with column4:""', ')', 'array_nums', '[', ':', ',', '[', '0', ',', '3', ']', ']', '=', 'array_nums', '[', ':', ',', '[', '3', ',', '0', ']', ']', 'print', '(', 'array_nums', ')']"
482,"['write', 'panda', 'program', 'create', 'timeseries', 'display', 'sunday', 'given', 'year']","['import', 'pandas', 'as', 'pd', 'result', '=', 'pd', '.', 'Series', '(', 'pd', '.', 'date_range', '(', ""'2020-01-01'"", ',', 'periods', '=', '52', ',', 'freq', '=', ""'W-SUN'"", ')', ')', 'print', '(', '""All Sundays of 2019:""', ')', 'print', '(', 'result', ')']"
483,"['write', 'python', 'function', 'take', 'list', 'return', 'new', 'list', 'unique', 'element', 'first', 'list']","['def', 'unique_list', '(', 'l', ')', ':', 'x', '=', '[', ']', 'for', 'a', 'in', 'l', ':', 'if', 'a', 'not', 'in', 'x', ':', 'x', '.', 'append', '(', 'a', ')', 'return', 'x', 'print', '(', 'unique_list', '(', '[', '1', ',', '2', ',', '3', ',', '3', ',', '3', ',', '3', ',', '4', ',', '5', ']', ')', ')']"
484,"['write', 'python', 'program', 'write', 'python', 'dictionary', 'csv', 'file', 'writing', 'csv', 'file', 'read', 'csv', 'file', 'display', 'content']","['import', 'csv', 'csv_columns', '=', '[', ""'id'"", ',', ""'Column1'"", ',', ""'Column2'"", ',', ""'Column3'"", ',', ""'Column4'"", ',', ""'Column5'"", ']', 'dict_data', '=', '{', ""'id'"", ':', '[', ""'1'"", ',', ""'2'"", ',', ""'3'"", ']', ',', ""'Column1'"", ':', '[', '33', ',', '25', ',', '56', ']', ',', ""'Column2'"", ':', '[', '35', ',', '30', ',', '30', ']', ',', ""'Column3'"", ':', '[', '21', ',', '40', ',', '55', ']', ',', ""'Column4'"", ':', '[', '71', ',', '25', ',', '55', ']', ',', ""'Column5'"", ':', '[', '10', ',', '10', ',', '40', ']', ',', '}', 'csv_file', '=', '""temp.csv""', 'try', ':', 'with', 'open', '(', 'csv_file', ',', ""'w'"", ')', 'as', 'csvfile', ':', 'writer', '=', 'csv', '.', 'DictWriter', '(', 'csvfile', ',', 'fieldnames', '=', 'csv_columns', ')', 'writer', '.', 'writeheader', '(', ')', 'for', 'data', 'in', 'dict_data', ':', 'writer', '.', 'writerow', '(', 'dict_data', ')', 'except', 'IOError', ':', 'print', '(', '""I/O error""', ')', 'data', '=', 'csv', '.', 'DictReader', '(', 'open', '(', 'csv_file', ')', ')', 'print', '(', '""CSV file as a dictionary:\\n""', ')', 'for', 'row', 'in', 'data', ':', 'print', '(', 'row', ')']"
485,"['write', 'python', 'program', 'find', 'index', 'element', 'given', 'list', 'greater', 'specified', 'value']","['def', 'test', '(', 'lst', ',', 'value', ')', ':', 'result', '=', '[', 'i', 'for', 'i', ',', 'val', 'in', 'enumerate', '(', 'lst', ')', 'if', 'val', '>', 'value', ']', 'return', 'result', 'nums', '=', '[', '1234', ',', '1522', ',', '1984', ',', '19372', ',', '1000', ',', '2342', ',', '7626', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'val', '=', '3000', 'print', '(', '""Indices of elements of the said list, greater than""', ',', 'val', ')', 'print', '(', 'test', '(', 'nums', ',', 'val', ')', ')', 'nums', '=', '[', '1234', ',', '1522', ',', '1984', ',', '19372', ',', '1000', ',', '2342', ',', '7626', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'val', '=', '20000', 'print', '(', '""Indices of elements of the said list, greater than""', ',', 'val', ')', 'print', '(', 'test', '(', 'nums', ',', 'val', ')', ')']"
486,"['write', 'numpy', 'program', 'test', 'whether', 'element', 'array', 'also', 'present', 'second', 'array']","['import', 'numpy', 'as', 'np', 'array1', '=', 'np', '.', 'array', '(', '[', '0', ',', '10', ',', '20', ',', '40', ',', '60', ']', ')', 'print', '(', '""Array1: ""', ',', 'array1', ')', 'array2', '=', '[', '0', ',', '40', ']', 'print', '(', '""Array2: ""', ',', 'array2', ')', 'print', '(', '""Compare each element of array1 and array2""', ')', 'print', '(', 'np', '.', 'in1d', '(', 'array1', ',', 'array2', ')', ')']"
487,"['write', 'python', 'program', 'determine', 'largest', 'smallest', 'integer', 'longs', 'float']","['import', 'sys', 'print', '(', '""Float value information: ""', ',', 'sys', '.', 'float_info', ')', 'print', '(', '""\\nInteger value information: ""', ',', 'sys', '.', 'int_info', ')', 'print', '(', '""\\nMaximum size of an integer: ""', ',', 'sys', '.', 'maxsize', ')']"
488,"['write', 'panda', 'program', 'extract', 'number', 'greater', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', '10', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'c0001'"", ',', ""'c0002'"", ',', ""'c0003'"", ',', ""'c0003'"", ',', ""'c0004'"", ']', ',', ""'address'"", ':', '[', ""'7277 Surrey Ave.1111'"", ',', ""'920 N. Bishop Ave.'"", ',', ""'9910 Golden Star St.'"", ',', ""'1025 Dunbar St.'"", ',', ""'1700 West Livingston Court'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'test_num_great', '(', 'text', ')', ':', 'result', '=', 're', '.', 'findall', '(', ""r'95[5-9]|9[6-9]\\d|[1-9]\\d{3,}'"", ',', 'text', ')', 'return', '"" ""', '.', 'join', '(', 'result', ')', 'df', '[', ""'num_great'"", ']', '=', 'df', '[', ""'address'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'test_num_great', '(', 'x', ')', ')', 'print', '(', '""\\nNumber greater than 940:""', ')', 'print', '(', 'df', ')']"
489,"['write', 'python', 'program', 'print', 'long', 'text', 'convert', 'string', 'list', 'print', 'word', 'frequency']","['string_words', '=', '\'\'\'United States Declaration of Independence\rFrom Wikipedia, the free encyclopedia\rThe United States Declaration of Independence is the statement\radopted by the Second Continental Congress meeting at the Pennsylvania State\rHouse (Independence Hall) in Philadelphia on July 4, 1776, which announced\rthat the thirteen American colonies, then at war with the Kingdom of Great\rBritain, regarded themselves as thirteen independent sovereign states, no longer\runder British rule. These states would found a new nation – the United States of\rAmerica. John Adams was a leader in pushing for independence, which was passed\ron July 2 with no opposing vote cast. A committee of five had already drafted the\rformal declaration, to be ready when Congress voted on independence.\r\rJohn Adams persuaded the committee to select Thomas Jefferson to compose the original\rdraft of the document, which Congress would edit to produce the final version.\rThe Declaration was ultimately a formal explanation of why Congress had voted on July\r2 to declare independence from Great Britain, more than a year after the outbreak of\rthe American Revolutionary War. The next day, Adams wrote to his wife Abigail: ""The\rSecond Day of July 1776, will be the most memorable Epocha, in the History of America.""\rBut Independence Day is actually celebrated on July 4, the date that the Declaration of\rIndependence was approved.\r\rAfter ratifying the text on July 4, Congress issued the Declaration of Independence in\rseveral forms. It was initially published as the printed Dunlap broadside that was widely\rdistributed and read to the public. The source copy used for this printing has been lost,\rand may have been a copy in Thomas Jefferson\'s hand.[5] Jefferson\'s original draft, complete\rwith changes made by John Adams and Benjamin Franklin, and Jefferson\'s notes of changes made\rby Congress, are preserved at the Library of Congress. The best-known version of the Declaration\ris a signed copy that is displayed at the National Archives in Washington, D.C., and which is\rpopularly regarded as the official document. This engrossed copy was ordered by Congress on\rJuly 19 and signed primarily on August 2.\r\rThe sources and interpretation of the Declaration have been the subject of much scholarly inquiry.\rThe Declaration justified the independence of the United States by listing colonial grievances against\rKing George III, and by asserting certain natural and legal rights, including a right of revolution.\rHaving served its original purpose in announcing independence, references to the text of the\rDeclaration were few in the following years. Abraham Lincoln made it the centerpiece of his rhetoric\r(as in the Gettysburg Address of 1863) and his policies. Since then, it has become a well-known statement\ron human rights, particularly its second sentence:\r\rWe hold these truths to be self-evident, that all men are created equal, that they are endowed by their\rCreator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.\r\rThis has been called ""one of the best-known sentences in the English language"", containing ""the most potent\rand consequential words in American history"". The passage came to represent a moral standard to which\rthe United States should strive. This view was notably promoted by Abraham Lincoln, who considered the\rDeclaration to be the foundation of his political philosophy and argued that it is a statement of principles\rthrough which the United States Constitution should be interpreted.\r\rThe U.S. Declaration of Independence inspired many other similar documents in other countries, the first\rbeing the 1789 Declaration of Flanders issued during the Brabant Revolution in the Austrian Netherlands\r(modern-day Belgium). It also served as the primary model for numerous declarations of independence across\rEurope and Latin America, as well as Africa (Liberia) and Oceania (New Zealand) during the first half of the\r19th century.\'\'\'', 'word_list', '=', 'string_words', '.', 'split', '(', ')', 'word_freq', '=', '[', 'word_list', '.', 'count', '(', 'n', ')', 'for', 'n', 'in', 'word_list', ']', 'print', '(', '""String:\\n {} \\n""', '.', 'format', '(', 'string_words', ')', ')', 'print', '(', '""List:\\n {} \\n""', '.', 'format', '(', 'str', '(', 'word_list', ')', ')', ')', 'print', '(', '""Pairs (Words and Frequencies:\\n {}""', '.', 'format', '(', 'str', '(', 'list', '(', 'zip', '(', 'word_list', ',', 'word_freq', ')', ')', ')', ')', ')']"
490,"['write', 'panda', 'program', 'extract', 'number', 'le', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', '10', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'c0001'"", ',', ""'c0002'"", ',', ""'c0003'"", ',', ""'c0003'"", ',', ""'c0004'"", ']', ',', ""'address'"", ':', '[', ""'72 Surrey Ave.11'"", ',', ""'92 N. Bishop Ave.'"", ',', ""'9910 Golden Star St.'"", ',', ""'102 Dunbar St.'"", ',', ""'17 West Livingston Court'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'test_num_less', '(', 'n', ')', ':', 'nums', '=', '[', ']', 'for', 'i', 'in', 'n', '.', 'split', '(', ')', ':', 'result', '=', 're', '.', 'findall', '(', ""r'\\b(0*(?:[1-9][0-9]?|100))\\b'"", ',', 'i', ')', 'nums', '.', 'append', '(', 'result', ')', 'all_num', '=', '[', '"",""', '.', 'join', '(', 'x', ')', 'for', 'x', 'in', 'nums', 'if', 'x', '!=', '[', ']', ']', 'return', '"" ""', '.', 'join', '(', 'all_num', ')', 'df', '[', ""'num_less'"", ']', '=', 'df', '[', ""'address'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'test_num_less', '(', 'x', ')', ')', 'print', '(', '""\\nNumber less than 100:""', ')', 'print', '(', 'df', ')']"
491,"['write', 'panda', 'program', 'split', 'following', 'dataframe', 'group', 'count', 'unique', 'value', 'value', 'column']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'id'"", ':', '[', '1', ',', '1', ',', '2', ',', '3', ',', '3', ',', '4', ',', '4', ',', '4', ']', ',', ""'value'"", ':', '[', ""'a'"", ',', ""'a'"", ',', ""'b'"", ',', 'None', ',', ""'a'"", ',', ""'a'"", ',', 'None', ',', ""'b'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""Count unique values:""', ')', 'print', '(', 'df', '.', 'groupby', '(', ""'value'"", ')', '[', ""'id'"", ']', '.', 'nunique', '(', ')', ')']"
492,"['write', 'python', 'program', 'compute', 'sum', 'element', 'given', 'array', 'integer', 'use', 'map', 'function']","['from', 'array', 'import', 'array', 'def', 'array_sum', '(', 'nums_arr', ')', ':', 'sum_n', '=', '0', 'for', 'n', 'in', 'nums_arr', ':', 'sum_n', '+=', 'n', 'return', 'sum_n', 'nums', '=', 'array', '(', ""'i'"", ',', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '-', '15', ']', ')', 'print', '(', '""Original array:""', ',', 'nums', ')', 'nums_arr', '=', 'list', '(', 'map', '(', 'int', ',', 'nums', ')', ')', 'result', '=', 'array_sum', '(', 'nums_arr', ')', 'print', '(', '""Sum of all elements of the said array:""', ')', 'print', '(', 'result', ')']"
493,"['write', 'python', 'program', 'convert', 'given', 'string', 'list', 'word']","['str1', '=', '""The quick brown fox jumps over the lazy dog.""', 'print', '(', 'str1', '.', 'split', '(', ""' '"", ')', ')', 'str1', '=', '""The-quick-brown-fox-jumps-over-the-lazy-dog.""', 'print', '(', 'str1', '.', 'split', '(', ""'-'"", ')', ')']"
494,"['write', 'python', 'program', 'display', 'given', 'decimal', 'value', 'scientific', 'notation', 'use', 'decimaldecimal']","['import', 'decimal', 'def', 'format_e', '(', 'n', ')', ':', 'a', '=', ""'%E'"", '%', 'n', 'return', 'a', '.', 'split', '(', ""'E'"", ')', '[', '0', ']', '.', 'rstrip', '(', ""'0'"", ')', '.', 'rstrip', '(', ""'.'"", ')', '+', ""'E'"", '+', 'a', '.', 'split', '(', ""'E'"", ')', '[', '1', ']', 'print', '(', '""Original decimal value: ""', '+', '""40800000000.00000000000000""', ')', 'print', '(', '""Scientific notation of the said decimal value:""', ')', 'print', '(', 'format_e', '(', 'decimal', '.', 'Decimal', '(', ""'40800000000.00000000000000'"", ')', ')', ')', 'print', '(', '""\\nOriginal decimal value: ""', '+', '""40000000000.00000000000000""', ')', 'print', '(', '""Scientific notation of the said decimal value:""', ')', 'print', '(', 'format_e', '(', 'decimal', '.', 'Decimal', '(', ""'40000000000.00000000000000'"", ')', ')', ')', 'print', '(', '""\\nOriginal decimal value: ""', '+', '""40812300000.00000000000000""', ')', 'print', '(', '""Scientific notation of the said decimal value:""', ')', 'print', '(', 'format_e', '(', 'decimal', '.', 'Decimal', '(', ""'40812300000.00000000000000'"", ')', ')', ')']"
495,"['write', 'python', 'program', 'create', 'list', 'concatenating', 'given', 'list', 'range', 'go', 'n']","['my_list', '=', '[', ""'p'"", ',', ""'q'"", ']', 'n', '=', '4', 'new_list', '=', '[', ""'{}{}'"", '.', 'format', '(', 'x', ',', 'y', ')', 'for', 'y', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', 'for', 'x', 'in', 'my_list', ']', 'print', '(', 'new_list', ')']"
496,"['write', 'python', 'program', 'find', 'index', 'item', 'specified', 'list']","['num', '=', '[', '10', ',', '30', ',', '4', ',', '-', '6', ']', 'print', '(', 'num', '.', 'index', '(', '30', ')', ')']"
497,"['write', 'panda', 'program', 'generate', 'time', 'series', 'combining', 'day', 'intraday', 'offset', 'interval']","['import', 'pandas', 'as', 'pd', 'dateset1', '=', 'pd', '.', 'date_range', '(', ""'2029-01-01 00:00:00'"", ',', 'periods', '=', '20', ',', 'freq', '=', ""'3h10min'"", ')', 'print', '(', '""Time series with frequency 3h10min:""', ')', 'print', '(', 'dateset1', ')', 'dateset2', '=', 'pd', '.', 'date_range', '(', ""'2029-01-01 00:00:00'"", ',', 'periods', '=', '20', ',', 'freq', '=', ""'1D10min20U'"", ')', 'print', '(', '""\\nTime series with frequency 1 day 10 minutes and 20 microseconds:""', ')', 'print', '(', 'dateset2', ')']"
498,"['write', 'python', 'program', 'print', 'following', 'integer', 'zero', 'left', 'specified', 'width']","['x', '=', '3', 'y', '=', '123', 'print', '(', '""\\nOriginal Number: ""', ',', 'x', ')', 'print', '(', '""Formatted Number(left padding, width 2): ""', '+', '""{:0>2d}""', '.', 'format', '(', 'x', ')', ')', ';', 'print', '(', '""Original Number: ""', ',', 'y', ')', 'print', '(', '""Formatted Number(left padding, width 6): ""', '+', '""{:0>6d}""', '.', 'format', '(', 'y', ')', ')', ';', 'print', '(', ')']"
499,"['write', 'python', 'program', 'extract', 'character', 'various', 'text', 'file', 'put', 'list']","['import', 'glob', 'char_list', '=', '[', ']', 'files_list', '=', 'glob', '.', 'glob', '(', '""*.txt""', ')', 'for', 'file_elem', 'in', 'files_list', ':', 'with', 'open', '(', 'file_elem', ',', '""r""', ')', 'as', 'f', ':', 'char_list', '.', 'append', '(', 'f', '.', 'read', '(', ')', ')', 'print', '(', 'char_list', ')']"
500,"['write', 'python', 'program', 'add', 'two', 'given', 'list', 'using', 'map', 'lambda']","['nums1', '=', '[', '1', ',', '2', ',', '3', ']', 'nums2', '=', '[', '4', ',', '5', ',', '6', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'result', '=', 'map', '(', 'lambda', 'x', ',', 'y', ':', 'x', '+', 'y', ',', 'nums1', ',', 'nums2', ')', 'print', '(', '""\\nResult: after adding two list""', ')', 'print', '(', 'list', '(', 'result', ')', ')']"
501,"['write', 'python', 'program', 'generate', 'print', 'list', 'first', 'last', 'element', 'value', 'square', 'number', 'included']","['def', 'printValues', '(', ')', ':', 'l', '=', 'list', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '21', ')', ':', 'l', '.', 'append', '(', 'i', '**', '2', ')', 'print', '(', 'l', '[', ':', '5', ']', ')', 'print', '(', 'l', '[', '-', '5', ':', ']', ')', 'printValues', '(', ')']"
502,"['write', 'numpy', 'program', 'extract', 'row', 'given', 'array', 'specific', 'column', 'start', 'given', 'character']","['import', 'numpy', 'as', 'np', 'np', '.', 'set_printoptions', '(', 'linewidth', '=', '100', ')', 'student', '=', 'np', '.', 'array', '(', '[', '[', ""'01'"", ',', ""'V'"", ',', ""'Debby Pramod'"", ']', ',', '[', ""'02'"", ',', ""'V'"", ',', ""'Artemiy Ellie'"", ']', ',', '[', ""'03'"", ',', ""'V'"", ',', ""'Baptist Kamal'"", ']', ',', '[', ""'04'"", ',', ""'V'"", ',', ""'Lavanya Davide'"", ']', ',', '[', ""'05'"", ',', ""'V'"", ',', ""'Fulton Antwan'"", ']', ',', '[', ""'06'"", ',', ""'V'"", ',', ""'Euanthe Sandeep'"", ']', ',', '[', ""'07'"", ',', ""'V'"", ',', ""'Endzela Sanda'"", ']', ',', '[', ""'08'"", ',', ""'V'"", ',', ""'Victoire Waman'"", ']', ',', '[', ""'09'"", ',', ""'V'"", ',', ""'Briar Nur'"", ']', ',', '[', ""'10'"", ',', ""'V'"", ',', ""'Rose Lykos'"", ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'student', ')', 'char', '=', ""'E'"", 'result', '=', 'student', '[', 'np', '.', 'char', '.', 'startswith', '(', 'student', '[', ':', ',', '2', ']', ',', 'char', ')', ']', 'print', '(', '""\\nStudent name starting with""', ',', 'char', ',', '"":""', ')', 'print', '(', 'result', ')', 'char', '=', ""'1'"", 'result', '=', 'student', '[', 'np', '.', 'char', '.', 'startswith', '(', 'student', '[', ':', ',', '0', ']', ',', 'char', ')', ']', 'print', '(', '""\\nStudent id starting with""', ',', 'char', ',', '"":""', ')', 'print', '(', 'result', ')']"
503,"['write', 'python', 'program', 'square', 'element', 'list', 'using', 'map', 'function']","['def', 'square_num', '(', 'n', ')', ':', 'return', 'n', '*', 'n', 'nums', '=', '[', '4', ',', '5', ',', '2', ',', '9', ']', 'print', '(', '""Original List: ""', ',', 'nums', ')', 'result', '=', 'map', '(', 'square_num', ',', 'nums', ')', 'print', '(', '""Square the elements of the said list using map():""', ')', 'print', '(', 'list', '(', 'result', ')', ')']"
504,"['write', 'python', 'program', 'read', 'file', 'line', 'line', 'store', 'list']","['def', 'file_read', '(', 'fname', ')', ':', 'with', 'open', '(', 'fname', ')', 'as', 'f', ':', 'content_list', '=', 'f', '.', 'readlines', '(', ')', 'print', '(', 'content_list', ')', 'file_read', '(', 'test', '.', 'txt', ')']"
505,"['write', 'python', 'program', 'read', 'file', 'line', 'line', 'store', 'array']","['def', 'file_read', '(', 'fname', ')', ':', 'content_array', '=', '[', ']', 'with', 'open', '(', 'fname', ')', 'as', 'f', ':', 'for', 'line', 'in', 'f', ':', 'content_array', '.', 'append', '(', 'line', ')', 'print', '(', 'content_array', ')', 'file_read', '(', ""'test.txt'"", ')']"
506,"['write', 'python', 'program', 'take', 'text', 'file', 'input', 'return', 'number', 'word', 'given', 'text', 'file']","['def', 'count_words', '(', 'filepath', ')', ':', 'with', 'open', '(', 'filepath', ')', 'as', 'f', ':', 'data', '=', 'f', '.', 'read', '(', ')', 'data', '.', 'replace', '(', '"",""', ',', '"" ""', ')', 'return', 'len', '(', 'data', '.', 'split', '(', '"" ""', ')', ')', 'print', '(', 'count_words', '(', '""words.txt""', ')', ')']"
507,"['write', 'python', 'program', 'nth', 'catalan', 'number']","['def', 'catalan_number', '(', 'num', ')', ':', 'if', 'num', '<=', '1', ':', 'return', '1', 'res_num', '=', '0', 'for', 'i', 'in', 'range', '(', 'num', ')', ':', 'res_num', '+=', 'catalan_number', '(', 'i', ')', '*', 'catalan_number', '(', 'num', '-', 'i', '-', '1', ')', 'return', 'res_num', 'for', 'n', 'in', 'range', '(', '10', ')', ':', 'print', '(', 'catalan_number', '(', 'n', ')', ')']"
508,"['write', 'python', 'program', 'get', 'total', 'length', 'value', 'given', 'dictionary', 'string', 'value']","['def', 'test', '(', 'dictt', ')', ':', 'result', '=', 'sum', '(', '(', 'len', '(', 'values', ')', 'for', 'values', 'in', 'dictt', '.', 'values', '(', ')', ')', ')', 'return', 'result', 'color', '=', '{', ""'#FF0000'"", ':', ""'Red'"", ',', ""'#800000'"", ':', ""'Maroon'"", ',', ""'#FFFF00'"", ':', ""'Yellow'"", ',', ""'#808000'"", ':', ""'Olive'"", '}', 'print', '(', '""\\nOriginal dictionary:""', ')', 'print', '(', 'color', ')', 'print', '(', '""\\nTotal length of all values of the said dictionary with string values:""', ')', 'print', '(', 'test', '(', 'color', ')', ')']"
509,"['write', 'panda', 'program', 'convert']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_of_birth'"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', ',', ""'t_id'"", ':', '[', ""'t1'"", ',', ""'t2'"", ',', ""'t3'"", ',', ""'t4'"", ',', ""'t5'"", ',', ""'t6'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nMultiIndex using columns \'t_id\', ‘school_code’ and \'class\':""', ')', 'df1', '=', 'df', '.', 'set_index', '(', '[', ""'t_id'"", ',', ""'school_code'"", ',', ""'class'"", ']', ')', 'print', '(', 'df1', ')', 'print', '(', '""\\nConvert 1st and 3rd levels in the index frame into columns:""', ')', 'df2', '=', 'df1', '.', 'reset_index', '(', 'level', '=', '[', ""'t_id'"", ',', ""'class'"", ']', ')', 'print', '(', 'df2', ')']"
510,"['write', 'python', 'program', 'access', 'function', 'inside', 'function']","['def', 'test', '(', 'a', ')', ':', 'def', 'add', '(', 'b', ')', ':', 'nonlocal', 'a', 'a', '+=', '1', 'return', 'a', '+', 'b', 'return', 'add', 'func', '=', 'test', '(', '4', ')', 'print', '(', 'func', '(', '4', ')', ')']"
511,"['write', 'python', 'program', 'filter', 'list', 'integer', 'using', 'lambda']","['nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', 'print', '(', '""Original list of integers:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nEven numbers from the said list:""', ')', 'even_nums', '=', 'list', '(', 'filter', '(', 'lambda', 'x', ':', 'x', '%', '2', '==', '0', ',', 'nums', ')', ')', 'print', '(', 'even_nums', ')', 'print', '(', '""\\nOdd numbers from the said list:""', ')', 'odd_nums', '=', 'list', '(', 'filter', '(', 'lambda', 'x', ':', 'x', '%', '2', '!=', '0', ',', 'nums', ')', ')', 'print', '(', 'odd_nums', ')']"
512,"['write', 'panda', 'program', 'find', 'region', 'country', 'beverage', 'type', 'year', 'region', 'america', 'europe', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nThe world alcohol consumption details (\'WHO region\',\'Country\',\'Beverage Types\') \\nin the year ‘1986’ or ‘1989’ where  WHO region is ‘Americas’  or \'Europe\':""', ')', 'print', '(', 'w_a_con', '[', '(', '(', 'w_a_con', '[', ""'Year'"", ']', '==', '1985', ')', '|', '(', 'w_a_con', '[', ""'Year'"", ']', '==', '1989', ')', ')', '&', '(', '(', 'w_a_con', '[', ""'WHO region'"", ']', '==', ""'Americas'"", ')', '|', '(', 'w_a_con', '[', ""'WHO region'"", ']', '==', ""'Europe'"", ')', ')', ']', '[', '[', ""'WHO region'"", ',', ""'Country'"", ',', ""'Beverage Types'"", ']', ']', '.', 'head', '(', '10', ')', ')']"
513,"['write', 'python', 'program', 'construct', 'decimal', 'float', 'decimal', 'string', 'also', 'represent', 'decimal', 'value', 'tuple', 'use', 'decimaldecimal']","['import', 'decimal', 'print', '(', '""Construct a Decimal from a float:""', ')', 'pi_val', '=', 'decimal', '.', 'Decimal', '(', '3.14159', ')', 'print', '(', 'pi_val', ')', 'print', '(', 'pi_val', '.', 'as_tuple', '(', ')', ')', 'print', '(', '""\\nConstruct a Decimal from a string:""', ')', 'num_str', '=', 'decimal', '.', 'Decimal', '(', '""123.25""', ')', 'print', '(', 'num_str', ')', 'print', '(', 'num_str', '.', 'as_tuple', '(', ')', ')']"
514,"['write', 'python', 'program', 'remove', 'duplicate', 'element', 'given', 'array', 'return', 'new', 'array']","['import', 'array', 'as', 'arr', 'def', 'test', '(', 'nums', ')', ':', 'return', 'sorted', '(', 'set', '(', 'nums', ')', ',', 'key', '=', 'nums', '.', 'index', ')', 'array_num', '=', 'arr', '.', 'array', '(', ""'i'"", ',', '[', '1', ',', '3', ',', '5', ',', '1', ',', '3', ',', '7', ',', '9', ']', ')', 'print', '(', '""Original array:""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'array_num', ')', ')', ':', 'print', '(', 'array_num', '[', 'i', ']', ',', 'end', '=', ""' '"", ')', 'print', '(', '""\\nAfter removing duplicate elements from the said array:""', ')', 'result', '=', 'arr', '.', 'array', '(', ""'i'"", ',', 'test', '(', 'array_num', ')', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'result', ')', ')', ':', 'print', '(', 'result', '[', 'i', ']', ',', 'end', '=', ""' '"", ')', 'array_num', '=', 'arr', '.', 'array', '(', ""'i'"", ',', '[', '2', ',', '4', ',', '2', ',', '6', ',', '4', ',', '8', ']', ')', 'print', '(', '""\\nOriginal array:""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'array_num', ')', ')', ':', 'print', '(', 'array_num', '[', 'i', ']', ',', 'end', '=', ""' '"", ')', 'print', '(', '""\\nAfter removing duplicate elements from the said array:""', ')', 'result', '=', 'arr', '.', 'array', '(', ""'i'"", ',', 'test', '(', 'array_num', ')', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'result', ')', ')', ':', 'print', '(', 'result', '[', 'i', ']', ',', 'end', '=', ""' '"", ')']"
515,"['write', 'panda', 'program', 'find', 'replace', 'missing', 'value', 'given', 'dataframe', 'valuable', 'information']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', 'np', '.', 'nan', ',', '70002', ',', '70004', ',', 'np', '.', 'nan', ',', '70005', ',', '""--""', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '""?""', ',', '12.43', ',', '2480.4', ',', '250.45', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'?'"", ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3002', ',', '3001', ',', '3001', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '""--""', ',', '3002', ',', '3001', ',', '3001', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5003', ',', '""?""', ',', '5001', ',', 'np', '.', 'nan', ',', '5002', ',', '5001', ',', '""?""', ',', '5003', ',', '5002', ',', '5003', ',', '""--""', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nReplace the missing values with NaN:""', ')', 'result', '=', 'df', '.', 'replace', '(', '{', '""?""', ':', 'np', '.', 'nan', ',', '""--""', ':', 'np', '.', 'nan', '}', ')', 'print', '(', 'result', ')']"
516,"['write', 'python', 'program', 'find', 'index', 'last', 'element', 'given', 'list', 'satisfies', 'provided', 'testing', 'function']","['def', 'find_last_index', '(', 'lst', ',', 'fn', ')', ':', 'return', 'len', '(', 'lst', ')', '-', '1', '-', 'next', '(', 'i', 'for', 'i', ',', 'x', 'in', 'enumerate', '(', 'lst', '[', ':', ':', '-', '1', ']', ')', 'if', 'fn', '(', 'x', ')', ')', 'print', '(', 'find_last_index', '(', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', 'lambda', 'n', ':', 'n', '%', '2', '==', '1', ')', ')']"
517,"['write', 'python', 'program', 'iterate', 'pair', 'consecutive', 'item', 'given', 'list']","['def', 'pairwise', '(', 'l1', ')', ':', 'temp', '=', '[', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'l1', ')', '-', '1', ')', ':', 'current_element', ',', 'next_element', '=', 'l1', '[', 'i', ']', ',', 'l1', '[', 'i', '+', '1', ']', 'x', '=', '(', 'current_element', ',', 'next_element', ')', 'temp', '.', 'append', '(', 'x', ')', 'return', 'temp', 'l1', '=', '[', '1', ',', '1', ',', '2', ',', '3', ',', '3', ',', '4', ',', '4', ',', '5', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'l1', ')', 'print', '(', '""\\nIterate over all pairs of consecutive items of the said list:""', ')', 'print', '(', 'pairwise', '(', 'l1', ')', ')']"
518,"['write', 'python', 'program', 'create', 'list', 'nonunique', 'value', 'filtered']","['from', 'collections', 'import', 'Counter', 'def', 'filter_non_unique', '(', 'lst', ')', ':', 'return', '[', 'item', 'for', 'item', ',', 'count', 'in', 'Counter', '(', 'lst', ')', '.', 'items', '(', ')', 'if', 'count', '==', '1', ']', 'print', '(', 'filter_non_unique', '(', '[', '1', ',', '2', ',', '2', ',', '3', ',', '4', ',', '4', ',', '5', ']', ')', ')']"
519,"['write', 'python', 'program', 'find', 'second', 'smallest', 'number', 'list']","['def', 'second_smallest', '(', 'numbers', ')', ':', 'if', '(', 'len', '(', 'numbers', ')', '<', '2', ')', ':', 'return', 'if', '(', '(', 'len', '(', 'numbers', ')', '==', '2', ')', 'and', '(', 'numbers', '[', '0', ']', '==', 'numbers', '[', '1', ']', ')', ')', ':', 'return', 'dup_items', '=', 'set', '(', ')', 'uniq_items', '=', '[', ']', 'for', 'x', 'in', 'numbers', ':', 'if', 'x', 'not', 'in', 'dup_items', ':', 'uniq_items', '.', 'append', '(', 'x', ')', 'dup_items', '.', 'add', '(', 'x', ')', 'uniq_items', '.', 'sort', '(', ')', 'return', 'uniq_items', '[', '1', ']', 'print', '(', 'second_smallest', '(', '[', '1', ',', '2', ',', '-', '8', ',', '-', '2', ',', '0', ',', '-', '2', ']', ')', ')', 'print', '(', 'second_smallest', '(', '[', '1', ',', '1', ',', '0', ',', '0', ',', '2', ',', '-', '2', ',', '-', '2', ']', ')', ')', 'print', '(', 'second_smallest', '(', '[', '1', ',', '1', ',', '1', ',', '0', ',', '0', ',', '0', ',', '2', ',', '-', '2', ',', '-', '2', ']', ')', ')', 'print', '(', 'second_smallest', '(', '[', '2', ',', '2', ']', ')', ')', 'print', '(', 'second_smallest', '(', '[', '2', ']', ')', ')']"
520,"['write', 'python', 'program', 'create', 'deque', 'append', 'element', 'left', 'right', 'remove', 'element', 'left', 'right', 'side', 'reverse', 'deque']","['import', 'collections', 'deque_colors', '=', 'collections', '.', 'deque', '(', '[', '""Red""', ',', '""Green""', ',', '""White""', ']', ')', 'print', '(', 'deque_colors', ')', 'print', '(', '""\\nAdding to the left: ""', ')', 'deque_colors', '.', 'appendleft', '(', '""Pink""', ')', 'print', '(', 'deque_colors', ')', 'print', '(', '""\\nAdding to the right: ""', ')', 'deque_colors', '.', 'append', '(', '""Orange""', ')', 'print', '(', 'deque_colors', ')', 'print', '(', '""\\nRemoving from the right: ""', ')', 'deque_colors', '.', 'pop', '(', ')', 'print', '(', 'deque_colors', ')', 'print', '(', '""\\nRemoving from the left: ""', ')', 'deque_colors', '.', 'popleft', '(', ')', 'print', '(', 'deque_colors', ')', 'print', '(', '""\\nReversing the deque: ""', ')', 'deque_colors', '.', 'reverse', '(', ')', 'print', '(', 'deque_colors', ')']"
521,"['write', 'python', 'program', 'count', 'float', 'number', 'given', 'mixed', 'list', 'using', 'lambda']","['def', 'count_integer', '(', 'list1', ')', ':', 'ert', '=', 'list', '(', 'map', '(', 'lambda', 'i', ':', 'isinstance', '(', 'i', ',', 'float', ')', ',', 'list1', ')', ')', 'result', '=', 'len', '(', '[', 'e', 'for', 'e', 'in', 'ert', 'if', 'e', ']', ')', 'return', 'result', 'list1', '=', '[', '1', ',', ""'abcd'"", ',', '3.12', ',', '1.2', ',', '4', ',', ""'xyz'"", ',', '5', ',', ""'pqr'"", ',', '7', ',', '-', '5', ',', '-', '12.22', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""\\nNumber of floats in the said mixed list:""', ')', 'print', '(', 'count_integer', '(', 'list1', ')', ')']"
522,"['write', 'numpy', 'program', 'compute', 'histogram', 'nums', 'bin']","['import', 'numpy', 'as', 'np', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'nums', '=', 'np', '.', 'array', '(', '[', '0.5', ',', '0.7', ',', '1.0', ',', '1.2', ',', '1.3', ',', '2.1', ']', ')', 'bins', '=', 'np', '.', 'array', '(', '[', '0', ',', '1', ',', '2', ',', '3', ']', ')', 'print', '(', '""nums: ""', ',', 'nums', ')', 'print', '(', '""bins: ""', ',', 'bins', ')', 'print', '(', '""Result:""', ',', 'np', '.', 'histogram', '(', 'nums', ',', 'bins', ')', ')', 'plt', '.', 'hist', '(', 'nums', ',', 'bins', '=', 'bins', ')', 'plt', '.', 'show', '(', ')']"
523,"['write', 'python', 'program', 'extract', 'number', 'given', 'string']","['def', 'test', '(', 'str1', ')', ':', 'result', '=', '[', 'int', '(', 'str1', ')', 'for', 'str1', 'in', 'str1', '.', 'split', '(', ')', 'if', 'str1', '.', 'isdigit', '(', ')', ']', 'return', 'result', 'str1', '=', '""red 12 black 45 green""', 'print', '(', '""Original string:""', ',', 'str1', ')', 'print', '(', '""Extract numbers from the said string:""', ')', 'print', '(', 'test', '(', 'str1', ')', ')']"
524,"['write', 'panda', 'program', 'partition', 'passenger', 'four', 'category', 'based', 'age']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'pd', '.', 'cut', '(', 'df', '[', ""'age'"", ']', ',', '[', '0', ',', '10', ',', '30', ',', '60', ',', '80', ']', ')', 'print', '(', 'result', ')']"
525,"['write', 'numpy', 'program', 'fetch', 'item', 'given', 'array', 'shape', 'either', 'greater', 'multiple']","['import', 'numpy', 'as', 'np', 'array_nums1', '=', 'np', '.', 'arange', '(', '20', ')', '.', 'reshape', '(', '4', ',', '5', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'array_nums1', ')', 'result', '=', 'array_nums1', '[', '(', 'array_nums1', '>', '6', ')', '&', '(', 'array_nums1', '%', '3', '==', '0', ')', ']', 'print', '(', '""\\nItems greater than 6 and a multiple of 3 of the said array:""', ')', 'print', '(', 'result', ')']"
526,"['write', 'python', 'program', 'find', 'smallest', 'window', 'contains', 'character', 'given', 'string']","['from', 'collections', 'import', 'defaultdict', 'def', 'find_sub_string', '(', 'str', ')', ':', 'str_len', '=', 'len', '(', 'str', ')', 'dist_count_char', '=', 'len', '(', 'set', '(', '[', 'x', 'for', 'x', 'in', 'str', ']', ')', ')', 'ctr', ',', 'start_pos', ',', 'start_pos_index', ',', 'min_len', '=', '0', ',', '0', ',', '-', '1', ',', '9999999999', 'curr_count', '=', 'defaultdict', '(', 'lambda', ':', '0', ')', 'for', 'i', 'in', 'range', '(', 'str_len', ')', ':', 'curr_count', '[', 'str', '[', 'i', ']', ']', '+=', '1', 'if', 'curr_count', '[', 'str', '[', 'i', ']', ']', '==', '1', ':', 'ctr', '+=', '1', 'if', 'ctr', '==', 'dist_count_char', ':', 'while', 'curr_count', '[', 'str', '[', 'start_pos', ']', ']', '>', '1', ':', 'if', 'curr_count', '[', 'str', '[', 'start_pos', ']', ']', '>', '1', ':', 'curr_count', '[', 'str', '[', 'start_pos', ']', ']', '-=', '1', 'start_pos', '+=', '1', 'len_window', '=', 'i', '-', 'start_pos', '+', '1', 'if', 'min_len', '>', 'len_window', ':', 'min_len', '=', 'len_window', 'start_pos_index', '=', 'start_pos', 'return', 'str', '[', 'start_pos_index', ':', 'start_pos_index', '+', 'min_len', ']', 'str1', '=', '""asdaewsqgtwwsa""', 'print', '(', '""Original Strings:\\n""', ',', 'str1', ')', 'print', '(', '""\\nSmallest window that contains all characters of the said string:""', ')', 'print', '(', 'find_sub_string', '(', 'str1', ')', ')']"
527,"['write', 'python', 'program', 'find', 'year', 'december', 'sunday']","[""'''Days of the week'''"", 'from', 'datetime', 'import', 'date', 'from', 'itertools', 'import', 'islice', 'def', 'xmasIsSunday', '(', 'y', ')', ':', ""'''True if Dec 25 in the given year is a Sunday.'''"", 'return', '6', '==', 'date', '(', 'y', ',', '12', ',', '25', ')', '.', 'weekday', '(', ')', 'def', 'main', '(', ')', ':', ""'''Years between 2000 and 2150 with 25 December on a Sunday'''"", 'xs', '=', 'list', '(', 'filter', '(', 'xmasIsSunday', ',', 'enumFromTo', '(', '2000', ')', '(', '2150', ')', ')', ')', 'total', '=', 'len', '(', 'xs', ')', 'print', '(', 'fTable', '(', 'main', '.', '__doc__', '+', ""':\\n\\n'"", '+', ""'(Total '"", '+', 'str', '(', 'total', ')', '+', ""')\\n'"", ')', '(', 'lambda', 'i', ':', 'str', '(', '1', '+', 'i', ')', ')', '(', 'str', ')', '(', 'index', '(', 'xs', ')', ')', '(', 'enumFromTo', '(', '0', ')', '(', 'total', '-', '1', ')', ')', ')', 'def', 'enumFromTo', '(', 'm', ')', ':', ""'''Integer enumeration from m to n.'''"", 'return', 'lambda', 'n', ':', 'list', '(', 'range', '(', 'm', ',', '1', '+', 'n', ')', ')', 'def', 'index', '(', 'xs', ')', ':', ""'''Item at given (zero-based) index.'''"", 'return', 'lambda', 'n', ':', 'None', 'if', '0', '>', 'n', 'else', '(', 'xs', '[', 'n', ']', 'if', '(', 'hasattr', '(', 'xs', ',', '""__getitem__""', ')', ')', 'else', 'next', '(', 'islice', '(', 'xs', ',', 'n', ',', 'None', ')', ')', ')', 'def', 'unlines', '(', 'xs', ')', ':', ""'''A single string formed by the intercalation\r       of a list of strings with the newline character.\r    '''"", 'return', ""'\\n'"", '.', 'join', '(', 'xs', ')', 'def', 'fTable', '(', 's', ')', ':', ""'''Heading -> x display function -> fx display function ->\r                     f -> xs -> tabular string.\r    '''"", 'def', 'go', '(', 'xShow', ',', 'fxShow', ',', 'f', ',', 'xs', ')', ':', 'ys', '=', '[', 'xShow', '(', 'x', ')', 'for', 'x', 'in', 'xs', ']', 'w', '=', 'max', '(', 'map', '(', 'len', ',', 'ys', ')', ')', 'return', 's', '+', ""'\\n'"", '+', ""'\\n'"", '.', 'join', '(', 'map', '(', 'lambda', 'x', ',', 'y', ':', 'y', '.', 'rjust', '(', 'w', ',', ""' '"", ')', '+', ""' -> '"", '+', 'fxShow', '(', 'f', '(', 'x', ')', ')', ',', 'xs', ',', 'ys', ')', ')', 'return', 'lambda', 'xShow', ':', 'lambda', 'fxShow', ':', 'lambda', 'f', ':', 'lambda', 'xs', ':', 'go', '(', 'xShow', ',', 'fxShow', ',', 'f', ',', 'xs', ')', 'if', '__name__', '==', ""'__main__'"", ':', 'main', '(', ')']"
528,"['write', 'python', 'program', 'accept', 'filename', 'user', 'print', 'extension']","['filename', '=', 'input', '(', '""Input the Filename: ""', ')', 'f_extns', '=', 'filename', '.', 'split', '(', '"".""', ')', 'print', '(', '""The extension of the file is : ""', '+', 'repr', '(', 'f_extns', '[', '-', '1', ']', ')', ')']"
529,"['write', 'numpy', 'program', 'save', 'two', 'given', 'array', 'single', 'file', 'compressed', 'format', 'npz', 'format', 'load']","['import', 'numpy', 'as', 'np', 'import', 'os', 'x', '=', 'np', '.', 'arange', '(', '10', ')', 'y', '=', 'np', '.', 'arange', '(', '11', ',', '20', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'x', ')', 'print', '(', 'y', ')', 'np', '.', 'savez', '(', ""'temp_arra.npz'"", ',', 'x', '=', 'x', ',', 'y', '=', 'y', ')', 'print', '(', '""Load arrays from the \'temp_arra.npz\' file:""', ')', 'with', 'np', '.', 'load', '(', ""'temp_arra.npz'"", ')', 'as', 'data', ':', 'x2', '=', 'data', '[', ""'x'"", ']', 'y2', '=', 'data', '[', ""'y'"", ']', 'print', '(', 'x2', ')', 'print', '(', 'y2', ')']"
530,"['write', 'python', 'program', 'swap', 'two', 'sublists', 'given', 'list']","['nums', '=', '[', '0', ',', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ',', '11', ',', '12', ',', '13', ',', '14', ',', '15', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'nums', '[', '6', ':', '10', ']', ',', 'nums', '[', '1', ':', '3', ']', '=', 'nums', '[', '1', ':', '3', ']', ',', 'nums', '[', '6', ':', '10', ']', 'print', '(', '""\\nSwap two sublists of the said list:""', ')', 'print', '(', 'nums', ')', 'nums', '[', '1', ':', '3', ']', ',', 'nums', '[', '4', ':', '6', ']', '=', 'nums', '[', '4', ':', '6', ']', ',', 'nums', '[', '1', ':', '3', ']', 'print', '(', '""\\nSwap two sublists of the said list:""', ')', 'print', '(', 'nums', ')']"
531,"['write', 'panda', 'program', 'convert', 'specified', 'character', 'column', 'upperlower', 'case', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF'"", ',', ""'zefsalf'"", ',', ""'sdfslew'"", ',', ""'zekfsdf'"", ']', ',', ""'date_of_sale'"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'df1', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF'"", ',', ""'zefsalf'"", ',', ""'sdfslew'"", ',', ""'zekfsdf'"", ']', ',', ""'date_of_sale'"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nUpper cases in comapny_code:""', ')', 'df', '[', ""'upper_company_code'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'upper', '(', ')', ',', 'df', '[', ""'company_code'"", ']', ')', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nLower cases in comapny_code:""', ')', 'df1', '[', ""'lower_company_code'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'lower', '(', ')', ',', 'df1', '[', ""'company_code'"", ']', ')', ')', 'print', '(', 'df1', ')']"
532,"['write', 'numpy', 'program', 'stack', 'array', 'column', 'wise']","['import', 'numpy', 'as', 'np', 'print', '(', '""\\nOriginal arrays:""', ')', 'x', '=', 'np', '.', 'array', '(', '(', '1', ',', '2', ',', '3', ')', ')', 'y', '=', 'np', '.', 'array', '(', '(', '2', ',', '3', ',', '4', ')', ')', 'print', '(', '""Array-1""', ')', 'print', '(', 'x', ')', 'print', '(', '""Array-2""', ')', 'print', '(', 'y', ')', 'new_array', '=', 'np', '.', 'column_stack', '(', '(', 'x', ',', 'y', ')', ')', 'print', '(', '""\\nStack 1-D arrays as columns wise:""', ')', 'print', '(', 'new_array', ')']"
533,"['write', 'numpy', 'program', 'get', 'lowertriangular', 'l', 'cholesky', 'decomposition', 'given', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '[', '4', ',', '12', ',', '-', '16', ']', ',', '[', '12', ',', '37', ',', '-', '53', ']', ',', '[', '-', '16', ',', '-', '53', ',', '98', ']', ']', ',', 'dtype', '=', 'np', '.', 'int32', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'a', ')', 'L', '=', 'np', '.', 'linalg', '.', 'cholesky', '(', 'a', ')', 'print', '(', '""Lower-trianglular L in the Cholesky decomposition of the said array:""', ')', 'print', '(', 'L', ')']"
534,"['write', 'python', 'program', 'get', 'unique', 'value', 'given', 'list', 'list']","['def', 'unique_values_in_list_of_lists', '(', 'lst', ')', ':', 'result', '=', 'set', '(', 'x', 'for', 'l', 'in', 'lst', 'for', 'x', 'in', 'l', ')', 'return', 'list', '(', 'result', ')', 'nums', '=', '[', '[', '1', ',', '2', ',', '3', ',', '5', ']', ',', '[', '2', ',', '3', ',', '5', ',', '4', ']', ',', '[', '0', ',', '5', ',', '4', ',', '1', ']', ',', '[', '3', ',', '7', ',', '2', ',', '1', ']', ',', '[', '1', ',', '2', ',', '1', ',', '2', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Unique values of the said list of lists:""', ')', 'print', '(', 'unique_values_in_list_of_lists', '(', 'nums', ')', ')', 'chars', '=', '[', '[', ""'h'"", ',', ""'g'"", ',', ""'l'"", ',', ""'k'"", ']', ',', '[', ""'a'"", ',', ""'b'"", ',', ""'d'"", ',', ""'e'"", ',', ""'c'"", ']', ',', '[', ""'j'"", ',', ""'i'"", ',', ""'y'"", ']', ',', '[', ""'n'"", ',', ""'b'"", ',', ""'v'"", ',', ""'c'"", ']', ',', '[', ""'x'"", ',', ""'z'"", ']', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'chars', ')', 'print', '(', '""Unique values of the said list of lists:""', ')', 'print', '(', 'unique_values_in_list_of_lists', '(', 'chars', ')', ')']"
535,"['write', 'numpy', 'program', 'compute', 'condition', 'number', 'given', 'matrix']","['import', 'numpy', 'as', 'np', 'm', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', ')', 'print', '(', '""Original matrix:""', ')', 'print', '(', 'm', ')', 'result', '=', 'np', '.', 'linalg', '.', 'cond', '(', 'm', ')', 'print', '(', '""Condition number of the said matrix:""', ')', 'print', '(', 'result', ')']"
536,"['write', 'python', 'program', 'create', 'display', 'combination', 'letter', 'selecting', 'letter', 'different', 'key', 'dictionary']","['import', 'itertools', 'd', '=', '{', ""'1'"", ':', '[', ""'a'"", ',', ""'b'"", ']', ',', ""'2'"", ':', '[', ""'c'"", ',', ""'d'"", ']', '}', 'for', 'combo', 'in', 'itertools', '.', 'product', '(', '*', '[', 'd', '[', 'k', ']', 'for', 'k', 'in', 'sorted', '(', 'd', '.', 'keys', '(', ')', ')', ']', ')', ':', 'print', '(', ""''"", '.', 'join', '(', 'combo', ')', ')']"
537,"['write', 'panda', 'program', 'filter', 'specified', 'column', 'record', 'range', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nFiltering records by label or index:""', ')', 'print', '(', 'w_a_con', '.', 'loc', '[', '0', ':', '4', ',', '[', '""WHO region""', ',', '""Beverage Types""', ']', ']', ')']"
538,"['write', 'numpy', 'program', 'create', 'new', 'array', 'average', 'every', 'consecutive', 'triplet', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arr1', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ',', '2', ',', '4', ',', '6', ',', '1', ',', '2', ',', '12', ',', '0', ',', '-', '12', ',', '6', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arr1', ')', 'result', '=', 'np', '.', 'mean', '(', 'arr1', '.', 'reshape', '(', '-', '1', ',', '3', ')', ',', 'axis', '=', '1', ')', 'print', '(', '""Average of every consecutive triplet of elements of the said array:""', ')', 'print', '(', 'result', ')']"
539,"['write', 'python', 'program', 'create', 'new', 'arrow', 'object', 'cloned', 'current', 'one']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'cloned', '=', 'a', '.', 'clone', '(', ')', 'print', '(', '""\\nCloned datetime:""', ')', 'print', '(', 'cloned', ')']"
540,"['write', 'panda', 'program', 'get', 'length', 'integer', 'given', 'column', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF'"", ',', ""'skfsalf'"", ',', ""'sdfslew'"", ',', ""'safsdf'"", ']', ',', ""'date_of_sale'"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nLength of sale_amount:""', ')', 'df', '[', ""'sale_amount_length'"", ']', '=', 'df', '[', ""'sale_amount'"", ']', '.', 'map', '(', 'str', ')', '.', 'apply', '(', 'len', ')', 'print', '(', 'df', ')']"
541,"['write', 'python', 'program', 'get', 'information', 'file', 'pertaining', 'file', 'mode', 'print', 'information', 'id', 'device', 'containing', 'file', 'inode', 'number', 'protection', 'number', 'hard', 'link', 'user', 'id', 'owner', 'group', 'id', 'owner', 'total', 'size', 'byte', 'time', 'last', 'access', 'time', 'last', 'modification', 'time', 'last', 'status', 'change']","['import', 'os', 'path', '=', ""'e:\\\\testpath\\\\p.txt'"", 'fd', '=', 'os', '.', 'open', '(', 'path', ',', 'os', '.', 'O_RDWR', ')', 'info', '=', 'os', '.', 'fstat', '(', 'fd', ')', 'print', '(', 'f""ID of device containing file: {info.st_dev}""', ')', 'print', '(', 'f""Inode number: {info.st_ino}""', ')', 'print', '(', 'f""Protection: {info.st_mode}""', ')', 'print', '(', 'f""Number of hard links: {info.st_nlink}""', ')', 'print', '(', 'f""User ID of owner: {info.st_uid}""', ')', 'print', '(', 'f""Group ID of owner: {info.st_gid}""', ')', 'print', '(', 'f""Total size, in bytes: {info.st_size}""', ')', 'print', '(', 'f""Time of last access: {info.st_atime}""', ')', 'print', '(', 'f""Time of last modification: {info.st_mtime }""', ')', 'print', '(', 'f""Time of last status change: {info.st_ctime }""', ')', 'os', '.', 'close', '(', 'fd', ')']"
542,"['write', 'python', 'program', 'create', 'flat', 'list', 'value', 'flat', 'dictionary']","['def', 'test', '(', 'flat_dict', ')', ':', 'return', 'list', '(', 'flat_dict', '.', 'values', '(', ')', ')', 'students', '=', '{', ""'Theodore'"", ':', '19', ',', ""'Roxanne'"", ':', '20', ',', ""'Mathew'"", ':', '21', ',', ""'Betty'"", ':', '20', '}', 'print', '(', '""\\nOriginal dictionary elements:""', ')', 'print', '(', 'students', ')', 'print', '(', '""\\nCreate a flat list of all the values of the said flat dictionary:""', ')', 'print', '(', 'test', '(', 'students', ')', ')']"
543,"['rite', 'python', 'program', 'find', 'number', 'included', 'digit', 'number', 'even', 'number', 'number', 'obtained', 'printed', 'commaseparated', 'sequence']","['items', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '100', ',', '401', ')', ':', 's', '=', 'str', '(', 'i', ')', 'if', '(', 'int', '(', 's', '[', '0', ']', ')', '%', '2', '==', '0', ')', 'and', '(', 'int', '(', 's', '[', '1', ']', ')', '%', '2', '==', '0', ')', 'and', '(', 'int', '(', 's', '[', '2', ']', ')', '%', '2', '==', '0', ')', ':', 'items', '.', 'append', '(', 's', ')', 'print', '(', '"",""', '.', 'join', '(', 'items', ')', ')']"
544,"['write', 'python', 'program', 'sort', 'list', 'dictionary', 'using', 'lambda']","['models', '=', '[', '{', ""'make'"", ':', ""'Nokia'"", ',', ""'model'"", ':', '216', ',', ""'color'"", ':', ""'Black'"", '}', ',', '{', ""'make'"", ':', ""'Mi Max'"", ',', ""'model'"", ':', ""'2'"", ',', ""'color'"", ':', ""'Gold'"", '}', ',', '{', ""'make'"", ':', ""'Samsung'"", ',', ""'model'"", ':', '7', ',', ""'color'"", ':', ""'Blue'"", '}', ']', 'print', '(', '""Original list of dictionaries :""', ')', 'print', '(', 'models', ')', 'sorted_models', '=', 'sorted', '(', 'models', ',', 'key', '=', 'lambda', 'x', ':', 'x', '[', ""'color'"", ']', ')', 'print', '(', '""\\nSorting the List of dictionaries :""', ')', 'print', '(', 'sorted_models', ')']"
545,"['write', 'numpy', 'program', 'normalize', 'random', 'matrix']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'random', '.', 'random', '(', '(', '3', ',', '3', ')', ')', 'print', '(', '""Original Array:""', ')', 'print', '(', 'x', ')', 'xmax', ',', 'xmin', '=', 'x', '.', 'max', '(', ')', ',', 'x', '.', 'min', '(', ')', 'x', '=', '(', 'x', '-', 'xmin', ')', '/', '(', 'xmax', '-', 'xmin', ')', 'print', '(', '""After normalization:""', ')', 'print', '(', 'x', ')']"
546,"['write', 'numpy', 'program', 'get', 'qr', 'factorization', 'given', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '[', '4', ',', '12', ',', '-', '14', ']', ',', '[', '12', ',', '37', ',', '-', '53', ']', ',', '[', '-', '14', ',', '-', '53', ',', '98', ']', ']', ',', 'dtype', '=', 'np', '.', 'int32', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'a', ')', 'q', ',', 'r', '=', 'np', '.', 'linalg', '.', 'qr', '(', 'a', ')', 'print', '(', '""qr factorization of the said array:""', ')', 'print', '(', '""q=\\n""', ',', 'q', ',', '""\\nr=\\n""', ',', 'r', ')']"
547,"['write', 'python', 'program', 'print', 'permutation', 'given', 'repetition', 'number', 'character', 'given', 'string']","['from', 'itertools', 'import', 'product', 'def', 'all_repeat', '(', 'str1', ',', 'rno', ')', ':', 'chars', '=', 'list', '(', 'str1', ')', 'results', '=', '[', ']', 'for', 'c', 'in', 'product', '(', 'chars', ',', 'repeat', '=', 'rno', ')', ':', 'results', '.', 'append', '(', 'c', ')', 'return', 'results', 'print', '(', 'all_repeat', '(', ""'xyz'"", ',', '3', ')', ')', 'print', '(', 'all_repeat', '(', ""'xyz'"", ',', '2', ')', ')', 'print', '(', 'all_repeat', '(', ""'abcd'"", ',', '4', ')', ')']"
548,"['write', 'python', 'program', 'test', 'variable', 'list', 'tuple', 'set']",[]
549,"['write', 'python', 'program', 'get', 'possible', 'combination', 'element', 'given', 'list', 'using', 'itertools', 'module']","['import', 'itertools', 'def', 'combinations_list', '(', 'list1', ')', ':', 'temp', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'list1', ')', '+', '1', ')', ':', 'temp', '.', 'append', '(', 'list', '(', 'itertools', '.', 'combinations', '(', 'list1', ',', 'i', ')', ')', ')', 'return', 'temp', 'colors', '=', '[', ""'orange'"", ',', ""'red'"", ',', ""'green'"", ',', ""'blue'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'colors', ')', 'print', '(', '""\\nAll possible combinations of the said list’s elements:""', ')', 'print', '(', 'combinations_list', '(', 'colors', ')', ')']"
550,"['write', 'panda', 'program', 'replace', 'nan', 'single', 'constant', 'value', 'specified', 'column', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', 'np', '.', 'nan', ',', '70002', ',', '70004', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3002', ',', '3001', ',', '3001', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5003', ',', '5001', ',', 'np', '.', 'nan', ',', '5002', ',', '5001', ',', '5001', ',', 'np', '.', 'nan', ',', '5003', ',', '5002', ',', '5003', ',', 'np', '.', 'nan', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nReplace NaNs with a single constant value:""', ')', 'result', '=', 'df', '[', ""'ord_no'"", ']', '.', 'fillna', '(', '0', ',', 'inplace', '=', 'False', ')', 'print', '(', 'result', ')']"
551,"['write', 'python', 'program', 'count', 'occurrence', 'item', 'given', 'list', 'using', 'lambda']","['def', 'count_occurrences', '(', 'nums', ')', ':', 'result', '=', 'dict', '(', 'map', '(', 'lambda', 'el', ':', '(', 'el', ',', 'list', '(', 'nums', ')', '.', 'count', '(', 'el', ')', ')', ',', 'nums', ')', ')', 'return', 'result', 'nums', '=', '[', '3', ',', '4', ',', '5', ',', '8', ',', '0', ',', '3', ',', '8', ',', '5', ',', '0', ',', '3', ',', '1', ',', '5', ',', '2', ',', '3', ',', '4', ',', '2', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nCount the occurrences of the items in the said list:""', ')', 'print', '(', 'count_occurrences', '(', 'nums', ')', ')']"
552,"['write', 'numpy', 'program', 'generate', 'array', 'random', 'number', 'standard', 'normal', 'distribution']","['import', 'numpy', 'as', 'np', 'rand_num', '=', 'np', '.', 'random', '.', 'normal', '(', '0', ',', '1', ',', '15', ')', 'print', '(', '""15 random numbers from a standard normal distribution:""', ')', 'print', '(', 'rand_num', ')']"
553,"['write', 'python', 'program', 'calculate', 'sum', 'positive', 'integer', 'nx']","['def', 'sum_series', '(', 'n', ')', ':', 'if', 'n', '<', '1', ':', 'return', '0', 'else', ':', 'return', 'n', '+', 'sum_series', '(', 'n', '-', '2', ')', 'print', '(', 'sum_series', '(', '6', ')', ')', 'print', '(', 'sum_series', '(', '10', ')', ')']"
554,"['write', 'panda', 'program', 'create', 'horizontal', 'stacked', 'bar', 'plot', 'opening', 'closing', 'stock', 'price', 'alphabet', 'inc', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'df2', '=', 'df1', '[', '[', ""'Date'"", ',', ""'Open'"", ',', ""'Close'"", ']', ']', 'df3', '=', 'df2', '.', 'set_index', '(', ""'Date'"", ')', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '20', ',', '20', ')', ')', 'df3', '.', 'plot', '.', 'barh', '(', 'stacked', '=', 'True', ')', 'plt', '.', 'suptitle', '(', ""'Opening/Closing stock prices Alphabet Inc.,\\n01-04-2020 to 30-04-2020'"", ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'show', '(', ')']"
555,"['write', 'panda', 'program', 'create', 'dataframe', 'indexing', 'date', 'time']","['import', 'pandas', 'as', 'pd', 'print', '(', '""Create a dataframe, indexing by date and time:""', ')', 'dt_range', '=', 'pd', '.', 'date_range', '(', 'start', '=', ""'2020-05-12 07:10:10'"", ',', 'freq', '=', ""'S'"", ',', 'periods', '=', '10', ')', 'df_dt', '=', 'pd', '.', 'DataFrame', '(', '{', '""Sale_amt""', ':', '[', '100', ',', '110', ',', '117', ',', '150', ',', '112', ',', '99', ',', '129', ',', '135', ',', '140', ',', '150', ']', '}', ',', 'index', '=', 'dt_range', ')', 'print', '(', 'df_dt', ')']"
556,"['write', 'panda', 'program', 'create', 'time', 'series', 'object', 'time', 'indexed', 'data', 'also', 'select', 'date', 'year', 'select', 'date', 'certain', 'date']","['import', 'pandas', 'as', 'pd', 'index', '=', 'pd', '.', 'DatetimeIndex', '(', '[', ""'2011-09-02'"", ',', ""'2012-08-04'"", ',', ""'2015-09-03'"", ',', ""'2010-08-04'"", ',', ""'2015-03-03'"", ',', ""'2011-08-04'"", ',', ""'2015-04-03'"", ',', ""'2012-08-04'"", ']', ')', 's_dates', '=', 'pd', '.', 'Series', '(', '[', '0', ',', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ']', ',', 'index', '=', 'index', ')', 'print', '(', '""Time series object with indexed data:""', ')', 'print', '(', 's_dates', ')', 'print', '(', '""\\nDates of same year:""', ')', 'print', '(', 's_dates', '[', ""'2015'"", ']', ')', 'print', '(', '""\\nDates between 2012-01-01 and 2012-12-31""', ')', 'print', '(', 's_dates', '[', ""'2012-01-01'"", ':', ""'2012-12-31'"", ']', ')']"
557,"['write', 'numpy', 'program', 'remove', 'leading', 'whitespaces', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', ""' python exercises '"", ',', ""' PHP  '"", ',', ""' java  '"", ',', ""'  C++'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""Original Array:""', ')', 'print', '(', 'x', ')', 'lstripped_char', '=', 'np', '.', 'char', '.', 'lstrip', '(', 'x', ')', 'print', '(', '""\\nRemove the leading whitespaces : ""', ',', 'lstripped_char', ')']"
558,"['write', 'python', 'program', 'split', 'list', 'different', 'variable']","['color', '=', '[', '(', '""Black""', ',', '""#000000""', ',', '""rgb(0, 0, 0)""', ')', ',', '(', '""Red""', ',', '""#FF0000""', ',', '""rgb(255, 0, 0)""', ')', ',', '(', '""Yellow""', ',', '""#FFFF00""', ',', '""rgb(255, 255, 0)""', ')', ']', 'var1', ',', 'var2', ',', 'var3', '=', 'color', 'print', '(', 'var1', ')', 'print', '(', 'var2', ')', 'print', '(', 'var3', ')']"
559,"['write', 'python', 'program', 'find', 'first', 'two', 'element', 'given', 'list', 'whose', 'sum', 'equal', 'given', 'value', 'use', 'itertools', 'module', 'solve', 'problem']","['import', 'itertools', 'as', 'it', 'def', 'sum_pairs_list', '(', 'nums', ',', 'n', ')', ':', 'for', 'num2', ',', 'num1', 'in', 'list', '(', 'it', '.', 'combinations', '(', 'nums', '[', ':', ':', '-', '1', ']', ',', '2', ')', ')', '[', ':', ':', '-', '1', ']', ':', 'if', 'num2', '+', 'num1', '==', 'n', ':', 'return', '[', 'num1', ',', 'num2', ']', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ']', 'n', '=', '10', 'print', '(', '""Original list:""', ',', 'nums', ',', '"": Given value:""', ',', 'n', ')', 'print', '(', '""Sum of pair equal to ""', ',', 'n', ',', '""=""', ',', 'sum_pairs_list', '(', 'nums', ',', 'n', ')', ')', 'nums', '=', '[', '1', ',', '2', ',', '-', '3', ',', '-', '4', ',', '-', '5', ',', '6', ',', '-', '7', ']', 'n', '=', '-', '6', 'print', '(', '""Original list:""', ',', 'nums', ',', '"": Given value:""', ',', 'n', ')', 'print', '(', '""Sum of pair equal to ""', ',', 'n', ',', '""=""', ',', 'sum_pairs_list', '(', 'nums', ',', 'n', ')', ')']"
560,"['write', 'panda', 'program', 'create', 'index', 'label', 'using', 'integer', 'using', 'floatingpoint', 'number', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'print', '(', '""Create an Int64Index:""', ')', 'df_i64', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_Of_Birth'"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', ',', ""'address'"", ':', '[', ""'street1'"", ',', ""'street2'"", ',', ""'street3'"", ',', ""'street1'"", ',', ""'street2'"", ',', ""'street4'"", ']', '}', ',', 'index', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', ')', 'print', '(', 'df_i64', ')', 'print', '(', '""\\nView the Index:""', ')', 'print', '(', 'df_i64', '.', 'index', ')', 'print', '(', '""\\nFloating-point labels using Float64Index:""', ')', 'df_f64', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_Of_Birth '"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', ',', ""'address'"", ':', '[', ""'street1'"", ',', ""'street2'"", ',', ""'street3'"", ',', ""'street1'"", ',', ""'street2'"", ',', ""'street4'"", ']', '}', ',', 'index', '=', '[', '.1', ',', '.2', ',', '.3', ',', '.4', ',', '.5', ',', '.6', ']', ')', 'print', '(', 'df_f64', ')', 'print', '(', '""\\nView the Index:""', ')', 'print', '(', 'df_f64', '.', 'index', ')']"
561,"['write', 'numpy', 'program', 'convert', 'numpy', 'array', 'python', 'list', 'structure']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '6', ')', '.', 'reshape', '(', '3', ',', '2', ')', 'print', '(', '""Original array elements:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Array to list:""', ')', 'print', '(', 'x', '.', 'tolist', '(', ')', ')']"
562,"['write', 'python', 'program', 'copy', 'deque', 'object', 'verify', 'shallow', 'copying', 'process']","['import', 'collections', 'tup1', '=', '(', '1', ',', '3', ',', '5', ',', '7', ',', '9', ')', 'dq1', '=', 'collections', '.', 'deque', '(', 'tup1', ')', 'dq2', '=', 'dq1', '.', 'copy', '(', ')', 'print', '(', '""Content of dq1:""', ')', 'print', '(', 'dq1', ')', 'print', '(', '""dq2 id:""', ')', 'print', '(', 'id', '(', 'dq1', ')', ')', 'print', '(', '""\\nContent of dq2:""', ')', 'print', '(', 'dq2', ')', 'print', '(', '""dq2 id:""', ')', 'print', '(', 'id', '(', 'dq2', ')', ')', 'print', '(', '""\\nChecking the first element of dq1 and dq2 are shallow copies:""', ')', 'print', '(', 'id', '(', 'dq1', '[', '0', ']', ')', ')', 'print', '(', 'id', '(', 'dq2', '[', '0', ']', ')', ')']"
563,"['write', 'python', 'program', 'create', 'instance', 'ordereddict', 'using', 'given', 'dictionary', 'sort', 'dictionary', 'creation', 'print', 'member', 'dictionary', 'reverse', 'order']","['from', 'collections', 'import', 'OrderedDict', 'dict', '=', '{', ""'Afghanistan'"", ':', '93', ',', ""'Albania'"", ':', '355', ',', ""'Algeria'"", ':', '213', ',', ""'Andorra'"", ':', '376', ',', ""'Angola'"", ':', '244', '}', 'new_dict', '=', 'OrderedDict', '(', 'dict', '.', 'items', '(', ')', ')', 'for', 'key', 'in', 'new_dict', ':', 'print', '(', 'key', ',', 'new_dict', '[', 'key', ']', ')', 'print', '(', '""\\nIn reverse order:""', ')', 'for', 'key', 'in', 'reversed', '(', 'new_dict', ')', ':', 'print', '(', 'key', ',', 'new_dict', '[', 'key', ']', ')']"
564,"['write', 'python', 'program', 'retrieve', 'html', 'code', 'title', 'text', 'html', 'code', 'parent']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup', 'url', '=', ""'https://www.python.org/'"", 'reqs', '=', 'requests', '.', 'get', '(', 'url', ')', 'soup', '=', 'BeautifulSoup', '(', 'reqs', '.', 'text', ',', ""'lxml'"", ')', 'print', '(', '""title""', ')', 'print', '(', 'soup', '.', 'title', ')', 'print', '(', '""title text""', ')', 'print', '(', 'soup', '.', 'title', '.', 'text', ')', 'print', '(', '""Parent content of the title:""', ')', 'print', '(', 'soup', '.', 'title', '.', 'parent', ')']"
565,"['write', 'python', 'program', 'shuffle', 'print', 'specified', 'list']","['from', 'random', 'import', 'shuffle', 'color', '=', '[', ""'Red'"", ',', ""'Green'"", ',', ""'White'"", ',', ""'Black'"", ',', ""'Pink'"", ',', ""'Yellow'"", ']', 'shuffle', '(', 'color', ')', 'print', '(', 'color', ')']"
566,"['write', 'numpy', 'program', 'swap', 'column', 'given', 'array']","['import', 'numpy', 'as', 'np', 'my_array', '=', 'np', '.', 'arange', '(', '12', ')', '.', 'reshape', '(', '3', ',', '4', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'my_array', ')', 'my_array', '[', ':', ',', '[', '0', ',', '1', ']', ']', '=', 'my_array', '[', ':', ',', '[', '1', ',', '0', ']', ']', 'print', '(', '""\\nAfter swapping arrays:""', ')', 'print', '(', 'my_array', ')']"
567,"['write', 'panda', 'program', 'find', 'alcohol', 'consumption', 'detail', 'year', 'region', 'america', 'europe', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nThe world alcohol consumption details in the year ‘1986’ or ‘1989’ where  WHO region is ‘Americas’  or \'Europe\':""', ')', 'print', '(', 'w_a_con', '[', '(', '(', 'w_a_con', '[', ""'Year'"", ']', '==', '1985', ')', '|', '(', 'w_a_con', '[', ""'Year'"", ']', '==', '1989', ')', ')', '&', '(', '(', 'w_a_con', '[', ""'WHO region'"", ']', '==', ""'Americas'"", ')', '|', '(', 'w_a_con', '[', ""'WHO region'"", ']', '==', ""'Europe'"", ')', ')', ']', '.', 'head', '(', '10', ')', ')']"
568,"['write', 'numpy', 'program', 'remove', 'specific', 'column', 'given', 'array']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'random', '.', 'random', '(', '(', '7', ',', '5', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nDelete the first column of the said array:""', ')', 'print', '(', 'np', '.', 'delete', '(', 'nums', ',', '[', '0', ']', ',', 'axis', '=', '1', ')', ')', 'print', '(', '""\\nDelete the last column of the said array:""', ')', 'print', '(', 'np', '.', 'delete', '(', 'nums', ',', '[', '4', ']', ',', 'axis', '=', '1', ')', ')']"
569,"['write', 'panda', 'program', 'convert', 'first', 'last', 'character', 'word', 'upper', 'case', 'word', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'series1', '=', 'pd', '.', 'Series', '(', '[', ""'php'"", ',', ""'python'"", ',', ""'java'"", ',', ""'c#'"", ']', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'series1', ')', 'result', '=', 'series1', '.', 'map', '(', 'lambda', 'x', ':', 'x', '[', '0', ']', '.', 'upper', '(', ')', '+', 'x', '[', '1', ':', '-', '1', ']', '+', 'x', '[', '-', '1', ']', '.', 'upper', '(', ')', ')', 'print', '(', '""\\nFirst and last character of each word to upper case:""', ')', 'print', '(', 'result', ')']"
570,"['write', 'python', 'program', 'replace', 'hour', 'minute', 'day', 'month', 'year', 'timezone', 'specified', 'value', 'current', 'datetime', 'using', 'arrow']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current date and time:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\nReplace hour and minute with 5 and 35:""', ')', 'print', '(', 'a', '.', 'replace', '(', 'hour', '=', '5', ',', 'minute', '=', '35', ')', ')', 'print', '(', '""\\nReplace day with 2:""', ')', 'print', '(', 'a', '.', 'replace', '(', 'day', '=', '2', ')', ')', 'print', '(', '""\\nReplace year with 2021:""', ')', 'print', '(', 'a', '.', 'replace', '(', 'year', '=', '2021', ')', ')', 'print', '(', '""\\nReplace month with 11:""', ')', 'print', '(', 'a', '.', 'replace', '(', 'month', '=', '11', ')', ')', 'print', '(', '""\\nReplace timezone with \'US/Pacific:""', ')', 'print', '(', 'a', '.', 'replace', '(', 'tzinfo', '=', ""'US/Pacific'"", ')', ')']"
571,"['write', 'numpy', 'program', 'create', 'vector', 'length', 'filled', 'arbitrary', 'integer']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'random', '.', 'randint', '(', '0', ',', '11', ',', '5', ')', 'print', '(', '""Vector of length 5 filled with arbitrary integers from 0 to 10:""', ')', 'print', '(', 'x', ')']"
572,"['write', 'panda', 'program', 'insert', 'column', 'sixth', 'position', 'said', 'excel', 'sheet', 'fill', 'nan', 'value']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\coalpublic2013.xlsx'"", ')', 'df', '.', 'insert', '(', '3', ',', '""column1""', ',', 'np', '.', 'nan', ')', 'print', '(', 'df', '.', 'head', ')']"
573,"['write', 'panda', 'program', 'sort', 'given', 'series']","['import', 'pandas', 'as', 'pd', 's', '=', 'pd', '.', 'Series', '(', '[', ""'100'"", ',', ""'200'"", ',', ""'python'"", ',', ""'300.12'"", ',', ""'400'"", ']', ')', 'print', '(', '""Original Data Series:""', ')', 'print', '(', 's', ')', 'new_s', '=', 'pd', '.', 'Series', '(', 's', ')', '.', 'sort_values', '(', ')', 'print', '(', 'new_s', ')']"
574,"['write', 'python', 'program', 'add', 'two', 'positive', 'integer', 'without', 'using', 'operator']","['def', 'add_without_plus_operator', '(', 'a', ',', 'b', ')', ':', 'while', 'b', '!=', '0', ':', 'data', '=', 'a', '&', 'b', 'a', '=', 'a', '^', 'b', 'b', '=', 'data', '<<', '1', 'return', 'a', 'print', '(', 'add_without_plus_operator', '(', '2', ',', '10', ')', ')', 'print', '(', 'add_without_plus_operator', '(', '-', '20', ',', '10', ')', ')', 'print', '(', 'add_without_plus_operator', '(', '-', '10', ',', '-', '20', ')', ')']"
575,"['write', 'panda', 'program', 'create', 'plot', 'present', 'number', 'unidentified', 'flying', 'object', 'ufo', 'report', 'per', 'year']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'print', '(', '""Original Dataframe:""', ')', 'print', '(', 'df', '.', 'head', '(', ')', ')', 'print', '(', '""\\nPlot to present the number unidentified flying objects (ufo) found year wise:""', ')', 'df', '[', '""Year""', ']', '=', 'df', '.', 'Date_time', '.', 'dt', '.', 'year', 'df', '.', 'Year', '.', 'value_counts', '(', ')', '.', 'sort_index', '(', ')', '.', 'plot', '(', 'x', '=', '""Year""', ')']"
576,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'comb', 'sort']","['def', 'comb_sort', '(', 'nums', ')', ':', 'shrink_fact', '=', '1.3', 'gaps', '=', 'len', '(', 'nums', ')', 'swapped', '=', 'True', 'i', '=', '0', 'while', 'gaps', '>', '1', 'or', 'swapped', ':', 'gaps', '=', 'int', '(', 'float', '(', 'gaps', ')', '/', 'shrink_fact', ')', 'swapped', '=', 'False', 'i', '=', '0', 'while', 'gaps', '+', 'i', '<', 'len', '(', 'nums', ')', ':', 'if', 'nums', '[', 'i', ']', '>', 'nums', '[', 'i', '+', 'gaps', ']', ':', 'nums', '[', 'i', ']', ',', 'nums', '[', 'i', '+', 'gaps', ']', '=', 'nums', '[', 'i', '+', 'gaps', ']', ',', 'nums', '[', 'i', ']', 'swapped', '=', 'True', 'i', '+=', '1', 'return', 'nums', 'num1', '=', 'input', '(', ""'Input comma separated numbers:\\n'"", ')', '.', 'strip', '(', ')', 'nums', '=', '[', 'int', '(', 'item', ')', 'for', 'item', 'in', 'num1', '.', 'split', '(', ""','"", ')', ']', 'print', '(', 'comb_sort', '(', 'nums', ')', ')']"
577,"['write', 'python', 'program', 'find', 'maximum', 'difference', 'pair', 'given', 'list']","['from', 'itertools', 'import', 'combinations', 'from', 'heapq', 'import', 'nlargest', 'def', 'test', '(', 'lst', ')', ':', 'result', '=', 'nlargest', '(', '1', ',', 'combinations', '(', 'lst', ',', '2', ')', ',', 'key', '=', 'lambda', 'sub', ':', 'abs', '(', 'sub', '[', '0', ']', '-', 'sub', '[', '1', ']', ')', ')', 'return', 'result', 'marks', '=', '[', '32', ',', '14', ',', '90', ',', '10', ',', '22', ',', '42', ',', '31', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'marks', ')', 'print', '(', '""\\nFind maximum difference pair of the said list:""', ')', 'print', '(', 'test', '(', 'marks', ')', ')']"
578,"['write', 'python', 'program', 'move', 'specified', 'number', 'element', 'end', 'given', 'list']","['def', 'move_end', '(', 'nums', ',', 'offset', ')', ':', 'return', 'nums', '[', 'offset', ':', ']', '+', 'nums', '[', ':', 'offset', ']', 'print', '(', 'move_end', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ',', '3', ')', ')', 'print', '(', 'move_end', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ',', '-', '3', ')', ')', 'print', '(', 'move_end', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ',', '8', ')', ')', 'print', '(', 'move_end', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ',', '-', '8', ')', ')', 'print', '(', 'move_end', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ',', '7', ')', ')', 'print', '(', 'move_end', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ',', '-', '7', ')', ')']"
579,"['write', 'python', 'program', 'insert', 'element', 'beginning', 'given', 'ordereddictionary']","['from', 'collections', 'import', 'OrderedDict', 'color_orderdict', '=', 'OrderedDict', '(', '[', '(', ""'color1'"", ',', ""'Red'"", ')', ',', '(', ""'color2'"", ',', ""'Green'"", ')', ',', '(', ""'color3'"", ',', ""'Blue'"", ')', ']', ')', 'print', '(', '""Original OrderedDict:""', ')', 'print', '(', 'color_orderdict', ')', 'print', '(', '""Insert an element at the beginning of the said OrderedDict:""', ')', 'color_orderdict', '.', 'update', '(', '{', ""'color4'"", ':', ""'Orange'"", '}', ')', 'color_orderdict', '.', 'move_to_end', '(', ""'color4'"", ',', 'last', '=', 'False', ')', 'print', '(', '""\\nUpdated OrderedDict:""', ')', 'print', '(', 'color_orderdict', ')']"
580,"['write', 'python', 'program', 'print', 'following', 'floating', 'number', 'upto', 'decimal', 'place']","['x', '=', '3.1415926', 'y', '=', '12.9999', 'print', '(', '""\\nOriginal Number: ""', ',', 'x', ')', 'print', '(', '""Formatted Number: ""', '+', '""{:.2f}""', '.', 'format', '(', 'x', ')', ')', ';', 'print', '(', '""Original Number: ""', ',', 'y', ')', 'print', '(', '""Formatted Number: ""', '+', '""{:.2f}""', '.', 'format', '(', 'y', ')', ')', ';', 'print', '(', ')']"
581,"['write', 'python', 'program', 'extract', 'every', 'first', 'specified', 'element', 'given', 'twodimensional', 'list']","['def', 'specified_element', '(', 'nums', ',', 'N', ')', ':', 'result', '=', '[', 'i', '[', 'N', ']', 'for', 'i', 'in', 'nums', ']', 'return', 'result', 'nums', '=', '[', '[', '1', ',', '2', ',', '3', ',', '2', ']', ',', '[', '4', ',', '5', ',', '6', ',', '2', ']', ',', '[', '7', ',', '1', ',', '9', ',', '5', ']', ',', ']', 'print', '(', '""Original list of lists:""', ')', 'print', '(', 'nums', ')', 'N', '=', '0', 'print', '(', '""\\nExtract every first element from the said given two dimensional list:""', ')', 'print', '(', 'specified_element', '(', 'nums', ',', 'N', ')', ')', 'N', '=', '2', 'print', '(', '""\\nExtract every third element from the said given two dimensional list:""', ')', 'print', '(', 'specified_element', '(', 'nums', ',', 'N', ')', ')']"
582,"['write', 'python', 'program', 'get', 'proleptic', 'gregorian', 'ordinal', 'given', 'date']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\nProleptic Gregorian ordinal of the date:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'toordinal', '(', ')', ')']"
583,"['write', 'python', 'program', 'iterate', 'dictionary', 'using', 'loop']","['d', '=', '{', ""'Red'"", ':', '1', ',', ""'Green'"", ':', '2', ',', ""'Blue'"", ':', '3', '}', 'for', 'color_key', ',', 'value', 'in', 'd', '.', 'items', '(', ')', ':', 'print', '(', 'color_key', ',', ""'corresponds to '"", ',', 'd', '[', 'color_key', ']', ')']"
584,"['write', 'python', 'program', 'sort', 'unsorted', 'number', 'using', 'stooge', 'sort']",[]
585,"['write', 'python', 'program', 'rearrange', 'positive', 'negative', 'number', 'given', 'array', 'using', 'lambda']","['array_nums', '=', '[', '-', '1', ',', '2', ',', '-', '3', ',', '5', ',', '7', ',', '8', ',', '9', ',', '-', '10', ']', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'array_nums', ')', 'result', '=', 'sorted', '(', 'array_nums', ',', 'key', '=', 'lambda', 'i', ':', '0', 'if', 'i', '==', '0', 'else', '-', '1', '/', 'i', ')', 'print', '(', '""\\nRearrange positive and negative numbers of the said array:""', ')', 'print', '(', 'result', ')']"
586,"['write', 'python', 'program', 'perform', 'action', 'condition', 'true']","['n', '=', '1', 'if', 'n', '==', '1', ':', 'print', '(', '""\\nFirst day of a Month!""', ')', 'print', '(', ')']"
587,"['write', 'python', 'program', 'find', 'maximum', 'length', 'substring', 'given', 'string', 'character', 'substring', 'use', 'itertools', 'module', 'solve', 'problem']","['import', 'itertools', 'def', 'max_sub_string', '(', 'str1', ')', ':', 'return', 'max', '(', 'len', '(', 'list', '(', 'x', ')', ')', 'for', '_', ',', 'x', 'in', 'itertools', '.', 'groupby', '(', 'str1', ')', ')', 'str1', '=', '""aaabbccddeeeee""', 'print', '(', '""Original string:""', ',', 'str1', ')', 'print', '(', '""Maximum length of a substring with unique characters of the said string:""', ')', 'print', '(', 'max_sub_string', '(', 'str1', ')', ')', 'str1', '=', '""c++ exercises""', 'print', '(', '""\\nOriginal string:""', ',', 'str1', ')', 'print', '(', '""Maximum length of a substring with unique characters of the said string:""', ')', 'print', '(', 'max_sub_string', '(', 'str1', ')', ')']"
588,"['write', 'panda', 'program', 'import', 'excel', 'data', 'employeexlsx', 'panda', 'dataframe', 'find', 'list', 'employee', 'two', 'specific', 'month', 'year']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\employee.xlsx'"", ')', 'result', '=', 'df', '[', '(', 'df', '[', ""'hire_date'"", ']', '>=', ""'Jan-2005'"", ')', '&', '(', 'df', '[', ""'hire_date'"", ']', '<=', ""'Dec-2006'"", ')', ']', '.', 'head', '(', ')', 'result']"
589,"['write', 'python', 'program', 'find', 'list', 'word', 'longer', 'n', 'given', 'list', 'word']","['def', 'long_words', '(', 'n', ',', 'str', ')', ':', 'word_len', '=', '[', ']', 'txt', '=', 'str', '.', 'split', '(', '"" ""', ')', 'for', 'x', 'in', 'txt', ':', 'if', 'len', '(', 'x', ')', '>', 'n', ':', 'word_len', '.', 'append', '(', 'x', ')', 'return', 'word_len', 'print', '(', 'long_words', '(', '3', ',', '""The quick brown fox jumps over the lazy dog""', ')', ')']"
590,"['write', 'python', 'program', 'generate', 'text', 'file', 'named', 'atxt', 'btxt', 'ztxt']","['import', 'string', ',', 'os', 'if', 'not', 'os', '.', 'path', '.', 'exists', '(', '""letters""', ')', ':', 'os', '.', 'makedirs', '(', '""letters""', ')', 'for', 'letter', 'in', 'string', '.', 'ascii_uppercase', ':', 'with', 'open', '(', 'letter', '+', '"".txt""', ',', '""w""', ')', 'as', 'f', ':', 'f', '.', 'writelines', '(', 'letter', ')']"
591,"['write', 'numpy', 'program', 'split', 'given', 'text', 'line', 'split', 'single', 'line', 'array', 'value']","['import', 'numpy', 'as', 'np', 'student', '=', '""""""01\tV\tDebby Pramod\r02\tV\tArtemiy Ellie\r03\tV\tBaptist Kamal\r04\tV\tLavanya Davide\r05\tV\tFulton Antwan\r06\tV\tEuanthe Sandeep\r07\tV\tEndzela Sanda\r08\tV\tVictoire Waman\r09\tV\tBriar Nur\r10\tV\tRose Lykos""""""', 'print', '(', '""Original text:""', ')', 'print', '(', 'student', ')', 'text_lines', '=', 'student', '.', 'splitlines', '(', ')', 'text_lines', '=', '[', 'r', '.', 'split', '(', ""'\\t'"", ')', 'for', 'r', 'in', 'text_lines', ']', 'result', '=', 'np', '.', 'array', '(', 'text_lines', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""\\nArray from the said text:""', ')', 'print', '(', 'result', ')']"
592,"['write', 'numpy', 'program', 'test', 'whether', 'numpy', 'array', 'faster', 'python', 'list']","['import', 'time', 'import', 'numpy', 'as', 'np', 'SIZE', '=', '200000', 'list1', '=', 'range', '(', 'SIZE', ')', 'list2', '=', 'range', '(', 'SIZE', ')', 'arra1', '=', 'np', '.', 'arange', '(', 'SIZE', ')', 'arra2', '=', 'np', '.', 'arange', '(', 'SIZE', ')', 'start_list', '=', 'time', '.', 'time', '(', ')', 'result', '=', '[', '(', 'x', ',', 'y', ')', 'for', 'x', ',', 'y', 'in', 'zip', '(', 'list1', ',', 'list2', ')', ']', 'print', '(', '""Time to aggregates elements from each of the iterables:""', ')', 'print', '(', '""List:""', ')', 'print', '(', '(', 'time', '.', 'time', '(', ')', '-', 'start_list', ')', '*', '1000', ')', 'start_array', '=', 'time', '.', 'time', '(', ')', 'result', '=', 'arra1', '+', 'arra2', 'print', '(', '""NumPy array:""', ')', 'print', '(', '(', 'time', '.', 'time', '(', ')', '-', 'start_array', ')', '*', '1000', ')']"
593,"['write', 'python', 'program', 'insert', 'element', 'given', 'list', 'every', 'nth', 'position']","['def', 'insert_elemnt_nth', '(', 'lst', ',', 'ele', ',', 'n', ')', ':', 'result', '=', '[', ']', 'for', 'st_idx', 'in', 'range', '(', '0', ',', 'len', '(', 'lst', ')', ',', 'n', ')', ':', 'result', '.', 'extend', '(', 'lst', '[', 'st_idx', ':', 'st_idx', '+', 'n', ']', ')', 'result', '.', 'append', '(', 'ele', ')', 'result', '.', 'pop', '(', ')', 'return', 'result', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '0', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'i_ele', '=', ""'a'"", 'i_ele_pos', '=', '2', 'print', '(', '""\\nInsert""', ',', 'i_ele', ',', '""in the said list after""', ',', 'i_ele_pos', ',', '""nd element:""', ')', 'print', '(', 'insert_elemnt_nth', '(', 'nums', ',', 'i_ele', ',', 'i_ele_pos', ')', ')', 'i_ele', '=', ""'b'"", 'i_ele_pos', '=', '4', 'print', '(', '""\\nInsert""', ',', 'i_ele', ',', '""in the said list after""', ',', 'i_ele_pos', ',', '""th element:""', ')', 'print', '(', 'insert_elemnt_nth', '(', 'nums', ',', 'i_ele', ',', 'i_ele_pos', ')', ')']"
594,"['write', 'numpy', 'program', 'create', 'onedimensional', 'array', 'single', 'two', 'three', 'digit', 'number']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'arange', '(', '1', ',', '21', ')', 'print', '(', '""One-dimensional array of single digit numbers:""', ')', 'print', '(', 'nums', ')', 'nums', '=', 'np', '.', 'arange', '(', '10', ',', '21', ')', 'print', '(', '""\\nOne-dimensional array of two digit numbers:""', ')', 'print', '(', 'nums', ')', 'nums', '=', 'np', '.', 'arange', '(', '100', ',', '201', ')', 'print', '(', '""\\nOne-dimensional array of three digit numbers:""', ')', 'print', '(', 'nums', ')']"
595,"['write', 'numpy', 'program', 'create', 'array', 'even', 'integer']","['import', 'numpy', 'as', 'np', 'array', '=', 'np', '.', 'arange', '(', '30', ',', '71', ',', '2', ')', 'print', '(', '""Array of all the even integers from 30 to 70""', ')', 'print', '(', 'array', ')']"
596,"['write', 'python', 'program', 'get', 'symmetric', 'difference', 'two', 'iterables', 'without', 'filtering', 'duplicate', 'value']","['def', 'symmetric_difference', '(', 'x', ',', 'y', ')', ':', '(', '_x', ',', '_y', ')', '=', '(', 'set', '(', 'x', ')', ',', 'set', '(', 'y', ')', ')', 'return', '[', 'item', 'for', 'item', 'in', 'x', 'if', 'item', 'not', 'in', '_y', ']', '+', '[', 'item', 'for', 'item', 'in', 'y', 'if', 'item', 'not', 'in', '_x', ']', 'print', '(', 'symmetric_difference', '(', '[', '10', ',', '20', ',', '30', ']', ',', '[', '10', ',', '20', ',', '40', ']', ')', ')']"
597,"['write', 'python', 'program', 'create', 'file', 'write', 'text', 'rename', 'file', 'name']","['import', 'glob', 'import', 'os', 'with', 'open', '(', ""'a.txt'"", ',', ""'w'"", ')', 'as', 'f', ':', 'f', '.', 'write', '(', ""'Python program to create a symbolic link and read it to decide the original file pointed by the link.'"", ')', 'print', '(', ""'\\nInitial file/dir name:'"", ',', 'os', '.', 'listdir', '(', ')', ')', 'with', 'open', '(', ""'a.txt'"", ',', ""'r'"", ')', 'as', 'f', ':', 'print', '(', ""'\\nContents of a.txt:'"", ',', 'repr', '(', 'f', '.', 'read', '(', ')', ')', ')', 'os', '.', 'rename', '(', ""'a.txt'"", ',', ""'b.txt'"", ')', 'print', '(', ""'\\nAfter renaming initial file/dir name:'"", ',', 'os', '.', 'listdir', '(', ')', ')', 'with', 'open', '(', ""'b.txt'"", ',', ""'r'"", ')', 'as', 'f', ':', 'print', '(', ""'\\nContents of b.txt:'"", ',', 'repr', '(', 'f', '.', 'read', '(', ')', ')', ')']"
598,"['write', 'python', 'program', 'convert', 'given', 'string', 'snake', 'case']","['from', 're', 'import', 'sub', 'def', 'snake_case', '(', 's', ')', ':', 'return', ""'-'"", '.', 'join', '(', 'sub', '(', 'r""(\\s|_|-)+""', ',', '"" ""', ',', 'sub', '(', 'r""[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+""', ',', 'lambda', 'mo', ':', ""' '"", '+', 'mo', '.', 'group', '(', '0', ')', '.', 'lower', '(', ')', ',', 's', ')', ')', '.', 'split', '(', ')', ')', 'print', '(', 'snake_case', '(', ""'JavaScript'"", ')', ')', 'print', '(', 'snake_case', '(', ""'GDScript'"", ')', ')', 'print', '(', 'snake_case', '(', ""'BTW...what *do* you call that naming style? snake_case? '"", ')', ')']"
599,"['write', 'numpy', 'program', 'find', 'row', 'given', 'array', 'shape', 'contain', 'element', 'row', 'another', 'given', 'array', 'shape']","['import', 'numpy', 'as', 'np', 'nums1', '=', 'np', '.', 'random', '.', 'randint', '(', '0', ',', '6', ',', '(', '6', ',', '4', ')', ')', 'nums2', '=', 'np', '.', 'random', '.', 'randint', '(', '0', ',', '6', ',', '(', '2', ',', '3', ')', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'nums1', ')', 'print', '(', '""\\n""', ',', 'nums2', ')', 'temp', '=', '(', 'nums1', '[', '...', ',', 'np', '.', 'newaxis', ',', 'np', '.', 'newaxis', ']', '==', 'nums2', ')', 'rows', '=', '(', 'temp', '.', 'sum', '(', 'axis', '=', '(', '1', ',', '2', ',', '3', ')', ')', '>=', 'nums2', '.', 'shape', '[', '1', ']', ')', '.', 'nonzero', '(', ')', '[', '0', ']', 'print', '(', '""\\nRows of a given array that contain elements of each row of another given array:""', ')', 'print', '(', 'rows', ')']"
600,"['write', 'python', 'program', 'find', 'triplet', 'array', 'sum', 'closest', 'given', 'number', 'return', 'sum', 'three', 'integer']",[]
601,"['write', 'python', 'program', 'display', 'first', 'last', 'color', 'following', 'list']","['color_list', '=', '[', '""Red""', ',', '""Green""', ',', '""White""', ',', '""Black""', ']', 'print', '(', '""%s %s""', '%', '(', 'color_list', '[', '0', ']', ',', 'color_list', '[', '-', '1', ']', ')', ')']"
602,"['write', 'panda', 'program', 'create', 'plot', 'open', 'high', 'low', 'close', 'adjusted', 'closing', 'price', 'volume', 'alphabet', 'inc', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-9-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'stock_data', '=', 'df1', '.', 'set_index', '(', ""'Date'"", ')', 'stock_data', '.', 'plot', '(', 'subplots', '=', 'True', ',', 'figsize', '=', '(', '8', ',', '8', ')', ')', ';', 'plt', '.', 'legend', '(', 'loc', '=', ""'best'"", ')', 'plt', '.', 'suptitle', '(', ""'Open,High,Low,Close,Adj Close prices & Volume of Alphabet Inc., From 01-04-2020 to 30-09-2020'"", ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'show', '(', ')']"
603,"['write', 'python', 'program', 'delete', 'node', 'given', 'key', 'given', 'binary', 'search', 'tree', 'bst']",[]
604,"['write', 'python', 'program', 'generate', 'running', 'maximum', 'minimum', 'value', 'element', 'iterable']","['from', 'itertools', 'import', 'accumulate', 'def', 'running_max_product', '(', 'iters', ')', ':', 'return', 'accumulate', '(', 'iters', ',', 'max', ')', 'result', '=', 'running_max_product', '(', '[', '1', ',', '3', ',', '2', ',', '7', ',', '9', ',', '8', ',', '10', ',', '11', ',', '12', ',', '14', ',', '11', ',', '12', ',', '7', ']', ')', 'print', '(', '""Running maximum value of a list:""', ')', 'for', 'i', 'in', 'result', ':', 'print', '(', 'i', ')', 'result', '=', 'running_max_product', '(', '(', '1', ',', '3', ',', '3', ',', '7', ',', '9', ',', '8', ',', '10', ',', '9', ',', '8', ',', '14', ',', '11', ',', '15', ',', '7', ')', ')', 'print', '(', '""Running maximum value of a Tuple:""', ')', 'for', 'i', 'in', 'result', ':', 'print', '(', 'i', ')', 'def', 'running_min_product', '(', 'iters', ')', ':', 'return', 'accumulate', '(', 'iters', ',', 'min', ')', 'result', '=', 'running_min_product', '(', '[', '3', ',', '2', ',', '7', ',', '9', ',', '8', ',', '10', ',', '11', ',', '12', ',', '1', ',', '14', ',', '11', ',', '12', ',', '7', ']', ')', 'print', '(', '""Running minimum value of a list:""', ')', 'for', 'i', 'in', 'result', ':', 'print', '(', 'i', ')', 'result', '=', 'running_min_product', '(', '(', '1', ',', '3', ',', '3', ',', '7', ',', '9', ',', '8', ',', '10', ',', '9', ',', '8', ',', '0', ',', '11', ',', '15', ',', '7', ')', ')', 'print', '(', '""Running minimum value of a Tuple:""', ')', 'for', 'i', 'in', 'result', ':', 'print', '(', 'i', ')']"
605,"['write', 'panda', 'program', 'get', 'item', 'common', 'two', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'sr1', '=', 'pd', '.', 'Series', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ')', 'sr2', '=', 'pd', '.', 'Series', '(', '[', '2', ',', '4', ',', '6', ',', '8', ',', '10', ']', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', '""sr1:""', ')', 'print', '(', 'sr1', ')', 'print', '(', '""sr2:""', ')', 'print', '(', 'sr2', ')', 'print', '(', '""\\nItems of a given series not present in another given series:""', ')', 'sr11', '=', 'pd', '.', 'Series', '(', 'np', '.', 'union1d', '(', 'sr1', ',', 'sr2', ')', ')', 'sr22', '=', 'pd', '.', 'Series', '(', 'np', '.', 'intersect1d', '(', 'sr1', ',', 'sr2', ')', ')', 'result', '=', 'sr11', '[', '~', 'sr11', '.', 'isin', '(', 'sr22', ')', ']', 'print', '(', 'result', ')']"
606,"['write', 'panda', 'program', 'filter', 'column', 'entry', 'present', 'check', 'row', 'column', 'nan', 'finally', 'drop', 'row', 'nan', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nFind  all columns which all entries present:""', ')', 'print', '(', 'w_a_con', '.', 'loc', '[', ':', ',', 'w_a_con', '.', 'notnull', '(', ')', '.', 'all', '(', ')', ']', ')', 'print', '(', '""\\nRows and columns has a NaN:""', ')', 'print', '(', 'w_a_con', '.', 'loc', '[', ':', ',', 'w_a_con', '.', 'isnull', '(', ')', '.', 'any', '(', ')', ']', ')', 'print', '(', '""\\nDrop rows with any NaNs:""', ')', 'print', '(', 'w_a_con', '.', 'dropna', '(', 'how', '=', ""'any'"", ')', ')']"
607,"['write', 'panda', 'program', 'compute', 'euclidean', 'distance', 'two', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'x', '=', 'pd', '.', 'Series', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', ')', 'y', '=', 'pd', '.', 'Series', '(', '[', '11', ',', '8', ',', '7', ',', '5', ',', '6', ',', '5', ',', '3', ',', '4', ',', '7', ',', '1', ']', ')', 'print', '(', '""Original series:""', ')', 'print', '(', 'x', ')', 'print', '(', 'y', ')', 'print', '(', '""\\nEuclidean distance between two said series:""', ')', 'print', '(', 'np', '.', 'linalg', '.', 'norm', '(', 'x', '-', 'y', ')', ')']"
608,"['write', 'panda', 'program', 'convert', 'year', 'day', 'year', 'single', 'datetime', 'column', 'dataframe']","['import', 'pandas', 'as', 'pd', 'data', '=', '{', '""year""', ':', '[', '2002', ',', '2003', ',', '2015', ',', '2018', ']', ',', '""day_of_the_year""', ':', '[', '250', ',', '365', ',', '1', ',', '140', ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'df', '[', '""combined""', ']', '=', 'df', '[', '""year""', ']', '*', '1000', '+', 'df', '[', '""day_of_the_year""', ']', 'df', '[', '""date""', ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', '""combined""', ']', ',', 'format', '=', '""%Y%j""', ')', 'print', '(', '""\\nNew DataFrame:""', ')', 'print', '(', 'df', ')']"
609,"['write', 'python', 'program', 'sort', 'unsorted', 'number', 'using', 'nonparallelized', 'implementation', 'oddeven', 'transposition', 'sort']","['def', 'odd_even_transposition', '(', 'arr_nums', ':', 'list', ')', '->', 'list', ':', 'arr_size', '=', 'len', '(', 'arr_nums', ')', 'for', '_', 'in', 'range', '(', 'arr_size', ')', ':', 'for', 'i', 'in', 'range', '(', '_', '%', '2', ',', 'arr_size', '-', '1', ',', '2', ')', ':', 'if', 'arr_nums', '[', 'i', '+', '1', ']', '<', 'arr_nums', '[', 'i', ']', ':', 'arr_nums', '[', 'i', ']', ',', 'arr_nums', '[', 'i', '+', '1', ']', '=', 'arr_nums', '[', 'i', '+', '1', ']', ',', 'arr_nums', '[', 'i', ']', 'return', 'arr_nums', 'nums', '=', '[', '4', ',', '3', ',', '5', ',', '1', ',', '2', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'odd_even_transposition', '(', 'nums', ')', 'print', '(', '""Sorted order is:""', ',', 'nums', ')', 'nums', '=', '[', '5', ',', '9', ',', '10', ',', '3', ',', '-', '4', ',', '5', ',', '178', ',', '92', ',', '46', ',', '-', '18', ',', '0', ',', '7', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'odd_even_transposition', '(', 'nums', ')', 'print', '(', '""Sorted order is:""', ',', 'nums', ')']"
610,"['write', 'numpy', 'program', 'replace', 'specific', 'character', 'another', 'given', 'array', 'string', 'value']","['import', 'numpy', 'as', 'np', 'str1', '=', 'np', '.', 'array', '(', '[', '[', ""'Python-NumPy-Exercises'"", ']', ',', '[', ""'-Python-'"", ']', ']', ')', 'print', '(', '""Original array of string values:""', ')', 'print', '(', 'str1', ')', 'print', '(', '""\\nReplace \'-\' with \'=\' character in the said array of string values:""', ')', 'print', '(', 'np', '.', 'char', '.', 'strip', '(', 'np', '.', 'char', '.', 'replace', '(', 'str1', ',', ""'-'"", ',', ""'=='"", ')', ')', ')', 'print', '(', '""\\nReplace \'-\' with \' \' character in the said array of string values:""', ')', 'print', '(', 'np', '.', 'char', '.', 'strip', '(', 'np', '.', 'char', '.', 'replace', '(', 'str1', ',', ""'-'"", ',', ""' '"", ')', ')', ')']"
611,"['write', 'python', 'program', 'convert', 'hexadecimal', 'color', 'code', 'tuple', 'integer', 'corresponding', 'rgb', 'component']","['def', 'hex_to_rgb', '(', 'hex', ')', ':', 'return', 'tuple', '(', 'int', '(', 'hex', '[', 'i', ':', 'i', '+', '2', ']', ',', '16', ')', 'for', 'i', 'in', '(', '0', ',', '2', ',', '4', ')', ')', 'print', '(', 'hex_to_rgb', '(', ""'FFA501'"", ')', ')', 'print', '(', 'hex_to_rgb', '(', ""'FFFFFF'"", ')', ')', 'print', '(', 'hex_to_rgb', '(', ""'000000'"", ')', ')', 'print', '(', 'hex_to_rgb', '(', ""'FF0000'"", ')', ')', 'print', '(', 'hex_to_rgb', '(', ""'000080'"", ')', ')', 'print', '(', 'hex_to_rgb', '(', ""'C0C0C0'"", ')', ')']"
612,"['write', 'python', 'program', 'convert', 'given', 'list', 'tuples', 'list', 'string', 'using', 'map', 'function']","['def', 'tuples_to_list_string', '(', 'lst', ')', ':', 'result', '=', 'list', '(', 'map', '(', ""' '"", '.', 'join', ',', 'lst', ')', ')', 'return', 'result', 'colors', '=', '[', '(', ""'red'"", ',', ""'pink'"", ')', ',', '(', ""'white'"", ',', ""'black'"", ')', ',', '(', ""'orange'"", ',', ""'green'"", ')', ']', 'print', '(', '""Original list of tuples:""', ')', 'print', '(', 'colors', ')', 'print', '(', '""\\nConvert the said list of tuples to a list of strings:""', ')', 'print', '(', 'tuples_to_list_string', '(', 'colors', ')', ')', 'names', '=', '[', '(', ""'Sheridan'"", ',', ""'Gentry'"", ')', ',', '(', ""'Laila'"", ',', ""'Mckee'"", ')', ',', '(', ""'Ahsan'"", ',', ""'Rivas'"", ')', ',', '(', ""'Conna'"", ',', ""'Gonzalez'"", ')', ']', 'print', '(', '""\\nOriginal list of tuples:""', ')', 'print', '(', 'names', ')', 'print', '(', '""\\nConvert the said list of tuples to a list of strings:""', ')', 'print', '(', 'tuples_to_list_string', '(', 'names', ')', ')']"
613,"['write', 'python', 'program', 'check', 'element', 'first', 'list', 'contained', 'second', 'one', 'regardless', 'order']","['def', 'is_contained_in', '(', 'l1', ',', 'l2', ')', ':', 'for', 'x', 'in', 'set', '(', 'l1', ')', ':', 'if', 'l1', '.', 'count', '(', 'x', ')', '>', 'l2', '.', 'count', '(', 'x', ')', ':', 'return', 'False', 'return', 'True', 'print', '(', 'is_contained_in', '(', '[', '1', ',', '2', ']', ',', '[', '2', ',', '4', ',', '1', ']', ')', ')', 'print', '(', 'is_contained_in', '(', '[', '1', ']', ',', '[', '2', ',', '4', ',', '1', ']', ')', ')', 'print', '(', 'is_contained_in', '(', '[', '1', ',', '1', ']', ',', '[', '4', ',', '2', ',', '1', ']', ')', ')', 'print', '(', 'is_contained_in', '(', '[', '1', ',', '1', ']', ',', '[', '3', ',', '2', ',', '4', ',', '1', ',', '5', ',', '1', ']', ')', ')']"
614,"['write', 'python', 'program', 'create', 'histogram', 'given', 'list', 'integer']","['def', 'histogram', '(', 'items', ')', ':', 'for', 'n', 'in', 'items', ':', 'output', '=', ""''"", 'times', '=', 'n', 'while', '(', 'times', '>', '0', ')', ':', 'output', '+=', ""'*'"", 'times', '=', 'times', '-', '1', 'print', '(', 'output', ')', 'histogram', '(', '[', '2', ',', '3', ',', '6', ',', '5', ']', ')']"
615,"['write', 'python', 'program', 'print', 'item', 'corresponding', 'type', 'following', 'list']","['datalist', '=', '[', '1452', ',', '11.23', ',', '1', '+', '2j', ',', 'True', ',', ""'w3resource'"", ',', '(', '0', ',', '-', '1', ')', ',', '[', '5', ',', '12', ']', ',', '{', '""class""', ':', ""'V'"", ',', '""section""', ':', ""'A'"", '}', ']', 'for', 'item', 'in', 'datalist', ':', 'print', '(', '""Type of ""', ',', 'item', ',', '"" is ""', ',', 'type', '(', 'item', ')', ')']"
616,"['write', 'python', 'program', 'find', 'index', 'first', 'element', 'given', 'list', 'satisfies', 'provided', 'testing', 'function']","['def', 'find_index', '(', 'nums', ',', 'fn', ')', ':', 'return', 'next', '(', 'i', 'for', 'i', ',', 'x', 'in', 'enumerate', '(', 'nums', ')', 'if', 'fn', '(', 'x', ')', ')', 'print', '(', 'find_index', '(', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', 'lambda', 'n', ':', 'n', '%', '2', '==', '1', ')', ')']"
617,"['write', 'python', 'program', 'sort', 'given', 'dictionary', 'key']","['color_dict', '=', '{', ""'red'"", ':', ""'#FF0000'"", ',', ""'green'"", ':', ""'#008000'"", ',', ""'black'"", ':', ""'#000000'"", ',', ""'white'"", ':', ""'#FFFFFF'"", '}', 'for', 'key', 'in', 'sorted', '(', 'color_dict', ')', ':', 'print', '(', '""%s: %s""', '%', '(', 'key', ',', 'color_dict', '[', 'key', ']', ')', ')']"
618,"['write', 'python', 'program', 'chose', 'specified', 'number', 'colour', 'three', 'different', 'colour', 'generate', 'unique', 'combination']","['from', 'itertools', 'import', 'combinations', 'def', 'unique_combinations_colors', '(', 'list_data', ',', 'n', ')', ':', 'return', '[', '"" and ""', '.', 'join', '(', 'items', ')', 'for', 'items', 'in', 'combinations', '(', 'list_data', ',', 'r', '=', 'n', ')', ']', 'colors', '=', '[', '""Red""', ',', '""Green""', ',', '""Blue""', ']', 'print', '(', '""Original List: ""', ',', 'colors', ')', 'n', '=', '1', 'print', '(', '""\\nn = 1""', ')', 'print', '(', 'list', '(', 'unique_combinations_colors', '(', 'colors', ',', 'n', ')', ')', ')', 'n', '=', '2', 'print', '(', '""\\nn = 2""', ')', 'print', '(', 'list', '(', 'unique_combinations_colors', '(', 'colors', ',', 'n', ')', ')', ')', 'n', '=', '3', 'print', '(', '""\\nn = 3""', ')', 'print', '(', 'list', '(', 'unique_combinations_colors', '(', 'colors', ',', 'n', ')', ')', ')']"
619,"['write', 'panda', 'program', 'combine', 'two', 'dataframe', 'object', 'filling', 'null', 'value', 'one', 'dataframe', 'nonnull', 'value', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df1', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', '[', 'None', ',', '0', ',', 'None', ']', ',', ""'B'"", ':', '[', '3', ',', '4', ',', '5', ']', '}', ')', 'df2', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', '[', '1', ',', '1', ',', '3', ']', ',', ""'B'"", ':', '[', '3', ',', 'None', ',', '3', ']', '}', ')', 'df1', '.', 'combine_first', '(', 'df2', ')', 'print', '(', '""Original DataFrames:""', ')', 'print', '(', 'df1', ')', 'print', '(', '""--------------------""', ')', 'print', '(', 'df2', ')', 'print', '(', '""\\nMerge two dataframes with different columns:""', ')', 'result', '=', 'df1', '.', 'combine_first', '(', 'df2', ')', 'print', '(', 'result', ')']"
620,"['write', 'numpy', 'program', 'multiply', 'matrix', 'another', 'matrix', 'complex', 'number', 'create', 'new', 'matrix', 'complex', 'number']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', '+', '2j', ',', '3', '+', '4j', ']', ')', 'print', '(', '""First array:""', ')', 'print', '(', 'x', ')', 'y', '=', 'np', '.', 'array', '(', '[', '5', '+', '6j', ',', '7', '+', '8j', ']', ')', 'print', '(', '""Second array:""', ')', 'print', '(', 'y', ')', 'z', '=', 'np', '.', 'vdot', '(', 'x', ',', 'y', ')', 'print', '(', '""Product of above two arrays:""', ')', 'print', '(', 'z', ')']"
621,"['write', 'python', 'program', 'add', 'two', 'string', 'number', 'positive', 'integer', 'value', 'return', 'message', 'number', 'string']","['def', 'test', '(', 'n1', ',', 'n2', ')', ':', 'n1', ',', 'n2', '=', ""'0'"", '+', 'n1', ',', ""'0'"", '+', 'n2', 'if', '(', 'n1', '.', 'isnumeric', '(', ')', 'and', 'n2', '.', 'isnumeric', '(', ')', ')', ':', 'return', 'str', '(', 'int', '(', 'n1', ')', '+', 'int', '(', 'n2', ')', ')', 'else', ':', 'return', ""'Error in input!'"", 'print', '(', 'test', '(', '""10""', ',', '""32""', ')', ')', 'print', '(', 'test', '(', '""10""', ',', '""22.6""', ')', ')', 'print', '(', 'test', '(', '""100""', ',', '""-200""', ')', ')']"
622,"['write', 'python', 'program', 'insert', 'space', 'word', 'starting', 'capital', 'letter']","['import', 're', 'def', 'capital_words_spaces', '(', 'str1', ')', ':', 'return', 're', '.', 'sub', '(', 'r""(\\w)([A-Z])""', ',', 'r""\\1 \\2""', ',', 'str1', ')', 'print', '(', 'capital_words_spaces', '(', '""Python""', ')', ')', 'print', '(', 'capital_words_spaces', '(', '""PythonExercises""', ')', ')', 'print', '(', 'capital_words_spaces', '(', '""PythonExercisesPracticeSolution""', ')', ')']"
623,"['write', 'python', 'program', 'print', 'following', 'floating', 'number', 'upto', 'decimal', 'place', 'sign']","['x', '=', '3.1415926', 'y', '=', '-', '12.9999', 'print', '(', '""\\nOriginal Number: ""', ',', 'x', ')', 'print', '(', '""Formatted Number with sign: ""', '+', '""{:+.2f}""', '.', 'format', '(', 'x', ')', ')', ';', 'print', '(', '""Original Number: ""', ',', 'y', ')', 'print', '(', '""Formatted Number with sign: ""', '+', '""{:+.2f}""', '.', 'format', '(', 'y', ')', ')', ';', 'print', '(', ')']"
624,"['write', 'python', 'program', 'initialize', 'fill', 'list', 'specified', 'value']","['def', 'initialize_list_with_values', '(', 'n', ',', 'val', '=', '0', ')', ':', 'return', '[', 'val', 'for', 'x', 'in', 'range', '(', 'n', ')', ']', 'print', '(', 'initialize_list_with_values', '(', '7', ')', ')', 'print', '(', 'initialize_list_with_values', '(', '8', ',', '3', ')', ')', 'print', '(', 'initialize_list_with_values', '(', '5', ',', '-', '2', ')', ')', 'print', '(', 'initialize_list_with_values', '(', '5', ',', '3.2', ')', ')']"
625,"['write', 'python', 'program', 'convert', 'given', 'array', 'element', 'height', 'balanced', 'binary', 'search', 'tree', 'bst']","['class', 'TreeNode', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ',', 'x', ')', ':', 'self', '.', 'val', '=', 'x', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'def', 'array_to_bst', '(', 'array_nums', ')', ':', 'if', 'not', 'array_nums', ':', 'return', 'None', 'mid_num', '=', 'len', '(', 'array_nums', ')', '//', '2', 'node', '=', 'TreeNode', '(', 'array_nums', '[', 'mid_num', ']', ')', 'node', '.', 'left', '=', 'array_to_bst', '(', 'array_nums', '[', ':', 'mid_num', ']', ')', 'node', '.', 'right', '=', 'array_to_bst', '(', 'array_nums', '[', 'mid_num', '+', '1', ':', ']', ')', 'return', 'node', 'def', 'preOrder', '(', 'node', ')', ':', 'if', 'not', 'node', ':', 'return', 'print', '(', 'node', '.', 'val', ')', 'preOrder', '(', 'node', '.', 'left', ')', 'preOrder', '(', 'node', '.', 'right', ')', 'array_nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ']', 'print', '(', '""Original array:""', ')', 'print', '(', 'array_nums', ')', 'result', '=', 'array_to_bst', '(', 'array_nums', ')', 'print', '(', '""\\nArray to a height balanced BST:""', ')', 'print', '(', 'preOrder', '(', 'result', ')', ')']"
626,"['write', 'panda', 'program', 'merge', 'two', 'given', 'datasets', 'using', 'multiple', 'join', 'key']","['import', 'pandas', 'as', 'pd', 'data1', '=', 'pd', '.', 'DataFrame', '(', '{', ""'key1'"", ':', '[', ""'K0'"", ',', ""'K0'"", ',', ""'K1'"", ',', ""'K2'"", ']', ',', ""'key2'"", ':', '[', ""'K0'"", ',', ""'K1'"", ',', ""'K0'"", ',', ""'K1'"", ']', ',', ""'P'"", ':', '[', ""'P0'"", ',', ""'P1'"", ',', ""'P2'"", ',', ""'P3'"", ']', ',', ""'Q'"", ':', '[', ""'Q0'"", ',', ""'Q1'"", ',', ""'Q2'"", ',', ""'Q3'"", ']', '}', ')', 'data2', '=', 'pd', '.', 'DataFrame', '(', '{', ""'key1'"", ':', '[', ""'K0'"", ',', ""'K1'"", ',', ""'K1'"", ',', ""'K2'"", ']', ',', ""'key2'"", ':', '[', ""'K0'"", ',', ""'K0'"", ',', ""'K0'"", ',', ""'K0'"", ']', ',', ""'R'"", ':', '[', ""'R0'"", ',', ""'R1'"", ',', ""'R2'"", ',', ""'R3'"", ']', ',', ""'S'"", ':', '[', ""'S0'"", ',', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ']', '}', ')', 'print', '(', '""Original DataFrames:""', ')', 'print', '(', 'data1', ')', 'print', '(', '""--------------------""', ')', 'print', '(', 'data2', ')', 'print', '(', '""\\nMerged Data:""', ')', 'merged_data', '=', 'pd', '.', 'merge', '(', 'data1', ',', 'data2', ',', 'on', '=', '[', ""'key1'"", ',', ""'key2'"", ']', ')', 'print', '(', 'merged_data', ')']"
627,"['write', 'python', 'program', 'create', 'deep', 'copy', 'given', 'list', 'use', 'copycopy']","['import', 'copy', 'nums_x', '=', '[', '1', ',', '[', '2', ',', '3', ',', '4', ']', ']', 'print', '(', '""Original list: ""', ',', 'nums_x', ')', 'nums_y', '=', 'copy', '.', 'deepcopy', '(', 'nums_x', ')', 'print', '(', '""\\nDeep copy of the said list:""', ')', 'print', '(', 'nums_y', ')', 'print', '(', '""\\nChange the value of an element of the original list:""', ')', 'nums_x', '[', '1', ']', '[', '1', ']', '=', '10', 'print', '(', 'nums_x', ')', 'print', '(', '""\\nCopy of the second list (Deep copy):""', ')', 'print', '(', 'nums_y', ')', 'nums', '=', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ',', '6', ']', ']', 'deep_copy', '=', 'copy', '.', 'deepcopy', '(', 'nums', ')', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nDeep copy of the said list:""', ')', 'print', '(', 'deep_copy', ')', 'print', '(', '""\\nChange the value of some elements of the original list:""', ')', 'nums', '[', '0', ']', '[', '2', ']', '=', '55', 'nums', '[', '1', ']', '[', '1', ']', '=', '77', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nSecond list (Deep copy):""', ')', 'print', '(', 'deep_copy', ')']"
628,"['write', 'numpy', 'program', 'get', 'memory', 'usage', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'from', 'sys', 'import', 'getsizeof', 'x', '=', '[', '0', ']', '*', '1024', 'y', '=', 'np', '.', 'array', '(', 'x', ')', 'print', '(', 'getsizeof', '(', 'x', ')', ')']"
629,"['write', 'python', 'program', 'find', 'first', 'tag', 'given', 'attribute', 'value', 'html', 'document']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_doc', '=', '""""""\r<html>\r<head>\r<meta http-equiv=""Content-Type"" content=""text/html;\rcharset=iso-8859-1"">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from\rw3resource.com</a></p>\r<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from \rw3resource.com</a></p>\r</body>\r</html>\r""""""', 'soup', '=', 'BeautifulSoup', '(', 'html_doc', ',', '""lxml""', ')', 'print', '(', 'soup', '.', 'find', '(', 'href', '=', '""https://www.w3resource.com/css/CSS-tutorials.php""', ')', ')']"
630,"['write', 'python', 'program', 'create', 'time', 'object', 'hour', 'minute', 'second', 'microsecond', 'timestamp', 'representation', 'arrow', 'object', 'utc', 'time']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\nTime object with the same hour, minute, second, microsecond:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'time', '(', ')', ')', 'print', '(', '""\\nTimestamp representation of the Arrow object, in UTC time:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'timestamp', ')']"
631,"['write', 'python', 'program', 'swap', 'comma', 'dot', 'string']","['amount', '=', '""32.054,23""', 'maketrans', '=', 'amount', '.', 'maketrans', 'amount', '=', 'amount', '.', 'translate', '(', 'maketrans', '(', ""',.'"", ',', ""'.,'"", ')', ')', 'print', '(', 'amount', ')']"
632,"['write', 'python', 'program', 'find', 'shortest', 'distance', 'specified', 'character', 'given', 'string', 'return', 'shortest', 'distance', 'list', 'use', 'itertools', 'module', 'solve', 'problem']","['import', 'itertools', 'as', 'it', 'def', 'char_shortest_distancer', '(', 'str1', ',', 'char1', ')', ':', 'result', '=', '[', 'len', '(', 'str1', ')', ']', '*', 'len', '(', 'str1', ')', 'prev_char', '=', '-', 'len', '(', 'str1', ')', 'for', 'i', 'in', 'it', '.', 'chain', '(', 'range', '(', 'len', '(', 'str1', ')', ')', ',', 'reversed', '(', 'range', '(', 'len', '(', 'str1', ')', ')', ')', ')', ':', 'if', 'str1', '[', 'i', ']', '==', 'char1', ':', 'prev_char', '=', 'i', 'result', '[', 'i', ']', '=', 'min', '(', 'result', '[', 'i', ']', ',', 'abs', '(', 'i', '-', 'prev_char', ')', ')', 'return', 'result', 'str1', '=', '""w3resource""', 'chr1', '=', ""'r'"", 'print', '(', '""Original string:""', ',', 'str1', ',', '"": Specified character:""', ',', 'chr1', ')', 'print', '(', 'char_shortest_distancer', '(', 'str1', ',', 'chr1', ')', ')', 'str1', '=', '""python exercises""', 'chr1', '=', ""'e'"", 'print', '(', '""\\nOriginal string:""', ',', 'str1', ',', '"": Specified character:""', ',', 'chr1', ')', 'print', '(', 'char_shortest_distancer', '(', 'str1', ',', 'chr1', ')', ')', 'str1', '=', '""JavaScript""', 'chr1', '=', ""'S'"", 'print', '(', '""\\nOriginal string:""', ',', 'str1', ',', '"": Specified character:""', ',', 'chr1', ')', 'print', '(', 'char_shortest_distancer', '(', 'str1', ',', 'chr1', ')', ')']"
633,"['write', 'python', 'program', 'check', 'whether', 'file', 'path', 'file', 'directory']","['import', 'os', 'path', '=', '""abc.txt""', 'if', 'os', '.', 'path', '.', 'isdir', '(', 'path', ')', ':', 'print', '(', '""\\nIt is a directory""', ')', 'elif', 'os', '.', 'path', '.', 'isfile', '(', 'path', ')', ':', 'print', '(', '""\\nIt is a normal file""', ')', 'else', ':', 'print', '(', '""It is a special file (socket, FIFO, device file)""', ')', 'print', '(', ')']"
634,"['write', 'python', 'program', 'create', 'smallest', 'possible', 'number', 'using', 'element', 'given', 'list', 'positive', 'integer']","['def', 'create_largest_number', '(', 'lst', ')', ':', 'if', 'all', '(', 'val', '==', '0', 'for', 'val', 'in', 'lst', ')', ':', 'return', ""'0'"", 'result', '=', ""''"", '.', 'join', '(', 'sorted', '(', '(', 'str', '(', 'val', ')', 'for', 'val', 'in', 'lst', ')', ',', 'reverse', '=', 'False', ',', 'key', '=', 'lambda', 'i', ':', 'i', '*', '(', 'len', '(', 'str', '(', 'min', '(', 'lst', ')', ')', ')', '*', '2', '//', 'len', '(', 'i', ')', ')', ')', ')', 'return', 'result', 'nums', '=', '[', '3', ',', '40', ',', '41', ',', '43', ',', '74', ',', '9', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Smallest possible number using the elements of the said list of positive integers:""', ')', 'print', '(', 'create_largest_number', '(', 'nums', ')', ')', 'nums', '=', '[', '10', ',', '40', ',', '20', ',', '30', ',', '50', ',', '60', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Smallest possible number using the elements of the said list of positive integers:""', ')', 'print', '(', 'create_largest_number', '(', 'nums', ')', ')', 'nums', '=', '[', '8', ',', '4', ',', '2', ',', '9', ',', '5', ',', '6', ',', '1', ',', '0', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Smallest possible number using the elements of the said list of positive integers:""', ')', 'print', '(', 'create_largest_number', '(', 'nums', ')', ')']"
635,"['write', 'python', 'program', 'count', 'occurrence', 'element', 'given', 'list']","['from', 'collections', 'import', 'Counter', 'colors', '=', '[', ""'Green'"", ',', ""'Red'"", ',', ""'Blue'"", ',', ""'Red'"", ',', ""'Orange'"", ',', ""'Black'"", ',', ""'Black'"", ',', ""'White'"", ',', ""'Orange'"", ']', 'print', '(', '""Original List:""', ')', 'print', '(', 'colors', ')', 'print', '(', '""Count the occurrence of each element of the said list:""', ')', 'result', '=', 'Counter', '(', 'colors', ')', 'print', '(', 'result', ')', 'nums', '=', '[', '3', ',', '5', ',', '0', ',', '3', ',', '9', ',', '5', ',', '8', ',', '0', ',', '3', ',', '8', ',', '5', ',', '8', ',', '3', ',', '5', ',', '8', ',', '1', ',', '0', ',', '2', ']', 'print', '(', '""\\nOriginal List:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Count the occurrence of each element of the said list:""', ')', 'result', '=', 'Counter', '(', 'nums', ')', 'print', '(', 'result', ')']"
636,"['write', 'numpy', 'program', 'extract', 'element', 'second', 'third', 'column', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arra_data', '=', 'np', '.', 'arange', '(', '0', ',', '16', ')', '.', 'reshape', '(', '(', '4', ',', '4', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arra_data', ')', 'print', '(', '""\\nExtracted data: All the elements of the second and third columns""', ')', 'print', '(', 'arra_data', '[', ':', ',', '[', '1', ',', '2', ']', ']', ')']"
637,"['write', 'panda', 'program', 'check', 'day', 'business', 'day', 'weekday']","['import', 'pandas', 'as', 'pd', 'def', 'is_business_day', '(', 'date', ')', ':', 'return', 'bool', '(', 'len', '(', 'pd', '.', 'bdate_range', '(', 'date', ',', 'date', ')', ')', ')', 'print', '(', '""Check busines day or not?""', ')', 'print', '(', ""'2020-12-01: '"", ',', 'is_business_day', '(', ""'2020-12-01'"", ')', ')', 'print', '(', ""'2020-12-06: '"", ',', 'is_business_day', '(', ""'2020-12-06'"", ')', ')', 'print', '(', ""'2020-12-07: '"", ',', 'is_business_day', '(', ""'2020-12-07'"", ')', ')', 'print', '(', ""'2020-12-08: '"", ',', 'is_business_day', '(', ""'2020-12-08'"", ')', ')']"
638,"['write', 'python', 'program', 'get', 'powerset', 'given', 'iterable']","['from', 'itertools', 'import', 'chain', ',', 'combinations', 'def', 'powerset', '(', 'iterable', ')', ':', 's', '=', 'list', '(', 'iterable', ')', 'return', 'list', '(', 'chain', '.', 'from_iterable', '(', 'combinations', '(', 's', ',', 'r', ')', 'for', 'r', 'in', 'range', '(', 'len', '(', 's', ')', '+', '1', ')', ')', ')', 'nums', '=', '[', '1', ',', '2', ']', 'print', '(', '""Original list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Powerset of the said list:""', ')', 'print', '(', 'powerset', '(', 'nums', ')', ')', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Powerset of the said list:""', ')', 'print', '(', 'powerset', '(', 'nums', ')', ')']"
639,"['write', 'python', 'program', 'create', 'dictionary', 'string']","['from', 'collections', 'import', 'defaultdict', ',', 'Counter', 'str1', '=', ""'w3resource'"", 'my_dict', '=', '{', '}', 'for', 'letter', 'in', 'str1', ':', 'my_dict', '[', 'letter', ']', '=', 'my_dict', '.', 'get', '(', 'letter', ',', '0', ')', '+', '1', 'print', '(', 'my_dict', ')']"
640,"['write', 'panda', 'program', 'convert', 'dictionary', 'panda', 'series']","['import', 'pandas', 'as', 'pd', 'd1', '=', '{', ""'a'"", ':', '100', ',', ""'b'"", ':', '200', ',', ""'c'"", ':', '300', ',', ""'d'"", ':', '400', ',', ""'e'"", ':', '800', '}', 'print', '(', '""Original dictionary:""', ')', 'print', '(', 'd1', ')', 'new_series', '=', 'pd', '.', 'Series', '(', 'd1', ')', 'print', '(', '""Converted series:""', ')', 'print', '(', 'new_series', ')']"
641,"['write', 'python', 'program', 'accepts', 'word', 'user', 'reverse']","['word', '=', 'input', '(', '""Input a word to reverse: ""', ')', 'for', 'char', 'in', 'range', '(', 'len', '(', 'word', ')', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'print', '(', 'word', '[', 'char', ']', ',', 'end', '=', '""""', ')', 'print', '(', '""\\n""', ')']"
642,"['write', 'numpy', 'program', 'find', 'index', 'maximum', 'minimum', 'value', 'along', 'given', 'axis', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', ')', 'print', '(', '""Original array: ""', ',', 'x', ')', 'print', '(', '""Maximum Values: ""', ',', 'np', '.', 'argmax', '(', 'x', ')', ')', 'print', '(', '""Minimum Values: ""', ',', 'np', '.', 'argmin', '(', 'x', ')', ')']"
643,"['write', 'python', 'program', 'replace', 'given', 'tag', 'whatevers', 'inside', 'given', 'tag']","['from', 'bs4', 'import', 'BeautifulSoup', 'markup', '=', '\'<a href=""https://w3resource.com/"">Python exercises.<i>w3resource.com</i></a>\'', 'soup', '=', 'BeautifulSoup', '(', 'markup', ',', '""lxml""', ')', 'a_tag', '=', 'soup', '.', 'a', 'print', '(', '""Original markup:""', ')', 'print', '(', 'a_tag', ')', 'a_tag', '.', 'i', '.', 'unwrap', '(', ')', 'print', '(', '""\\nAfter unwrapping:""', ')', 'print', '(', 'a_tag', ')']"
644,"['write', 'python', 'program', 'map', 'two', 'list', 'dictionary']","['keys', '=', '[', ""'red'"", ',', ""'green'"", ',', ""'blue'"", ']', 'values', '=', '[', ""'#FF0000'"", ',', ""'#008000'"", ',', ""'#0000FF'"", ']', 'color_dictionary', '=', 'dict', '(', 'zip', '(', 'keys', ',', 'values', ')', ')', 'print', '(', 'color_dictionary', ')']"
645,"['write', 'python', 'program', 'get', 'length', 'byte', 'one', 'array', 'item', 'internal', 'representation']","['from', 'array', 'import', '*', 'array_num', '=', 'array', '(', ""'i'"", ',', '[', '1', ',', '3', ',', '5', ',', '7', ',', '9', ']', ')', 'print', '(', '""Original array: ""', '+', 'str', '(', 'array_num', ')', ')', 'print', '(', '""Length in bytes of one array item: ""', '+', 'str', '(', 'array_num', '.', 'itemsize', ')', ')']"
646,"['write', 'panda', 'program', 'convert', 'first', 'column', 'dataframe', 'series']","['import', 'pandas', 'as', 'pd', 'd', '=', '{', ""'col1'"", ':', '[', '1', ',', '2', ',', '3', ',', '4', ',', '7', ',', '11', ']', ',', ""'col2'"", ':', '[', '4', ',', '5', ',', '6', ',', '9', ',', '5', ',', '0', ']', ',', ""'col3'"", ':', '[', '7', ',', '5', ',', '8', ',', '12', ',', '1', ',', '11', ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', '=', 'd', ')', 'print', '(', '""Original DataFrame""', ')', 'print', '(', 'df', ')', 's1', '=', 'df', '.', 'ix', '[', ':', ',', '0', ']', 'print', '(', '""\\n1st column as a Series:""', ')', 'print', '(', 's1', ')', 'print', '(', 'type', '(', 's1', ')', ')']"
647,"['write', 'numpy', 'program', 'find', 'number', 'row', 'column', 'given', 'matrix']","['import', 'numpy', 'as', 'np', 'm', '=', 'np', '.', 'arange', '(', '10', ',', '22', ')', '.', 'reshape', '(', '(', '3', ',', '4', ')', ')', 'print', '(', '""Original matrix:""', ')', 'print', '(', 'm', ')', 'print', '(', '""Number of rows and columns of the said matrix:""', ')', 'print', '(', 'm', '.', 'shape', ')']"
648,"['write', 'python', 'program', 'get', 'possible', 'two', 'digit', 'letter', 'combination', 'digit', 'string']","['def', 'letter_combinations', '(', 'digits', ')', ':', 'if', 'digits', '==', '""""', ':', 'return', '[', ']', 'string_maps', '=', '{', '""1""', ':', '""abc""', ',', '""2""', ':', '""def""', ',', '""3""', ':', '""ghi""', ',', '""4""', ':', '""jkl""', ',', '""5""', ':', '""mno""', ',', '""6""', ':', '""pqrs""', ',', '""7""', ':', '""tuv""', ',', '""8""', ':', '""wxy""', ',', '""9""', ':', '""z""', '}', 'result', '=', '[', '""""', ']', 'for', 'num', 'in', 'digits', ':', 'temp', '=', '[', ']', 'for', 'an', 'in', 'result', ':', 'for', 'char', 'in', 'string_maps', '[', 'num', ']', ':', 'temp', '.', 'append', '(', 'an', '+', 'char', ')', 'result', '=', 'temp', 'return', 'result', 'digit_string', '=', '""47""', 'print', '(', 'letter_combinations', '(', 'digit_string', ')', ')', 'digit_string', '=', '""29""', 'print', '(', 'letter_combinations', '(', 'digit_string', ')', ')']"
649,"['write', 'python', 'function', 'convert', 'given', 'string', 'uppercase', 'contains', 'least', 'uppercase', 'character', 'first', 'character']","['def', 'to_uppercase', '(', 'str1', ')', ':', 'num_upper', '=', '0', 'for', 'letter', 'in', 'str1', '[', ':', '4', ']', ':', 'if', 'letter', '.', 'upper', '(', ')', '==', 'letter', ':', 'num_upper', '+=', '1', 'if', 'num_upper', '>=', '2', ':', 'return', 'str1', '.', 'upper', '(', ')', 'return', 'str1', 'print', '(', 'to_uppercase', '(', ""'Python'"", ')', ')', 'print', '(', 'to_uppercase', '(', ""'PyThon'"", ')', ')']"
650,"['write', 'python', 'program', 'split', 'string', 'last', 'occurrence', 'delimiter']","['str1', '=', '""w,3,r,e,s,o,u,r,c,e""', 'print', '(', 'str1', '.', 'rsplit', '(', ""','"", ',', '1', ')', ')', 'print', '(', 'str1', '.', 'rsplit', '(', ""','"", ',', '2', ')', ')', 'print', '(', 'str1', '.', 'rsplit', '(', ""','"", ',', '5', ')', ')']"
651,"['write', 'python', 'program', 'create', 'flat', 'list', 'key', 'flat', 'dictionary']","['def', 'test', '(', 'flat_dict', ')', ':', 'return', 'list', '(', 'flat_dict', '.', 'keys', '(', ')', ')', 'students', '=', '{', ""'Theodore'"", ':', '19', ',', ""'Roxanne'"", ':', '20', ',', ""'Mathew'"", ':', '21', ',', ""'Betty'"", ':', '20', '}', 'print', '(', '""\\nOriginal dictionary elements:""', ')', 'print', '(', 'students', ')', 'print', '(', '""\\nCreate a flat list of all the keys of the said flat dictionary:""', ')', 'print', '(', 'test', '(', 'students', ')', ')']"
652,"['write', 'numpy', 'program', 'compute', 'inverse', 'given', 'matrix']","['import', 'numpy', 'as', 'np', 'm', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', ')', 'print', '(', '""Original matrix:""', ')', 'print', '(', 'm', ')', 'result', '=', 'np', '.', 'linalg', '.', 'inv', '(', 'm', ')', 'print', '(', '""Inverse of the said matrix:""', ')', 'print', '(', 'result', ')']"
653,"['write', 'python', 'program', 'calculate', 'sum', 'digit', 'base', 'specified', 'power']","['def', 'power_base_sum', '(', 'base', ',', 'power', ')', ':', 'return', 'sum', '(', '[', 'int', '(', 'i', ')', 'for', 'i', 'in', 'str', '(', 'pow', '(', 'base', ',', 'power', ')', ')', ']', ')', 'print', '(', 'power_base_sum', '(', '2', ',', '100', ')', ')', 'print', '(', 'power_base_sum', '(', '8', ',', '10', ')', ')']"
654,"['write', 'python', 'program', 'start', 'new', 'process', 'replacing', 'current', 'process']","['import', 'os', 'import', 'sys', 'program', '=', '""python""', 'arguments', '=', '[', '""hello.py""', ']', 'print', '(', 'os', '.', 'execvp', '(', 'program', ',', '(', 'program', ',', ')', '+', 'tuple', '(', 'arguments', ')', ')', ')', 'print', '(', '""Goodbye""', ')']"
655,"['write', 'panda', 'program', 'swap', 'case', 'specified', 'character', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF'"", ',', ""'zefsalf'"", ',', ""'sdfslew'"", ',', ""'zekfsdf'"", ']', ',', ""'date_of_sale'"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nSwapp cases in comapny_code:""', ')', 'df', '[', ""'swapped_company_code'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'swapcase', '(', ')', ',', 'df', '[', ""'company_code'"", ']', ')', ')', 'print', '(', 'df', ')']"
656,"['write', 'numpy', 'program', 'create', 'elementwise', 'comparison', 'greater', 'le', 'two', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '3', ',', '5', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '2', ',', '5', ']', ')', 'print', '(', '""Original numbers:""', ')', 'print', '(', 'x', ')', 'print', '(', 'y', ')', 'print', '(', '""Comparison - greater""', ')', 'print', '(', 'np', '.', 'greater', '(', 'x', ',', 'y', ')', ')', 'print', '(', '""Comparison - greater_equal""', ')', 'print', '(', 'np', '.', 'greater_equal', '(', 'x', ',', 'y', ')', ')', 'print', '(', '""Comparison - less""', ')', 'print', '(', 'np', '.', 'less', '(', 'x', ',', 'y', ')', ')', 'print', '(', '""Comparison - less_equal""', ')', 'print', '(', 'np', '.', 'less_equal', '(', 'x', ',', 'y', ')', ')']"
657,"['write', 'python', 'program', 'build', 'list', 'using', 'iterator', 'function', 'initial', 'seed', 'value']","['def', 'unfold', '(', 'fn', ',', 'seed', ')', ':', 'def', 'fn_generator', '(', 'val', ')', ':', 'while', 'True', ':', 'val', '=', 'fn', '(', 'val', '[', '1', ']', ')', 'if', 'val', '==', 'False', ':', 'break', 'yield', 'val', '[', '0', ']', 'return', '[', 'i', 'for', 'i', 'in', 'fn_generator', '(', '[', 'None', ',', 'seed', ']', ')', ']', 'f', '=', 'lambda', 'n', ':', 'False', 'if', 'n', '>', '40', 'else', '[', '-', 'n', ',', 'n', '+', '10', ']', 'print', '(', 'unfold', '(', 'f', ',', '10', ')', ')']"
658,"['write', 'python', 'program', 'remove', 'kth', 'element', 'given', 'list', 'print', 'new', 'list']","['def', 'remove_kth_element', '(', 'n_list', ',', 'L', ')', ':', 'return', 'n_list', '[', ':', 'L', '-', '1', ']', '+', 'n_list', '[', 'L', ':', ']', 'n_list', '=', '[', '1', ',', '1', ',', '2', ',', '3', ',', '4', ',', '4', ',', '5', ',', '1', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'n_list', ')', 'kth_position', '=', '3', 'result', '=', 'remove_kth_element', '(', 'n_list', ',', 'kth_position', ')', 'print', '(', '""\\nAfter removing an element at the kth position of the said list:""', ')', 'print', '(', 'result', ')']"
659,"['write', 'python', 'program', 'interleave', 'multiple', 'given', 'list', 'different', 'length']","['def', 'interleave_diff_len_lists', '(', 'list1', ',', 'list2', ',', 'list3', ',', 'list4', ')', ':', 'result', '=', '[', ']', 'l1', '=', 'len', '(', 'list1', ')', 'l2', '=', 'len', '(', 'list2', ')', 'l3', '=', 'len', '(', 'list3', ')', 'l4', '=', 'len', '(', 'list4', ')', 'for', 'i', 'in', 'range', '(', 'max', '(', 'l1', ',', 'l2', ',', 'l3', ',', 'l4', ')', ')', ':', 'if', 'i', '<', 'l1', ':', 'result', '.', 'append', '(', 'list1', '[', 'i', ']', ')', 'if', 'i', '<', 'l2', ':', 'result', '.', 'append', '(', 'list2', '[', 'i', ']', ')', 'if', 'i', '<', 'l3', ':', 'result', '.', 'append', '(', 'list3', '[', 'i', ']', ')', 'if', 'i', '<', 'l4', ':', 'result', '.', 'append', '(', 'list4', '[', 'i', ']', ')', 'return', 'result', 'nums1', '=', '[', '2', ',', '4', ',', '7', ',', '0', ',', '5', ',', '8', ']', 'nums2', '=', '[', '2', ',', '5', ',', '8', ']', 'nums3', '=', '[', '0', ',', '1', ']', 'nums4', '=', '[', '3', ',', '3', ',', '-', '1', ',', '7', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', 'nums3', ')', 'print', '(', 'nums4', ')', 'print', '(', '""\\nInterleave said lists of different lengths:""', ')', 'print', '(', 'interleave_diff_len_lists', '(', 'nums1', ',', 'nums2', ',', 'nums3', ',', 'nums4', ')', ')']"
660,"['write', 'numpy', 'program', 'combine', 'one', 'two', 'dimensional', 'array', 'together', 'display', 'element']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '4', ')', 'print', '(', '""One dimensional array:""', ')', 'print', '(', 'x', ')', 'y', '=', 'np', '.', 'arange', '(', '8', ')', '.', 'reshape', '(', '2', ',', '4', ')', 'print', '(', '""Two dimensional array:""', ')', 'print', '(', 'y', ')', 'for', 'a', ',', 'b', 'in', 'np', '.', 'nditer', '(', '[', 'x', ',', 'y', ']', ')', ':', 'print', '(', '""%d:%d""', '%', '(', 'a', ',', 'b', ')', ',', ')']"
661,"['write', 'numpy', 'program', 'calculate', 'hyperbolic', 'sine', 'hyperbolic', 'cosine', 'hyperbolic', 'tangent', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '-', '1.', ',', '0', ',', '1.', ']', ')', 'print', '(', 'np', '.', 'sinh', '(', 'x', ')', ')', 'print', '(', 'np', '.', 'cosh', '(', 'x', ')', ')', 'print', '(', 'np', '.', 'tanh', '(', 'x', ')', ')']"
662,"['write', 'numpy', 'program', 'calculate', 'euclidean', 'distance']","['from', 'scipy', '.', 'spatial', 'import', 'distance', 'p1', '=', '(', '1', ',', '2', ',', '3', ')', 'p2', '=', '(', '4', ',', '5', ',', '6', ')', 'd', '=', 'distance', '.', 'euclidean', '(', 'p1', ',', 'p2', ')', 'print', '(', '""Euclidean distance: ""', ',', 'd', ')']"
663,"['write', 'panda', 'program', 'find', 'index', 'missing', 'value', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', 'np', '.', 'nan', ',', '70002', ',', '70004', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', 'np', '.', 'nan', ',', '65.26', ',', '110.5', ',', '948.5', ',', 'np', '.', 'nan', ',', '5760', ',', '1983.43', ',', 'np', '.', 'nan', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_amt'"", ':', '[', '10.5', ',', '20.65', ',', 'np', '.', 'nan', ',', '11.5', ',', '98.5', ',', 'np', '.', 'nan', ',', '57', ',', '19.43', ',', 'np', '.', 'nan', ',', '25.45', ',', '75.29', ',', '35.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3002', ',', '3001', ',', '3001', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5003', ',', '5001', ',', 'np', '.', 'nan', ',', '5002', ',', '5001', ',', '5001', ',', 'np', '.', 'nan', ',', '5003', ',', '5002', ',', '5003', ',', 'np', '.', 'nan', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nMissing values in purch_amt column:""', ')', 'result', '=', 'df', '[', ""'ord_no'"", ']', '.', 'isnull', '(', ')', '.', 'to_numpy', '(', ')', '.', 'nonzero', '(', ')', 'print', '(', 'result', ')']"
664,"['write', 'numpy', 'program', 'print', 'value', 'array']","['import', 'numpy', 'as', 'np', 'np', '.', 'set_printoptions', '(', 'threshold', '=', 'np', '.', 'nan', ')', 'x', '=', 'np', '.', 'zeros', '(', '(', '4', ',', '4', ')', ')', 'print', '(', 'x', ')']"
665,"['write', 'python', 'program', 'skip', 'header', 'given', 'csv', 'file', 'use', 'csvreader']","['import', 'csv', 'f', '=', 'open', '(', '""employees.csv""', ',', '""r""', ')', 'reader', '=', 'csv', '.', 'reader', '(', 'f', ')', 'next', '(', 'reader', ')', 'for', 'row', 'in', 'reader', ':', 'print', '(', 'row', ')']"
666,"['write', 'numpy', 'program', 'compute', 'pearson', 'productmoment', 'correlation', 'coefficient', 'two', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '0', ',', '1', ',', '3', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '2', ',', '4', ',', '5', ']', ')', 'print', '(', '""\\nOriginal array1:""', ')', 'print', '(', 'x', ')', 'print', '(', '""\\nOriginal array1:""', ')', 'print', '(', 'y', ')', 'print', '(', '""\\nPearson product-moment correlation coefficients of the said arrays:\\n""', ',', 'np', '.', 'corrcoef', '(', 'x', ',', 'y', ')', ')']"
667,"['write', 'python', 'program', 'get', 'frequency', 'tuples', 'given', 'list']","['from', 'collections', 'import', 'Counter', 'nums', '=', '[', '(', '[', ""'1'"", ',', ""'4'"", ']', ',', '[', ""'4'"", ',', ""'1'"", ']', ',', '[', ""'3'"", ',', ""'4'"", ']', ',', '[', ""'2'"", ',', ""'7'"", ']', ',', '[', ""'6'"", ',', ""'8'"", ']', ',', '[', ""'5'"", ',', ""'8'"", ']', ',', '[', ""'6'"", ',', ""'8'"", ']', ',', '[', ""'5'"", ',', ""'7'"", ']', ',', '[', ""'2'"", ',', ""'7'"", ']', ')', ']', 'print', '(', '""Original list of tuples:""', ')', 'print', '(', 'nums', ')', 'result', '=', 'Counter', '(', 'tuple', '(', 'sorted', '(', 'i', ')', ')', 'for', 'i', 'in', 'nums', '[', '0', ']', ')', 'print', '(', '""\\nTuples""', ',', '""    ""', ',', '""frequency""', ')', 'for', 'key', ',', 'val', 'in', 'result', '.', 'items', '(', ')', ':', 'print', '(', 'key', ',', '"" ""', ',', 'val', ')']"
668,"['write', 'numpy', 'program', 'make', 'length', 'element', 'given', 'array', 'string', 'centered', 'leftjustified', 'rightjustified', 'padding']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', ""'python exercises'"", ',', ""'PHP'"", ',', ""'java'"", ',', ""'C++'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""Original Array:""', ')', 'print', '(', 'x', ')', 'centered', '=', 'np', '.', 'char', '.', 'center', '(', 'x', ',', '15', ',', 'fillchar', '=', ""'_'"", ')', 'left', '=', 'np', '.', 'char', '.', 'ljust', '(', 'x', ',', '15', ',', 'fillchar', '=', ""'_'"", ')', 'right', '=', 'np', '.', 'char', '.', 'rjust', '(', 'x', ',', '15', ',', 'fillchar', '=', ""'_'"", ')', 'print', '(', '""\\nCentered =""', ',', 'centered', ')', 'print', '(', '""Left =""', ',', 'left', ')', 'print', '(', '""Right =""', ',', 'right', ')']"
669,"['write', 'numpy', 'program', 'find', 'set', 'difference', 'two', 'array', 'set', 'difference', 'return', 'sorted', 'unique', 'value']","['import', 'numpy', 'as', 'np', 'array1', '=', 'np', '.', 'array', '(', '[', '0', ',', '10', ',', '20', ',', '40', ',', '60', ',', '80', ']', ')', 'print', '(', '""Array1: ""', ',', 'array1', ')', 'array2', '=', '[', '10', ',', '30', ',', '40', ',', '50', ',', '70', ']', 'print', '(', '""Array2: ""', ',', 'array2', ')', 'print', '(', '""Unique values in array1 that are not in array2:""', ')', 'print', '(', 'np', '.', 'setdiff1d', '(', 'array1', ',', 'array2', ')', ')']"
670,"['write', 'numpy', 'program', 'create', 'vector', 'size', 'value', 'ranging', 'excluded']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'linspace', '(', '0', ',', '1', ',', '12', ',', 'endpoint', '=', 'True', ')', '[', '1', ':', '-', '1', ']', 'print', '(', 'x', ')']"
671,"['write', 'numpy', 'program', 'evaluate', 'einstein', 'summation', 'convention', 'two', 'given', 'multidimensional', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ']', ')', 'b', '=', 'np', '.', 'array', '(', '[', '0', ',', '1', ',', '0', ']', ')', 'print', '(', '""Original 1-d arrays:""', ')', 'print', '(', 'a', ')', 'print', '(', 'b', ')', 'result', '=', 'np', '.', 'einsum', '(', '""n,n""', ',', 'a', ',', 'b', ')', 'print', '(', '""Einstein’s summation convention of the said arrays:""', ')', 'print', '(', 'result', ')', 'x', '=', 'np', '.', 'arange', '(', '9', ')', '.', 'reshape', '(', '3', ',', '3', ')', 'y', '=', 'np', '.', 'arange', '(', '3', ',', '12', ')', '.', 'reshape', '(', '3', ',', '3', ')', 'print', '(', '""Original Higher dimension:""', ')', 'print', '(', 'x', ')', 'print', '(', 'y', ')', 'result', '=', 'np', '.', 'einsum', '(', '""mk,kn""', ',', 'x', ',', 'y', ')', 'print', '(', '""Einstein’s summation convention of the said arrays:""', ')', 'print', '(', 'result', ')']"
672,"['write', 'python', 'program', 'remove', 'content', 'tag', 'given', 'html', 'document']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_content', '=', '\'<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>\'', 'soup', '=', 'BeautifulSoup', '(', 'html_content', ',', '""lxml""', ')', 'print', '(', '""Original Markup:""', ')', 'print', '(', 'soup', '.', 'a', ')', 'tag', '=', 'soup', '.', 'a', 'tag', '=', 'tag', '.', 'clear', '(', ')', 'print', '(', '""\\nAfter clearing the contents in the tag:""', ')', 'print', '(', 'soup', '.', 'a', ')']"
673,"['write', 'python', 'program', 'count', 'number', 'element', 'list', 'within', 'specified', 'range']","['def', 'count_range_in_list', '(', 'li', ',', 'min', ',', 'max', ')', ':', 'ctr', '=', '0', 'for', 'x', 'in', 'li', ':', 'if', 'min', '<=', 'x', '<=', 'max', ':', 'ctr', '+=', '1', 'return', 'ctr', 'list1', '=', '[', '10', ',', '20', ',', '30', ',', '40', ',', '40', ',', '40', ',', '70', ',', '80', ',', '99', ']', 'print', '(', 'count_range_in_list', '(', 'list1', ',', '40', ',', '100', ')', ')', 'list2', '=', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", ',', ""'e'"", ',', ""'f'"", ']', 'print', '(', 'count_range_in_list', '(', 'list2', ',', ""'a'"", ',', ""'e'"", ')', ')']"
674,"['write', 'python', 'program', 'concatenate', 'element', 'list']","['color', '=', '[', ""'red'"", ',', ""'green'"", ',', ""'orange'"", ']', 'print', '(', ""'-'"", '.', 'join', '(', 'color', ')', ')', 'print', '(', ""''"", '.', 'join', '(', 'color', ')', ')']"
675,"['write', 'python', 'program', 'access', 'multiple', 'element', 'specified', 'index', 'given', 'list']","['def', 'access_elements', '(', 'nums', ',', 'list_index', ')', ':', 'result', '=', '[', 'nums', '[', 'i', ']', 'for', 'i', 'in', 'list_index', ']', 'return', 'result', 'nums', '=', '[', '2', ',', '3', ',', '8', ',', '4', ',', '7', ',', '9', ',', '8', ',', '2', ',', '6', ',', '5', ',', '1', ',', '6', ',', '1', ',', '2', ',', '3', ',', '4', ',', '6', ',', '9', ',', '1', ',', '2', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'list_index', '=', '[', '0', ',', '3', ',', '5', ',', '7', ',', '10', ']', 'print', '(', '""Index list:""', ')', 'print', '(', 'list_index', ')', 'print', '(', '""\\nItems with specified index of the said list:""', ')', 'print', '(', 'access_elements', '(', 'nums', ',', 'list_index', ')', ')']"
676,"['write', 'python', 'program', 'zip', 'two', 'given', 'list', 'list']","['list1', '=', '[', '[', '1', ',', '3', ']', ',', '[', '5', ',', '7', ']', ',', '[', '9', ',', '11', ']', ']', 'list2', '=', '[', '[', '2', ',', '4', ']', ',', '[', '6', ',', '8', ']', ',', '[', '10', ',', '12', ',', '14', ']', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'list1', ')', 'print', '(', 'list2', ')', 'result', '=', 'list', '(', 'map', '(', 'list', '.', '__add__', ',', 'list1', ',', 'list2', ')', ')', 'print', '(', '""\\nZipped list:\\n""', '+', 'str', '(', 'result', ')', ')']"
677,"['write', 'panda', 'program', 'extract', 'unique', 'reporting', 'date', 'unidentified', 'flying', 'object', 'ufo']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'print', '(', '""Original Dataframe:""', ')', 'print', '(', 'df', '.', 'head', '(', ')', ')', 'print', '(', '""\\nUnique reporting dates of UFO:""', ')', 'print', '(', 'df', '[', '""Date_time""', ']', '.', 'map', '(', 'lambda', 't', ':', 't', '.', 'date', '(', ')', ')', '.', 'unique', '(', ')', ')']"
678,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'survival', 'rate', 'gender', 'age', 'different', 'category', 'various', 'class']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'age', '=', 'pd', '.', 'cut', '(', 'df', '[', ""'age'"", ']', ',', '[', '0', ',', '20', ',', '55', ']', ')', 'result', '=', 'df', '.', 'pivot_table', '(', ""'survived'"", ',', 'index', '=', '[', ""'sex'"", ',', 'age', ']', ',', 'columns', '=', ""'class'"", ')', 'print', '(', 'result', ')']"
679,"['write', 'python', 'program', 'sort', 'unsorted', 'number', 'using', 'pigeonhole', 'sorting']",[]
680,"['write', 'python', 'program', 'calculate', 'difference', 'two', 'iterables', 'without', 'filtering', 'duplicate', 'value']","['def', 'difference', '(', 'x', ',', 'y', ')', ':', '_y', '=', 'set', '(', 'y', ')', 'return', '[', 'item', 'for', 'item', 'in', 'x', 'if', 'item', 'not', 'in', '_y', ']', 'print', '(', 'difference', '(', '[', '1', ',', '2', ',', '3', ']', ',', '[', '1', ',', '2', ',', '4', ']', ')', ')']"
681,"['write', 'python', 'program', 'get', 'number', 'datasets', 'currently', 'listed', 'datagov']","['from', 'lxml', 'import', 'html', 'import', 'requests', 'response', '=', 'requests', '.', 'get', '(', ""'http://www.data.gov/'"", ')', 'doc_gov', '=', 'html', '.', 'fromstring', '(', 'response', '.', 'text', ')', 'link_gov', '=', 'doc_gov', '.', 'cssselect', '(', ""'small a'"", ')', '[', '0', ']', 'print', '(', '""Number of datasets currently listed on data.gov:""', ')', 'print', '(', 'link_gov', '.', 'text', ')']"
682,"['write', 'numpy', 'program', 'add', 'two', 'array', 'b', 'size']","['import', 'numpy', 'as', 'np', 'A', '=', 'np', '.', 'ones', '(', '(', '3', ',', '3', ')', ')', 'B', '=', 'np', '.', 'arange', '(', '3', ')', 'print', '(', '""Original array:""', ')', 'print', '(', '""Array-1""', ')', 'print', '(', 'A', ')', 'print', '(', '""Array-2""', ')', 'print', '(', 'B', ')', 'print', '(', '""A + B:""', ')', 'new_array', '=', 'A', '+', 'B', 'print', '(', 'new_array', ')']"
683,"['write', 'python', 'program', 'detect', 'number', 'local', 'variable', 'declared', 'function']","['def', 'abc', '(', ')', ':', 'x', '=', '1', 'y', '=', '2', 'str1', '=', '""w3resource""', 'print', '(', '""Python Exercises""', ')', 'print', '(', 'abc', '.', '__code__', '.', 'co_nlocals', ')']"
684,"['write', 'python', 'program', 'take', 'number', 'iterable', 'object', 'object', 'length', 'property', 'return', 'longest', 'one']","['def', 'longest_item', '(', '*', 'args', ')', ':', 'return', 'max', '(', 'args', ',', 'key', '=', 'len', ')', 'print', '(', 'longest_item', '(', ""'this'"", ',', ""'is'"", ',', ""'a'"", ',', ""'Green'"", ')', ')', 'print', '(', 'longest_item', '(', '[', '1', ',', '2', ',', '3', ']', ',', '[', '1', ',', '2', ']', ',', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ')', ')', 'print', '(', 'longest_item', '(', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', ""'Red'"", ')', ')']"
685,"['write', 'python', 'program', 'multiply', 'number', 'given', 'list', 'given', 'number', 'using', 'lambda', 'function', 'print', 'result']","['nums', '=', '[', '2', ',', '4', ',', '6', ',', '9', ',', '11', ']', 'n', '=', '2', 'print', '(', '""Original list: ""', ',', 'nums', ')', 'print', '(', '""Given number: ""', ',', 'n', ')', 'filtered_numbers', '=', 'list', '(', 'map', '(', 'lambda', 'number', ':', 'number', '*', 'n', ',', 'nums', ')', ')', 'print', '(', '""Result:""', ')', 'print', '(', ""' '"", '.', 'join', '(', 'map', '(', 'str', ',', 'filtered_numbers', ')', ')', ')']"
686,"['write', 'python', 'program', 'convert', 'list', 'list', 'dictionary']","['color_name', '=', '[', '""Black""', ',', '""Red""', ',', '""Maroon""', ',', '""Yellow""', ']', 'color_code', '=', '[', '""#000000""', ',', '""#FF0000""', ',', '""#800000""', ',', '""#FFFF00""', ']', 'print', '(', '[', '{', ""'color_name'"", ':', 'f', ',', ""'color_code'"", ':', 'c', '}', 'for', 'f', ',', 'c', 'in', 'zip', '(', 'color_name', ',', 'color_code', ')', ']', ')']"
687,"['write', 'python', 'program', 'round', 'decimal', 'value', 'nearest', 'multiple', 'unless', 'already', 'exact', 'multiple', 'use', 'decimaldecimal']","['from', 'decimal', 'import', 'Decimal', 'def', 'round_to_10_cents', '(', 'x', ')', ':', 'remainder', '=', 'x', '.', 'remainder_near', '(', 'Decimal', '(', ""'0.10'"", ')', ')', 'if', 'abs', '(', 'remainder', ')', '==', 'Decimal', '(', ""'0.05'"", ')', ':', 'return', 'x', 'else', ':', 'return', 'x', '-', 'remainder', 'for', 'x', 'in', 'range', '(', '80', ',', '120', ')', ':', 'y', '=', 'Decimal', '(', 'x', ')', '/', 'Decimal', '(', ""'1E2'"", ')', 'print', '(', '""{0} rounds to {1}""', '.', 'format', '(', 'y', ',', 'round_to_10_cents', '(', 'y', ')', ')', ')']"
688,"['write', 'panda', 'program', 'split', 'following', 'given', 'dataframe', 'group', 'based', 'school', 'code', 'cast', 'grouping', 'list']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'student_data', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_Of_Birth '"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '12', ',', '12', ',', '13', ',', '13', ',', '14', ',', '12', ']', ',', ""'height'"", ':', '[', '173', ',', '192', ',', '186', ',', '167', ',', '151', ',', '159', ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', ',', ""'address'"", ':', '[', ""'street1'"", ',', ""'street2'"", ',', ""'street3'"", ',', ""'street1'"", ',', ""'street2'"", ',', ""'street4'"", ']', '}', ',', 'index', '=', '[', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ',', ""'S4'"", ',', ""'S5'"", ',', ""'S6'"", ']', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'student_data', ')', 'print', '(', ""'\\nCast grouping as a list:'"", ')', 'result', '=', 'student_data', '.', 'groupby', '(', '[', ""'school_code'"", ']', ')', 'print', '(', 'list', '(', 'result', ')', ')']"
689,"['write', 'python', 'program', 'find', 'missing', 'number', 'given', 'array', 'number']","['import', 'array', 'as', 'arr', 'def', 'test', '(', 'nums', ')', ':', 'return', 'sum', '(', 'range', '(', '10', ',', '21', ')', ')', '-', 'sum', '(', 'list', '(', 'nums', ')', ')', 'array_num', '=', 'arr', '.', 'array', '(', ""'i'"", ',', '[', '10', ',', '11', ',', '12', ',', '13', ',', '14', ',', '16', ',', '17', ',', '18', ',', '19', ',', '20', ']', ')', 'print', '(', '""Original array:""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'array_num', ')', ')', ':', 'print', '(', 'array_num', '[', 'i', ']', ',', 'end', '=', ""' '"", ')', 'print', '(', '""\\nMissing number in the said array (10-20): ""', ',', 'test', '(', 'array_num', ')', ')', 'array_num', '=', 'arr', '.', 'array', '(', ""'i'"", ',', '[', '10', ',', '11', ',', '12', ',', '13', ',', '14', ',', '15', ',', '16', ',', '17', ',', '18', ',', '19', ']', ')', 'print', '(', '""\\nOriginal array:""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'array_num', ')', ')', ':', 'print', '(', 'array_num', '[', 'i', ']', ',', 'end', '=', ""' '"", ')', 'print', '(', '""\\nMissing number in the said array (10-20): ""', ',', 'test', '(', 'array_num', ')', ')']"
690,"['write', 'python', 'program', 'map', 'value', 'list', 'dictionary', 'using', 'function', 'keyvalue', 'pair', 'consist', 'original', 'value', 'key', 'result', 'function', 'value']","['def', 'map_dictionary', '(', 'itr', ',', 'fn', ')', ':', 'return', 'dict', '(', 'zip', '(', 'itr', ',', 'map', '(', 'fn', ',', 'itr', ')', ')', ')', 'print', '(', 'map_dictionary', '(', '[', '1', ',', '2', ',', '3', ']', ',', 'lambda', 'x', ':', 'x', '*', 'x', ')', ')']"
691,"['write', 'python', 'program', 'check', 'duplicate', 'value', 'given', 'flat', 'list']","['def', 'has_duplicates', '(', 'lst', ')', ':', 'return', 'len', '(', 'lst', ')', '!=', 'len', '(', 'set', '(', 'lst', ')', ')', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Check if there are duplicate values in the said given flat list:""', ')', 'print', '(', 'has_duplicates', '(', 'nums', ')', ')', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '3', ',', '4', ',', '5', ',', '5', ',', '6', ',', '7', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Check if there are duplicate values in the said given flat list:""', ')', 'print', '(', 'has_duplicates', '(', 'nums', ')', ')']"
692,"['write', 'python', 'program', 'combine', 'two', 'given', 'sorted', 'list', 'using', 'heapq', 'module']","['from', 'heapq', 'import', 'merge', 'nums1', '=', '[', '1', ',', '3', ',', '5', ',', '7', ',', '9', ',', '11', ']', 'nums2', '=', '[', '0', ',', '2', ',', '4', ',', '6', ',', '8', ',', '10', ']', 'print', '(', '""Original sorted lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nAfter merging the said two sorted lists:""', ')', 'print', '(', 'list', '(', 'merge', '(', 'nums1', ',', 'nums2', ')', ')', ')']"
693,"['write', 'python', 'program', 'find', 'shortest', 'list', 'value', 'key', 'given', 'dictionary']","['def', 'test', '(', 'dictt', ')', ':', 'min_value', '=', '1', 'result', '=', '[', 'k', 'for', 'k', ',', 'v', 'in', 'dictt', '.', 'items', '(', ')', 'if', 'len', '(', 'v', ')', '==', '(', 'min_value', ')', ']', 'return', 'result', 'dictt', '=', '{', ""'V'"", ':', '[', '10', ',', '12', ']', ',', ""'VI'"", ':', '[', '10', ']', ',', ""'VII'"", ':', '[', '10', ',', '20', ',', '30', ',', '40', ']', ',', ""'VIII'"", ':', '[', '20', ']', ',', ""'IX'"", ':', '[', '10', ',', '30', ',', '50', ',', '70', ']', ',', ""'X'"", ':', '[', '80', ']', '}', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'dictt', ')', 'print', '(', '""\\nShortest list of values with the keys of the said dictionary:""', ')', 'print', '(', 'test', '(', 'dictt', ')', ')']"
694,"['write', 'python', 'program', 'check', 'access', 'specified', 'path', 'test', 'existence', 'readability', 'writability', 'executability', 'specified', 'path']","['import', 'os', 'print', '(', ""'Exist:'"", ',', 'os', '.', 'access', '(', ""'c:\\\\Users\\\\Public\\\\C programming library.docx'"", ',', 'os', '.', 'F_OK', ')', ')', 'print', '(', ""'Readable:'"", ',', 'os', '.', 'access', '(', ""'c:\\\\Users\\\\Public\\\\C programming library.docx'"", ',', 'os', '.', 'R_OK', ')', ')', 'print', '(', ""'Writable:'"", ',', 'os', '.', 'access', '(', ""'c:\\\\Users\\\\Public\\\\C programming library.docx'"", ',', 'os', '.', 'W_OK', ')', ')', 'print', '(', ""'Executable:'"", ',', 'os', '.', 'access', '(', ""'c:\\\\Users\\\\Public\\\\C programming library.docx'"", ',', 'os', '.', 'X_OK', ')', ')']"
695,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'selection', 'sort']","['def', 'selection_sort', '(', 'nums', ')', ':', 'for', 'i', ',', 'n', 'in', 'enumerate', '(', 'nums', ')', ':', 'mn', '=', 'min', '(', 'range', '(', 'i', ',', 'len', '(', 'nums', ')', ')', ',', 'key', '=', 'nums', '.', '__getitem__', ')', 'nums', '[', 'i', ']', ',', 'nums', '[', 'mn', ']', '=', 'nums', '[', 'mn', ']', ',', 'n', 'return', 'nums', 'user_input', '=', 'input', '(', '""Input numbers separated by a comma:\\n""', ')', '.', 'strip', '(', ')', 'nums', '=', '[', 'int', '(', 'item', ')', 'for', 'item', 'in', 'user_input', '.', 'split', '(', ""','"", ')', ']', 'print', '(', 'selection_sort', '(', 'nums', ')', ')']"
696,"['write', 'panda', 'program', 'split', 'following', 'datasets', 'group', 'summarize', 'calculate', 'percentage', 'group']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', '70009', ',', '70002', ',', '70004', ',', '70007', ',', '70005', ',', '70008', ',', '70010', ',', '70003', ',', '70012', ',', '70011', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'05-10-2012'"", ',', ""'09-10-2012'"", ',', ""'05-10-2012'"", ',', ""'08-17-2012'"", ',', ""'10-09-2012'"", ',', ""'07-27-2012'"", ',', ""'10-09-2012'"", ',', ""'10-10-2012'"", ',', ""'10-10-2012'"", ',', ""'06-17-2012'"", ',', ""'07-08-2012'"", ',', ""'04-25-2012'"", ']', ',', ""'customer_id'"", ':', '[', '3001', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3005', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5005', ',', '5001', ',', '5003', ',', '5002', ',', '5001', ',', '5001', ',', '5006', ',', '5003', ',', '5002', ',', '5007', ',', '5001', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'gr_data', '=', 'df', '.', 'groupby', '(', '[', ""'customer_id'"", ',', ""'salesman_id'"", ']', ')', '.', 'agg', '(', '{', ""'purch_amt'"", ':', ""'sum'"", '}', ')', 'gr_data', '[', '""% (Purch Amt.)""', ']', '=', 'gr_data', '.', 'apply', '(', 'lambda', 'x', ':', '100', '*', 'x', '/', 'x', '.', 'sum', '(', ')', ')', 'print', '(', '""\\nPercentage of purch_amt in each group of customer_id:""', ')', 'print', '(', 'gr_data', ')']"
697,"['write', 'python', 'program', 'extract', 'tag', 'string', 'given', 'tree', 'html', 'document']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_content', '=', '\'<a href=""https://w3resource.com/"">Python exercises<i>w3resource</i></a>\'', 'soup', '=', 'BeautifulSoup', '(', 'html_content', ',', '""lxml""', ')', 'print', '(', '""Original Markup:""', ')', 'print', '(', 'soup', '.', 'a', ')', 'i_tag', '=', 'soup', '.', 'i', '.', 'extract', '(', ')', 'print', '(', '""\\nExtract i tag from said html Markup:""', ')', 'print', '(', 'i_tag', ')']"
698,"['write', 'python', 'program', 'remove', 'consecutive', 'duplicate', 'given', 'list']","['from', 'itertools', 'import', 'groupby', 'def', 'compress', '(', 'l_nums', ')', ':', 'return', '[', 'key', 'for', 'key', ',', 'group', 'in', 'groupby', '(', 'l_nums', ')', ']', 'n_list', '=', '[', '0', ',', '0', ',', '1', ',', '2', ',', '3', ',', '4', ',', '4', ',', '5', ',', '6', ',', '6', ',', '6', ',', '7', ',', '8', ',', '9', ',', '4', ',', '4', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'n_list', ')', 'print', '(', '""\\nAfter removing consecutive duplicates:""', ')', 'print', '(', 'compress', '(', 'n_list', ')', ')']"
699,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'total', 'sale', 'amount', 'region', 'wise', 'manager', 'wise', 'sale', 'man', 'wise']","['import', 'numpy', 'as', 'np', 'import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\SaleData.xlsx'"", ')', 'print', '(', 'pd', '.', 'pivot_table', '(', 'df', ',', 'index', '=', '[', '""Region""', ',', '""Manager""', ',', '""SalesMan""', ']', ',', 'values', '=', '""Sale_amt""', ',', 'aggfunc', '=', 'np', '.', 'sum', ')', ')']"
700,"['write', 'panda', 'program', 'find', 'alcohol', 'consumption', 'detail', 'year', 'region', 'western', 'pacific', 'country', 'vietnam', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nThe world alcohol consumption details in the year 1986 where WHO region is Western Pacific and country is VietNam :""', ')', 'print', '(', 'w_a_con', '[', '(', 'w_a_con', '[', ""'Year'"", ']', '==', '1986', ')', '&', '(', 'w_a_con', '[', ""'WHO region'"", ']', '==', ""'Western Pacific'"", ')', '&', '(', 'w_a_con', '[', ""'Country'"", ']', '==', ""'Viet Nam'"", ')', ']', ')']"
701,"['write', 'python', 'function', 'check', 'whether', 'passed', 'string', 'palindrome']","['def', 'isPalindrome', '(', 'string', ')', ':', 'left_pos', '=', '0', 'right_pos', '=', 'len', '(', 'string', ')', '-', '1', 'while', 'right_pos', '>=', 'left_pos', ':', 'if', 'not', 'string', '[', 'left_pos', ']', '==', 'string', '[', 'right_pos', ']', ':', 'return', 'False', 'left_pos', '+=', '1', 'right_pos', '-=', '1', 'return', 'True', 'print', '(', 'isPalindrome', '(', ""'aza'"", ')', ')']"
702,"['write', 'python', 'program', 'count', 'integer', 'given', 'mixed', 'list']","['def', 'count_integer', '(', 'list1', ')', ':', 'ctr', '=', '0', 'for', 'i', 'in', 'list1', ':', 'if', 'isinstance', '(', 'i', ',', 'int', ')', ':', 'ctr', '=', 'ctr', '+', '1', 'return', 'ctr', 'list1', '=', '[', '1', ',', ""'abcd'"", ',', '3', ',', '1.2', ',', '4', ',', ""'xyz'"", ',', '5', ',', ""'pqr'"", ',', '7', ',', '-', '5', ',', '-', '12.22', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""\\nNumber of integers in the said mixed list:""', ')', 'print', '(', 'count_integer', '(', 'list1', ')', ')']"
703,"['write', 'python', 'program', 'check', 'first', 'digitcharacter', 'element', 'given', 'list']","['def', 'test', '(', 'lst', ')', ':', 'result', '=', 'all', '(', 'str', '(', 'x', ')', '[', '0', ']', '==', 'str', '(', 'lst', '[', '0', ']', ')', '[', '0', ']', 'for', 'x', 'in', 'lst', ')', 'return', 'result', 'nums', '=', '[', '1234', ',', '122', ',', '1984', ',', '19372', ',', '100', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Check if first digit in each element of the said given list is same or not!""', ')', 'print', '(', 'test', '(', 'nums', ')', ')', 'nums', '=', '[', '1234', ',', '922', ',', '1984', ',', '19372', ',', '100', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Check if first digit in each element of the said given list is same or not!""', ')', 'print', '(', 'test', '(', 'nums', ')', ')', 'nums', '=', '[', ""'aabc'"", ',', ""'abc'"", ',', ""'ab'"", ',', ""'a'"", ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Check if first character in each element of the said given list is same or not!""', ')', 'print', '(', 'test', '(', 'nums', ')', ')', 'nums', '=', '[', ""'aabc'"", ',', ""'abc'"", ',', ""'ab'"", ',', ""'ha'"", ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Check if first character in each element of the said given list is same or not!""', ')', 'print', '(', 'test', '(', 'nums', ')', ')']"
704,"['write', 'python', 'program', 'print', 'four', 'value', 'decimal', 'octal', 'hexadecimal', 'capitalized', 'binary', 'single', 'line', 'given', 'integer']","['i', '=', 'int', '(', 'input', '(', '""Input an integer: ""', ')', ')', 'o', '=', 'str', '(', 'oct', '(', 'i', ')', ')', '[', '2', ':', ']', 'h', '=', 'str', '(', 'hex', '(', 'i', ')', ')', '[', '2', ':', ']', 'h', '=', 'h', '.', 'upper', '(', ')', 'b', '=', 'str', '(', 'bin', '(', 'i', ')', ')', '[', '2', ':', ']', 'd', '=', 'str', '(', 'i', ')', 'print', '(', '""Decimal Octal Hexadecimal (capitalized), Binary""', ')', 'print', '(', 'd', ',', ""'  '"", ',', 'o', ',', ""' '"", ',', 'h', ',', ""'                   '"", ',', 'b', ')']"
705,"['write', 'numpy', 'program', 'extract', 'third', 'fourth', 'element', 'first', 'second', 'row', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arra_data', '=', 'np', '.', 'arange', '(', '0', ',', '16', ')', '.', 'reshape', '(', '(', '4', ',', '4', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arra_data', ')', 'print', '(', '""\\nExtracted data: Third and fourth elements of the first and second rows ""', ')', 'print', '(', 'arra_data', '[', '0', ':', '2', ',', '2', ':', '4', ']', ')']"
706,"['write', 'numpy', 'program', 'create', 'record', 'array', 'flat', 'list', 'array']","['import', 'numpy', 'as', 'np', 'a1', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ',', '4', ']', ')', 'a2', '=', 'np', '.', 'array', '(', '[', ""'Red'"", ',', ""'Green'"", ',', ""'White'"", ',', ""'Orange'"", ']', ')', 'a3', '=', 'np', '.', 'array', '(', '[', '12.20', ',', '15', ',', '20', ',', '40', ']', ')', 'result', '=', 'np', '.', 'core', '.', 'records', '.', 'fromarrays', '(', '[', 'a1', ',', 'a2', ',', 'a3', ']', ',', 'names', '=', ""'a,b,c'"", ')', 'print', '(', 'result', '[', '0', ']', ')', 'print', '(', 'result', '[', '1', ']', ')', 'print', '(', 'result', '[', '2', ']', ')']"
707,"['write', 'python', 'program', 'find', 'palindrome', 'given', 'list', 'string', 'using', 'lambda']","['texts', '=', '[', '""php""', ',', '""w3r""', ',', '""Python""', ',', '""abcd""', ',', '""Java""', ',', '""aaa""', ']', 'print', '(', '""Orginal list of strings:""', ')', 'print', '(', 'texts', ')', 'result', '=', 'list', '(', 'filter', '(', 'lambda', 'x', ':', '(', 'x', '==', '""""', '.', 'join', '(', 'reversed', '(', 'x', ')', ')', ')', ',', 'texts', ')', ')', 'print', '(', '""\\nList of palindromes:""', ')', 'print', '(', 'result', ')']"
708,"['write', 'python', 'program', 'read', 'csv', 'file', 'remove', 'initial', 'space', 'quote', 'around', 'entry', 'delimiter']","['import', 'csv', 'csv', '.', 'register_dialect', '(', ""'csv_dialect'"", ',', 'delimiter', '=', ""'|'"", ',', 'skipinitialspace', '=', 'True', ',', 'quoting', '=', 'csv', '.', 'QUOTE_ALL', ')', 'with', 'open', '(', ""'temp.csv'"", ',', ""'r'"", ')', 'as', 'csvfile', ':', 'reader', '=', 'csv', '.', 'reader', '(', 'csvfile', ',', 'dialect', '=', ""'csv_dialect'"", ')', 'for', 'row', 'in', 'reader', ':', 'print', '(', 'row', ')']"
709,"['write', 'panda', 'program', 'create', 'bar', 'plot', 'trading', 'volume', 'alphabet', 'inc', 'stock', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'df2', '=', 'df1', '.', 'set_index', '(', ""'Date'"", ')', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '6', ',', '6', ')', ')', 'plt', '.', 'suptitle', '(', ""'Trading Volume of Alphabet Inc. stock,\\n01-04-2020 to 30-04-2020'"", ',', 'fontsize', '=', '16', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'xlabel', '(', '""Date""', ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'ylabel', '(', '""Trading Volume""', ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'df2', '[', ""'Volume'"", ']', '.', 'plot', '(', 'kind', '=', ""'bar'"", ')', ';', 'plt', '.', 'show', '(', ')']"
710,"['write', 'python', 'program', 'delete', 'occurrence', 'specified', 'character', 'given', 'string']","['def', 'delete_all_occurrences', '(', 'str1', ',', 'ch', ')', ':', 'result', '=', 'str1', '.', 'replace', '(', 'ch', ',', '""""', ')', 'return', '(', 'result', ')', 'str_text', '=', '""Delete all occurrences of a specified character in a given string""', 'print', '(', '""Original string:""', ')', 'print', '(', 'str_text', ')', 'print', '(', '""\\nModified string:""', ')', 'ch', '=', ""'a'"", 'print', '(', 'delete_all_occurrences', '(', 'str_text', ',', 'ch', ')', ')']"
711,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'manager', 'wise', 'salesman', 'wise', 'total', 'sale', 'also', 'display', 'sum', 'sale', 'amount', 'bottom']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\SaleData.xlsx'"", ')', 'table', '=', 'pd', '.', 'pivot_table', '(', 'df', ',', 'index', '=', '[', '""Manager""', ',', '""SalesMan""', ']', ',', 'values', '=', '[', '""Units""', ',', '""Sale_amt""', ']', ',', 'aggfunc', '=', '[', 'np', '.', 'sum', ']', ',', 'fill_value', '=', '0', ',', 'margins', '=', 'True', ')', 'print', '(', 'table', ')']"
712,"['write', 'python', 'program', 'create', 'time', 'object', 'hour', 'minute', 'second', 'microsecond', 'timezone', 'info']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\nTime object with the same hour, minute, second, microsecond and timezone info.:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'timetz', '(', ')', ')']"
713,"['write', 'panda', 'program', 'get', 'item', 'given', 'series', 'present', 'another', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'sr1', '=', 'pd', '.', 'Series', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ')', 'sr2', '=', 'pd', '.', 'Series', '(', '[', '2', ',', '4', ',', '6', ',', '8', ',', '10', ']', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', '""sr1:""', ')', 'print', '(', 'sr1', ')', 'print', '(', '""sr2:""', ')', 'print', '(', 'sr2', ')', 'print', '(', '""\\nItems of sr1 not present in sr2:""', ')', 'result', '=', 'sr1', '[', '~', 'sr1', '.', 'isin', '(', 'sr2', ')', ']', 'print', '(', 'result', ')']"
714,"['write', 'python', 'program', 'create', 'new', 'list', 'dividing', 'two', 'given', 'list', 'number']","['def', 'dividing_two_lists', '(', 'l1', ',', 'l2', ')', ':', 'result', '=', '[', 'x', '/', 'y', 'for', 'x', ',', 'y', 'in', 'zip', '(', 'l1', ',', 'l2', ')', ']', 'return', 'result', 'nums1', '=', '[', '7', ',', '2', ',', '3', ',', '4', ',', '9', ',', '2', ',', '3', ']', 'nums2', '=', '[', '9', ',', '8', ',', '2', ',', '3', ',', '3', ',', '1', ',', '2', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums1', ')', 'print', '(', 'dividing_two_lists', '(', 'nums1', ',', 'nums2', ')', ')']"
715,"['write', 'python', 'program', 'print', 'document', 'syntax', 'description', 'etc', 'python', 'builtin', 'function']","['print', '(', 'abs', '.', '__doc__', ')']"
716,"['write', 'python', 'program', 'count', 'even', 'odd', 'number', 'given', 'array', 'integer', 'using', 'lambda']","['array_nums', '=', '[', '1', ',', '2', ',', '3', ',', '5', ',', '7', ',', '8', ',', '9', ',', '10', ']', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'array_nums', ')', 'odd_ctr', '=', 'len', '(', 'list', '(', 'filter', '(', 'lambda', 'x', ':', '(', 'x', '%', '2', '!=', '0', ')', ',', 'array_nums', ')', ')', ')', 'even_ctr', '=', 'len', '(', 'list', '(', 'filter', '(', 'lambda', 'x', ':', '(', 'x', '%', '2', '==', '0', ')', ',', 'array_nums', ')', ')', ')', 'print', '(', '""\\nNumber of even numbers in the above array: ""', ',', 'even_ctr', ')', 'print', '(', '""\\nNumber of odd numbers in the above array: ""', ',', 'odd_ctr', ')']"
717,"['write', 'python', 'program', 'get', 'datetime', 'timestamp', 'representation', 'current', 'datetime']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Datetime representation:""', ')', 'print', '(', 'a', '.', 'datetime', ')', 'b', '=', 'a', '.', 'timestamp', 'print', '(', '""\\nTimestamp representation:""', ')', 'print', '(', 'b', ')']"
718,"['write', 'python', 'program', 'check', 'whether', 'lowercase', 'letter', 'exist', 'string']","['str1', '=', ""'A8238i823acdeOUEI'"", 'print', '(', 'any', '(', 'c', '.', 'islower', '(', ')', 'for', 'c', 'in', 'str1', ')', ')']"
719,"['write', 'panda', 'program', 'split', 'following', 'given', 'dataframe', 'group', 'based', 'single', 'column', 'multiple', 'column', 'find', 'size', 'grouped', 'data']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'student_data', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_Of_Birth '"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '12', ',', '12', ',', '13', ',', '13', ',', '14', ',', '12', ']', ',', ""'height'"", ':', '[', '173', ',', '192', ',', '186', ',', '167', ',', '151', ',', '159', ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', ',', ""'address'"", ':', '[', ""'street1'"", ',', ""'street2'"", ',', ""'street3'"", ',', ""'street1'"", ',', ""'street2'"", ',', ""'street4'"", ']', '}', ',', 'index', '=', '[', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ',', ""'S4'"", ',', ""'S5'"", ',', ""'S6'"", ']', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'student_data', ')', 'print', '(', ""'\\nSplit the said data on school_code wise:'"", ')', 'grouped_single', '=', 'student_data', '.', 'groupby', '(', '[', ""'school_code'"", ']', ')', 'print', '(', '""Size of the grouped data - single column""', ')', 'print', '(', 'grouped_single', '.', 'size', '(', ')', ')', 'print', '(', ""'\\nSplit the said data on school_code and class wise:'"", ')', 'grouped_mul', '=', 'student_data', '.', 'groupby', '(', '[', ""'school_code'"", ',', ""'class'"", ']', ')', 'print', '(', '""Size of the grouped data - multiple columns:""', ')', 'print', '(', 'grouped_mul', '.', 'size', '(', ')', ')']"
720,"['write', 'python', 'program', 'create', 'new', 'json', 'file', 'existing', 'json', 'file']","['import', 'json', 'with', 'open', '(', ""'states.json'"", ')', 'as', 'f', ':', 'state_data', '=', 'json', '.', 'load', '(', 'f', ')', 'for', 'state', 'in', 'state_data', '[', ""'states'"", ']', ':', 'del', 'state', '[', ""'area_codes'"", ']', 'with', 'open', '(', ""'new_states.json'"", ',', ""'w'"", ')', 'as', 'f', ':', 'json', '.', 'dump', '(', 'state_data', ',', 'f', ',', 'indent', '=', '2', ')']"
721,"['write', 'python', 'program', 'move', 'space', 'front', 'given', 'string']","['def', 'move_Spaces_front', '(', 'str1', ')', ':', 'noSpaces_char', '=', '[', 'ch', 'for', 'ch', 'in', 'str1', 'if', 'ch', '!=', ""' '"", ']', 'spaces_char', '=', 'len', '(', 'str1', ')', '-', 'len', '(', 'noSpaces_char', ')', 'result', '=', ""' '"", '*', 'spaces_char', 'result', '=', '\'""\'', '+', 'result', '+', ""''"", '.', 'join', '(', 'noSpaces_char', ')', '+', '\'""\'', 'return', '(', 'result', ')', 'print', '(', 'move_Spaces_front', '(', '""w3resource .  com  ""', ')', ')', 'print', '(', 'move_Spaces_front', '(', '""   w3resource.com  ""', ')', ')']"
722,"['write', 'panda', 'program', 'check', 'whether', 'alpha', 'numeric', 'value', 'present', 'given', 'column', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'name_code'"", ':', '[', ""'Company'"", ',', ""'Company a001'"", ',', ""'Company 123'"", ',', ""'1234'"", ',', ""'Company 12'"", ']', ',', ""'date_of_birth '"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '18.5', ',', '21.2', ',', '22.5', ',', '22', ',', '23', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nWhether all characters in the string are alphanumeric?""', ')', 'df', '[', ""'name_code_is_alphanumeric'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'isalnum', '(', ')', ',', 'df', '[', ""'name_code'"", ']', ')', ')', 'print', '(', 'df', ')']"
723,"['write', 'python', 'program', 'split', 'given', 'dictionary', 'list', 'list', 'dictionary']","['def', 'list_of_dicts', '(', 'marks', ')', ':', 'keys', '=', 'marks', '.', 'keys', '(', ')', 'vals', '=', 'zip', '(', '*', '[', 'marks', '[', 'k', ']', 'for', 'k', 'in', 'keys', ']', ')', 'result', '=', '[', 'dict', '(', 'zip', '(', 'keys', ',', 'v', ')', ')', 'for', 'v', 'in', 'vals', ']', 'return', 'result', 'marks', '=', '{', ""'Science'"", ':', '[', '88', ',', '89', ',', '62', ',', '95', ']', ',', ""'Language'"", ':', '[', '77', ',', '78', ',', '84', ',', '80', ']', '}', 'print', '(', '""Original dictionary of lists:""', ')', 'print', '(', 'marks', ')', 'print', '(', '""\\nSplit said dictionary of lists into list of dictionaries:""', ')', 'print', '(', 'list_of_dicts', '(', 'marks', ')', ')']"
724,"['write', 'python', 'program', 'read', 'specific', 'column', 'given', 'csv', 'file', 'print', 'content', 'column']","['import', 'csv', 'with', 'open', '(', ""'departments.csv'"", ',', 'newline', '=', ""''"", ')', 'as', 'csvfile', ':', 'data', '=', 'csv', '.', 'DictReader', '(', 'csvfile', ')', 'print', '(', '""ID Department Name""', ')', 'print', '(', '""---------------------------------""', ')', 'for', 'row', 'in', 'data', ':', 'print', '(', 'row', '[', ""'department_id'"", ']', ',', 'row', '[', ""'department_name'"", ']', ')']"
725,"['write', 'python', 'program', 'create', 'list', 'infinite', 'element']","['import', 'itertools', 'c', '=', 'itertools', '.', 'count', '(', ')', 'print', '(', 'next', '(', 'c', ')', ')', 'print', '(', 'next', '(', 'c', ')', ')', 'print', '(', 'next', '(', 'c', ')', ')', 'print', '(', 'next', '(', 'c', ')', ')', 'print', '(', 'next', '(', 'c', ')', ')']"
726,"['write', 'numpy', 'program', 'select', 'index', 'satisfying', 'multiple', 'condition', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '97', ',', '101', ',', '105', ',', '111', ',', '117', ']', ')', 'b', '=', 'np', '.', 'array', '(', '[', ""'a'"", ',', ""'e'"", ',', ""'i'"", ',', ""'o'"", ',', ""'u'"", ']', ')', 'print', '(', '""Original arrays""', ')', 'print', '(', 'a', ')', 'print', '(', 'b', ')', 'print', '(', '""Elements from the second array  corresponding to elements in the first array  that are greater than 100 and less than 110:""', ')', 'print', '(', 'b', '[', '(', '100', '<', 'a', ')', '&', '(', 'a', '<', '110', ')', ']', ')']"
727,"['write', 'python', 'program', 'invert', 'given', 'dictionary', 'nonunique', 'hashable', 'value']","['from', 'collections', 'import', 'defaultdict', 'def', 'test', '(', 'students', ')', ':', 'obj', '=', 'defaultdict', '(', 'list', ')', 'for', 'key', ',', 'value', 'in', 'students', '.', 'items', '(', ')', ':', 'obj', '[', 'value', ']', '.', 'append', '(', 'key', ')', 'return', 'dict', '(', 'obj', ')', 'students', '=', '{', ""'Ora Mckinney'"", ':', '8', ',', ""'Theodore Hollandl'"", ':', '7', ',', ""'Mae Fleming'"", ':', '7', ',', ""'Mathew Gilbert'"", ':', '8', ',', ""'Ivan Little'"", ':', '7', ',', '}', 'print', '(', 'test', '(', 'students', ')', ')']"
728,"['write', 'numpy', 'program', 'create', 'inner', 'product', 'two', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '24', ')', '.', 'reshape', '(', '(', '2', ',', '3', ',', '4', ')', ')', 'print', '(', '""Array x:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Array y:""', ')', 'y', '=', 'np', '.', 'arange', '(', '4', ')', 'print', '(', 'y', ')', 'print', '(', '""Inner of x and y arrays:""', ')', 'print', '(', 'np', '.', 'inner', '(', 'x', ',', 'y', ')', ')']"
729,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'maximum', 'sale', 'value', 'item']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\SaleData.xlsx'"", ')', 'table', '=', 'pd', '.', 'pivot_table', '(', 'df', ',', 'index', '=', ""'Item'"", ',', 'values', '=', ""'Sale_amt'"", ',', 'aggfunc', '=', 'np', '.', 'max', ')', 'print', '(', 'table', ')']"
730,"['write', 'panda', 'program', 'convert', 'index', 'given', 'dataframe', 'column']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_of_birth'"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', '}', ',', 'index', '=', '[', ""'t1'"", ',', ""'t2'"", ',', ""'t3'"", ',', ""'t4'"", ',', ""'t5'"", ',', ""'t6'"", ']', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nConvert index of the said dataframe into a column:""', ')', 'df', '.', 'reset_index', '(', 'level', '=', '0', ',', 'inplace', '=', 'True', ')', 'print', '(', 'df', ')']"
731,"['write', 'python', 'program', 'sum', 'specific', 'column', 'list', 'given', 'list', 'list']","['def', 'sum_column', '(', 'nums', ',', 'C', ')', ':', 'result', '=', 'sum', '(', 'row', '[', 'C', ']', 'for', 'row', 'in', 'nums', ')', 'return', 'result', 'nums', '=', '[', '[', '1', ',', '2', ',', '3', ',', '2', ']', ',', '[', '4', ',', '5', ',', '6', ',', '2', ']', ',', '[', '7', ',', '8', ',', '9', ',', '5', ']', ',', ']', 'print', '(', '""Original list of lists:""', ')', 'print', '(', 'nums', ')', 'column', '=', '0', 'print', '(', '""\\nSum: 1st column of the said list of lists:""', ')', 'print', '(', 'sum_column', '(', 'nums', ',', 'column', ')', ')', 'column', '=', '1', 'print', '(', '""\\nSum: 2nd column of the said list of lists:""', ')', 'print', '(', 'sum_column', '(', 'nums', ',', 'column', ')', ')', 'column', '=', '3', 'print', '(', '""\\nSum: 4th column of the said list of lists:""', ')', 'print', '(', 'sum_column', '(', 'nums', ',', 'column', ')', ')']"
732,"['write', 'python', 'program', 'add', 'two', 'given', 'list', 'find', 'difference', 'list', 'use', 'map', 'function']","['def', 'addition_subtrction', '(', 'x', ',', 'y', ')', ':', 'return', 'x', '+', 'y', ',', 'x', '-', 'y', 'nums1', '=', '[', '6', ',', '5', ',', '3', ',', '9', ']', 'nums2', '=', '[', '0', ',', '1', ',', '7', ',', '7', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'result', '=', 'map', '(', 'addition_subtrction', ',', 'nums1', ',', 'nums2', ')', 'print', '(', '""\\nResult:""', ')', 'print', '(', 'list', '(', 'result', ')', ')']"
733,"['write', 'panda', 'program', 'create', 'date', 'range', 'using', 'startpoint', 'date', 'number', 'period']","['import', 'pandas', 'as', 'pd', 'date_range', '=', 'pd', '.', 'date_range', '(', ""'2020-01-01'"", ',', 'periods', '=', '45', ')', 'print', '(', '""Date range of perods 45:""', ')', 'print', '(', 'date_range', ')']"
734,"['write', 'numpy', 'program', 'calculate', 'inverse', 'sine', 'inverse', 'cosine', 'inverse', 'tangent', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '-', '1.', ',', '0', ',', '1.', ']', ')', 'print', '(', '""Inverse sine:""', ',', 'np', '.', 'arcsin', '(', 'x', ')', ')', 'print', '(', '""Inverse cosine:""', ',', 'np', '.', 'arccos', '(', 'x', ')', ')', 'print', '(', '""Inverse tangent:""', ',', 'np', '.', 'arctan', '(', 'x', ')', ')']"
735,"['write', 'panda', 'program', 'create', 'mean', 'standard', 'deviation', 'data', 'given', 'series']","['import', 'pandas', 'as', 'pd', 's', '=', 'pd', '.', 'Series', '(', 'data', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '5', ',', '3', ']', ')', 'print', '(', '""Original Data Series:""', ')', 'print', '(', 's', ')', 'print', '(', '""Mean of the said Data Series:""', ')', 'print', '(', 's', '.', 'mean', '(', ')', ')', 'print', '(', '""Standard deviation of the said Data Series:""', ')', 'print', '(', 's', '.', 'std', '(', ')', ')']"
736,"['write', 'python', 'program', 'remove', 'duplicate', 'list']","['a', '=', '[', '10', ',', '20', ',', '30', ',', '20', ',', '10', ',', '50', ',', '60', ',', '40', ',', '80', ',', '50', ',', '40', ']', 'dup_items', '=', 'set', '(', ')', 'uniq_items', '=', '[', ']', 'for', 'x', 'in', 'a', ':', 'if', 'x', 'not', 'in', 'dup_items', ':', 'uniq_items', '.', 'append', '(', 'x', ')', 'dup_items', '.', 'add', '(', 'x', ')', 'print', '(', 'dup_items', ')']"
737,"['write', 'python', 'program', 'find', 'latitude', 'longitude', 'given', 'location', 'using', 'nominatim', 'api', 'geopy', 'package']","['from', 'geopy', '.', 'geocoders', 'import', 'Nominatim', 'geolocator', '=', 'Nominatim', '(', 'user_agent', '=', '""geoapiExercises""', ')', 'ladd1', '=', '""27488 Stanford Avenue, North Dakota""', 'print', '(', '""Location address:""', ',', 'ladd1', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'ladd1', ')', 'print', '(', '""Latitude and Longitude of the said address:""', ')', 'print', '(', '(', 'location', '.', 'latitude', ',', 'location', '.', 'longitude', ')', ')', 'ladd2', '=', '""380 New York St, Redlands, CA 92373""', 'print', '(', '""\\nLocation address:""', ',', 'ladd2', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'ladd2', ')', 'print', '(', '""Latitude and Longitude of the said address:""', ')', 'print', '(', '(', 'location', '.', 'latitude', ',', 'location', '.', 'longitude', ')', ')', 'ladd3', '=', '""1600 Pennsylvania Avenue NW""', 'print', '(', '""\\nLocation address:""', ',', 'ladd3', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'ladd3', ')', 'print', '(', '""Latitude and Longitude of the said address:""', ')', 'print', '(', '(', 'location', '.', 'latitude', ',', 'location', '.', 'longitude', ')', ')']"
738,"['write', 'python', 'program', 'get', 'hourly', 'datetime', 'two', 'hour']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\nString representing the date, controlled by an explicit format string:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'strftime', '(', ""'%d-%m-%Y %H:%M:%S'"", ')', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'strftime', '(', ""'%Y-%m-%d %H:%M:%S'"", ')', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'strftime', '(', ""'%Y-%d-%m %H:%M:%S'"", ')', ')']"
739,"['write', 'python', 'program', 'sort', 'unsorted', 'array', 'number', 'using', 'wiggle', 'sort']","['def', 'wiggle_sort', '(', 'arra_nums', ')', ':', 'for', 'i', ',', '_', 'in', 'enumerate', '(', 'arra_nums', ')', ':', 'if', '(', 'i', '%', '2', '==', '1', ')', '==', '(', 'arra_nums', '[', 'i', '-', '1', ']', '>', 'arra_nums', '[', 'i', ']', ')', ':', 'arra_nums', '[', 'i', '-', '1', ']', ',', 'arra_nums', '[', 'i', ']', '=', 'arra_nums', '[', 'i', ']', ',', 'arra_nums', '[', 'i', '-', '1', ']', 'return', 'arra_nums', 'print', '(', '""Input the array elements: ""', ')', 'arra_nums', '=', 'list', '(', 'map', '(', 'int', ',', 'input', '(', ')', '.', 'split', '(', ')', ')', ')', 'print', '(', '""Original unsorted array:""', ')', 'print', '(', 'arra_nums', ')', 'print', '(', '""The said array after applying Wiggle sort:""', ')', 'print', '(', 'wiggle_sort', '(', 'arra_nums', ')', ')']"
740,"['write', 'numpy', 'program', 'compute', 'inner', 'product', 'vector', 'array', 'without', 'complex', 'conjugation', 'higher', 'dimension']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '5', ']', ')', 'b', '=', 'np', '.', 'array', '(', '[', '2', ',', '1', ',', '0', ']', ')', 'print', '(', '""Original 1-d arrays:""', ')', 'print', '(', 'a', ')', 'print', '(', 'b', ')', 'print', 'result', '=', 'np', '.', 'inner', '(', 'a', ',', 'b', ')', 'print', '(', '""Inner product of the said vectors:""', ')', 'x', '=', 'np', '.', 'arange', '(', '9', ')', '.', 'reshape', '(', '3', ',', '3', ')', 'y', '=', 'np', '.', 'arange', '(', '3', ',', '12', ')', '.', 'reshape', '(', '3', ',', '3', ')', 'print', '(', '""Higher dimension arrays:""', ')', 'print', '(', 'x', ')', 'print', '(', 'y', ')', 'result', '=', 'np', '.', 'inner', '(', 'x', ',', 'y', ')', 'print', '(', '""Inner product of the said vectors:""', ')', 'print', '(', 'result', ')']"
741,"['write', 'python', 'program', 'find', 'pair', 'maximum', 'minimum', 'product', 'given', 'list', 'use', 'itertools', 'module']","['import', 'itertools', 'as', 'it', 'def', 'list_max_min_pair', '(', 'nums', ')', ':', 'result_max', '=', 'max', '(', 'it', '.', 'combinations', '(', 'nums', ',', '2', ')', ',', 'key', '=', 'lambda', 'sub', ':', 'sub', '[', '0', ']', '*', 'sub', '[', '1', ']', ')', 'result_min', '=', 'min', '(', 'it', '.', 'combinations', '(', 'nums', ',', '2', ')', ',', 'key', '=', 'lambda', 'sub', ':', 'sub', '[', '0', ']', '*', 'sub', '[', '1', ']', ')', 'return', 'result_max', ',', 'result_min', 'nums', '=', '[', '2', ',', '5', ',', '8', ',', '7', ',', '4', ',', '3', ',', '1', ',', '9', ',', '10', ',', '1', ']', 'print', '(', '""The original list: ""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nPairs of maximum and minimum product from the said list:""', ')', 'print', '(', 'list_max_min_pair', '(', 'nums', ')', ')']"
742,"['write', 'python', 'program', 'check', 'whether', 'two', 'list', 'circularly', 'identical']","['list1', '=', '[', '10', ',', '10', ',', '0', ',', '0', ',', '10', ']', 'list2', '=', '[', '10', ',', '10', ',', '10', ',', '0', ',', '0', ']', 'list3', '=', '[', '1', ',', '10', ',', '10', ',', '0', ',', '0', ']', 'print', '(', ""'Compare list1 and list2'"", ')', 'print', '(', ""' '"", '.', 'join', '(', 'map', '(', 'str', ',', 'list2', ')', ')', 'in', ""' '"", '.', 'join', '(', 'map', '(', 'str', ',', 'list1', '*', '2', ')', ')', ')', 'print', '(', ""'Compare list1 and list3'"", ')', 'print', '(', ""' '"", '.', 'join', '(', 'map', '(', 'str', ',', 'list3', ')', ')', 'in', ""' '"", '.', 'join', '(', 'map', '(', 'str', ',', 'list1', '*', '2', ')', ')', ')']"
743,"['write', 'numpy', 'program', 'create', 'matrix', 'staggered', 'zero', 'main', 'diagonal']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'zeros', '(', '(', '4', ',', '4', ')', ')', 'x', '[', ':', ':', '2', ',', '1', ':', ':', '2', ']', '=', '1', 'x', '[', '1', ':', ':', '2', ',', ':', ':', '2', ']', '=', '1', 'print', '(', 'x', ')']"
744,"['write', 'python', 'program', 'convert', 'given', 'list', 'integer', 'tuple', 'integer', 'list', 'string']","['nums_list', '=', '[', '1', ',', '2', ',', '3', ',', '4', ']', 'nums_tuple', '=', '(', '0', ',', '1', ',', '2', ',', '3', ')', 'print', '(', '""Original list and tuple:""', ')', 'print', '(', 'nums_list', ')', 'print', '(', 'nums_tuple', ')', 'result_list', '=', 'list', '(', 'map', '(', 'str', ',', 'nums_list', ')', ')', 'result_tuple', '=', 'tuple', '(', 'map', '(', 'str', ',', 'nums_tuple', ')', ')', 'print', '(', '""\\nList of strings:""', ')', 'print', '(', 'result_list', ')', 'print', '(', '""\\nTuple of strings:""', ')', 'print', '(', 'result_tuple', ')']"
745,"['write', 'python', 'program', 'retrieve', 'value', 'nested', 'key', 'indicated', 'given', 'selector', 'list', 'dictionary', 'list']","['from', 'functools', 'import', 'reduce', 'from', 'operator', 'import', 'getitem', 'def', 'test', '(', 'd', ',', 'selectors', ')', ':', 'return', 'reduce', '(', 'getitem', ',', 'selectors', ',', 'd', ')', 'users', '=', '{', ""'Carla '"", ':', '{', ""'name'"", ':', '{', ""'first'"", ':', ""'Carla '"", ',', ""'last'"", ':', ""'Russell'"", '}', ',', ""'postIds'"", ':', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', '}', '}', 'print', '(', 'test', '(', 'users', ',', '[', ""'Carla '"", ',', ""'name'"", ',', ""'last'"", ']', ')', ')', 'print', '(', 'test', '(', 'users', ',', '[', ""'Carla '"", ',', ""'postIds'"", ',', '1', ']', ')', ')']"
746,"['write', 'python', 'program', 'insert', 'tag', 'string', 'immediately', 'specified', 'tag', 'string']","['from', 'bs4', 'import', 'BeautifulSoup', 'soup', '=', 'BeautifulSoup', '(', '""<b>w3resource.com</b>""', ',', '""lxml""', ')', 'print', '(', '""Original Markup:""', ')', 'print', '(', 'soup', '.', 'b', ')', 'tag', '=', 'soup', '.', 'new_tag', '(', '""i""', ')', 'tag', '.', 'string', '=', '""Python""', 'print', '(', '""\\nNew Markup, after inserting the text:""', ')', 'soup', '.', 'b', '.', 'string', '.', 'insert_after', '(', 'tag', ')', 'print', '(', 'soup', '.', 'b', ')']"
747,"['write', 'python', 'program', 'get', 'value', 'enum', 'class']","['from', 'enum', 'import', 'IntEnum', 'class', 'Country', '(', 'IntEnum', ')', ':', 'Afghanistan', '=', '93', 'Albania', '=', '355', 'Algeria', '=', '213', 'Andorra', '=', '376', 'Angola', '=', '244', 'Antarctica', '=', '672', 'country_code_list', '=', 'list', '(', 'map', '(', 'int', ',', 'Country', ')', ')', 'print', '(', 'country_code_list', ')']"
748,"['write', 'python', 'program', 'create', 'list', 'random', 'integer', 'randomly', 'select', 'multiple', 'item', 'said', 'list', 'use', 'randomsample']","['import', 'random', 'print', '(', '""Create a list of random integers:""', ')', 'population', '=', 'range', '(', '0', ',', '100', ')', 'nums_list', '=', 'random', '.', 'sample', '(', 'population', ',', '10', ')', 'print', '(', 'nums_list', ')', 'no_elements', '=', '4', 'print', '(', '""\\nRandomly select""', ',', 'no_elements', ',', '""multiple items from the said list:""', ')', 'result_elements', '=', 'random', '.', 'sample', '(', 'nums_list', ',', 'no_elements', ')', 'print', '(', 'result_elements', ')', 'no_elements', '=', '8', 'print', '(', '""\\nRandomly select""', ',', 'no_elements', ',', '""multiple items from the said list:""', ')', 'result_elements', '=', 'random', '.', 'sample', '(', 'nums_list', ',', 'no_elements', ')', 'print', '(', 'result_elements', ')']"
749,"['write', 'python', 'program', 'find', 'tag', 'cs', 'class', 'given', 'html', 'document']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_doc', '=', '""""""\r<html>\r<head>\r<meta http-equiv=""Content-Type"" content=""text/html;\rcharset=iso-8859-1"">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from\rw3resource.com</a></p>\r<p><a class=""sister"" href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from \rw3resource.com</a></p>\r<a class=""sister"" href=""http://example.com/lacie"" id=""link1"">Lacie</a>\r<a class=""sister"" href=""http://example.com/tillie""  id=""link2"">Tillie</a>\r</body>\r</html>\r""""""', 'soup', '=', 'BeautifulSoup', '(', 'html_doc', ',', '""lxml""', ')', 'print', '(', '""\\nTags by CSS class:""', ')', 'print', '(', 'soup', '.', 'select', '(', '"".sister""', ')', ')']"
750,"['write', 'panda', 'program', 'create', 'plot', 'visualize', 'daily', 'percentage', 'return', 'alphabet', 'inc', 'stock', 'price', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-9-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'df2', '=', 'df1', '[', '[', ""'Date'"", ',', ""'Adj Close'"", ']', ']', 'df3', '=', 'df2', '.', 'set_index', '(', ""'Date'"", ')', 'daily_changes', '=', 'df3', '.', 'pct_change', '(', 'periods', '=', '1', ')', 'daily_changes', '[', ""'Adj Close'"", ']', '.', 'plot', '(', 'figsize', '=', '(', '10', ',', '7', ')', ',', 'legend', '=', 'True', ',', 'linestyle', '=', ""'--'"", ',', 'marker', '=', ""'o'"", ')', 'plt', '.', 'suptitle', '(', ""'Daily % return of Alphabet Inc. stock price,\\n01-04-2020 to 30-09-2020'"", ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'grid', '(', 'True', ')', 'plt', '.', 'show', '(', ')']"
751,"['write', 'python', 'program', 'count', 'common', 'word', 'dictionary']","['words', '=', '[', ""'red'"", ',', ""'green'"", ',', ""'black'"", ',', ""'pink'"", ',', ""'black'"", ',', ""'white'"", ',', ""'black'"", ',', ""'eyes'"", ',', ""'white'"", ',', ""'black'"", ',', ""'orange'"", ',', ""'pink'"", ',', ""'pink'"", ',', ""'red'"", ',', ""'red'"", ',', ""'white'"", ',', ""'orange'"", ',', ""'white'"", ',', '""black""', ',', ""'pink'"", ',', ""'green'"", ',', ""'green'"", ',', ""'pink'"", ',', ""'green'"", ',', ""'pink'"", ',', ""'white'"", ',', ""'orange'"", ',', '""orange""', ',', ""'red'"", ']', 'from', 'collections', 'import', 'Counter', 'word_counts', '=', 'Counter', '(', 'words', ')', 'top_four', '=', 'word_counts', '.', 'most_common', '(', '4', ')', 'print', '(', 'top_four', ')']"
752,"['write', 'numpy', 'program', 'get', 'value', 'index', 'element', 'bigger', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '0', ',', '10', ',', '20', ']', ',', '[', '20', ',', '30', ',', '40', ']', ']', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'print', '(', '""Values bigger than 10 =""', ',', 'x', '[', 'x', '>', '10', ']', ')', 'print', '(', '""Their indices are ""', ',', 'np', '.', 'nonzero', '(', 'x', '>', '10', ')', ')']"
753,"['write', 'python', 'program', 'print', 'number', 'except']","['for', 'x', 'in', 'range', '(', '6', ')', ':', 'if', '(', 'x', '==', '3', 'or', 'x', '==', '6', ')', ':', 'continue', 'print', '(', 'x', ',', 'end', '=', ""' '"", ')', 'print', '(', '""\\n""', ')']"
754,"['python', 'dictionary', 'contains', 'list', 'value', 'write', 'python', 'program', 'clear', 'list', 'value', 'said', 'dictionary']","['def', 'test', '(', 'dictionary', ')', ':', 'for', 'key', 'in', 'dictionary', ':', 'dictionary', '[', 'key', ']', '.', 'clear', '(', ')', 'return', 'dictionary', 'dictionary', '=', '{', ""'C1'"", ':', '[', '10', ',', '20', ',', '30', ']', ',', ""'C2'"", ':', '[', '20', ',', '30', ',', '40', ']', ',', ""'C3'"", ':', '[', '12', ',', '34', ']', '}', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'dictionary', ')', 'print', '(', '""\\nClear the list values in the said dictionary:""', ')', 'print', '(', 'test', '(', 'dictionary', ')', ')']"
755,"['write', 'python', 'program', 'find', 'maximum', 'minimum', 'value', 'given', 'list', 'within', 'specified', 'index', 'range']","['def', 'reverse_list_of_lists', '(', 'nums', ',', 'lr', ',', 'hr', ')', ':', 'temp', '=', '[', ']', 'for', 'idx', ',', 'el', 'in', 'enumerate', '(', 'nums', ')', ':', 'if', 'idx', '>=', 'lr', 'and', 'idx', '<', 'hr', ':', 'temp', '.', 'append', '(', 'el', ')', 'result_max', '=', 'max', '(', 'temp', ')', 'result_min', '=', 'min', '(', 'temp', ')', 'return', 'result_max', ',', 'result_min', 'nums', '=', '[', '4', ',', '3', ',', '0', ',', '5', ',', '3', ',', '0', ',', '2', ',', '3', ',', '4', ',', '2', ',', '4', ',', '3', ',', '5', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nIndex range:""', ')', 'lr', '=', '3', 'hr', '=', '8', 'print', '(', 'lr', ',', '""to""', ',', 'hr', ')', 'print', '(', '""\\nMaximum and minimum values of the said given list within index range:""', ')', 'print', '(', 'reverse_list_of_lists', '(', 'nums', ',', 'lr', ',', 'hr', ')', ')']"
756,"['write', 'panda', 'program', 'get', 'position', 'item', 'given', 'series', 'another', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'series1', '=', 'pd', '.', 'Series', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', ')', 'series2', '=', 'pd', '.', 'Series', '(', '[', '1', ',', '3', ',', '5', ',', '7', ',', '10', ']', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'series1', ')', 'print', '(', 'series2', ')', 'result', '=', '[', 'pd', '.', 'Index', '(', 'series1', ')', '.', 'get_loc', '(', 'i', ')', 'for', 'i', 'in', 'series2', ']', 'print', '(', '""Positions of items of series2 in series1:""', ')', 'print', '(', 'result', ')']"
757,"['write', 'python', 'program', 'count', 'frequency', 'given', 'dictionary']","['from', 'collections', 'import', 'Counter', 'def', 'test', '(', 'dictt', ')', ':', 'result', '=', 'Counter', '(', 'dictt', '.', 'values', '(', ')', ')', 'return', 'result', 'dictt', '=', '{', ""'V'"", ':', '10', ',', ""'VI'"", ':', '10', ',', ""'VII'"", ':', '40', ',', ""'VIII'"", ':', '20', ',', ""'IX'"", ':', '70', ',', ""'X'"", ':', '80', ',', ""'XI'"", ':', '40', ',', ""'XII'"", ':', '20', ',', '}', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'dictt', ')', 'print', '(', '""\\nCount the frequency of the said dictionary:""', ')', 'print', '(', 'test', '(', 'dictt', ')', ')']"
758,"['write', 'python', 'program', 'insert', 'value', 'table', 'user', 'input']","['import', 'sqlite3', 'conn', '=', 'sqlite3', '.', 'connect', '(', ""'mydatabase.db'"", ')', 'cursor', '=', 'conn', '.', 'cursor', '(', ')', 'cursor', '.', 'execute', '(', '""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));""', ')', 's_id', '=', 'input', '(', ""'Salesman ID:'"", ')', 's_name', '=', 'input', '(', ""'Name:'"", ')', 's_city', '=', 'input', '(', ""'City:'"", ')', 's_commision', '=', 'input', '(', ""'Commission:'"", ')', 'cursor', '.', 'execute', '(', '""""""\rINSERT INTO salesman(salesman_id, name, city, commission)\rVALUES (?,?,?,?)\r""""""', ',', '(', 's_id', ',', 's_name', ',', 's_city', ',', 's_commision', ')', ')', 'conn', '.', 'commit', '(', ')', 'print', '(', ""'Data entered successfully.'"", ')', 'conn', '.', 'close', '(', ')', 'if', '(', 'conn', ')', ':', 'conn', '.', 'close', '(', ')', 'print', '(', '""\\nThe SQLite connection is closed.""', ')']"
759,"['write', 'python', 'program', 'find', 'length', 'text', 'first', 'tag', 'given', 'html', 'document']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_doc', '=', '""""""\r<html>\r<head>\r<meta http-equiv=""Content-Type"" content=""text/html;\rcharset=iso-8859-1"">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from\rw3resource.com</a></p>\r<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from \rw3resource.com</a></p>\r</body>\r</html>\r""""""', 'soup', '=', 'BeautifulSoup', '(', 'html_doc', ',', ""'html.parser'"", ')', 'print', '(', '""Length of the text of the first <h2> tag:""', ')', 'print', '(', 'len', '(', 'soup', '.', 'find', '(', ""'h2'"", ')', '.', 'text', ')', ')']"
760,"['write', 'numpy', 'program', 'get', 'number', 'nonzero', 'element', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '0', ',', '10', ',', '20', ']', ',', '[', '20', ',', '30', ',', '40', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Number of non zero elements in the above array:""', ')', 'print', '(', 'np', '.', 'count_nonzero', '(', 'x', ')', ')']"
761,"['write', 'panda', 'program', 'replace', 'one', 'value', 'value', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'A'"", ',', ""'B'"", ',', ""'C'"", ',', ""'D'"", ',', ""'A'"", ']', ',', ""'date_of_sale'"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nReplace A with c:""', ')', 'df', '=', 'df', '.', 'replace', '(', '[', '""A""', ',', '""D""', ']', ',', '[', '""X""', ',', '""Y""', ']', ')', 'print', '(', 'df', ')']"
762,"['write', 'numpy', 'program', 'compute', 'eigenvalue', 'right', 'eigenvectors', 'given', 'square', 'array']","['import', 'numpy', 'as', 'np', 'm', '=', 'np', '.', 'mat', '(', '""3 -2;1 0""', ')', 'print', '(', '""Original matrix:""', ')', 'print', '(', '""a\\n""', ',', 'm', ')', 'w', ',', 'v', '=', 'np', '.', 'linalg', '.', 'eig', '(', 'm', ')', 'print', '(', '""Eigenvalues of the said matrix""', ',', 'w', ')', 'print', '(', '""Eigenvectors of the said matrix""', ',', 'v', ')']"
763,"['write', 'python', 'program', 'chunk', 'given', 'list', 'n', 'smaller', 'list']","['from', 'math', 'import', 'ceil', 'def', 'chunk_list_into_n', '(', 'nums', ',', 'n', ')', ':', 'size', '=', 'ceil', '(', 'len', '(', 'nums', ')', '/', 'n', ')', 'return', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'nums', '[', 'x', '*', 'size', ':', 'x', '*', 'size', '+', 'size', ']', ',', 'list', '(', 'range', '(', 'n', ')', ')', ')', ')', 'print', '(', 'chunk_list_into_n', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ']', ',', '4', ')', ')']"
764,"['write', 'numpy', 'program', 'add', 'border', 'filled', 'around', 'existing', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'ones', '(', '(', '3', ',', '3', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""0 on the border and 1 inside in the array""', ')', 'x', '=', 'np', '.', 'pad', '(', 'x', ',', 'pad_width', '=', '1', ',', 'mode', '=', ""'constant'"", ',', 'constant_values', '=', '0', ')', 'print', '(', 'x', ')']"
765,"['write', 'python', 'program', 'create', 'array', 'contains', 'six', 'integer', 'also', 'print', 'member', 'array']","['from', 'array', 'import', 'array', 'my_array', '=', 'array', '(', ""'i'"", ',', '[', '10', ',', '20', ',', '30', ',', '40', ',', '50', ']', ')', 'for', 'i', 'in', 'my_array', ':', 'print', '(', 'i', ')']"
766,"['write', 'python', 'program', 'check', 'whether', 'dictionary', 'list', 'empty']","['my_list', '=', '[', '{', '}', ',', '{', '}', ',', '{', '}', ']', 'my_list1', '=', '[', '{', '1', ',', '2', '}', ',', '{', '}', ',', '{', '}', ']', 'print', '(', 'all', '(', 'not', 'd', 'for', 'd', 'in', 'my_list', ')', ')', 'print', '(', 'all', '(', 'not', 'd', 'for', 'd', 'in', 'my_list1', ')', ')']"
767,"['write', 'numpy', 'program', 'place', 'specified', 'element', 'specified', 'time', 'randomly', 'specified', 'array']","['import', 'numpy', 'as', 'np', 'n', '=', '4', 'i', '=', '3', 'e', '=', '10', 'array_nums1', '=', 'np', '.', 'zeros', '(', '(', 'n', ',', 'n', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'array_nums1', ')', 'np', '.', 'put', '(', 'array_nums1', ',', 'np', '.', 'random', '.', 'choice', '(', 'range', '(', 'n', '*', 'n', ')', ',', 'i', ',', 'replace', '=', 'False', ')', ',', 'e', ')', 'print', '(', '""\\nPlace a specified element in specified time randomly:""', ')', 'print', '(', 'array_nums1', ')']"
768,"['write', 'python', 'program', 'read', 'matrix', 'console', 'print', 'sum', 'column', 'accept', 'matrix', 'row', 'column', 'element', 'column', 'separated', 'spacefor', 'every', 'row', 'input', 'user']","['rows', '=', 'int', '(', 'input', '(', '""Input rows: ""', ')', ')', 'columns', '=', 'int', '(', 'input', '(', '""Input columns: ""', ')', ')', 'matrix', '=', '[', '[', '0', ']', '*', 'columns', 'for', 'row', 'in', 'range', '(', 'rows', ')', ']', 'print', '(', ""'Input number of elements in a row (1, 2, 3): '"", ')', 'for', 'row', 'in', 'range', '(', 'rows', ')', ':', 'lines', '=', 'list', '(', 'map', '(', 'int', ',', 'input', '(', ')', '.', 'split', '(', ')', ')', ')', 'for', 'column', 'in', 'range', '(', 'columns', ')', ':', 'matrix', '[', 'row', ']', '[', 'column', ']', '=', 'lines', '[', 'column', ']', 'sum', '=', '[', '0', ']', '*', 'columns', 'print', '(', '""sum for each column:""', ')', 'for', 'column', 'in', 'range', '(', 'columns', ')', ':', 'for', 'row', 'in', 'range', '(', 'rows', ')', ':', 'sum', '[', 'column', ']', '+=', 'matrix', '[', 'row', ']', '[', 'column', ']', 'print', '(', '(', 'sum', '[', 'column', ']', ')', ',', ""' '"", ',', 'end', '=', ""''"", ')']"
769,"['write', 'panda', 'program', 'select', 'consecutive', 'column', 'also', 'select', 'row', 'index', 'label', 'column', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nSelect consecutive columns:""', ')', 'print', '(', 'w_a_con', '.', 'loc', '[', ':', ',', '""Country""', ':', '""Display Value""', ']', '.', 'head', '(', ')', ')', 'print', '(', '""\\nAlternate command:""', ')', 'print', '(', 'w_a_con', '.', 'iloc', '[', ':', ',', '2', ':', '5', ']', '.', 'head', '(', ')', ')', 'print', '(', '""\\nSelect rows with Index label 0 to 9 with specific columns:""', ')', 'print', '(', 'w_a_con', '.', 'loc', '[', '0', ':', '9', ',', '[', '""Year""', ',', '""Country""', ',', '""Display Value""', ']', ']', ')']"
770,"['rite', 'python', 'class', 'named', 'rectangle', 'constructed', 'length', 'width', 'method', 'compute', 'area', 'rectangle']","['class', 'Rectangle', '(', ')', ':', 'def', '__init__', '(', 'self', ',', 'l', ',', 'w', ')', ':', 'self', '.', 'length', '=', 'l', 'self', '.', 'width', '=', 'w', 'def', 'rectangle_area', '(', 'self', ')', ':', 'return', 'self', '.', 'length', '*', 'self', '.', 'width', 'newRectangle', '=', 'Rectangle', '(', '12', ',', '10', ')', 'print', '(', 'newRectangle', '.', 'rectangle_area', '(', ')', ')']"
771,"['write', 'panda', 'program', 'remove', 'html', 'tag', 'within', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF'"", ',', ""'zefsalf'"", ',', ""'sdfslew'"", ',', ""'zekfsdf'"", ']', ',', ""'date_of_sale'"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'05/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'address'"", ':', '[', ""'9910 Surrey <b>Avenue</b>'"", ',', ""'92 N. Bishop Avenue'"", ',', ""'9910 <br>Golden Star Avenue'"", ',', ""'102 Dunbar <i></i>St.'"", ',', ""'17 West Livingston Court'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'remove_tags', '(', 'string', ')', ':', 'result', '=', 're', '.', 'sub', '(', ""'<.*?>'"", ',', ""''"", ',', 'string', ')', 'return', 'result', 'df', '[', ""'with_out_tags'"", ']', '=', 'df', '[', ""'address'"", ']', '.', 'apply', '(', 'lambda', 'cw', ':', 'remove_tags', '(', 'cw', ')', ')', 'print', '(', '""\\nSentences without tags\':""', ')', 'print', '(', 'df', ')']"
772,"['write', 'numpy', 'program', 'add', 'vector', 'row', 'given', 'matrix']","['import', 'numpy', 'as', 'np', 'm', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ',', '6', ']', ',', '[', '7', ',', '8', ',', '9', ']', ',', '[', '10', ',', '11', ',', '12', ']', ']', ')', 'v', '=', 'np', '.', 'array', '(', '[', '1', ',', '1', ',', '0', ']', ')', 'print', '(', '""Original vector:""', ')', 'print', '(', 'v', ')', 'print', '(', '""Original matrix:""', ')', 'print', '(', 'm', ')', 'result', '=', 'np', '.', 'empty_like', '(', 'm', ')', 'for', 'i', 'in', 'range', '(', '4', ')', ':', 'result', '[', 'i', ',', ':', ']', '=', 'm', '[', 'i', ',', ':', ']', '+', 'v', 'print', '(', '""\\nAfter adding the vector v to each row of the matrix m:""', ')', 'print', '(', 'result', ')']"
773,"['write', 'panda', 'program', 'find', 'alcohol', 'consumption', 'given', 'year', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nThe world alcohol consumption details in the year 1985:""', ')', 'print', '(', 'w_a_con', '[', 'w_a_con', '[', ""'Year'"", ']', '==', '1985', ']', '.', 'head', '(', '10', ')', ')', 'print', '(', '""\\nThe world alcohol consumption details in the year 1989:""', ')', 'print', '(', 'w_a_con', '[', 'w_a_con', '[', ""'Year'"", ']', '==', '1989', ']', '.', 'head', '(', '10', ')', ')']"
774,"['write', 'python', 'program', 'compute', 'average', 'two', 'given', 'list']","['def', 'average_two_lists', '(', 'nums1', ',', 'nums2', ')', ':', 'result', '=', 'sum', '(', 'nums1', '+', 'nums2', ')', '/', 'len', '(', 'nums1', '+', 'nums2', ')', 'return', 'result', 'nums1', '=', '[', '1', ',', '1', ',', '3', ',', '4', ',', '4', ',', '5', ',', '6', ',', '7', ']', 'nums2', '=', '[', '0', ',', '1', ',', '2', ',', '3', ',', '4', ',', '4', ',', '5', ',', '7', ',', '8', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nAverage of two lists:""', ')', 'print', '(', 'average_two_lists', '(', 'nums1', ',', 'nums2', ')', ')']"
775,"['write', 'numpy', 'program', 'create', 'python', 'datetimedatetime', 'object', 'single', 'object', 'every', 'hour', 'put', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'import', 'datetime', 'start', '=', 'datetime', '.', 'datetime', '(', '2000', ',', '1', ',', '1', ')', 'dt_array', '=', 'np', '.', 'array', '(', '[', 'start', '+', 'datetime', '.', 'timedelta', '(', 'hours', '=', 'i', ')', 'for', 'i', 'in', 'range', '(', '24', ')', ']', ')', 'print', '(', 'dt_array', ')']"
776,"['write', 'panda', 'program', 'import', 'excel', 'data', 'skipping', 'first', 'twenty', 'row', 'panda', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\coalpublic2013.xlsx'"", ',', 'skiprows', '=', '20', ')', 'df']"
777,"['write', 'python', 'program', 'append', 'value', 'list', 'multiple', 'time', 'listlistoflists']","['print', '(', '""Add a value(7), 5 times, to a list:""', ')', 'nums', '=', '[', ']', 'nums', '+=', '5', '*', '[', ""'7'"", ']', 'print', '(', 'nums', ')', 'nums1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ']', 'print', '(', '""\\nAdd 5, 6 times, to a list:""', ')', 'nums1', '+=', '6', '*', '[', '5', ']', 'print', '(', 'nums1', ')', 'print', '(', '""\\nAdd a list, 4 times, to a list of lists:""', ')', 'nums1', '=', '[', ']', 'nums1', '+=', '4', '*', '[', '[', '1', ',', '2', ',', '5', ']', ']', 'print', '(', 'nums1', ')', 'print', '(', '""\\nAdd a list, 4 times, to a list of lists:""', ')', 'nums1', '=', '[', '[', '5', ',', '6', ',', '7', ']', ']', 'nums1', '+=', '4', '*', '[', '[', '1', ',', '2', ',', '5', ']', ']', 'print', '(', 'nums1', ')']"
778,"['write', 'numpy', 'program', 'replace', 'element', 'numpy', 'array', 'greater', 'specified', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '0.42436315', ',', '0.48558583', ',', '0.32924763', ']', ',', '[', '0.7439979', ',', '0.58220701', ',', '0.38213418', ']', ',', '[', '0.5097581', ',', '0.34528799', ',', '0.1563123', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Replace all elements of the said array with .5 which are greater than .5""', ')', 'x', '[', 'x', '>', '.5', ']', '=', '.5', 'print', '(', 'x', ')']"
779,"['write', 'python', 'program', 'calculate', 'product', 'unique', 'number', 'given', 'list']","['def', 'unique_product', '(', 'list_data', ')', ':', 'temp', '=', 'list', '(', 'set', '(', 'list_data', ')', ')', 'p', '=', '1', 'for', 'i', 'in', 'temp', ':', 'p', '*=', 'i', 'return', 'p', 'nums', '=', '[', '10', ',', '20', ',', '30', ',', '40', ',', '20', ',', '50', ',', '60', ',', '40', ']', 'print', '(', '""Original List : ""', ',', 'nums', ')', 'print', '(', '""Product of the unique numbers of the said list: ""', ',', 'unique_product', '(', 'nums', ')', ')']"
780,"['write', 'panda', 'program', 'create', 'heatmap', 'rectangular', 'data', 'colorencoded', 'matrix', 'comparison', 'top', 'year', 'ufo', 'sighted', 'v', 'month']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'import', 'seaborn', 'as', 'sns', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'most_sightings_years', '=', 'df', '[', ""'Date_time'"", ']', '.', 'dt', '.', 'year', '.', 'value_counts', '(', ')', '.', 'head', '(', '10', ')', 'def', 'is_top_years', '(', 'year', ')', ':', 'if', 'year', 'in', 'most_sightings_years', '.', 'index', ':', 'return', 'year', 'month_vs_year', '=', 'df', '.', 'pivot_table', '(', 'columns', '=', 'df', '[', ""'Date_time'"", ']', '.', 'dt', '.', 'month', ',', 'index', '=', 'df', '[', ""'Date_time'"", ']', '.', 'dt', '.', 'year', '.', 'apply', '(', 'is_top_years', ')', ',', 'aggfunc', '=', ""'count'"", ',', 'values', '=', ""'city'"", ')', 'month_vs_year', '.', 'columns', '=', 'month_vs_year', '.', 'columns', '.', 'astype', '(', 'int', ')', 'print', '(', '""\\nHeatmap for comparison of the top 10 years in which the UFO was sighted vs each month:""', ')', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '10', ',', '8', ')', ')', 'ax', '=', 'sns', '.', 'heatmap', '(', 'month_vs_year', ',', 'vmin', '=', '0', ',', 'vmax', '=', '4', ')', 'ax', '.', 'set_xlabel', '(', ""'Month'"", ')', '.', 'set_size', '(', '20', ')', 'ax', '.', 'set_ylabel', '(', ""'Year'"", ')', '.', 'set_size', '(', '20', ')']"
781,"['write', 'python', 'program', 'remove', 'existing', 'indentation', 'line', 'given', 'text']","['import', 'textwrap', 'sample_text', '=', ""'''\r    Python is a widely used high-level, general-purpose, interpreted,\r    dynamic programming language. Its design philosophy emphasizes\r    code readability, and its syntax allows programmers to express\r    concepts in fewer lines of code than possible in languages such\r    as C++ or Java.\r    '''"", 'text_without_Indentation', '=', 'textwrap', '.', 'dedent', '(', 'sample_text', ')', 'print', '(', ')', 'print', '(', 'text_without_Indentation', ')', 'print', '(', ')']"
782,"['write', 'panda', 'program', 'import', 'given', 'excel', 'data', 'employeexlsx', 'panda', 'dataframe', 'sort', 'based', 'multiple', 'given', 'column']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\employee.xlsx'"", ')', 'result', '=', 'df', '.', 'sort_values', '(', 'by', '=', '[', ""'first_name'"", ',', ""'last_name'"", ']', ',', 'ascending', '=', '[', '0', ',', '1', ']', ')', 'result']"
783,"['write', 'panda', 'program', 'start', 'index', 'different', 'value', 'rather', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_of_birth'"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'weight'"", ':', '[', '35', ',', '37', ',', '33', ',', '30', ',', '31', ',', '32', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nDefault Index Range:""', ')', 'print', '(', 'df', '.', 'index', ')', 'df', '.', 'index', '+=', '10', 'print', '(', '""\\nNew Index Range:""', ')', 'print', '(', 'df', '.', 'index', ')', 'print', '(', '""\\nDataFrame with new index:""', ')', 'print', '(', 'df', ')']"
784,"['write', 'panda', 'program', 'create', 'bar', 'plot', 'opening', 'closing', 'stock', 'price', 'alphabet', 'inc', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'df2', '=', 'df1', '[', '[', ""'Date'"", ',', ""'Open'"", ',', ""'Close'"", ']', ']', 'df3', '=', 'df2', '.', 'set_index', '(', ""'Date'"", ')', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '20', ',', '20', ')', ')', 'df3', '.', 'plot', '(', 'kind', '=', ""'bar'"", ')', ';', 'plt', '.', 'suptitle', '(', ""'Opening/Closing stock prices Alphabet Inc.,\\n01-04-2020 to 30-04-2020'"", ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'show', '(', ')']"
785,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'calculate', 'many', 'woman', 'men', 'particular', 'cabin', 'class']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'df', '.', 'pivot_table', '(', 'index', '=', '[', ""'sex'"", ']', ',', 'columns', '=', '[', ""'pclass'"", ']', ',', 'values', '=', ""'survived'"", ',', 'aggfunc', '=', ""'count'"", ')', 'print', '(', 'result', ')']"
786,"['write', 'python', 'program', 'find', 'maximum', 'minimum', 'value', 'given', 'heterogeneous', 'list']","['def', 'max_min_val', '(', 'list_val', ')', ':', 'max_val', '=', 'max', '(', 'i', 'for', 'i', 'in', 'list_val', 'if', 'isinstance', '(', 'i', ',', 'int', ')', ')', 'min_val', '=', 'min', '(', 'i', 'for', 'i', 'in', 'list_val', 'if', 'isinstance', '(', 'i', ',', 'int', ')', ')', 'return', '(', 'max_val', ',', 'min_val', ')', 'list_val', '=', '[', ""'Python'"", ',', '3', ',', '2', ',', '4', ',', '5', ',', ""'version'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list_val', ')', 'print', '(', '""\\nMaximum and Minimum values in the said list:""', ')', 'print', '(', 'max_min_val', '(', 'list_val', ')', ')']"
787,"['write', 'panda', 'program', 'split', 'given', 'dataset', 'using', 'group', 'specified', 'column', 'two', 'label', 'range']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'salesman_id'"", ':', '[', '5001', ',', '5002', ',', '5003', ',', '5004', ',', '5005', ',', '5006', ',', '5007', ',', '5008', ',', '5009', ',', '5010', ',', '5011', ',', '5012', ']', ',', ""'sale_jan'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '1760', ',', '2983.43', ',', '480.4', ',', '1250.45', ',', '75.29', ',', '1045.6', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'result', '=', 'df', '.', 'groupby', '(', 'pd', '.', 'cut', '(', 'df', '[', ""'salesman_id'"", ']', ',', 'bins', '=', '[', '0', ',', '5006', ',', 'np', '.', 'inf', ']', ',', 'labels', '=', '[', ""'S1'"", ',', ""'S2'"", ']', ')', ')', '[', ""'sale_jan'"", ']', '.', 'sum', '(', ')', '.', 'reset_index', '(', ')', 'print', '(', '""\\nGroupBy with condition of  two labels and ranges:""', ')', 'print', '(', 'result', ')']"
788,"['write', 'python', 'program', 'find', 'common', 'element', 'given', 'list', 'list']","['def', 'common_list_of_lists', '(', 'lst', ')', ':', 'temp', '=', 'set', '(', 'lst', '[', '0', ']', ')', '.', 'intersection', '(', '*', 'lst', ')', 'return', 'list', '(', 'temp', ')', 'nums', '=', '[', '[', '7', ',', '2', ',', '3', ',', '4', ',', '7', ']', ',', '[', '9', ',', '2', ',', '3', ',', '2', ',', '5', ']', ',', '[', '8', ',', '2', ',', '3', ',', '4', ',', '4', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nCommon elements of the said list of lists:""', ')', 'print', '(', 'common_list_of_lists', '(', 'nums', ')', ')', 'chars', '=', '[', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ']', ',', '[', ""'b'"", ',', ""'c'"", ',', ""'d'"", ']', ',', '[', ""'c'"", ',', ""'d'"", ',', ""'e'"", ']', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'chars', ')', 'print', '(', '""\\nCommon elements of the said list of lists:""', ')', 'print', '(', 'common_list_of_lists', '(', 'chars', ')', ')']"
789,"['write', 'python', 'program', 'check', 'whether', 'list', 'contains', 'sublist']","['def', 'is_Sublist', '(', 'l', ',', 's', ')', ':', 'sub_set', '=', 'False', 'if', 's', '==', '[', ']', ':', 'sub_set', '=', 'True', 'elif', 's', '==', 'l', ':', 'sub_set', '=', 'True', 'elif', 'len', '(', 's', ')', '>', 'len', '(', 'l', ')', ':', 'sub_set', '=', 'False', 'else', ':', 'for', 'i', 'in', 'range', '(', 'len', '(', 'l', ')', ')', ':', 'if', 'l', '[', 'i', ']', '==', 's', '[', '0', ']', ':', 'n', '=', '1', 'while', '(', 'n', '<', 'len', '(', 's', ')', ')', 'and', '(', 'l', '[', 'i', '+', 'n', ']', '==', 's', '[', 'n', ']', ')', ':', 'n', '+=', '1', 'if', 'n', '==', 'len', '(', 's', ')', ':', 'sub_set', '=', 'True', 'return', 'sub_set', 'a', '=', '[', '2', ',', '4', ',', '3', ',', '5', ',', '7', ']', 'b', '=', '[', '4', ',', '3', ']', 'c', '=', '[', '3', ',', '7', ']', 'print', '(', 'is_Sublist', '(', 'a', ',', 'b', ')', ')', 'print', '(', 'is_Sublist', '(', 'a', ',', 'c', ')', ')']"
790,"['write', 'python', 'program', 'count', 'number', 'character', 'given', 'text', 'text', 'file']","['import', 'collections', 'import', 'pprint', 'file_input', '=', 'input', '(', ""'File Name: '"", ')', 'with', 'open', '(', 'file_input', ',', ""'r'"", ')', 'as', 'info', ':', 'count', '=', 'collections', '.', 'Counter', '(', 'info', '.', 'read', '(', ')', '.', 'upper', '(', ')', ')', 'value', '=', 'pprint', '.', 'pformat', '(', 'count', ')', 'print', '(', 'value', ')']"
791,"['write', 'numpy', 'program', 'concatenate', 'two', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '[', '0', ',', '1', ',', '3', ']', ',', '[', '5', ',', '7', ',', '9', ']', ']', ')', 'b', '=', 'np', '.', 'array', '(', '[', '[', '0', ',', '2', ',', '4', ']', ',', '[', '6', ',', '8', ',', '10', ']', ']', ')', 'c', '=', 'np', '.', 'concatenate', '(', '(', 'a', ',', 'b', ')', ',', '1', ')', 'print', '(', 'c', ')']"
792,"['write', 'python', 'program', 'remove', 'none', 'value', 'given', 'list', 'using', 'lambda', 'function']","['def', 'remove_none', '(', 'nums', ')', ':', 'result', '=', 'filter', '(', 'lambda', 'v', ':', 'v', 'is', 'not', 'None', ',', 'nums', ')', 'return', 'list', '(', 'result', ')', 'nums', '=', '[', '12', ',', '0', ',', 'None', ',', '23', ',', 'None', ',', '-', '55', ',', '234', ',', '89', ',', 'None', ',', '0', ',', '6', ',', '-', '12', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nRemove None value from the said list:""', ')', 'print', '(', 'remove_none', '(', 'nums', ')', ')']"
793,"['write', 'python', 'program', 'configure', 'rounding', 'round', 'round', 'given', 'decimal', 'value', 'use', 'decimaldecimal']","['import', 'decimal', 'print', '(', '""Configure the rounding to round up:""', ')', 'decimal', '.', 'getcontext', '(', ')', '.', 'prec', '=', '1', 'decimal', '.', 'getcontext', '(', ')', '.', 'rounding', '=', 'decimal', '.', 'ROUND_UP', 'print', '(', 'decimal', '.', 'Decimal', '(', '30', ')', '/', 'decimal', '.', 'Decimal', '(', '4', ')', ')', 'print', '(', '""\\nConfigure the rounding to round down:""', ')', 'decimal', '.', 'getcontext', '(', ')', '.', 'prec', '=', '3', 'decimal', '.', 'getcontext', '(', ')', '.', 'rounding', '=', 'decimal', '.', 'ROUND_DOWN', 'print', '(', 'decimal', '.', 'Decimal', '(', '30', ')', '/', 'decimal', '.', 'Decimal', '(', '4', ')', ')', 'print', '(', '""\\nConfigure the rounding to round up:""', ')', 'print', '(', 'decimal', '.', 'Decimal', '(', ""'8.325'"", ')', '.', 'quantize', '(', 'decimal', '.', 'Decimal', '(', ""'.01'"", ')', ',', 'rounding', '=', 'decimal', '.', 'ROUND_UP', ')', ')', 'print', '(', '""\\nConfigure the rounding to round down:""', ')', 'print', '(', 'decimal', '.', 'Decimal', '(', ""'8.325'"", ')', '.', 'quantize', '(', 'decimal', '.', 'Decimal', '(', ""'.01'"", ')', ',', 'rounding', '=', 'decimal', '.', 'ROUND_DOWN', ')', ')']"
794,"['write', 'python', 'program', 'find', 'highest', 'value', 'corresponding', 'key', 'dictionary']","['from', 'heapq', 'import', 'nlargest', 'my_dict', '=', '{', ""'a'"", ':', '500', ',', ""'b'"", ':', '5874', ',', ""'c'"", ':', '560', ',', ""'d'"", ':', '400', ',', ""'e'"", ':', '5874', ',', ""'f'"", ':', '20', '}', 'three_largest', '=', 'nlargest', '(', '3', ',', 'my_dict', ',', 'key', '=', 'my_dict', '.', 'get', ')', 'print', '(', 'three_largest', ')']"
795,"['write', 'panda', 'program', 'convert', 'numpy', 'array', 'panda', 'series']","['import', 'numpy', 'as', 'np', 'import', 'pandas', 'as', 'pd', 'np_array', '=', 'np', '.', 'array', '(', '[', '10', ',', '20', ',', '30', ',', '40', ',', '50', ']', ')', 'print', '(', '""NumPy array:""', ')', 'print', '(', 'np_array', ')', 'new_series', '=', 'pd', '.', 'Series', '(', 'np_array', ')', 'print', '(', '""Converted Pandas series:""', ')', 'print', '(', 'new_series', ')']"
796,"['write', 'numpy', 'program', 'get', 'number', 'item', 'array', 'dimension', 'number', 'array', 'dimension', 'memory', 'size', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'array_nums', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', '[', '5', ',', '6', ',', '7', ',', '8', ']', ',', '[', '9', ',', '10', ',', '11', ',', '12', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'array_nums', ')', 'print', '(', '""\\nNumber of items of the said array:""', ')', 'print', '(', 'array_nums', '.', 'size', ')', 'print', '(', '""\\nArray dimensions:""', ')', 'print', '(', 'array_nums', '.', 'shape', ')', 'print', '(', '""\\nNumber of array dimensions:""', ')', 'print', '(', 'array_nums', '.', 'ndim', ')', 'print', '(', '""\\nMemory size of each element of the said array""', ')', 'print', '(', 'array_nums', '.', 'itemsize', ')']"
797,"['write', 'python', 'program', 'drop', 'empty', 'item', 'given', 'dictionary']","['dict1', '=', '{', ""'c1'"", ':', ""'Red'"", ',', ""'c2'"", ':', ""'Green'"", ',', ""'c3'"", ':', 'None', '}', 'print', '(', '""Original Dictionary:""', ')', 'print', '(', 'dict1', ')', 'print', '(', '""New Dictionary after dropping empty items:""', ')', 'dict1', '=', '{', 'key', ':', 'value', 'for', '(', 'key', ',', 'value', ')', 'in', 'dict1', '.', 'items', '(', ')', 'if', 'value', 'is', 'not', 'None', '}', 'print', '(', 'dict1', ')']"
798,"['write', 'panda', 'program', 'stack', 'two', 'given', 'series', 'vertically', 'horizontally']","['import', 'pandas', 'as', 'pd', 'series1', '=', 'pd', '.', 'Series', '(', 'range', '(', '10', ')', ')', 'series2', '=', 'pd', '.', 'Series', '(', 'list', '(', ""'pqrstuvwxy'"", ')', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'series1', ')', 'print', '(', 'series2', ')', 'series1', '.', 'append', '(', 'series2', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'series1', ',', 'series2', ']', ',', 'axis', '=', '1', ')', 'print', '(', '""\\nStack two given series vertically and horizontally:""', ')', 'print', '(', 'df', ')']"
799,"['write', 'numpy', 'program', 'create', 'array', 'look', 'like', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'triu', '(', 'np', '.', 'arange', '(', '2', ',', '14', ')', '.', 'reshape', '(', '4', ',', '3', ')', ',', '-', '1', ')', 'print', '(', 'x', ')']"
800,"['write', 'numpy', 'program', 'find', 'common', 'value', 'two', 'array']","['import', 'numpy', 'as', 'np', 'array1', '=', 'np', '.', 'array', '(', '[', '0', ',', '10', ',', '20', ',', '40', ',', '60', ']', ')', 'print', '(', '""Array1: ""', ',', 'array1', ')', 'array2', '=', '[', '10', ',', '30', ',', '40', ']', 'print', '(', '""Array2: ""', ',', 'array2', ')', 'print', '(', '""Common values between two arrays:""', ')', 'print', '(', 'np', '.', 'intersect1d', '(', 'array1', ',', 'array2', ')', ')']"
801,"['write', 'panda', 'program', 'extract', 'number', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', '10', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'c0001'"", ',', ""'c0002'"", ',', ""'c0003'"", ',', ""'c0003'"", ',', ""'c0004'"", ']', ',', ""'address'"", ':', '[', ""'7277 Surrey Ave.'"", ',', ""'920 N. Bishop Ave.'"", ',', ""'9910 Golden Star St.'"", ',', ""'25 Dunbar St.'"", ',', ""'17 West Livingston Court'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'find_number', '(', 'text', ')', ':', 'num', '=', 're', '.', 'findall', '(', ""r'[0-9]+'"", ',', 'text', ')', 'return', '"" ""', '.', 'join', '(', 'num', ')', 'df', '[', ""'number'"", ']', '=', 'df', '[', ""'address'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'find_number', '(', 'x', ')', ')', 'print', '(', '""\\Extracting numbers from dataframe columns:""', ')', 'print', '(', 'df', ')']"
802,"['write', 'python', 'program', 'download', 'display', 'content', 'robottxt', 'enwikipediaorg']","['import', 'requests', 'response', '=', 'requests', '.', 'get', '(', '""https://en.wikipedia.org/robots.txt""', ')', 'test', '=', 'response', '.', 'text', 'print', '(', '""robots.txt for http://www.wikipedia.org/""', ')', 'print', '(', '""===================================================""', ')', 'print', '(', 'test', ')']"
803,"['write', 'python', 'program', 'calculate', 'discriminant', 'value']","['def', 'discriminant', '(', ')', ':', 'x_value', '=', 'float', '(', 'input', '(', ""'The x value: '"", ')', ')', 'y_value', '=', 'float', '(', 'input', '(', ""'The y value: '"", ')', ')', 'z_value', '=', 'float', '(', 'input', '(', ""'The z value: '"", ')', ')', 'discriminant', '=', '(', 'y_value', '**', '2', ')', '-', '(', '4', '*', 'x_value', '*', 'z_value', ')', 'if', 'discriminant', '>', '0', ':', 'print', '(', ""'Two Solutions. Discriminant value is:'"", ',', 'discriminant', ')', 'elif', 'discriminant', '==', '0', ':', 'print', '(', ""'One Solution. Discriminant value is:'"", ',', 'discriminant', ')', 'elif', 'discriminant', '<', '0', ':', 'print', '(', ""'No Real Solutions. Discriminant value is:'"", ',', 'discriminant', ')', 'discriminant', '(', ')']"
804,"['write', 'python', 'program', 'compute', 'sum', 'nonzero', 'group', 'separated', 'zero', 'given', 'list', 'number']","['def', 'test', '(', 'lst', ')', ':', 'result', '=', '[', ']', 'ele_val', '=', '0', 'for', 'digit', 'in', 'lst', ':', 'if', 'digit', '==', '0', ':', 'if', 'ele_val', '!=', '0', ':', 'result', '.', 'append', '(', 'ele_val', ')', 'ele_val', '=', '0', 'else', ':', 'ele_val', '+=', 'digit', 'if', 'ele_val', '>', '0', ':', 'result', '.', 'append', '(', 'ele_val', ')', 'return', 'result', 'nums', '=', '[', '3', ',', '4', ',', '6', ',', '2', ',', '0', ',', '0', ',', '0', ',', '0', ',', '0', ',', '0', ',', '6', ',', '7', ',', '6', ',', '9', ',', '10', ',', '0', ',', '0', ',', '0', ',', '0', ',', '0', ',', '7', ',', '4', ',', '4', ',', '0', ',', '0', ',', '0', ',', '0', ',', '0', ',', '0', ',', '5', ',', '3', ',', '2', ',', '9', ',', '7', ',', '1', ',', '0', ',', '0', ',', '0', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nCompute the sum of non-zero groups (separated by zeros) of the said list of numbers:""', ')', 'print', '(', 'test', '(', 'nums', ')', ')']"
805,"['write', 'python', 'program', 'generate', 'permutation', 'list', 'python']","['import', 'itertools', 'print', '(', 'list', '(', 'itertools', '.', 'permutations', '(', '[', '1', ',', '2', ',', '3', ']', ')', ')', ')']"
806,"['write', 'python', 'program', 'sort', 'unsorted', 'string', 'using', 'natural', 'sort']",[]
807,"['create', 'dataframe', 'ten', 'row', 'four', 'column', 'random', 'value', 'write', 'panda', 'program', 'highlight', 'maximum', 'value', 'column']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '24', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', 'np', '.', 'linspace', '(', '1', ',', '10', ',', '10', ')', '}', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df', ',', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', ',', 'columns', '=', 'list', '(', ""'BCDE'"", ')', ')', ']', ',', 'axis', '=', '1', ')', 'df', '.', 'iloc', '[', '0', ',', '2', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '3', ',', '3', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '4', ',', '1', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '9', ',', '4', ']', '=', 'np', '.', 'nan', 'print', '(', '""Original array:""', ')', 'print', '(', 'df', ')', 'def', 'highlight_max', '(', 's', ')', ':', ""'''\r    highlight the maximum in a Series green.\r    '''"", 'is_max', '=', 's', '==', 's', '.', 'max', '(', ')', 'return', '[', ""'background-color: green'"", 'if', 'v', 'else', ""''"", 'for', 'v', 'in', 'is_max', ']', 'print', '(', '""\\nHighlight the maximum value in each column:""', ')', 'df', '.', 'style', '.', 'apply', '(', 'highlight_max', ',', 'subset', '=', 'pd', '.', 'IndexSlice', '[', ':', ',', '[', ""'B'"", ',', ""'C'"", ',', ""'D'"", ',', ""'E'"", ']', ']', ')']"
808,"['write', 'python', 'program', 'find', 'whether', 'given', 'array', 'integer', 'contains', 'duplicate', 'element', 'return', 'true', 'value', 'appears', 'least', 'twice', 'said', 'array', 'return', 'false', 'every', 'element', 'distinct']","['def', 'test_duplicate', '(', 'array_nums', ')', ':', 'nums_set', '=', 'set', '(', 'array_nums', ')', 'return', 'len', '(', 'array_nums', ')', '!=', 'len', '(', 'nums_set', ')', 'print', '(', 'test_duplicate', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ')', ')', 'print', '(', 'test_duplicate', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '4', ']', ')', ')', 'print', '(', 'test_duplicate', '(', '[', '1', ',', '1', ',', '2', ',', '2', ',', '3', ',', '3', ',', '4', ',', '4', ',', '5', ']', ')', ')']"
809,"['write', 'numpy', 'program', 'create', 'white', 'image', 'size']","['from', 'PIL', 'import', 'Image', 'import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'full', '(', '(', '512', ',', '256', ',', '3', ')', ',', '255', ',', 'dtype', '=', 'np', '.', 'uint8', ')', 'image', '=', 'Image', '.', 'fromarray', '(', 'a', ',', '""RGB""', ')', 'image', '.', 'save', '(', '""white.png""', ',', '""PNG""', ')']"
810,"['write', 'python', 'program', 'find', 'maximum', 'minimum', 'value', 'given', 'list', 'tuples']","['from', 'operator', 'import', 'itemgetter', 'def', 'max_min_list_tuples', '(', 'class_students', ')', ':', 'return_max', '=', 'max', '(', 'class_students', ',', 'key', '=', 'itemgetter', '(', '1', ')', ')', '[', '1', ']', 'return_min', '=', 'min', '(', 'class_students', ',', 'key', '=', 'itemgetter', '(', '1', ')', ')', '[', '1', ']', 'return', 'return_max', ',', 'return_min', 'class_students', '=', '[', '(', ""'V'"", ',', '60', ')', ',', '(', ""'VI'"", ',', '70', ')', ',', '(', ""'VII'"", ',', '75', ')', ',', '(', ""'VIII'"", ',', '72', ')', ',', '(', ""'IX'"", ',', '78', ')', ',', '(', ""'X'"", ',', '70', ')', ']', 'print', '(', '""Original list with tuples:""', ')', 'print', '(', 'class_students', ')', 'print', '(', '""\\nMaximum and minimum values of the said list of tuples:""', ')', 'print', '(', 'max_min_list_tuples', '(', 'class_students', ')', ')']"
811,"['write', 'python', 'program', 'find', 'item', 'start', 'specific', 'character', 'given', 'list']","['def', 'test', '(', 'lst', ',', 'char', ')', ':', 'result', '=', '[', 'i', 'for', 'i', 'in', 'lst', 'if', 'i', '.', 'startswith', '(', 'char', ')', ']', 'return', 'result', 'text', '=', '[', '""abcd""', ',', '""abc""', ',', '""bcd""', ',', '""bkie""', ',', '""cder""', ',', '""cdsw""', ',', '""sdfsd""', ',', '""dagfa""', ',', '""acjd""', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'text', ')', 'char', '=', '""a""', 'print', '(', '""\\nItems start with""', ',', 'char', ',', '""from the said list:""', ')', 'print', '(', 'test', '(', 'text', ',', 'char', ')', ')', 'char', '=', '""d""', 'print', '(', '""\\nItems start with""', ',', 'char', ',', '""from the said list:""', ')', 'print', '(', 'test', '(', 'text', ',', 'char', ')', ')', 'char', '=', '""w""', 'print', '(', '""\\nItems start with""', ',', 'char', ',', '""from the said list:""', ')', 'print', '(', 'test', '(', 'text', ',', 'char', ')', ')']"
812,"['write', 'python', 'program', 'split', 'given', 'list', 'two', 'part', 'length', 'first', 'part', 'list', 'given']","['def', 'split_two_parts', '(', 'n_list', ',', 'L', ')', ':', 'return', 'n_list', '[', ':', 'L', ']', ',', 'n_list', '[', 'L', ':', ']', 'n_list', '=', '[', '1', ',', '1', ',', '2', ',', '3', ',', '4', ',', '4', ',', '5', ',', '1', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'n_list', ')', 'first_list_length', '=', '3', 'print', '(', '""\\nLength of the first part of the list:""', ',', 'first_list_length', ')', 'print', '(', '""\\nSplited the said list into two parts:""', ')', 'print', '(', 'split_two_parts', '(', 'n_list', ',', 'first_list_length', ')', ')']"
813,"['write', 'python', 'program', 'check', 'sum', 'three', 'element', 'array', 'three', 'array', 'equal', 'target', 'value', 'print', 'threeelement', 'combination']","['import', 'itertools', 'from', 'functools', 'import', 'partial', 'X', '=', '[', '10', ',', '20', ',', '20', ',', '20', ']', 'Y', '=', '[', '10', ',', '20', ',', '30', ',', '40', ']', 'Z', '=', '[', '10', ',', '30', ',', '40', ',', '20', ']', 'T', '=', '70', 'def', 'check_sum_array', '(', 'N', ',', '*', 'nums', ')', ':', 'if', 'sum', '(', 'x', 'for', 'x', 'in', 'nums', ')', '==', 'N', ':', 'return', '(', 'True', ',', 'nums', ')', 'else', ':', 'return', '(', 'False', ',', 'nums', ')', 'pro', '=', 'itertools', '.', 'product', '(', 'X', ',', 'Y', ',', 'Z', ')', 'func', '=', 'partial', '(', 'check_sum_array', ',', 'T', ')', 'sums', '=', 'list', '(', 'itertools', '.', 'starmap', '(', 'func', ',', 'pro', ')', ')', 'result', '=', 'set', '(', ')', 'for', 's', 'in', 'sums', ':', 'if', 's', '[', '0', ']', '==', 'True', 'and', 's', '[', '1', ']', 'not', 'in', 'result', ':', 'result', '.', 'add', '(', 's', '[', '1', ']', ')', 'print', '(', 'result', ')']"
814,"['write', 'python', 'program', 'construct', 'infinite', 'iterator', 'return', 'evenly', 'spaced', 'value', 'starting', 'specified', 'number', 'step']","['import', 'itertools', 'as', 'it', 'start', '=', '10', 'step', '=', '1', 'print', '(', '""The starting number is ""', ',', 'start', ',', '""and step is ""', ',', 'step', ')', 'my_counter', '=', 'it', '.', 'count', '(', 'start', ',', 'step', ')', 'print', '(', '""The said function print never-ending items:""', ')', 'for', 'i', 'in', 'my_counter', ':', 'print', '(', 'i', ')']"
815,"['write', 'numpy', 'program', 'create', 'array', 'equal', 'shape', 'data', 'type', 'given', 'array']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '[', '5.54', ',', '3.38', ',', '7.99', ']', ',', '[', '3.54', ',', '8.32', ',', '6.99', ']', ',', '[', '1.54', ',', '2.39', ',', '9.29', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nNew array of equal shape and data type of the said array filled by 0:""', ')', 'print', '(', 'np', '.', 'zeros_like', '(', 'nums', ')', ')']"
816,"['create', 'dataframe', 'ten', 'row', 'four', 'column', 'random', 'value', 'write', 'panda', 'program', 'display', 'dataframe', 'table', 'style', 'border', 'around', 'table', 'around', 'row']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '24', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', 'np', '.', 'linspace', '(', '1', ',', '10', ',', '10', ')', '}', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df', ',', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', ',', 'columns', '=', 'list', '(', ""'BCDE'"", ')', ')', ']', ',', 'axis', '=', '1', ')', 'df', '.', 'iloc', '[', '0', ',', '2', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '3', ',', '3', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '4', ',', '1', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '9', ',', '4', ']', '=', 'np', '.', 'nan', 'print', '(', '""Original array:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nDataframe - table style and border around the table and not around the rows:""', ')', 'df', '.', 'style', '.', 'set_table_styles', '(', '[', '{', ""'selector'"", ':', ""''"", ',', ""'props'"", ':', '[', '(', ""'border'"", ',', ""'4px solid #7a7'"", ')', ']', '}', ']', ')']"
817,"['rite', 'python', 'program', 'accepts', 'sequence', 'comma', 'separated', 'digit', 'binary', 'number', 'input', 'print', 'number', 'divisible', 'comma', 'separated', 'sequence']","['items', '=', '[', ']', 'num', '=', '[', 'x', 'for', 'x', 'in', 'input', '(', ')', '.', 'split', '(', ""','"", ')', ']', 'for', 'p', 'in', 'num', ':', 'x', '=', 'int', '(', 'p', ',', '2', ')', 'if', 'not', 'x', '%', '5', ':', 'items', '.', 'append', '(', 'p', ')', 'print', '(', ""','"", '.', 'join', '(', 'items', ')', ')']"
818,"['write', 'python', 'program', 'compute', 'sum', 'digit', 'number', 'given', 'list']","['def', 'sum_of_digits', '(', 'nums', ')', ':', 'return', 'sum', '(', 'int', '(', 'el', ')', 'for', 'n', 'in', 'nums', 'for', 'el', 'in', 'str', '(', 'n', ')', 'if', 'el', '.', 'isdigit', '(', ')', ')', 'nums', '=', '[', '10', ',', '2', ',', '56', ']', 'print', '(', '""Original tuple: ""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Sum of digits of each number of the said list of integers:""', ')', 'print', '(', 'sum_of_digits', '(', 'nums', ')', ')', 'nums', '=', '[', '10', ',', '20', ',', '4', ',', '5', ',', ""'b'"", ',', '70', ',', ""'a'"", ']', 'print', '(', '""\\nOriginal tuple: ""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Sum of digits of each number of the said list of integers:""', ')', 'print', '(', 'sum_of_digits', '(', 'nums', ')', ')', 'nums', '=', '[', '10', ',', '20', ',', '-', '4', ',', '5', ',', '-', '70', ']', 'print', '(', '""\\nOriginal tuple: ""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Sum of digits of each number of the said list of integers:""', ')', 'print', '(', 'sum_of_digits', '(', 'nums', ')', ')']"
819,"['write', 'panda', 'program', 'print', 'day', 'specified', 'date', 'also', 'print', 'day', 'two', 'given', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'datetime', 'from', 'datetime', 'import', 'datetime', ',', 'date', 'today', '=', 'datetime', '(', '2012', ',', '10', ',', '30', ')', 'print', '(', '""Current date:""', ',', 'today', ')', 'tomorrow', '=', 'today', '+', 'pd', '.', 'Timedelta', '(', 'days', '=', '1', ')', 'print', '(', '""Tomorrow:""', ',', 'tomorrow', ')', 'yesterday', '=', 'today', '-', 'pd', '.', 'Timedelta', '(', 'days', '=', '1', ')', 'print', '(', '""Yesterday:""', ',', 'yesterday', ')', 'date1', '=', 'datetime', '(', '2016', ',', '8', ',', '2', ')', 'date2', '=', 'datetime', '(', '2016', ',', '7', ',', '19', ')', 'print', '(', '""\\nDifference between two dates: ""', ',', '(', 'date1', '-', 'date2', ')', ')']"
820,"['write', 'panda', 'program', 'extract', 'date', 'format', 'mmddyyyy', 'given', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF'"", ',', ""'zefsalf'"", ',', ""'sdfslew'"", ',', ""'zekfsdf'"", ']', ',', ""'date_of_sale'"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'05/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'find_valid_dates', '(', 'dt', ')', ':', 'result', '=', 're', '.', 'findall', '(', ""r'\\b(1[0-2]|0[1-9])/(3[01]|[12][0-9]|0[1-9])/([0-9]{4})\\b'"", ',', 'dt', ')', 'return', 'result', 'df', '[', ""'valid_dates'"", ']', '=', 'df', '[', ""'date_of_sale'"", ']', '.', 'apply', '(', 'lambda', 'dt', ':', 'find_valid_dates', '(', 'dt', ')', ')', 'print', '(', '""\\nValid dates (format: mm-dd-yyyy):""', ')', 'print', '(', 'df', ')']"
821,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'quick', 'sort', 'algorithm']","['def', 'quickSort', '(', 'data_list', ')', ':', 'quickSortHlp', '(', 'data_list', ',', '0', ',', 'len', '(', 'data_list', ')', '-', '1', ')', 'def', 'quickSortHlp', '(', 'data_list', ',', 'first', ',', 'last', ')', ':', 'if', 'first', '<', 'last', ':', 'splitpoint', '=', 'partition', '(', 'data_list', ',', 'first', ',', 'last', ')', 'quickSortHlp', '(', 'data_list', ',', 'first', ',', 'splitpoint', '-', '1', ')', 'quickSortHlp', '(', 'data_list', ',', 'splitpoint', '+', '1', ',', 'last', ')', 'def', 'partition', '(', 'data_list', ',', 'first', ',', 'last', ')', ':', 'pivotvalue', '=', 'data_list', '[', 'first', ']', 'leftmark', '=', 'first', '+', '1', 'rightmark', '=', 'last', 'done', '=', 'False', 'while', 'not', 'done', ':', 'while', 'leftmark', '<=', 'rightmark', 'and', 'data_list', '[', 'leftmark', ']', '<=', 'pivotvalue', ':', 'leftmark', '=', 'leftmark', '+', '1', 'while', 'data_list', '[', 'rightmark', ']', '>=', 'pivotvalue', 'and', 'rightmark', '>=', 'leftmark', ':', 'rightmark', '=', 'rightmark', '-', '1', 'if', 'rightmark', '<', 'leftmark', ':', 'done', '=', 'True', 'else', ':', 'temp', '=', 'data_list', '[', 'leftmark', ']', 'data_list', '[', 'leftmark', ']', '=', 'data_list', '[', 'rightmark', ']', 'data_list', '[', 'rightmark', ']', '=', 'temp', 'temp', '=', 'data_list', '[', 'first', ']', 'data_list', '[', 'first', ']', '=', 'data_list', '[', 'rightmark', ']', 'data_list', '[', 'rightmark', ']', '=', 'temp', 'return', 'rightmark', 'data_list', '=', '[', '54', ',', '26', ',', '93', ',', '17', ',', '77', ',', '31', ',', '44', ',', '55', ',', '20', ']', 'quickSort', '(', 'data_list', ')', 'print', '(', 'data_list', ')']"
822,"['write', 'python', 'program', 'check', 'given', 'list', 'strictly', 'increasing', 'moreover', 'removing', 'one', 'element', 'list', 'result', 'strictly', 'increasing', 'list', 'still', 'consider', 'list', 'true']",[]
823,"['write', 'python', 'program', 'generate', 'random', 'color', 'hex', 'random', 'alphabetical', 'string', 'random', 'value', 'two', 'integer', 'inclusive', 'random', 'multiple', 'use', 'randomrandint']","['import', 'random', 'import', 'string', 'print', '(', '""Generate a random color hex:""', ')', 'print', '(', '""#{:06x}""', '.', 'format', '(', 'random', '.', 'randint', '(', '0', ',', '0xFFFFFF', ')', ')', ')', 'print', '(', '""\\nGenerate a random alphabetical string:""', ')', 'max_length', '=', '255', 's', '=', '""""', 'for', 'i', 'in', 'range', '(', 'random', '.', 'randint', '(', '1', ',', 'max_length', ')', ')', ':', 's', '+=', 'random', '.', 'choice', '(', 'string', '.', 'ascii_letters', ')', 'print', '(', 's', ')', 'print', '(', '""Generate a random value between two integers, inclusive:""', ')', 'print', '(', 'random', '.', 'randint', '(', '0', ',', '10', ')', ')', 'print', '(', 'random', '.', 'randint', '(', '-', '7', ',', '7', ')', ')', 'print', '(', 'random', '.', 'randint', '(', '1', ',', '1', ')', ')', 'print', '(', '""Generate a random multiple of 7 between 0 and 70:""', ')', 'print', '(', 'random', '.', 'randint', '(', '0', ',', '10', ')', '*', '7', ')']"
824,"['write', 'python', 'class', 'two', 'method', 'accept', 'string', 'user', 'print', 'string', 'upper', 'case']","['class', 'IOString', '(', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'str1', '=', '""""', 'def', 'get_String', '(', 'self', ')', ':', 'self', '.', 'str1', '=', 'input', '(', ')', 'def', 'print_String', '(', 'self', ')', ':', 'print', '(', 'self', '.', 'str1', '.', 'upper', '(', ')', ')', 'str1', '=', 'IOString', '(', ')', 'str1', '.', 'get_String', '(', ')', 'str1', '.', 'print_String', '(', ')']"
825,"['write', 'python', 'program', 'get', 'fibonacci', 'series']","['x', ',', 'y', '=', '0', ',', '1', 'while', 'y', '<', '50', ':', 'print', '(', 'y', ')', 'x', ',', 'y', '=', 'y', ',', 'x', '+', 'y']"
826,"['write', 'python', 'program', 'convert', 'given', 'dictionary', 'list', 'list']","['def', 'test', '(', 'dictt', ')', ':', 'result', '=', 'list', '(', 'map', '(', 'list', ',', 'dictt', '.', 'items', '(', ')', ')', ')', 'return', 'result', 'color_dict', '=', '{', '1', ':', ""'red'"", ',', '2', ':', ""'green'"", ',', '3', ':', ""'black'"", ',', '4', ':', ""'white'"", ',', '5', ':', ""'black'"", '}', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'color_dict', ')', 'print', '(', '""Convert the said dictionary into a list of lists:""', ')', 'print', '(', 'test', '(', 'color_dict', ')', ')', 'color_dict', '=', '{', ""'1'"", ':', ""'Austin Little'"", ',', ""'2'"", ':', ""'Natasha Howard'"", ',', ""'3'"", ':', ""'Alfred Mullins'"", ',', ""'4'"", ':', ""'Jamie Rowe'"", '}', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'color_dict', ')', 'print', '(', '""Convert the said dictionary into a list of lists:""', ')', 'print', '(', 'test', '(', 'color_dict', ')', ')']"
827,"['write', 'numpy', 'program', 'create', 'two', 'array', 'shape', 'fill', 'value', 'using', 'unsigned', 'integer', 'insert', 'new', 'axis', 'appear', 'beginning', 'expanded', 'array', 'shape', 'combine', 'said', 'two', 'array', 'one']","['import', 'numpy', 'as', 'np', 'nums1', '=', 'np', '.', 'random', '.', 'randint', '(', 'low', '=', '0', ',', 'high', '=', '256', ',', 'size', '=', '(', '200', ',', '300', ',', '3', ')', ',', 'dtype', '=', 'np', '.', 'uint8', ')', 'nums2', '=', 'np', '.', 'random', '.', 'randint', '(', 'low', '=', '0', ',', 'high', '=', '256', ',', 'size', '=', '(', '200', ',', '300', ',', '3', ')', ',', 'dtype', '=', 'np', '.', 'uint8', ')', 'print', '(', '""Array1:""', ')', 'print', '(', 'nums1', ')', 'print', '(', '""\\nArray2:""', ')', 'print', '(', 'nums2', ')', 'nums1', '=', 'np', '.', 'expand_dims', '(', 'nums1', ',', 'axis', '=', '0', ')', 'nums2', '=', 'np', '.', 'expand_dims', '(', 'nums2', ',', 'axis', '=', '0', ')', 'nums', '=', 'np', '.', 'append', '(', 'nums1', ',', 'nums2', ',', 'axis', '=', '0', ')', 'print', '(', '""\\nCombined array:""', ')', 'print', '(', 'nums', ')']"
828,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'minimum', 'sale', 'value', 'item']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\SaleData.xlsx'"", ')', 'table', '=', 'pd', '.', 'pivot_table', '(', 'df', ',', 'index', '=', ""'Item'"", ',', 'values', '=', ""'Sale_amt'"", ',', 'aggfunc', '=', 'np', '.', 'min', ')', 'print', '(', 'table', ')']"
829,"['write', 'python', 'program', 'print', 'unique', 'value', 'dictionary']","['L', '=', '[', '{', '""V""', ':', '""S001""', '}', ',', '{', '""V""', ':', '""S002""', '}', ',', '{', '""VI""', ':', '""S001""', '}', ',', '{', '""VI""', ':', '""S005""', '}', ',', '{', '""VII""', ':', '""S005""', '}', ',', '{', '""V""', ':', '""S009""', '}', ',', '{', '""VIII""', ':', '""S007""', '}', ']', 'print', '(', '""Original List: ""', ',', 'L', ')', 'u_value', '=', 'set', '(', 'val', 'for', 'dic', 'in', 'L', 'for', 'val', 'in', 'dic', '.', 'values', '(', ')', ')', 'print', '(', '""Unique Values: ""', ',', 'u_value', ')']"
830,"['write', 'python', 'program', 'remove', 'key', 'value', 'pair', 'list', 'dictionary']","['original_list', '=', '[', '{', ""'key1'"", ':', ""'value1'"", ',', ""'key2'"", ':', ""'value2'"", '}', ',', '{', ""'key1'"", ':', ""'value3'"", ',', ""'key2'"", ':', ""'value4'"", '}', ']', 'print', '(', '""Original List: ""', ')', 'print', '(', 'original_list', ')', 'new_list', '=', '[', '{', 'k', ':', 'v', 'for', 'k', ',', 'v', 'in', 'd', '.', 'items', '(', ')', 'if', 'k', '!=', ""'key1'"", '}', 'for', 'd', 'in', 'original_list', ']', 'print', '(', '""New List: ""', ')', 'print', '(', 'new_list', ')']"
831,"['write', 'numpy', 'program', 'create', 'matrix', 'row', 'value', 'ranging']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'zeros', '(', '(', '5', ',', '5', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Row values ranging from 0 to 4.""', ')', 'x', '+=', 'np', '.', 'arange', '(', '5', ')', 'print', '(', 'x', ')']"
832,"['write', 'python', 'program', 'find', 'first', 'appearance', 'substring', 'poor', 'given', 'string', 'follows', 'poor', 'replace', 'whole', 'notpoor', 'substring', 'good', 'return', 'resulting', 'string']","['def', 'not_poor', '(', 'str1', ')', ':', 'snot', '=', 'str1', '.', 'find', '(', ""'not'"", ')', 'spoor', '=', 'str1', '.', 'find', '(', ""'poor'"", ')', 'if', 'spoor', '>', 'snot', 'and', 'snot', '>', '0', 'and', 'spoor', '>', '0', ':', 'str1', '=', 'str1', '.', 'replace', '(', 'str1', '[', 'snot', ':', '(', 'spoor', '+', '4', ')', ']', ',', ""'good'"", ')', 'return', 'str1', 'else', ':', 'return', 'str1', 'print', '(', 'not_poor', '(', ""'The lyrics is not that poor!'"", ')', ')', 'print', '(', 'not_poor', '(', ""'The lyrics is poor!'"", ')', ')']"
833,"['write', 'python', 'program', 'lowercase', 'first', 'n', 'character', 'string']","['str1', '=', ""'W3RESOURCE.COM'"", 'print', '(', 'str1', '[', ':', '4', ']', '.', 'lower', '(', ')', '+', 'str1', '[', '4', ':', ']', ')']"
834,"['write', 'python', 'program', 'find', 'first', 'duplicate', 'element', 'given', 'array', 'integer', 'return', 'element']","['def', 'find_first_duplicate', '(', 'nums', ')', ':', 'num_set', '=', 'set', '(', ')', 'no_duplicate', '=', '-', '1', 'for', 'i', 'in', 'range', '(', 'len', '(', 'nums', ')', ')', ':', 'if', 'nums', '[', 'i', ']', 'in', 'num_set', ':', 'return', 'nums', '[', 'i', ']', 'else', ':', 'num_set', '.', 'add', '(', 'nums', '[', 'i', ']', ')', 'return', 'no_duplicate', 'print', '(', 'find_first_duplicate', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '4', ',', '5', ']', ')', ')', 'print', '(', 'find_first_duplicate', '(', '[', '1', ',', '2', ',', '3', ',', '4', ']', ')', ')', 'print', '(', 'find_first_duplicate', '(', '[', '1', ',', '1', ',', '2', ',', '3', ',', '3', ',', '2', ',', '2', ']', ')', ')']"
835,"['write', 'python', 'program', 'interleave', 'two', 'given', 'list', 'another', 'list', 'randomly', 'using', 'map', 'function']","['import', 'random', 'def', 'randomly_interleave', '(', 'nums1', ',', 'nums2', ')', ':', 'result', '=', 'list', '(', 'map', '(', 'next', ',', 'random', '.', 'sample', '(', '[', 'iter', '(', 'nums1', ')', ']', '*', 'len', '(', 'nums1', ')', '+', '[', 'iter', '(', 'nums2', ')', ']', '*', 'len', '(', 'nums2', ')', ',', 'len', '(', 'nums1', ')', '+', 'len', '(', 'nums2', ')', ')', ')', ')', 'return', 'result', 'nums1', '=', '[', '1', ',', '2', ',', '7', ',', '8', ',', '3', ',', '7', ']', 'nums2', '=', '[', '4', ',', '3', ',', '8', ',', '9', ',', '4', ',', '3', ',', '8', ',', '9', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nInterleave two given list into another list randomly:""', ')', 'print', '(', 'randomly_interleave', '(', 'nums1', ',', 'nums2', ')', ')']"
836,"['write', 'python', 'program', 'remove', 'duplicate', 'word', 'given', 'string']","['def', 'unique_list', '(', 'text_str', ')', ':', 'l', '=', 'text_str', '.', 'split', '(', ')', 'temp', '=', '[', ']', 'for', 'x', 'in', 'l', ':', 'if', 'x', 'not', 'in', 'temp', ':', 'temp', '.', 'append', '(', 'x', ')', 'return', ""' '"", '.', 'join', '(', 'temp', ')', 'text_str', '=', '""Python Exercises Practice Solution Exercises""', 'print', '(', '""Original String:""', ')', 'print', '(', 'text_str', ')', 'print', '(', '""\\nAfter removing duplicate words from the said string:""', ')', 'print', '(', 'unique_list', '(', 'text_str', ')', ')']"
837,"['write', 'panda', 'program', 'get', 'index', 'element', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'ds', '=', 'pd', '.', 'Series', '(', '[', '1', ',', '3', ',', '5', ',', '7', ',', '9', ',', '11', ',', '13', ',', '15', ']', ',', 'index', '=', '[', '0', ',', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '7', ',', '8', ']', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'ds', ')', 'print', '(', '""\\nIndex of 11 in the said series:""', ')', 'x', '=', 'ds', '[', 'ds', '==', '11', ']', '.', 'index', '[', '0', ']', 'print', '(', 'x', ')']"
838,"['write', 'python', 'program', 'check', 'given', 'string', 'contains', 'element', 'present', 'list']","['def', 'test', '(', 'lst', ',', 'str1', ')', ':', 'result', '=', '[', 'el', 'for', 'el', 'in', 'lst', 'if', '(', 'el', 'in', 'str1', ')', ']', 'return', 'bool', '(', 'result', ')', 'str1', '=', '""https://www.w3resource.com/python-exercises/list/""', 'lst', '=', '[', ""'.com'"", ',', ""'.edu'"", ',', ""'.tv'"", ']', 'print', '(', '""The original string and list: ""', ')', 'print', '(', 'str1', ')', 'print', '(', 'lst', ')', 'print', '(', '""\\nCheck if""', ',', 'str1', ',', '""contains an element, which is present in the list""', ',', 'lst', ')', 'print', '(', 'test', '(', 'lst', ',', 'str1', ')', ')', 'str1', '=', '""https://www.w3resource.net""', 'lst', '=', '[', ""'.com'"", ',', ""'.edu'"", ',', ""'.tv'"", ']', 'print', '(', '""\\nThe original string and list: ""', '+', 'str1', ')', 'print', '(', 'str1', ')', 'print', '(', 'lst', ')', 'print', '(', '""\\nCheck if""', ',', 'str1', ',', '""contains an element, which is present in the list""', ',', 'lst', ')', 'print', '(', 'test', '(', 'lst', ',', 'str1', ')', ')']"
839,"['write', 'python', 'program', 'insert', 'list', 'record', 'given', 'sqlite', 'table']","['import', 'sqlite3', 'from', 'sqlite3', 'import', 'Error', 'def', 'sql_connection', '(', ')', ':', 'try', ':', 'conn', '=', 'sqlite3', '.', 'connect', '(', ""'mydatabase.db'"", ')', 'return', 'conn', 'except', 'Error', ':', 'print', '(', 'Error', ')', 'def', 'sql_table', '(', 'conn', ',', 'rows', ')', ':', 'cursorObj', '=', 'conn', '.', 'cursor', '(', ')', 'cursorObj', '.', 'execute', '(', '""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));""', ')', 'sqlite_insert_query', '=', '""""""INSERT INTO salesman\r                          (salesman_id, name, city, commission) \r                          VALUES (?, ?, ?, ?);""""""', 'cursorObj', '.', 'executemany', '(', 'sqlite_insert_query', ',', 'rows', ')', 'conn', '.', 'commit', '(', ')', 'print', '(', '""Number of records after inserting rows:""', ')', 'cursor', '=', 'cursorObj', '.', 'execute', '(', ""'select * from salesman;'"", ')', 'print', '(', 'len', '(', 'cursor', '.', 'fetchall', '(', ')', ')', ')', 'rows', '=', '[', '(', '5001', ',', ""'James Hoog'"", ',', ""'New York'"", ',', '0.15', ')', ',', '(', '5002', ',', ""'Nail Knite'"", ',', ""'Paris'"", ',', '0.25', ')', ',', '(', '5003', ',', ""'Pit Alex'"", ',', ""'London'"", ',', '0.15', ')', ',', '(', '5004', ',', ""'Mc Lyon'"", ',', ""'Paris'"", ',', '0.35', ')', ',', '(', '5005', ',', ""'Paul Adam'"", ',', ""'Rome'"", ',', '0.45', ')', ']', 'sqllite_conn', '=', 'sql_connection', '(', ')', 'sql_table', '(', 'sqllite_conn', ',', 'rows', ')', 'if', '(', 'sqllite_conn', ')', ':', 'sqllite_conn', '.', 'close', '(', ')', 'print', '(', '""\\nThe SQLite connection is closed.""', ')']"
840,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'pancake', 'sort']","['def', 'pancake_sort', '(', 'nums', ')', ':', 'arr_len', '=', 'len', '(', 'nums', ')', 'while', 'arr_len', '>', '1', ':', 'mi', '=', 'nums', '.', 'index', '(', 'max', '(', 'nums', '[', '0', ':', 'arr_len', ']', ')', ')', 'nums', '=', 'nums', '[', 'mi', ':', ':', '-', '1', ']', '+', 'nums', '[', 'mi', '+', '1', ':', 'len', '(', 'nums', ')', ']', 'nums', '=', 'nums', '[', 'arr_len', '-', '1', ':', ':', '-', '1', ']', '+', 'nums', '[', 'arr_len', ':', 'len', '(', 'nums', ')', ']', 'arr_len', '-=', '1', 'return', 'nums', 'user_input', '=', 'input', '(', '""Input numbers separated by a comma:\\n""', ')', '.', 'strip', '(', ')', 'nums', '=', '[', 'int', '(', 'item', ')', 'for', 'item', 'in', 'user_input', '.', 'split', '(', ""','"", ')', ']', 'print', '(', 'pancake_sort', '(', 'nums', ')', ')']"
841,"['write', 'python', 'program', 'shift', 'last', 'element', 'first', 'position', 'first', 'element', 'last', 'position', 'given', 'list']","['def', 'shift_first_last', '(', 'lst', ')', ':', 'x', '=', 'lst', '.', 'pop', '(', '0', ')', 'y', '=', 'lst', '.', 'pop', '(', ')', 'lst', '.', 'insert', '(', '0', ',', 'y', ')', 'lst', '.', 'insert', '(', 'len', '(', 'lst', ')', ',', 'x', ')', 'return', 'lst', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Shift last element to first position and first element to last position of the said list:""', ')', 'print', '(', 'shift_first_last', '(', 'nums', ')', ')', 'chars', '=', '[', ""'s'"", ',', ""'d'"", ',', ""'f'"", ',', ""'d'"", ',', ""'s'"", ',', ""'s'"", ',', ""'d'"", ',', ""'f'"", ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'chars', ')', 'print', '(', '""Shift last element to first position and first element to last position of the said list:""', ')', 'print', '(', 'shift_first_last', '(', 'chars', ')', ')']"
842,"['write', 'numpy', 'program', 'create', 'cube']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'zeros', '(', '(', '5', ',', '5', ',', '5', ')', ')', '.', 'astype', '(', 'int', ')', '+', '1', 'print', '(', 'x', ')']"
843,"['write', 'numpy', 'program', 'display', 'numpy', 'array', 'element', 'floating', 'value', 'given', 'precision']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '0.26153123', ',', '0.52760141', ',', '0.5718299', ',', '0.5927067', ',', '0.7831874', ',', '0.69746349', ',', '0.35399976', ',', '0.99469633', ',', '0.0694458', ',', '0.54711478', ']', ')', 'print', '(', '""Original array elements:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Print array values with precision 3:""', ')', 'np', '.', 'set_printoptions', '(', 'precision', '=', '3', ')', 'print', '(', 'x', ')']"
844,"['write', 'panda', 'program', 'compute', 'minimum', 'percentile', 'median', 'maximum', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'num_state', '=', 'np', '.', 'random', '.', 'RandomState', '(', '100', ')', 'num_series', '=', 'pd', '.', 'Series', '(', 'num_state', '.', 'normal', '(', '10', ',', '4', ',', '20', ')', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'num_series', ')', 'result', '=', 'np', '.', 'percentile', '(', 'num_series', ',', 'q', '=', '[', '0', ',', '25', ',', '50', ',', '75', ',', '100', ']', ')', 'print', '(', '""\\nMinimum, 25th percentile, median, 75th, and maximum of a given series:""', ')', 'print', '(', 'result', ')']"
845,"['write', 'python', 'program', 'find', 'majority', 'element', 'given', 'array', 'size', 'n', 'using', 'collection', 'module']","['import', 'collections', 'class', 'Solution', '(', 'object', ')', ':', 'def', 'majorityElement', '(', 'self', ',', 'nums', ')', ':', '""""""\r        :type nums: List[int]\r        :return type: int\r        """"""', 'count_ele', '=', 'collections', '.', 'Counter', '(', 'nums', ')', 'return', 'count_ele', '.', 'most_common', '(', ')', '[', '0', ']', '[', '0', ']', 'result', '=', 'Solution', '(', ')', '.', 'majorityElement', '(', '[', '10', ',', '10', ',', '20', ',', '30', ',', '40', ',', '10', ',', '20', ',', '10', ']', ')', 'print', '(', 'result', ')']"
846,"['write', 'python', 'program', 'insert', 'new', 'text', 'within', 'url', 'specified', 'position']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_doc', '=', '\'<a href=""http://example.com/"">HTML<i>w3resource.com</i></a>\'', 'soup', '=', 'BeautifulSoup', '(', 'html_doc', ',', '""lxml""', ')', 'tag', '=', 'soup', '.', 'a', 'print', '(', '""Original Markup:""', ')', 'print', '(', 'tag', '.', 'contents', ')', 'tag', '.', 'insert', '(', '2', ',', '""CSS""', ')', 'print', '(', '""\\nNew url after inserting the text:""', ')', 'print', '(', 'tag', '.', 'contents', ')']"
847,"['write', 'python', 'program', 'convert', 'given', 'list', 'string', 'character', 'single', 'list', 'character']","['def', 'l_strs_to_l_chars', '(', 'lst', ')', ':', 'result', '=', '[', 'i', 'for', 'element', 'in', 'lst', 'for', 'i', 'in', 'element', ']', 'return', 'result', 'colors', '=', '[', '""red""', ',', '""white""', ',', '""a""', ',', '""b""', ',', '""black""', ',', '""f""', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'colors', ')', 'print', '(', '""\\nConvert the said list of strings and characters to a single list of characters:""', ')', 'print', '(', 'l_strs_to_l_chars', '(', 'colors', ')', ')']"
848,"['write', 'python', 'program', 'perform', 'deep', 'flattens', 'list']","['from', 'collections', '.', 'abc', 'import', 'Iterable', 'def', 'deep_flatten', '(', 'lst', ')', ':', 'return', '(', '[', 'a', 'for', 'i', 'in', 'lst', 'for', 'a', 'in', 'deep_flatten', '(', 'i', ')', ']', 'if', 'isinstance', '(', 'lst', ',', 'Iterable', ')', 'else', '[', 'lst', ']', ')', 'nums', '=', '[', '1', ',', '[', '2', ']', ',', '[', '[', '3', ']', ',', '[', '4', ']', ',', '5', ']', ',', '6', ']', 'print', '(', '""Original list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', ')', 'print', '(', '""Deep flatten the said list:""', ')', 'print', '(', 'deep_flatten', '(', 'nums', ')', ')', 'nums', '=', '[', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ']', ']', ',', '6', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', ')', 'print', '(', '""Deep flatten the said list:""', ')', 'print', '(', 'deep_flatten', '(', 'nums', ')', ')']"
849,"['write', 'python', 'program', 'insert', 'given', 'string', 'beginning', 'item', 'list']","['num', '=', '[', '1', ',', '2', ',', '3', ',', '4', ']', 'print', '(', '[', ""'emp{0}'"", '.', 'format', '(', 'i', ')', 'for', 'i', 'in', 'num', ']', ')']"
850,"['write', 'python', 'program', 'get', 'datetime', 'timestamp', 'representation', 'current', 'datetime']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Datetime representation:""', ')', 'print', '(', 'a', '.', 'datetime', ')', 'b', '=', 'a', '.', 'timestamp', 'print', '(', '""\\nTimestamp representation:""', ')', 'print', '(', 'b', ')']"
851,"['rite', 'numpy', 'program', 'create', 'null', 'vector', 'size', 'update', 'sixth', 'value']",[]
852,"['write', 'python', 'program', 'concatenate', 'consecutive', 'number', 'given', 'string']","['import', 're', 'txt', '=', '""Enter at 1 20 Kearny Street. The security desk can direct you to floor 1 6. Please have your identification ready.""', 'print', '(', '""Original string:""', ')', 'print', '(', 'txt', ')', 'new_txt', '=', 're', '.', 'sub', '(', 'r""(?<=\\d)\\s(?=\\d)""', ',', ""''"", ',', 'txt', ')', 'print', '(', ""'\\nAfter concatenating the consecutive numbers in the said string:'"", ')', 'print', '(', 'new_txt', ')']"
853,"['write', 'python', 'program', 'sort', 'unsorted', 'number', 'using', 'odd', 'even', 'transposition', 'parallel', 'sort']",[]
854,"['write', 'numpy', 'program', 'rearrange', 'column', 'given', 'numpy', 'array', 'using', 'given', 'index', 'position']","['import', 'numpy', 'as', 'np', 'array1', '=', 'np', '.', 'array', '(', '[', '[', '11', ',', '22', ',', '33', ',', '44', ',', '55', ']', ',', '[', '66', ',', '77', ',', '88', ',', '99', ',', '100', ']', ']', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'array1', ')', 'i', '=', '[', '1', ',', '3', ',', '0', ',', '4', ',', '2', ']', 'result', '=', 'array1', '[', ':', ',', 'i', ']', 'print', '(', '""New array:""', ')', 'print', '(', 'result', ')']"
855,"['write', 'python', 'program', 'remove', 'specified', 'dictionary', 'given', 'list']","['def', 'remove_dictionary', '(', 'colors', ',', 'r_id', ')', ':', 'colors', '[', ':', ']', '=', '[', 'd', 'for', 'd', 'in', 'colors', 'if', 'd', '.', 'get', '(', ""'id'"", ')', '!=', 'r_id', ']', 'return', 'colors', 'colors', '=', '[', '{', '""id""', ':', '""#FF0000""', ',', '""color""', ':', '""Red""', '}', ',', '{', '""id""', ':', '""#800000""', ',', '""color""', ':', '""Maroon""', '}', ',', '{', '""id""', ':', '""#FFFF00""', ',', '""color""', ':', '""Yellow""', '}', ',', '{', '""id""', ':', '""#808000""', ',', '""color""', ':', '""Olive""', '}', ']', 'print', '(', ""'Original list of dictionary:'"", ')', 'print', '(', 'colors', ')', 'r_id', '=', '""#FF0000""', 'print', '(', '""\\nRemove id""', ',', 'r_id', ',', '""from the said list of dictionary:""', ')', 'print', '(', 'remove_dictionary', '(', 'colors', ',', 'r_id', ')', ')']"
856,"['write', 'panda', 'program', 'extract', 'punctuation', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', '10', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'c0001.'"", ',', ""'c000,2'"", ',', ""'c0003'"", ',', ""'c0003#'"", ',', ""'c0004,'"", ']', ',', ""'year'"", ':', '[', ""'year 1800'"", ',', ""'year 1700'"", ',', ""'year 2300'"", ',', ""'year 1900'"", ',', ""'year 2200'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'find_punctuations', '(', 'text', ')', ':', 'result', '=', 're', '.', 'findall', '(', 'r\'[!""\\$%&\\\'()*+,\\-.\\/:;=#@?\\[\\\\\\]^_`{|}~]*\'', ',', 'text', ')', 'string', '=', '""""', '.', 'join', '(', 'result', ')', 'return', 'list', '(', 'string', ')', 'df', '[', ""'nonalpha'"", ']', '=', 'df', '[', ""'company_code'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'find_punctuations', '(', 'x', ')', ')', 'print', '(', '""\\nExtracting punctuation:""', ')', 'print', '(', 'df', ')']"
857,"['write', 'numpy', 'program', 'extract', 'element', 'second', 'row', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arra_data', '=', 'np', '.', 'arange', '(', '0', ',', '16', ')', '.', 'reshape', '(', '(', '4', ',', '4', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arra_data', ')', 'print', '(', '""\\nExtracted data: Second row""', ')', 'print', '(', 'arra_data', '[', '1', ',', ':', ']', ')']"
858,"['write', 'numpy', 'program', 'convert', 'cartesian', 'coordinate', 'polar', 'coordinate', 'random', 'matrix', 'representing', 'cartesian', 'coordinate']","['import', 'numpy', 'as', 'np', 'z', '=', 'np', '.', 'random', '.', 'random', '(', '(', '10', ',', '2', ')', ')', 'x', ',', 'y', '=', 'z', '[', ':', ',', '0', ']', ',', 'z', '[', ':', ',', '1', ']', 'r', '=', 'np', '.', 'sqrt', '(', 'x', '**', '2', '+', 'y', '**', '2', ')', 't', '=', 'np', '.', 'arctan2', '(', 'y', ',', 'x', ')', 'print', '(', 'r', ')', 'print', '(', 't', ')']"
859,"['create', 'dataframe', 'ten', 'row', 'four', 'column', 'random', 'value', 'write', 'panda', 'program', 'highlight', 'maximum', 'value', 'last', 'two', 'column']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '24', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', 'np', '.', 'linspace', '(', '1', ',', '10', ',', '10', ')', '}', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df', ',', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', ',', 'columns', '=', 'list', '(', ""'BCDE'"", ')', ')', ']', ',', 'axis', '=', '1', ')', 'df', '.', 'iloc', '[', '0', ',', '2', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '3', ',', '3', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '4', ',', '1', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '9', ',', '4', ']', '=', 'np', '.', 'nan', 'print', '(', '""Original array:""', ')', 'print', '(', 'df', ')', 'def', 'highlight_max', '(', 's', ')', ':', ""'''\r    highlight the maximum in a Series green.\r    '''"", 'is_max', '=', 's', '==', 's', '.', 'max', '(', ')', 'return', '[', ""'background-color: green'"", 'if', 'v', 'else', ""''"", 'for', 'v', 'in', 'is_max', ']', 'print', '(', '""\\nHighlight the maximum value in last two columns:""', ')', 'df', '.', 'style', '.', 'apply', '(', 'highlight_max', ',', 'subset', '=', 'pd', '.', 'IndexSlice', '[', ':', ',', '[', ""'D'"", ',', ""'E'"", ']', ']', ')']"
860,"['write', 'python', 'program', 'check', 'item', 'given', 'list', 'string', 'equal', 'given', 'string']","['color1', '=', '[', '""green""', ',', '""orange""', ',', '""black""', ',', '""white""', ']', 'color2', '=', '[', '""green""', ',', '""green""', ',', '""green""', ',', '""green""', ']', 'print', '(', 'all', '(', 'c', '==', ""'blue'"", 'for', 'c', 'in', 'color1', ')', ')', 'print', '(', 'all', '(', 'c', '==', ""'green'"", 'for', 'c', 'in', 'color2', ')', ')']"
861,"['write', 'python', 'program', 'convert', 'value', 'rgb', 'component', 'hexadecimal', 'color', 'code']","['def', 'rgb_to_hex', '(', 'r', ',', 'g', ',', 'b', ')', ':', 'return', '(', ""'{:02X}'"", '*', '3', ')', '.', 'format', '(', 'r', ',', 'g', ',', 'b', ')', 'print', '(', 'rgb_to_hex', '(', '255', ',', '165', ',', '1', ')', ')', 'print', '(', 'rgb_to_hex', '(', '255', ',', '255', ',', '255', ')', ')', 'print', '(', 'rgb_to_hex', '(', '0', ',', '0', ',', '0', ')', ')', 'print', '(', 'rgb_to_hex', '(', '0', ',', '0', ',', '128', ')', ')', 'print', '(', 'rgb_to_hex', '(', '192', ',', '192', ',', '192', ')', ')']"
862,"['write', 'numpy', 'program', 'compute', 'determinant', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'a', ')', 'result', '=', 'np', '.', 'linalg', '.', 'det', '(', 'a', ')', 'print', '(', '""Determinant of the said array:""', ')', 'print', '(', 'result', ')']"
863,"['write', 'python', 'program', 'find', 'first', 'occurrence', 'given', 'number', 'sorted', 'list', 'using', 'binary', 'search', 'bisect']","['from', 'bisect', 'import', 'bisect_left', 'def', 'Binary_Search', '(', 'a', ',', 'x', ')', ':', 'i', '=', 'bisect_left', '(', 'a', ',', 'x', ')', 'if', 'i', '!=', 'len', '(', 'a', ')', 'and', 'a', '[', 'i', ']', '==', 'x', ':', 'return', 'i', 'else', ':', 'return', '-', '1', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '8', ',', '8', ',', '10', ',', '12', ']', 'x', '=', '8', 'num_position', '=', 'Binary_Search', '(', 'nums', ',', 'x', ')', 'if', 'num_position', '==', '-', '1', ':', 'print', '(', 'x', ',', '""is not present.""', ')', 'else', ':', 'print', '(', '""First occurrence of""', ',', 'x', ',', '""is present at index""', ',', 'num_position', ')']"
864,"['write', 'python', 'program', 'get', 'frequency', 'element', 'list']","['import', 'collections', 'my_list', '=', '[', '10', ',', '10', ',', '10', ',', '10', ',', '20', ',', '20', ',', '20', ',', '20', ',', '40', ',', '40', ',', '50', ',', '50', ',', '30', ']', 'print', '(', '""Original List : ""', ',', 'my_list', ')', 'ctr', '=', 'collections', '.', 'Counter', '(', 'my_list', ')', 'print', '(', '""Frequency of the elements in the List : ""', ',', 'ctr', ')']"
865,"['write', 'panda', 'program', 'count', 'number', 'missing', 'value', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', 'np', '.', 'nan', ',', '70002', ',', '70004', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', 'np', '.', 'nan', ',', '65.26', ',', '110.5', ',', '948.5', ',', 'np', '.', 'nan', ',', '5760', ',', '1983.43', ',', 'np', '.', 'nan', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_amt'"", ':', '[', '10.5', ',', '20.65', ',', 'np', '.', 'nan', ',', '11.5', ',', '98.5', ',', 'np', '.', 'nan', ',', '57', ',', '19.43', ',', 'np', '.', 'nan', ',', '25.45', ',', '75.29', ',', '35.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3002', ',', '3001', ',', '3001', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5003', ',', '5001', ',', 'np', '.', 'nan', ',', '5002', ',', '5001', ',', '5001', ',', 'np', '.', 'nan', ',', '5003', ',', '5002', ',', '5003', ',', 'np', '.', 'nan', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nMissing values in purch_amt column:""', ')', 'result', '=', 'df', '[', ""'purch_amt'"", ']', '.', 'value_counts', '(', 'dropna', '=', 'False', ')', '.', 'loc', '[', 'np', '.', 'nan', ']', 'print', '(', 'result', ')']"
866,"['rite', 'python', 'program', 'display', 'current', 'date', 'time']","['import', 'datetime', 'now', '=', 'datetime', '.', 'datetime', '.', 'now', '(', ')', 'print', '(', '""Current date and time : ""', ')', 'print', '(', 'now', '.', 'strftime', '(', '""%Y-%m-%d %H:%M:%S""', ')', ')']"
867,"['write', 'numpy', 'program', 'test', 'elementwise', 'given', 'array', 'finiteness', 'infinity', 'number', 'positive', 'negative', 'infinity', 'nan', 'nat', 'time', 'negative', 'infinity', 'positive', 'infinity']","['import', 'numpy', 'as', 'np', 'print', '(', '""\\nTest element-wise for finiteness (not infinity or not Not a Number):""', ')', 'print', '(', 'np', '.', 'isfinite', '(', '1', ')', ')', 'print', '(', 'np', '.', 'isfinite', '(', '0', ')', ')', 'print', '(', 'np', '.', 'isfinite', '(', 'np', '.', 'nan', ')', ')', 'print', '(', '""\\nTest element-wise for positive or negative infinity:""', ')', 'print', '(', 'np', '.', 'isinf', '(', 'np', '.', 'inf', ')', ')', 'print', '(', 'np', '.', 'isinf', '(', 'np', '.', 'nan', ')', ')', 'print', '(', 'np', '.', 'isinf', '(', 'np', '.', 'NINF', ')', ')', 'print', '(', '""Test element-wise for NaN:""', ')', 'print', '(', 'np', '.', 'isnan', '(', '[', 'np', '.', 'log', '(', '-', '1.', ')', ',', '1.', ',', 'np', '.', 'log', '(', '0', ')', ']', ')', ')', 'print', '(', '""Test element-wise for NaT (not a time):""', ')', 'print', '(', 'np', '.', 'isnat', '(', 'np', '.', 'array', '(', '[', '""NaT""', ',', '""2016-01-01""', ']', ',', 'dtype', '=', '""datetime64[ns]""', ')', ')', ')', 'print', '(', '""Test element-wise for negative infinity:""', ')', 'x', '=', 'np', '.', 'array', '(', '[', '-', 'np', '.', 'inf', ',', '0.', ',', 'np', '.', 'inf', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '2', ',', '2', ',', '2', ']', ')', 'print', '(', 'np', '.', 'isneginf', '(', 'x', ',', 'y', ')', ')', 'print', '(', '""Test element-wise for positive infinity:""', ')', 'x', '=', 'np', '.', 'array', '(', '[', '-', 'np', '.', 'inf', ',', '0.', ',', 'np', '.', 'inf', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '2', ',', '2', ',', '2', ']', ')', 'print', '(', 'np', '.', 'isposinf', '(', 'x', ',', 'y', ')', ')']"
868,"['write', 'numpy', 'program', 'sum', 'compute', 'product', 'numpy', 'array', 'element']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '10', ',', '20', ',', '30', ']', ',', 'float', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Sum of the array elements:""', ')', 'print', '(', 'x', '.', 'sum', '(', ')', ')', 'print', '(', '""Product of the array elements:""', ')', 'print', '(', 'x', '.', 'prod', '(', ')', ')']"
869,"['write', 'python', 'program', 'interleave', 'multiple', 'given', 'list', 'different', 'length', 'using', 'itertools', 'module']","['from', 'itertools', 'import', 'chain', ',', 'zip_longest', 'def', 'interleave_diff_len_lists', '(', 'list1', ',', 'list2', ',', 'list3', ',', 'list4', ')', ':', 'return', '[', 'x', 'for', 'x', 'in', 'chain', '(', '*', 'zip_longest', '(', 'list1', ',', 'list2', ',', 'list3', ',', 'list4', ')', ')', 'if', 'x', 'is', 'not', 'None', ']', 'nums1', '=', '[', '2', ',', '4', ',', '7', ',', '0', ',', '5', ',', '8', ']', 'nums2', '=', '[', '2', ',', '5', ',', '8', ']', 'nums3', '=', '[', '0', ',', '1', ']', 'nums4', '=', '[', '3', ',', '3', ',', '-', '1', ',', '7', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', 'nums3', ')', 'print', '(', 'nums4', ')', 'print', '(', '""\\nInterleave said lists of different lengths:""', ')', 'print', '(', 'interleave_diff_len_lists', '(', 'nums1', ',', 'nums2', ',', 'nums3', ',', 'nums4', ')', ')']"
870,"['write', 'python', 'program', 'find', 'maximum', 'value', 'given', 'heterogeneous', 'list', 'using', 'lambda']","['def', 'max_val', '(', 'list_val', ')', ':', 'max_val', '=', 'max', '(', 'list_val', ',', 'key', '=', 'lambda', 'i', ':', '(', 'isinstance', '(', 'i', ',', 'int', ')', ',', 'i', ')', ')', 'return', '(', 'max_val', ')', 'list_val', '=', '[', ""'Python'"", ',', '3', ',', '2', ',', '4', ',', '5', ',', ""'version'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list_val', ')', 'print', '(', '""\\nMaximum values in the said list using lambda:""', ')', 'print', '(', 'max_val', '(', 'list_val', ')', ')']"
871,"['write', 'numpy', 'program', 'find', 'set', 'exclusiveor', 'two', 'array', 'set', 'exclusiveor', 'return', 'sorted', 'unique', 'value', 'one', 'input', 'array']","['import', 'numpy', 'as', 'np', 'array1', '=', 'np', '.', 'array', '(', '[', '0', ',', '10', ',', '20', ',', '40', ',', '60', ',', '80', ']', ')', 'print', '(', '""Array1: ""', ',', 'array1', ')', 'array2', '=', '[', '10', ',', '30', ',', '40', ',', '50', ',', '70', ']', 'print', '(', '""Array2: ""', ',', 'array2', ')', 'print', '(', '""Unique values that are in only one (not both) of the input arrays:""', ')', 'print', '(', 'np', '.', 'setxor1d', '(', 'array1', ',', 'array2', ')', ')']"
872,"['write', 'numpy', 'program', 'stack', 'array', 'sequence', 'vertically']","['import', 'numpy', 'as', 'np', 'print', '(', '""\\nOriginal arrays:""', ')', 'x', '=', 'np', '.', 'arange', '(', '9', ')', '.', 'reshape', '(', '3', ',', '3', ')', 'y', '=', 'x', '*', '3', 'print', '(', '""Array-1""', ')', 'print', '(', 'x', ')', 'print', '(', '""Array-2""', ')', 'print', '(', 'y', ')', 'new_array', '=', 'np', '.', 'vstack', '(', '(', 'x', ',', 'y', ')', ')', 'print', '(', '""\\nStack arrays in sequence vertically:""', ')', 'print', '(', 'new_array', ')']"
873,"['write', 'python', 'program', 'get', 'n', 'maximum', 'element', 'given', 'list', 'number']","['def', 'max_n_nums', '(', 'nums', ',', 'n', '=', '1', ')', ':', 'return', 'sorted', '(', 'nums', ',', 'reverse', '=', 'True', ')', '[', ':', 'n', ']', 'nums', '=', '[', '1', ',', '2', ',', '3', ']', 'print', '(', '""Original list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Maximum values of the said list:""', ',', 'max_n_nums', '(', 'nums', ')', ')', 'nums', '=', '[', '1', ',', '2', ',', '3', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Two maximum values of the said list:""', ',', 'max_n_nums', '(', 'nums', ',', '2', ')', ')', 'nums', '=', '[', '-', '2', ',', '-', '3', ',', '-', '1', ',', '-', '2', ',', '-', '4', ',', '0', ',', '-', '5', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Threee maximum values of the said list:""', ',', 'max_n_nums', '(', 'nums', ',', '3', ')', ')', 'nums', '=', '[', '2.2', ',', '2', ',', '3.2', ',', '4.5', ',', '4.6', ',', '5.2', ',', '2.9', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Two maximum values of the said list:""', ',', 'max_n_nums', '(', 'nums', ',', '2', ')', ')']"
874,"['write', 'numpy', 'program', 'test', 'elementwise', 'positive', 'negative', 'infinity']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '1', ',', '0', ',', 'np', '.', 'nan', ',', 'np', '.', 'inf', ']', ')', 'print', '(', '""Original array""', ')', 'print', '(', 'a', ')', 'print', '(', '""Test element-wise for positive or negative infinity:""', ')', 'print', '(', 'np', '.', 'isinf', '(', 'a', ')', ')']"
875,"['write', 'python', 'program', 'get', 'difference', 'given', 'number', 'number', 'greater', 'return', 'double', 'absolute', 'difference']","['def', 'difference', '(', 'n', ')', ':', 'if', 'n', '<=', '17', ':', 'return', '17', '-', 'n', 'else', ':', 'return', '(', 'n', '-', '17', ')', '*', '2', 'print', '(', 'difference', '(', '22', ')', ')', 'print', '(', 'difference', '(', '14', ')', ')']"
876,"['write', 'numpy', 'program', 'remove', 'row', 'numpy', 'array', 'contain', 'nonnumeric', 'value']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ',', 'np', '.', 'nan', ']', ',', '[', '7', ',', '8', ',', '9', ']', ',', '[', 'True', ',', 'False', ',', 'True', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Remove all non-numeric elements of the said array""', ')', 'print', '(', 'x', '[', '~', 'np', '.', 'isnan', '(', 'x', ')', '.', 'any', '(', 'axis', '=', '1', ')', ']', ')']"
877,"['write', 'panda', 'program', 'find', 'index', 'row', 'specified', 'value', 'given', 'column', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_of_birth'"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', '}', ',', 'index', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', ')', 'print', '(', '""Original DataFrame with single index:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nIndex of rows where specified column matches certain value:""', ')', 'print', '(', 'df', '.', 'index', '[', 'df', '[', ""'school_code'"", ']', '==', ""'s001'"", ']', '.', 'tolist', '(', ')', ')']"
878,"['write', 'python', 'program', 'calculate', 'arc', 'length', 'angle']","['def', 'arclength', '(', ')', ':', 'pi', '=', '22', '/', '7', 'diameter', '=', 'float', '(', 'input', '(', ""'Diameter of circle: '"", ')', ')', 'angle', '=', 'float', '(', 'input', '(', ""'angle measure: '"", ')', ')', 'if', 'angle', '>=', '360', ':', 'print', '(', '""Angle is not possible""', ')', 'return', 'arc_length', '=', '(', 'pi', '*', 'diameter', ')', '*', '(', 'angle', '/', '360', ')', 'print', '(', '""Arc Length is: ""', ',', 'arc_length', ')', 'arclength', '(', ')']"
879,"['write', 'numpy', 'program', 'create', 'cartesian', 'product', 'two', 'array', 'single', 'array', 'point']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '4', ',', '5', ']', ')', 'result', '=', 'np', '.', 'transpose', '(', '[', 'np', '.', 'tile', '(', 'x', ',', 'len', '(', 'y', ')', ')', ',', 'np', '.', 'repeat', '(', 'y', ',', 'len', '(', 'x', ')', ')', ']', ')', 'print', '(', 'result', ')']"
880,"['write', 'numpy', 'program', 'find', 'missing', 'data', 'given', 'array']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '[', '3', ',', '2', ',', 'np', '.', 'nan', ',', '1', ']', ',', '[', '10', ',', '12', ',', '10', ',', '9', ']', ',', '[', '5', ',', 'np', '.', 'nan', ',', '1', ',', 'np', '.', 'nan', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nFind the missing data of the said array:""', ')', 'print', '(', 'np', '.', 'isnan', '(', 'nums', ')', ')']"
881,"['write', 'python', 'program', 'add', 'number', 'element', 'deque', 'object', 'iterable', 'object']","['import', 'collections', 'even_nums', '=', '(', '2', ',', '4', ',', '6', ',', '8', ',', '10', ')', 'even_deque', '=', 'collections', '.', 'deque', '(', 'even_nums', ')', 'print', '(', '""Even numbers:""', ')', 'print', '(', 'even_deque', ')', 'more_even_nums', '=', '(', '12', ',', '14', ',', '16', ',', '18', ',', '20', ')', 'even_deque', '.', 'extend', '(', 'more_even_nums', ')', 'print', '(', '""More even numbers:""', ')', 'print', '(', 'even_deque', ')']"
882,"['write', 'python', 'program', 'print', 'content', 'element', 'contain', 'specified', 'string', 'given', 'web', 'page']","['import', 'requests', 'import', 're', 'from', 'bs4', 'import', 'BeautifulSoup', 'url', '=', ""'https://www.python.org/'"", 'reqs', '=', 'requests', '.', 'get', '(', 'url', ')', 'soup', '=', 'BeautifulSoup', '(', 'reqs', '.', 'text', ',', ""'lxml'"", ')', 'print', '(', '""\\nContent of elements that contain \'Python\' string:""', ')', 'str1', '=', 'soup', '.', 'find_all', '(', 'string', '=', 're', '.', 'compile', '(', ""'Python'"", ')', ')', 'for', 'txt', 'in', 'str1', ':', 'print', '(', '"" ""', '.', 'join', '(', 'txt', '.', 'split', '(', ')', ')', ')']"
883,"['write', 'python', 'program', 'get', 'array', 'buffer', 'information']","['from', 'array', 'import', 'array', 'a', '=', 'array', '(', '""I""', ',', '(', '12', ',', '25', ')', ')', 'print', '(', '""Array buffer start address in memory and number of elements.""', ')', 'print', '(', 'a', '.', 'buffer_info', '(', ')', ')']"
884,"['write', 'python', 'program', 'count', 'number', 'line', 'given', 'csv', 'file', 'use', 'csvreader']","['import', 'csv', 'reader', '=', 'csv', '.', 'reader', '(', 'open', '(', '""employees.csv""', ')', ')', 'no_lines', '=', 'len', '(', 'list', '(', 'reader', ')', ')', 'print', '(', 'no_lines', ')']"
885,"['write', 'python', 'program', 'sort', 'oddeven', 'sort', 'oddeven', 'transposition', 'sort']","['def', 'odd_even_transposition', '(', 'arr', ':', 'list', ')', '->', 'list', ':', 'arr_size', '=', 'len', '(', 'arr', ')', 'for', '_', 'in', 'range', '(', 'arr_size', ')', ':', 'for', 'i', 'in', 'range', '(', '_', '%', '2', ',', 'arr_size', '-', '1', ',', '2', ')', ':', 'if', 'arr', '[', 'i', '+', '1', ']', '<', 'arr', '[', 'i', ']', ':', 'arr', '[', 'i', ']', ',', 'arr', '[', 'i', '+', '1', ']', '=', 'arr', '[', 'i', '+', '1', ']', ',', 'arr', '[', 'i', ']', 'return', 'arr', 'nums', '=', '[', '4', ',', '3', ',', '5', ',', '1', ',', '2', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'odd_even_transposition', '(', 'nums', ')', 'print', '(', '""Sorted order is:""', ',', 'nums', ')', 'nums', '=', '[', '5', ',', '9', ',', '10', ',', '3', ',', '-', '4', ',', '5', ',', '178', ',', '92', ',', '46', ',', '-', '18', ',', '0', ',', '7', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'odd_even_transposition', '(', 'nums', ')', 'print', '(', '""Sorted order is:""', ',', 'nums', ')']"
886,"['write', 'python', 'program', 'display', 'number', 'left', 'right', 'center', 'aligned', 'width']","['x', '=', '22', 'print', '(', '""\\nOriginal Number: ""', ',', 'x', ')', 'print', '(', '""Left aligned (width 10)   :""', '+', '""{:< 10d}""', '.', 'format', '(', 'x', ')', ')', ';', 'print', '(', '""Right aligned (width 10)  :""', '+', '""{:10d}""', '.', 'format', '(', 'x', ')', ')', ';', 'print', '(', '""Center aligned (width 10) :""', '+', '""{:^10d}""', '.', 'format', '(', 'x', ')', ')', ';', 'print', '(', ')']"
887,"['write', 'python', 'program', 'determine', 'whether', 'variable', 'defined']","['try', ':', 'x', '=', '1', 'except', 'NameError', ':', 'print', '(', '""Variable is not defined....!""', ')', 'else', ':', 'print', '(', '""Variable is defined.""', ')', 'try', ':', 'y', 'except', 'NameError', ':', 'print', '(', '""Variable is not defined....!""', ')', 'else', ':', 'print', '(', '""Variable is defined.""', ')']"
888,"['write', 'numpy', 'program', 'replace', 'negative', 'value', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '-', '1', ',', '-', '4', ',', '0', ',', '2', ',', '3', ',', '4', ',', '5', ',', '-', '6', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Replace the negative values of the said array with 0:""', ')', 'x', '[', 'x', '<', '0', ']', '=', '0', 'print', '(', 'x', ')']"
889,"['write', 'panda', 'program', 'create', 'stacked', 'bar', 'plot', 'opening', 'closing', 'stock', 'price', 'alphabet', 'inc', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'df2', '=', 'df1', '[', '[', ""'Date'"", ',', ""'Open'"", ',', ""'Close'"", ']', ']', 'df3', '=', 'df2', '.', 'set_index', '(', ""'Date'"", ')', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '20', ',', '20', ')', ')', 'df3', '.', 'plot', '.', 'bar', '(', 'stacked', '=', 'True', ')', ';', 'plt', '.', 'suptitle', '(', ""'Opening/Closing stock prices Alphabet Inc.,\\n01-04-2020 to 30-04-2020'"", ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'show', '(', ')']"
890,"['write', 'python', 'program', 'find', 'missing', 'additional', 'value', 'two', 'list']","['list1', '=', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", ',', ""'e'"", ',', ""'f'"", ']', 'list2', '=', '[', ""'d'"", ',', ""'e'"", ',', ""'f'"", ',', ""'g'"", ',', ""'h'"", ']', 'print', '(', ""'Missing values in second list: '"", ',', ""','"", '.', 'join', '(', 'set', '(', 'list1', ')', '.', 'difference', '(', 'list2', ')', ')', ')', 'print', '(', ""'Additional values in second list: '"", ',', ""','"", '.', 'join', '(', 'set', '(', 'list2', ')', '.', 'difference', '(', 'list1', ')', ')', ')']"
891,"['rite', 'python', 'program', 'remove', 'space', 'given', 'string']","['def', 'remove_spaces', '(', 'str1', ')', ':', 'str1', '=', 'str1', '.', 'replace', '(', ""' '"", ',', ""''"", ')', 'return', 'str1', 'print', '(', 'remove_spaces', '(', '""w 3 res ou r ce""', ')', ')', 'print', '(', 'remove_spaces', '(', '""a b c""', ')', ')']"
892,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'region', 'wise', 'television', 'home', 'theater', 'sold']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\SaleData.xlsx'"", ')', 'table', '=', 'pd', '.', 'pivot_table', '(', 'df', ',', 'index', '=', '[', '""Region""', ',', '""Item""', ']', ',', 'values', '=', '""Units""', ')', 'print', '(', 'table', '.', 'query', '(', '\'Item == [""Television"",""Home Theater""]\'', ')', ')']"
893,"['write', 'python', 'program', 'update', 'value', 'specific', 'column', 'given', 'sqlite', 'table']","['import', 'sqlite3', 'from', 'sqlite3', 'import', 'Error', 'def', 'sql_connection', '(', ')', ':', 'try', ':', 'conn', '=', 'sqlite3', '.', 'connect', '(', ""'mydatabase.db'"", ')', 'return', 'conn', 'except', 'Error', ':', 'print', '(', 'Error', ')', 'def', 'sql_table', '(', 'conn', ')', ':', 'cursorObj', '=', 'conn', '.', 'cursor', '(', ')', 'cursorObj', '.', 'execute', '(', '""CREATE TABLE salesman(salesman_id n(5), name char(30), city char(35), commission decimal(7,2));""', ')', 'cursorObj', '.', 'executescript', '(', '""""""\r    INSERT INTO salesman VALUES(5001,\'James Hoog\', \'New York\', 0.15);\r    INSERT INTO salesman VALUES(5002,\'Nail Knite\', \'Paris\', 0.25);\r    INSERT INTO salesman VALUES(5003,\'Pit Alex\', \'London\', 0.15);\r    INSERT INTO salesman VALUES(5004,\'Mc Lyon\', \'Paris\', 0.35);\r    INSERT INTO salesman VALUES(5005,\'Paul Adam\', \'Rome\', 0.45);\r    """"""', ')', 'cursorObj', '.', 'execute', '(', '""SELECT * FROM salesman""', ')', 'rows', '=', 'cursorObj', '.', 'fetchall', '(', ')', 'print', '(', '""Agent details:""', ')', 'for', 'row', 'in', 'rows', ':', 'print', '(', 'row', ')', 'print', '(', '""\\nUpdate all commision to .55:""', ')', 'sql_update_query', '=', '""""""Update salesman set commission = .55""""""', 'cursorObj', '.', 'execute', '(', 'sql_update_query', ')', 'conn', '.', 'commit', '(', ')', 'print', '(', '""Record Updated successfully ""', ')', 'cursorObj', '.', 'execute', '(', '""SELECT * FROM salesman""', ')', 'rows', '=', 'cursorObj', '.', 'fetchall', '(', ')', 'print', '(', '""\\nAfter updating Agent details:""', ')', 'for', 'row', 'in', 'rows', ':', 'print', '(', 'row', ')', 'sqllite_conn', '=', 'sql_connection', '(', ')', 'sql_table', '(', 'sqllite_conn', ')', 'if', '(', 'sqllite_conn', ')', ':', 'sqllite_conn', '.', 'close', '(', ')', 'print', '(', '""\\nThe SQLite connection is closed.""', ')']"
894,"['write', 'python', 'program', 'swap', 'two', 'variable']","['a', '=', '30', 'b', '=', '20', 'print', '(', '""\\nBefore swap a = %d and b = %d""', '%', '(', 'a', ',', 'b', ')', ')', 'a', ',', 'b', '=', 'b', ',', 'a', 'print', '(', '""\\nAfter swaping a = %d and b = %d""', '%', '(', 'a', ',', 'b', ')', ')', 'print', '(', ')']"
895,"['write', 'panda', 'program', 'join', 'two', 'dataframes', 'using', 'key', 'right', 'dataframe']","['import', 'pandas', 'as', 'pd', 'data1', '=', 'pd', '.', 'DataFrame', '(', '{', ""'key1'"", ':', '[', ""'K0'"", ',', ""'K0'"", ',', ""'K1'"", ',', ""'K2'"", ']', ',', ""'key2'"", ':', '[', ""'K0'"", ',', ""'K1'"", ',', ""'K0'"", ',', ""'K1'"", ']', ',', ""'P'"", ':', '[', ""'P0'"", ',', ""'P1'"", ',', ""'P2'"", ',', ""'P3'"", ']', ',', ""'Q'"", ':', '[', ""'Q0'"", ',', ""'Q1'"", ',', ""'Q2'"", ',', ""'Q3'"", ']', '}', ')', 'data2', '=', 'pd', '.', 'DataFrame', '(', '{', ""'key1'"", ':', '[', ""'K0'"", ',', ""'K1'"", ',', ""'K1'"", ',', ""'K2'"", ']', ',', ""'key2'"", ':', '[', ""'K0'"", ',', ""'K0'"", ',', ""'K0'"", ',', ""'K0'"", ']', ',', ""'R'"", ':', '[', ""'R0'"", ',', ""'R1'"", ',', ""'R2'"", ',', ""'R3'"", ']', ',', ""'S'"", ':', '[', ""'S0'"", ',', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ']', '}', ')', 'print', '(', '""Original DataFrames:""', ')', 'print', '(', 'data1', ')', 'print', '(', '""--------------------""', ')', 'print', '(', 'data2', ')', 'print', '(', '""\\nMerged Data (keys from data2):""', ')', 'merged_data', '=', 'pd', '.', 'merge', '(', 'data1', ',', 'data2', ',', 'how', '=', ""'right'"", ',', 'on', '=', '[', ""'key1'"", ',', ""'key2'"", ']', ')', 'print', '(', 'merged_data', ')', 'print', '(', '""\\nMerged Data (keys from data1):""', ')', 'merged_data', '=', 'pd', '.', 'merge', '(', 'data2', ',', 'data1', ',', 'how', '=', ""'right'"", ',', 'on', '=', '[', ""'key1'"", ',', ""'key2'"", ']', ')', 'print', '(', 'merged_data', ')']"
896,"['write', 'numpy', 'program', 'compute', 'inner', 'product', 'two', 'given', 'vector']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '4', ',', '5', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '7', ',', '10', ']', ')', 'print', '(', '""Original vectors:""', ')', 'print', '(', 'x', ')', 'print', '(', 'y', ')', 'print', '(', '""Inner product of said vectors:""', ')', 'print', '(', 'np', '.', 'dot', '(', 'x', ',', 'y', ')', ')']"
897,"['write', 'panda', 'program', 'calculate', 'thursday', 'two', 'given', 'day']","['import', 'pandas', 'as', 'pd', 'thursdays', '=', 'pd', '.', 'date_range', '(', ""'2020-01-01'"", ',', ""'2020-12-31'"", ',', 'freq', '=', '""W-THU""', ')', 'print', '(', '""All Thursdays between 2020-01-01 and 2020-12-31:\\n""', ')', 'print', '(', 'thursdays', '.', 'values', ')']"
898,"['write', 'python', 'program', 'print', 'permutation', 'given', 'string', 'including', 'duplicate']","['def', 'permute_string', '(', 'str', ')', ':', 'if', 'len', '(', 'str', ')', '==', '0', ':', 'return', '[', ""''"", ']', 'prev_list', '=', 'permute_string', '(', 'str', '[', '1', ':', 'len', '(', 'str', ')', ']', ')', 'next_list', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'prev_list', ')', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'len', '(', 'str', ')', ')', ':', 'new_str', '=', 'prev_list', '[', 'i', ']', '[', '0', ':', 'j', ']', '+', 'str', '[', '0', ']', '+', 'prev_list', '[', 'i', ']', '[', 'j', ':', 'len', '(', 'str', ')', '-', '1', ']', 'if', 'new_str', 'not', 'in', 'next_list', ':', 'next_list', '.', 'append', '(', 'new_str', ')', 'return', 'next_list', 'print', '(', 'permute_string', '(', ""'ABCD'"", ')', ')', ';']"
899,"['write', 'python', 'program', 'extract', 'value', 'given', 'dictionary', 'create', 'list', 'list', 'value']","['def', 'test', '(', 'dictt', ',', 'keys', ')', ':', 'return', '[', 'list', '(', 'd', '[', 'k', ']', 'for', 'k', 'in', 'keys', ')', 'for', 'd', 'in', 'dictt', ']', 'students', '=', '[', '{', ""'student_id'"", ':', '1', ',', ""'name'"", ':', ""'Jean Castro'"", ',', ""'class'"", ':', ""'V'"", '}', ',', '{', ""'student_id'"", ':', '2', ',', ""'name'"", ':', ""'Lula Powell'"", ',', ""'class'"", ':', ""'V'"", '}', ',', '{', ""'student_id'"", ':', '3', ',', ""'name'"", ':', ""'Brian Howell'"", ',', ""'class'"", ':', ""'VI'"", '}', ',', '{', ""'student_id'"", ':', '4', ',', ""'name'"", ':', ""'Lynne Foster'"", ',', ""'class'"", ':', ""'VI'"", '}', ',', '{', ""'student_id'"", ':', '5', ',', ""'name'"", ':', ""'Zachary Simon'"", ',', ""'class'"", ':', ""'VII'"", '}', ']', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'students', ')', 'print', '(', '""\\nExtract values from the said dictionarie and create a list of lists using those values:""', ')', 'print', '(', '""\\n""', ',', 'test', '(', 'students', ',', '(', ""'student_id'"", ',', ""'name'"", ',', ""'class'"", ')', ')', ')', 'print', '(', '""\\n""', ',', 'test', '(', 'students', ',', '(', ""'student_id'"", ',', ""'name'"", ')', ')', ')', 'print', '(', '""\\n""', ',', 'test', '(', 'students', ',', '(', ""'name'"", ',', ""'class'"", ')', ')', ')']"
900,"['write', 'numpy', 'program', 'calculate', 'sum', 'column', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'num', '=', 'np', '.', 'arange', '(', '36', ')', 'arr1', '=', 'np', '.', 'reshape', '(', 'num', ',', '[', '4', ',', '9', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arr1', ')', 'result', '=', 'arr1', '.', 'sum', '(', 'axis', '=', '0', ')', 'print', '(', '""\\nSum of all columns:""', ')', 'print', '(', 'result', ')']"
901,"['write', 'python', 'program', 'remove', 'n']","['def', 'remove_char', '(', 'str', ',', 'n', ')', ':', 'first_part', '=', 'str', '[', ':', 'n', ']', 'last_part', '=', 'str', '[', 'n', '+', '1', ':', ']', 'return', 'first_part', '+', 'last_part', 'print', '(', 'remove_char', '(', ""'Python'"", ',', '0', ')', ')', 'print', '(', 'remove_char', '(', ""'Python'"", ',', '3', ')', ')', 'print', '(', 'remove_char', '(', ""'Python'"", ',', '5', ')', ')']"
902,"['write', 'python', 'program', 'remove', 'duplicate', 'character', 'given', 'string']","['from', 'collections', 'import', 'OrderedDict', 'def', 'remove_duplicate', '(', 'str1', ')', ':', 'return', '""""', '.', 'join', '(', 'OrderedDict', '.', 'fromkeys', '(', 'str1', ')', ')', 'print', '(', 'remove_duplicate', '(', '""python exercises practice solution""', ')', ')', 'print', '(', 'remove_duplicate', '(', '""w3resource""', ')', ')']"
903,"['write', 'numpy', 'program', 'create', 'record', 'array', 'given', 'regular', 'array']","['import', 'numpy', 'as', 'np', 'arra1', '=', 'np', '.', 'array', '(', '[', '(', '""Yasemin Rayner""', ',', '88.5', ',', '90', ')', ',', '(', '""Ayaana Mcnamara""', ',', '87', ',', '99', ')', ',', '(', '""Jody Preece""', ',', '85.5', ',', '91', ')', ']', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'arra1', ')', 'print', '(', '""\\nRecord array;""', ')', 'result', '=', 'np', '.', 'core', '.', 'records', '.', 'fromarrays', '(', 'arra1', '.', 'T', ',', 'names', '=', ""'col1, col2, col3'"", ',', 'formats', '=', ""'S80, f8, i8'"", ')', 'print', '(', 'result', ')']"
904,"['write', 'python', 'program', 'create', 'ctime', 'formatted', 'representation', 'date', 'time', 'using', 'arrow', 'module']","['import', 'arrow', 'print', '(', '""Ctime formatted representation of the date and time:""', ')', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', '.', 'ctime', '(', ')', 'print', '(', 'a', ')']"
905,"['write', 'python', 'program', 'input', 'two', 'integer', 'single', 'line']","['print', '(', '""Input the value of x & y""', ')', 'x', ',', 'y', '=', 'map', '(', 'int', ',', 'input', '(', ')', '.', 'split', '(', ')', ')', 'print', '(', '""The value of x & y are: ""', ',', 'x', ',', 'y', ')']"
906,"['write', 'python', 'program', 'find', 'given', 'number', 'abundant']","['def', 'is_abundant', '(', 'n', ')', ':', 'fctr_sum', '=', 'sum', '(', '[', 'fctr', 'for', 'fctr', 'in', 'range', '(', '1', ',', 'n', ')', 'if', 'n', '%', 'fctr', '==', '0', ']', ')', 'return', 'fctr_sum', '>', 'n', 'print', '(', 'is_abundant', '(', '12', ')', ')', 'print', '(', 'is_abundant', '(', '13', ')', ')']"
907,"['write', 'numpy', 'program', 'create', 'random', 'vector', 'size', 'sort']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'random', '.', 'random', '(', '10', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'x', '.', 'sort', '(', ')', 'print', '(', '""Sorted array:""', ')', 'print', '(', 'x', ')']"
908,"['write', 'numpy', 'program', 'create', 'concatenate', 'two', 'given', 'array', 'shape']","['import', 'numpy', 'as', 'np', 'nums1', '=', 'np', '.', 'array', '(', '[', '[', '4.5', ',', '3.5', ']', ',', '[', '5.1', ',', '2.3', ']', ']', ')', 'nums2', '=', 'np', '.', 'array', '(', '[', '[', '1', ']', ',', '[', '2', ']', ']', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nConcatenating the said two arrays:""', ')', 'print', '(', 'np', '.', 'concatenate', '(', '(', 'nums1', ',', 'nums2', ')', ',', 'axis', '=', '1', ')', ')']"
909,"['write', 'python', 'program', 'find', 'first', 'repeated', 'character', 'given', 'string']","['def', 'first_repeated_char', '(', 'str1', ')', ':', 'for', 'index', ',', 'c', 'in', 'enumerate', '(', 'str1', ')', ':', 'if', 'str1', '[', ':', 'index', '+', '1', ']', '.', 'count', '(', 'c', ')', '>', '1', ':', 'return', 'c', 'return', '""None""', 'print', '(', 'first_repeated_char', '(', '""abcdabcd""', ')', ')', 'print', '(', 'first_repeated_char', '(', '""abcd""', ')', ')']"
910,"['write', 'python', 'program', 'find', 'longest', 'word']","['def', 'longest_word', '(', 'filename', ')', ':', 'with', 'open', '(', 'filename', ',', ""'r'"", ')', 'as', 'infile', ':', 'words', '=', 'infile', '.', 'read', '(', ')', '.', 'split', '(', ')', 'max_len', '=', 'len', '(', 'max', '(', 'words', ',', 'key', '=', 'len', ')', ')', 'return', '[', 'word', 'for', 'word', 'in', 'words', 'if', 'len', '(', 'word', ')', '==', 'max_len', ']', 'print', '(', 'longest_word', '(', ""'test.txt'"", ')', ')']"
911,"['write', 'python', 'program', 'display', 'detail', 'like', 'name', 'age', 'address', 'three', 'different', 'line']","['def', 'personal_details', '(', ')', ':', 'name', ',', 'age', '=', '""Simon""', ',', '19', 'address', '=', '""Bangalore, Karnataka, India""', 'print', '(', '""Name: {}\\nAge: {}\\nAddress: {}""', '.', 'format', '(', 'name', ',', 'age', ',', 'address', ')', ')', 'personal_details', '(', ')']"
912,"['write', 'python', 'program', 'count', 'frequency', 'consecutive', 'duplicate', 'element', 'given', 'list', 'number', 'use', 'itertools', 'module']","['from', 'itertools', 'import', 'groupby', 'def', 'count_same_pair', '(', 'nums', ')', ':', 'result', '=', '[', 'sum', '(', '1', 'for', '_', 'in', 'group', ')', 'for', '_', ',', 'group', 'in', 'groupby', '(', 'nums', ')', ']', 'return', 'result', 'nums', '=', '[', '1', ',', '1', ',', '2', ',', '2', ',', '2', ',', '4', ',', '4', ',', '4', ',', '5', ',', '5', ',', '5', ',', '5', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nFrequency of the consecutive duplicate elements:""', ')', 'print', '(', 'count_same_pair', '(', 'nums', ')', ')']"
913,"['write', 'python', 'program', 'get', 'daylight', 'saving', 'time', 'adjustment', 'using', 'arrow', 'module']","['import', 'arrow', 'print', '(', '""Daylight savings time adjustment:""', ')', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', '.', 'dst', '(', ')', 'print', '(', 'a', ')']"
914,"['write', 'panda', 'program', 'construct', 'series', 'using', 'multiindex', 'level', 'column', 'index']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'sales_arrays', '=', '[', '[', ""'sale1'"", ',', ""'sale1'"", ',', ""'sale2'"", ',', ""'sale2'"", ',', ""'sale3'"", ',', ""'sale3'"", ',', ""'sale4'"", ',', ""'sale4'"", ']', ',', '[', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ']', ']', 'sales_tuples', '=', 'list', '(', 'zip', '(', '*', 'sales_arrays', ')', ')', 'print', '(', '""Create a MultiIndex:""', ')', 'sales_index', '=', 'pd', '.', 'MultiIndex', '.', 'from_tuples', '(', 'sales_tuples', ',', 'names', '=', '[', ""'sale'"", ',', ""'city'"", ']', ')', 'print', '(', 'sales_tuples', ')', 'print', '(', '""\\nConstruct a series using the said MultiIndex levels: ""', ')', 's', '=', 'pd', '.', 'Series', '(', 'np', '.', 'random', '.', 'randn', '(', '8', ')', ',', 'index', '=', 'sales_index', ')', 'print', '(', 's', ')']"
915,"['write', 'python', 'program', 'write', 'dictionary', 'list', 'dictionary', 'given', 'csv', 'file', 'use', 'csvreader']","['import', 'csv', 'print', '(', '""Write dictionaries to a CSV file:""', ')', 'fw', '=', 'open', '(', '""test.csv""', ',', '""w""', ',', 'newline', '=', ""''"", ')', 'writer', '=', 'csv', '.', 'DictWriter', '(', 'fw', ',', 'fieldnames', '=', '[', '""Name""', ',', '""Class""', ']', ')', 'writer', '.', 'writeheader', '(', ')', 'writer', '.', 'writerow', '(', '{', '""Name""', ':', '""Jasmine Barrett""', ',', '""Class""', ':', '""V""', '}', ')', 'writer', '.', 'writerow', '(', '{', '""Name""', ':', '""Garry Watson""', ',', '""Class""', ':', '""V""', '}', ')', 'writer', '.', 'writerow', '(', '{', '""Name""', ':', '""Courtney Caldwell""', ',', '""Class""', ':', '""VI""', '}', ')', 'fw', '.', 'close', '(', ')', 'fr', '=', 'open', '(', '""test.csv""', ',', '""r""', ')', 'csv', '=', 'csv', '.', 'reader', '(', 'fr', ',', 'delimiter', '=', '"",""', ')', 'for', 'row', 'in', 'csv', ':', 'print', '(', 'row', ')', 'fr', '.', 'close', '(', ')']"
916,"['write', 'python', 'program', 'find', 'first', 'nonrepeating', 'character', 'given', 'string']","['def', 'first_non_repeating_character', '(', 'str1', ')', ':', 'char_order', '=', '[', ']', 'ctr', '=', '{', '}', 'for', 'c', 'in', 'str1', ':', 'if', 'c', 'in', 'ctr', ':', 'ctr', '[', 'c', ']', '+=', '1', 'else', ':', 'ctr', '[', 'c', ']', '=', '1', 'char_order', '.', 'append', '(', 'c', ')', 'for', 'c', 'in', 'char_order', ':', 'if', 'ctr', '[', 'c', ']', '==', '1', ':', 'return', 'c', 'return', 'None', 'print', '(', 'first_non_repeating_character', '(', ""'abcdef'"", ')', ')', 'print', '(', 'first_non_repeating_character', '(', ""'abcabcdef'"", ')', ')', 'print', '(', 'first_non_repeating_character', '(', ""'aabbcc'"", ')', ')']"
917,"['write', 'python', 'program', 'merge', 'one', 'dictionary', 'single', 'expression']","['import', 'collections', 'as', 'ct', 'def', 'merge_dictionaries', '(', 'color1', ',', 'color2', ')', ':', 'merged_dict', '=', 'dict', '(', 'ct', '.', 'ChainMap', '(', '{', '}', ',', 'color1', ',', 'color2', ')', ')', 'return', 'merged_dict', 'color1', '=', '{', '""R""', ':', '""Red""', ',', '""B""', ':', '""Black""', ',', '""P""', ':', '""Pink""', '}', 'color2', '=', '{', '""G""', ':', '""Green""', ',', '""W""', ':', '""White""', '}', 'print', '(', '""Original dictionaries:""', ')', 'print', '(', 'color1', ',', ""' '"", ',', 'color2', ')', 'print', '(', '""\\nMerged dictionary:""', ')', 'print', '(', 'merge_dictionaries', '(', 'color1', ',', 'color2', ')', ')', 'def', 'merge_dictionaries', '(', 'color1', ',', 'color2', ',', 'color3', ')', ':', 'merged_dict', '=', 'dict', '(', 'ct', '.', 'ChainMap', '(', '{', '}', ',', 'color1', ',', 'color2', ',', 'color3', ')', ')', 'return', 'merged_dict', 'color1', '=', '{', '""R""', ':', '""Red""', ',', '""B""', ':', '""Black""', ',', '""P""', ':', '""Pink""', '}', 'color2', '=', '{', '""G""', ':', '""Green""', ',', '""W""', ':', '""White""', '}', 'color3', '=', '{', '""O""', ':', '""Orange""', ',', '""W""', ':', '""White""', ',', '""B""', ':', '""Black""', '}', 'print', '(', '""\\nOriginal dictionaries:""', ')', 'print', '(', 'color1', ',', ""' '"", ',', 'color2', ',', 'color3', ')', 'print', '(', '""\\nMerged dictionary:""', ')', 'print', '(', 'merge_dictionaries', '(', 'color1', ',', 'color2', ',', 'color3', ')', ')']"
918,"['write', 'python', 'program', 'shuffle', 'element', 'given', 'list', 'use', 'randomshuffle']","['import', 'random', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'random', '.', 'shuffle', '(', 'nums', ')', 'print', '(', '""Shuffle list:""', ')', 'print', '(', 'nums', ')', 'words', '=', '[', ""'red'"", ',', ""'black'"", ',', ""'green'"", ',', ""'blue'"", ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'words', ')', 'random', '.', 'shuffle', '(', 'words', ')', 'print', '(', '""Shuffle list:""', ')', 'print', '(', 'words', ')']"
919,"['write', 'panda', 'program', 'filter', 'record', 'region', 'match', 'multiple', 'value', 'africa', 'eastern', 'mediterranean', 'europe', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'new_w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'new_w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nFilter by matching multiple values in a given dataframe:""', ')', 'flt_wine', '=', 'new_w_a_con', '[', '""WHO region""', ']', '.', 'isin', '(', '[', '""Africa""', ',', '""Eastern Mediterranean""', ',', '""Europe""', ']', ')', 'print', '(', 'new_w_a_con', '[', 'flt_wine', ']', ')']"
920,"['write', 'python', 'program', 'sort', 'given', 'matrix', 'ascending', 'order', 'according', 'sum', 'row']","['def', 'sort_matrix', '(', 'M', ')', ':', 'result', '=', 'sorted', '(', 'M', ',', 'key', '=', 'sum', ')', 'return', 'result', 'matrix1', '=', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '2', ',', '4', ',', '5', ']', ',', '[', '1', ',', '1', ',', '1', ']', ']', 'matrix2', '=', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '-', '2', ',', '4', ',', '-', '5', ']', ',', '[', '1', ',', '-', '1', ',', '1', ']', ']', 'print', '(', '""Original Matrix:""', ')', 'print', '(', 'matrix1', ')', 'print', '(', '""\\nSort the said matrix in ascending order according to the sum of its rows""', ')', 'print', '(', 'sort_matrix', '(', 'matrix1', ')', ')', 'print', '(', '""\\nOriginal Matrix:""', ')', 'print', '(', 'matrix2', ')', 'print', '(', '""\\nSort the said matrix in ascending order according to the sum of its rows""', ')', 'print', '(', 'sort_matrix', '(', 'matrix2', ')', ')']"
921,"['write', 'python', 'code', 'send', 'request', 'web', 'page', 'print', 'json', 'value', 'response', 'also', 'print', 'key', 'value', 'response']","['import', 'requests', 'r', '=', 'requests', '.', 'get', '(', ""'https://api.github.com/'"", ')', 'response', '=', 'r', '.', 'json', '(', ')', 'print', '(', '""JSON value of the said response:""', ')', 'print', '(', 'r', '.', 'json', '(', ')', ')', 'print', '(', '""\\nEach key of the response:""', ')', 'print', '(', '""Current user url:""', ',', 'response', '[', ""'current_user_url'"", ']', ')', 'print', '(', '""Current user authorizations html url:""', ',', 'response', '[', ""'current_user_authorizations_html_url'"", ']', ')', 'print', '(', '""Authorizations url:""', ',', 'response', '[', ""'authorizations_url'"", ']', ')', 'print', '(', '""code_search_url:""', ',', 'response', '[', ""'code_search_url'"", ']', ')', 'print', '(', '""commit_search_url:""', ',', 'response', '[', ""'commit_search_url'"", ']', ')', 'print', '(', '""Emails url:""', ',', 'response', '[', ""'emails_url'"", ']', ')', 'print', '(', '""Emojis url:""', ',', 'response', '[', ""'emojis_url'"", ']', ')', 'print', '(', '""Events url:""', ',', 'response', '[', ""'events_url'"", ']', ')', 'print', '(', '""Feeds url:""', ',', 'response', '[', ""'feeds_url'"", ']', ')', 'print', '(', '""Followers url:""', ',', 'response', '[', ""'followers_url'"", ']', ')', 'print', '(', '""Following url:""', ',', 'response', '[', ""'following_url'"", ']', ')', 'print', '(', '""Gists url:""', ',', 'response', '[', ""'gists_url'"", ']', ')', 'print', '(', '""Issue search url:""', ',', 'response', '[', ""'issue_search_url'"", ']', ')', 'print', '(', '""Issues url:""', ',', 'response', '[', ""'issues_url'"", ']', ')', 'print', '(', '""Keys url:""', ',', 'response', '[', ""'keys_url'"", ']', ')', 'print', '(', '""label search url:""', ',', 'response', '[', ""'label_search_url'"", ']', ')', 'print', '(', '""Notifications url:""', ',', 'response', '[', ""'notifications_url'"", ']', ')', 'print', '(', '""Organization url:""', ',', 'response', '[', ""'organization_url'"", ']', ')', 'print', '(', '""Organization repositories url:""', ',', 'response', '[', ""'organization_repositories_url'"", ']', ')', 'print', '(', '""Organization teams url:""', ',', 'response', '[', ""'organization_teams_url'"", ']', ')', 'print', '(', '""Public gists url:""', ',', 'response', '[', ""'public_gists_url'"", ']', ')', 'print', '(', '""Rate limit url:""', ',', 'response', '[', ""'rate_limit_url'"", ']', ')', 'print', '(', '""Repository url:""', ',', 'response', '[', ""'repository_url'"", ']', ')', 'print', '(', '""Repository search url:""', ',', 'response', '[', ""'repository_search_url'"", ']', ')', 'print', '(', '""Current user repositories url:""', ',', 'response', '[', ""'current_user_repositories_url'"", ']', ')', 'print', '(', '""Starred url:""', ',', 'response', '[', ""'starred_url'"", ']', ')', 'print', '(', '""Starred gists url:""', ',', 'response', '[', ""'starred_gists_url'"", ']', ')', 'print', '(', '""User url:""', ',', 'response', '[', ""'user_url'"", ']', ')', 'print', '(', '""User organizations url:""', ',', 'response', '[', ""'user_organizations_url'"", ']', ')', 'print', '(', '""User repositories url:""', ',', 'response', '[', ""'user_repositories_url'"", ']', ')', 'print', '(', '""User search url:""', ',', 'response', '[', ""'user_search_url'"", ']', ')']"
922,"['write', 'python', 'program', 'insert', 'new', 'item', 'second', 'element', 'existing', 'array']","['from', 'array', 'import', '*', 'array_num', '=', 'array', '(', ""'i'"", ',', '[', '1', ',', '3', ',', '5', ',', '7', ',', '9', ']', ')', 'print', '(', '""Original array: ""', '+', 'str', '(', 'array_num', ')', ')', 'print', '(', '""Insert new value 4 before 3:""', ')', 'array_num', '.', 'insert', '(', '1', ',', '4', ')', 'print', '(', '""New array: ""', '+', 'str', '(', 'array_num', ')', ')']"
923,"['write', 'numpy', 'program', 'save', 'text', 'matrix', 'row', 'float', 'string', 'end']","['import', 'numpy', 'as', 'np', 'matrix', '=', '[', '[', '1', ',', '0', ',', ""'aaa'"", ']', ',', '[', '0', ',', '1', ',', ""'bbb'"", ']', ',', '[', '0', ',', '1', ',', ""'ccc'"", ']', ']', 'np', '.', 'savetxt', '(', ""'test'"", ',', 'matrix', ',', 'delimiter', '=', ""'  '"", ',', 'header', '=', ""'string'"", ',', 'comments', '=', ""''"", ',', 'fmt', '=', ""'%s'"", ')']"
924,"['write', 'python', 'program', 'check', 'whether', 'multiple', 'variable', 'value']","['x', '=', '20', 'y', '=', '20', 'z', '=', '20', 'if', 'x', '==', 'y', '==', 'z', '==', '20', ':', 'print', '(', '""All variables have same value!""', ')']"
925,"['write', 'python', 'program', 'write', 'string', 'buffer', 'retrieve', 'value', 'written', 'end', 'discard', 'buffer', 'memory']","['import', 'io', 'output', '=', 'io', '.', 'StringIO', '(', ')', 'output', '.', 'write', '(', ""'Python Exercises, Practice, Solution'"", ')', 'print', '(', 'output', '.', 'getvalue', '(', ')', ')', 'output', '.', 'close', '(', ')']"
926,"['write', 'python', 'program', 'copy', 'content', 'file', 'another', 'file']","['from', 'shutil', 'import', 'copyfile', 'copyfile', '(', ""'test.py'"", ',', ""'abc.py'"", ')']"
927,"['write', 'numpy', 'program', 'merge', 'three', 'given', 'numpy', 'array', 'shape']","['import', 'numpy', 'as', 'np', 'arr1', '=', 'np', '.', 'random', '.', 'random', '(', 'size', '=', '(', '25', ',', '25', ',', '1', ')', ')', 'arr2', '=', 'np', '.', 'random', '.', 'random', '(', 'size', '=', '(', '25', ',', '25', ',', '1', ')', ')', 'arr3', '=', 'np', '.', 'random', '.', 'random', '(', 'size', '=', '(', '25', ',', '25', ',', '1', ')', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'arr1', ')', 'print', '(', 'arr2', ')', 'print', '(', 'arr3', ')', 'result', '=', 'np', '.', 'concatenate', '(', '(', 'arr1', ',', 'arr2', ',', 'arr3', ')', ',', 'axis', '=', '-', '1', ')', 'print', '(', '""\\nAfter concatenate:""', ')', 'print', '(', 'result', ')']"
928,"['write', 'numpy', 'program', 'interchange', 'two', 'ax', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ']', ')', 'print', '(', 'x', ')', 'y', '=', 'np', '.', 'swapaxes', '(', 'x', ',', '0', ',', '1', ')', 'print', '(', 'y', ')']"
929,"['write', 'python', 'program', 'decapitalize', 'first', 'letter', 'given', 'string']","['def', 'decapitalize_first_letter', '(', 's', ',', 'upper_rest', '=', 'False', ')', ':', 'return', ""''"", '.', 'join', '(', '[', 's', '[', ':', '1', ']', '.', 'lower', '(', ')', ',', '(', 's', '[', '1', ':', ']', '.', 'upper', '(', ')', 'if', 'upper_rest', 'else', 's', '[', '1', ':', ']', ')', ']', ')', 'print', '(', 'decapitalize_first_letter', '(', ""'Java Script'"", ')', ')', 'print', '(', 'decapitalize_first_letter', '(', ""'Python'"", ')', ')']"
930,"['write', 'panda', 'program', 'select', 'first', 'row', 'column', 'specific', 'two', 'column', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nSelect first 2 rows:""', ')', 'print', '(', 'w_a_con', '.', 'iloc', '[', ':', '2', ']', ')', 'print', '(', '""\\nSelect first 2 columns:""', ')', 'print', '(', 'w_a_con', '.', 'iloc', '[', ':', ',', ':', '2', ']', '.', 'head', '(', ')', ')', 'print', '(', '""\\nSelect 2 specific columns:""', ')', 'print', '(', 'w_a_con', '[', '[', ""'Display Value'"", ',', ""'Year'"", ']', ']', ')']"
931,"['write', 'numpy', 'program', 'compute', 'e']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1.', ',', '2.', ',', '3.', ',', '4.', ']', ',', 'np', '.', 'float32', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'print', '(', '""\\ne^x, element-wise of the said:""', ')', 'r', '=', 'np', '.', 'exp', '(', 'x', ')', 'print', '(', 'r', ')']"
932,"['write', 'python', 'program', 'move', 'specified', 'number', 'element', 'start', 'given', 'list']","['def', 'move_start', '(', 'nums', ',', 'offset', ')', ':', 'return', 'nums', '[', '-', 'offset', ':', ']', '+', 'nums', '[', ':', '-', 'offset', ']', 'print', '(', 'move_start', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ',', '3', ')', ')', 'print', '(', 'move_start', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ',', '-', '3', ')', ')', 'print', '(', 'move_start', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ',', '8', ')', ')', 'print', '(', 'move_start', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ',', '-', '8', ')', ')', 'print', '(', 'move_start', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ',', '7', ')', ')', 'print', '(', 'move_start', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ',', '-', '7', ')', ')']"
933,"['write', 'python', 'program', 'find', 'print', 'li', 'tag', 'given', 'web', 'page']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup', 'url', '=', ""'https://www.w3resource.com/'"", 'reqs', '=', 'requests', '.', 'get', '(', 'url', ')', 'soup', '=', 'BeautifulSoup', '(', 'reqs', '.', 'text', ',', ""'lxml'"", ')', 'print', '(', '""\\nFind and print all li tags:\\n""', ')', 'for', 'tag', 'in', 'soup', '.', 'find_all', '(', '""li""', ')', ':', 'print', '(', '""{0}: {1}""', '.', 'format', '(', 'tag', '.', 'name', ',', 'tag', '.', 'text', ')', ')']"
934,"['write', 'panda', 'program', 'add', 'summation', 'row', 'given', 'excel', 'file']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\coalpublic2013.xlsx'"", ')', 'sum_row', '=', 'df', '[', '[', '""Production""', ',', '""Labor_Hours""', ']', ']', '.', 'sum', '(', ')', 'df_sum', '=', 'pd', '.', 'DataFrame', '(', 'data', '=', 'sum_row', ')', '.', 'T', 'df_sum', '=', 'df_sum', '.', 'reindex', '(', 'columns', '=', 'df', '.', 'columns', ')', 'df_sum']"
935,"['write', 'python', 'program', 'make', 'chain', 'function', 'decorator', 'bold', 'italic', 'underline', 'etc', 'python']","['def', 'make_bold', '(', 'fn', ')', ':', 'def', 'wrapped', '(', ')', ':', 'return', '""<b>""', '+', 'fn', '(', ')', '+', '""</b>""', 'return', 'wrapped', 'def', 'make_italic', '(', 'fn', ')', ':', 'def', 'wrapped', '(', ')', ':', 'return', '""<i>""', '+', 'fn', '(', ')', '+', '""</i>""', 'return', 'wrapped', 'def', 'make_underline', '(', 'fn', ')', ':', 'def', 'wrapped', '(', ')', ':', 'return', '""<u>""', '+', 'fn', '(', ')', '+', '""</u>""', 'return', 'wrapped', '@', 'make_bold', '@', 'make_italic', '@', 'make_underline', 'def', 'hello', '(', ')', ':', 'return', '""hello world""', 'print', '(', 'hello', '(', ')', ')']"
936,"['write', 'python', 'program', 'remove', 'element', 'given', 'list']","['student', '=', '[', ""'Ricky Rivera'"", ',', '98', ',', ""'Math'"", ',', '90', ',', ""'Science'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'student', ')', 'print', '(', '""\\nAfter deleting an element:, using index of the element:""', ')', 'del', '(', 'student', '[', '0', ']', ')', 'print', '(', 'student', ')']"
937,"['write', 'python', 'program', 'count', 'repeated', 'character', 'string']","['import', 'collections', 'str1', '=', ""'thequickbrownfoxjumpsoverthelazydog'"", 'd', '=', 'collections', '.', 'defaultdict', '(', 'int', ')', 'for', 'c', 'in', 'str1', ':', 'd', '[', 'c', ']', '+=', '1', 'for', 'c', 'in', 'sorted', '(', 'd', ',', 'key', '=', 'd', '.', 'get', ',', 'reverse', '=', 'True', ')', ':', 'if', 'd', '[', 'c', ']', '>', '1', ':', 'print', '(', ""'%s %d'"", '%', '(', 'c', ',', 'd', '[', 'c', ']', ')', ')']"
938,"['write', 'panda', 'program', 'check', 'specified', 'column', 'start', 'specified', 'string', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF'"", ',', ""'zefsalf'"", ',', ""'sdfslew'"", ',', ""'zekfsdf'"", ']', ',', ""'date_of_sale'"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nIf a specified column starts with a specified string?""', ')', 'df', '[', ""'company_code_starts_with'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'startswith', '(', ""'ze'"", ')', ',', 'df', '[', ""'company_code'"", ']', ')', ')', 'print', '(', 'df', ')']"
939,"['write', 'numpy', 'program', 'replace', 'nan', 'missing', 'value', 'given', 'array', 'mean', 'another', 'array']","['import', 'numpy', 'as', 'np', 'array_nums1', '=', 'np', '.', 'arange', '(', '20', ')', '.', 'reshape', '(', '4', ',', '5', ')', 'array_nums2', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', 'np', '.', 'nan', ']', ',', '[', '4', ',', '5', ',', '6', ']', ',', '[', 'np', '.', 'nan', ',', '7', ',', 'np', '.', 'nan', ']', ']', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'array_nums1', ')', 'print', '(', 'array_nums2', ')', 'print', '(', '""\\nAll the nan of array_nums2 replaced by the mean of array_nums1:""', ')', 'array_nums2', '[', 'np', '.', 'isnan', '(', 'array_nums2', ')', ']', '=', 'np', '.', 'nanmean', '(', 'array_nums1', ')', 'print', '(', 'array_nums2', ')']"
940,"['write', 'python', 'program', 'execute', 'string', 'containing', 'python', 'code']","['mycode', '=', '\'print(""hello world"")\'', 'code', '=', '""""""\rdef mutiply(x,y):\r    return x*y\r\rprint(\'Multiply of 2 and 3 is: \',mutiply(2,3))\r""""""', 'exec', '(', 'mycode', ')', 'exec', '(', 'code', ')']"
941,"['write', 'python', 'program', 'check', 'whether', 'integer', 'fit', 'bit']","['int_val', '=', '30', 'if', 'int_val', '.', 'bit_length', '(', ')', '<=', '63', ':', 'print', '(', '(', '-', '2', '**', '63', ')', '.', 'bit_length', '(', ')', ')', 'print', '(', '(', '2', '**', '63', ')', '.', 'bit_length', '(', ')', ')']"
942,"['write', 'python', 'program', 'calculate', 'sum', 'number', 'list', 'index', 'specified', 'range']","['def', 'sum_Range_list', '(', 'nums', ',', 'm', ',', 'n', ')', ':', 'sum_range', '=', '0', 'for', 'i', 'in', 'range', '(', 'm', ',', 'n', '+', '1', ',', '1', ')', ':', 'sum_range', '+=', 'nums', '[', 'i', ']', 'return', 'sum_range', 'nums', '=', '[', '2', ',', '1', ',', '5', ',', '6', ',', '8', ',', '3', ',', '4', ',', '9', ',', '10', ',', '11', ',', '8', ',', '12', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'm', '=', '8', 'n', '=', '10', 'print', '(', '""Range:""', ',', 'm', ',', '"",""', ',', 'n', ')', 'print', '(', '""\\nSum of the specified range:""', ')', 'print', '(', 'sum_Range_list', '(', 'nums', ',', 'm', ',', 'n', ')', ')']"
943,"['write', 'panda', 'program', 'convert', 'yearmonth', 'string', 'date', 'adding', 'specified', 'day', 'month']","['import', 'pandas', 'as', 'pd', 'from', 'dateutil', '.', 'parser', 'import', 'parse', 'date_series', '=', 'pd', '.', 'Series', '(', '[', ""'Jan 2015'"", ',', ""'Feb 2016'"", ',', ""'Mar 2017'"", ',', ""'Apr 2018'"", ',', ""'May 2019'"", ']', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'date_series', ')', 'print', '(', '""\\nNew dates:""', ')', 'result', '=', 'date_series', '.', 'map', '(', 'lambda', 'd', ':', 'parse', '(', ""'11 '"", '+', 'd', ')', ')', 'print', '(', 'result', ')']"
944,"['write', 'numpy', 'program', 'convert', 'numpy', 'timestamp']","['import', 'numpy', 'as', 'np', 'from', 'datetime', 'import', 'datetime', 'dt', '=', 'datetime', '.', 'utcnow', '(', ')', 'print', '(', '""Current date:""', ')', 'print', '(', 'dt', ')', 'dt64', '=', 'np', '.', 'datetime64', '(', 'dt', ')', 'ts', '=', '(', 'dt64', '-', 'np', '.', 'datetime64', '(', ""'1970-01-01T00:00:00Z'"", ')', ')', '/', 'np', '.', 'timedelta64', '(', '1', ',', ""'s'"", ')', 'print', '(', '""Timestamp:""', ')', 'print', '(', 'ts', ')', 'print', '(', '""UTC from Timestamp:""', ')', 'print', '(', 'datetime', '.', 'utcfromtimestamp', '(', 'ts', ')', ')']"
945,"['write', 'panda', 'program', 'rename', 'column', 'name', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'new_w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nRename all the column names:""', ')', 'w_a_con', '.', 'columns', '=', '[', ""'year'"", ',', ""'who_region'"", ',', ""'country'"", ',', ""'beverage_types'"", ',', ""'display_values'"", ']', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nRenaming only some of the column names:""', ')', 'new_w_a_con', '.', 'rename', '(', 'columns', '=', '{', '""WHO region""', ':', '""WHO_region""', ',', '""Display Value""', ':', '""Display_Value""', '}', ',', 'inplace', '=', 'True', ')', 'print', '(', 'new_w_a_con', '.', 'head', '(', ')', ')']"
946,"['write', 'python', 'program', 'get', 'n', 'minimum', 'element', 'given', 'list', 'number']","['def', 'min_n_nums', '(', 'nums', ',', 'n', '=', '1', ')', ':', 'return', 'sorted', '(', 'nums', ',', 'reverse', '=', 'False', ')', '[', ':', 'n', ']', 'nums', '=', '[', '1', ',', '2', ',', '3', ']', 'print', '(', '""Original list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Minimum values of the said list:""', ',', 'min_n_nums', '(', 'nums', ')', ')', 'nums', '=', '[', '1', ',', '2', ',', '3', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Two minimum values of the said list:""', ',', 'min_n_nums', '(', 'nums', ',', '2', ')', ')', 'nums', '=', '[', '-', '2', ',', '-', '3', ',', '-', '1', ',', '-', '2', ',', '-', '4', ',', '0', ',', '-', '5', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Threee minimum values of the said list:""', ',', 'min_n_nums', '(', 'nums', ',', '3', ')', ')', 'nums', '=', '[', '2.2', ',', '2', ',', '3.2', ',', '4.5', ',', '4.6', ',', '5.2', ',', '2.9', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Two minimum values of the said list:""', ',', 'min_n_nums', '(', 'nums', ',', '2', ')', ')']"
947,"['write', 'panda', 'program', 'create', 'dataframe', 'set', 'title', 'name', 'index', 'column']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_Of_Birth'"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', ',', ""'address'"", ':', '[', ""'street1'"", ',', ""'street2'"", ',', ""'street3'"", ',', ""'street1'"", ',', ""'street2'"", ',', ""'street4'"", ']', '}', ',', 'index', '=', '[', ""'t1'"", ',', ""'t2'"", ',', ""'t3'"", ',', ""'t4'"", ',', ""'t5'"", ',', ""'t6'"", ']', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'df', '.', 'index', '.', 'name', '=', ""'Index_name'"", 'print', '(', '""\\nSaid DataFrame with a title or name of the index column:""', ')', 'print', '(', 'df', ')']"
948,"['write', 'panda', 'program', 'join', 'two', 'dataframes', 'matching', 'record', 'side', 'available']","['import', 'pandas', 'as', 'pd', 'student_data1', '=', 'pd', '.', 'DataFrame', '(', '{', ""'student_id'"", ':', '[', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ',', ""'S4'"", ',', ""'S5'"", ']', ',', ""'name'"", ':', '[', ""'Danniella Fenton'"", ',', ""'Ryder Storey'"", ',', ""'Bryce Jensen'"", ',', ""'Ed Bernal'"", ',', ""'Kwame Morin'"", ']', ',', ""'marks'"", ':', '[', '200', ',', '210', ',', '190', ',', '222', ',', '199', ']', '}', ')', 'student_data2', '=', 'pd', '.', 'DataFrame', '(', '{', ""'student_id'"", ':', '[', ""'S4'"", ',', ""'S5'"", ',', ""'S6'"", ',', ""'S7'"", ',', ""'S8'"", ']', ',', ""'name'"", ':', '[', ""'Scarlette Fisher'"", ',', ""'Carla Williamson'"", ',', ""'Dante Morse'"", ',', ""'Kaiser William'"", ',', ""'Madeeha Preston'"", ']', ',', ""'marks'"", ':', '[', '201', ',', '200', ',', '198', ',', '219', ',', '201', ']', '}', ')', 'print', '(', '""Original DataFrames:""', ')', 'print', '(', 'student_data1', ')', 'print', '(', 'student_data2', ')', 'merged_data', '=', 'pd', '.', 'merge', '(', 'student_data1', ',', 'student_data2', ',', 'on', '=', ""'student_id'"", ',', 'how', '=', ""'outer'"", ')', 'print', '(', '""Merged data (outer join):""', ')', 'print', '(', 'merged_data', ')']"
949,"['write', 'python', 'program', 'create', 'symbolic', 'link', 'read', 'decide', 'original', 'file', 'pointed', 'link']","['import', 'os', 'path', '=', ""'/tmp/'"", '+', 'os', '.', 'path', '.', 'basename', '(', '__file__', ')', 'print', '(', ""'Creating link {} -> {}'"", '.', 'format', '(', 'path', ',', '__file__', ')', ')', 'os', '.', 'symlink', '(', '__file__', ',', 'path', ')', 'stat_info', '=', 'os', '.', 'lstat', '(', 'path', ')', 'print', '(', ""'\\nFile Permissions:'"", ',', 'oct', '(', 'stat_info', '.', 'st_mode', ')', ')', 'print', '(', ""'\\nPoints to:'"", ',', 'os', '.', 'readlink', '(', 'path', ')', ')', 'os', '.', 'unlink', '(', 'path', ')']"
950,"['write', 'python', 'program', 'reverse', 'string', 'given', 'list', 'string', 'value']","['def', 'reverse_strings_list', '(', 'string_list', ')', ':', 'result', '=', '[', 'x', '[', ':', ':', '-', '1', ']', 'for', 'x', 'in', 'string_list', ']', 'return', 'result', 'colors_list', '=', '[', '""Red""', ',', '""Green""', ',', '""Blue""', ',', '""White""', ',', '""Black""', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'colors_list', ')', 'print', '(', '""\\nReverse strings of the said given list:""', ')', 'print', '(', 'reverse_strings_list', '(', 'colors_list', ')', ')']"
951,"['write', 'panda', 'program', 'convert', 'integer', 'float', 'epoch', 'time', 'timestamp', 'datetimeindex']","['import', 'pandas', 'as', 'pd', 'dates1', '=', 'pd', '.', 'to_datetime', '(', '[', '1329806505', ',', '129806505', ',', '1249892905', ',', '1249979305', ',', '1250065705', ']', ',', 'unit', '=', ""'s'"", ')', 'print', '(', '""Convert integer or float epoch times to Timestamp and DatetimeIndex upto second:""', ')', 'print', '(', 'dates1', ')', 'print', '(', '""\\nConvert integer or float epoch times to Timestamp and DatetimeIndex upto milisecond:""', ')', 'dates2', '=', 'pd', '.', 'to_datetime', '(', '[', '1249720105100', ',', '1249720105200', ',', '1249720105300', ',', '1249720105400', ',', '1249720105500', ']', ',', 'unit', '=', ""'ms'"", ')', 'print', '(', 'dates2', ')']"
952,"['write', 'python', 'program', 'convert', 'one', 'list', 'nested', 'dictionary']","['def', 'nested_dictionary', '(', 'l1', ',', 'l2', ',', 'l3', ')', ':', 'result', '=', '[', '{', 'x', ':', '{', 'y', ':', 'z', '}', '}', 'for', '(', 'x', ',', 'y', ',', 'z', ')', 'in', 'zip', '(', 'l1', ',', 'l2', ',', 'l3', ')', ']', 'return', 'result', 'student_id', '=', '[', '""S001""', ',', '""S002""', ',', '""S003""', ',', '""S004""', ']', 'student_name', '=', '[', '""Adina Park""', ',', '""Leyton Marsh""', ',', '""Duncan Boyle""', ',', '""Saim Richards""', ']', 'student_grade', '=', '[', '85', ',', '98', ',', '89', ',', '92', ']', 'print', '(', '""Original strings:""', ')', 'print', '(', 'student_id', ')', 'print', '(', 'student_name', ')', 'print', '(', 'student_grade', ')', 'print', '(', '""\\nNested dictionary:""', ')', 'ch', '=', ""'a'"", 'print', '(', 'nested_dictionary', '(', 'student_id', ',', 'student_name', ',', 'student_grade', ')', ')']"
953,"['write', 'python', 'program', 'find', 'first', 'even', 'odd', 'number', 'given', 'list', 'number']","['def', 'first_even_odd', '(', 'nums', ')', ':', 'first_even', '=', 'next', '(', '(', 'el', 'for', 'el', 'in', 'nums', 'if', 'el', '%', '2', '==', '0', ')', ',', '-', '1', ')', 'first_odd', '=', 'next', '(', '(', 'el', 'for', 'el', 'in', 'nums', 'if', 'el', '%', '2', '!=', '0', ')', ',', '-', '1', ')', 'return', 'first_even', ',', 'first_odd', 'nums', '=', '[', '1', ',', '3', ',', '5', ',', '7', ',', '4', ',', '1', ',', '6', ',', '8', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nFirst even and odd number of the said list of numbers:""', ')', 'print', '(', 'first_even_odd', '(', 'nums', ')', ')']"
954,"['write', 'python', 'program', 'sort', 'list', 'list', 'given', 'index', 'inner', 'list']","['from', 'operator', 'import', 'itemgetter', 'def', 'index_on_inner_list', '(', 'list_data', ',', 'index_no', ')', ':', 'result', '=', 'sorted', '(', 'list_data', ',', 'key', '=', 'itemgetter', '(', 'index_no', ')', ')', 'return', 'result', 'students', '=', '[', '(', ""'Greyson Fulton'"", ',', '98', ',', '99', ')', ',', '(', ""'Brady Kent'"", ',', '97', ',', '96', ')', ',', '(', ""'Wyatt Knott'"", ',', '91', ',', '94', ')', ',', '(', ""'Beau Turnbull'"", ',', '94', ',', '98', ')', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'students', ')', 'index_no', '=', '0', 'print', '(', '""\\nSort the said list of lists by a given index""', ',', '""( Index = ""', ',', 'index_no', ',', '"") of the inner list""', ')', 'print', '(', 'index_on_inner_list', '(', 'students', ',', 'index_no', ')', ')', 'index_no', '=', '2', 'print', '(', '""\\nSort the said list of lists by a given index""', ',', '""( Index = ""', ',', 'index_no', ',', '"") of the inner list""', ')', 'print', '(', 'index_on_inner_list', '(', 'students', ',', 'index_no', ')', ')']"
955,"['write', 'python', 'program', 'generate', 'list', 'number', 'arithmetic', 'progression', 'starting', 'given', 'positive', 'integer', 'specified', 'limit']","['def', 'arithmetic_progression', '(', 'n', ',', 'x', ')', ':', 'return', 'list', '(', 'range', '(', 'n', ',', 'x', '+', '1', ',', 'n', ')', ')', 'print', '(', 'arithmetic_progression', '(', '1', ',', '15', ')', ')', 'print', '(', 'arithmetic_progression', '(', '3', ',', '37', ')', ')', 'print', '(', 'arithmetic_progression', '(', '5', ',', '25', ')', ')']"
956,"['write', 'numpy', 'program', 'sort', 'given', 'array', 'n']","['import', 'numpy', 'as', 'np', 'print', '(', '""Original array:\\n""', ')', 'nums', '=', 'np', '.', 'random', '.', 'randint', '(', '0', ',', '10', ',', '(', '3', ',', '3', ')', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nSort the said array by the nth column: ""', ')', 'print', '(', 'nums', '[', 'nums', '[', ':', ',', '1', ']', '.', 'argsort', '(', ')', ']', ')']"
957,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'bogosort', 'sort']","['import', 'random', 'def', 'bogosort', '(', 'nums', ')', ':', 'def', 'isSorted', '(', 'nums', ')', ':', 'if', 'len', '(', 'nums', ')', '<', '2', ':', 'return', 'True', 'for', 'i', 'in', 'range', '(', 'len', '(', 'nums', ')', '-', '1', ')', ':', 'if', 'nums', '[', 'i', ']', '>', 'nums', '[', 'i', '+', '1', ']', ':', 'return', 'False', 'return', 'True', 'while', 'not', 'isSorted', '(', 'nums', ')', ':', 'random', '.', 'shuffle', '(', 'nums', ')', 'return', 'nums', 'num1', '=', 'input', '(', ""'Input  comma separated numbers:\\n'"", ')', '.', 'strip', '(', ')', 'nums', '=', '[', 'int', '(', 'item', ')', 'for', 'item', 'in', 'num1', '.', 'split', '(', ""','"", ')', ']', 'print', '(', 'bogosort', '(', 'nums', ')', ')']"
958,"['write', 'python', 'program', 'create', 'floatingpoint', 'representation', 'arrow', 'object', 'utc', 'time', 'using', 'arrow', 'module']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current Datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\nFloating-point representation of the said Arrow object:""', ')', 'f', '=', 'arrow', '.', 'utcnow', '(', ')', '.', 'float_timestamp', 'print', '(', 'f', ')']"
959,"['write', 'python', 'program', 'create', 'time', 'object', 'hour', 'minute', 'second', 'microsecond', 'timezone', 'info']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\nTime object with the same hour, minute, second, microsecond and timezone info.:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'timetz', '(', ')', ')']"
960,"['write', 'numpy', 'program', 'append', 'value', 'end', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', '[', '10', ',', '20', ',', '30', ']', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'x', '=', 'np', '.', 'append', '(', 'x', ',', '[', '[', '40', ',', '50', ',', '60', ']', ',', '[', '70', ',', '80', ',', '90', ']', ']', ')', 'print', '(', '""After append values to the end of the array:""', ')', 'print', '(', 'x', ')']"
961,"['write', 'python', 'program', 'convert', 'string', 'list']","['import', 'ast', 'color', '=', '""[\'Red\', \'Green\', \'White\']""', 'print', '(', 'ast', '.', 'literal_eval', '(', 'color', ')', ')']"
962,"['write', 'python', 'program', 'print', 'specified', 'list', 'removing', 'element']","['color', '=', '[', ""'Red'"", ',', ""'Green'"", ',', ""'White'"", ',', ""'Black'"", ',', ""'Pink'"", ',', ""'Yellow'"", ']', 'color', '=', '[', 'x', 'for', '(', 'i', ',', 'x', ')', 'in', 'enumerate', '(', 'color', ')', 'if', 'i', 'not', 'in', '(', '0', ',', '4', ',', '5', ')', ']', 'print', '(', 'color', ')']"
963,"['write', 'python', 'program', 'convert', 'given', 'string', 'snake', 'case']","['from', 're', 'import', 'sub', 'def', 'snake_case', '(', 's', ')', ':', 'return', ""'_'"", '.', 'join', '(', 'sub', '(', ""'([A-Z][a-z]+)'"", ',', ""r' \\1'"", ',', 'sub', '(', ""'([A-Z]+)'"", ',', ""r' \\1'"", ',', 's', '.', 'replace', '(', ""'-'"", ',', ""' '"", ')', ')', ')', '.', 'split', '(', ')', ')', '.', 'lower', '(', ')', 'print', '(', 'snake_case', '(', ""'JavaScript'"", ')', ')', 'print', '(', 'snake_case', '(', ""'Foo-Bar'"", ')', ')', 'print', '(', 'snake_case', '(', ""'foo_bar'"", ')', ')', 'print', '(', 'snake_case', '(', ""'--foo.bar'"", ')', ')', 'print', '(', 'snake_case', '(', ""'Foo-BAR'"", ')', ')', 'print', '(', 'snake_case', '(', ""'fooBAR'"", ')', ')', 'print', '(', 'snake_case', '(', ""'foo bar'"", ')', ')']"
964,"['write', 'python', 'program', 'find', 'common', 'element', 'given', 'nested', 'list']","['def', 'common_in_nested_lists', '(', 'nested_list', ')', ':', 'result', '=', 'list', '(', 'set', '.', 'intersection', '(', '*', 'map', '(', 'set', ',', 'nested_list', ')', ')', ')', 'return', 'result', 'nested_list', '=', '[', '[', '12', ',', '18', ',', '23', ',', '25', ',', '45', ']', ',', '[', '7', ',', '12', ',', '18', ',', '24', ',', '28', ']', ',', '[', '1', ',', '5', ',', '8', ',', '12', ',', '15', ',', '16', ',', '18', ']', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nested_list', ')', 'print', '(', '""\\nCommon element(s) in nested lists:""', ')', 'print', '(', 'common_in_nested_lists', '(', 'nested_list', ')', ')']"
965,"['write', 'numpy', 'program', 'remove', 'nan', 'value', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '200', ',', '300', ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', '700', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', 'np', '.', 'nan', ',', '0', ',', 'np', '.', 'nan', ']', ',', '[', '6', ',', '7', ',', 'np', '.', 'nan', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""After removing nan values:""', ')', 'result', '=', 'x', '[', 'np', '.', 'logical_not', '(', 'np', '.', 'isnan', '(', 'x', ')', ')', ']', 'print', '(', 'result', ')', 'print', '(', '""\\nOriginal array:""', ')', 'print', '(', 'y', ')', 'print', '(', '""After removing nan values:""', ')', 'result', '=', 'y', '[', 'np', '.', 'logical_not', '(', 'np', '.', 'isnan', '(', 'y', ')', ')', ']', 'print', '(', 'result', ')']"
966,"['write', 'panda', 'program', 'create', 'plot', 'adjusted', 'closing', 'price', 'thirty', 'day', 'forty', 'day', 'simple', 'moving', 'average', 'alphabet', 'inc', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-9-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'stock_data', '=', 'df1', '.', 'set_index', '(', ""'Date'"", ')', 'close_px', '=', 'stock_data', '[', ""'Adj Close'"", ']', 'stock_data', '[', ""'SMA_30_days'"", ']', '=', 'stock_data', '.', 'iloc', '[', ':', ',', '4', ']', '.', 'rolling', '(', 'window', '=', '30', ')', '.', 'mean', '(', ')', 'stock_data', '[', ""'SMA_40_days'"", ']', '=', 'stock_data', '.', 'iloc', '[', ':', ',', '4', ']', '.', 'rolling', '(', 'window', '=', '40', ')', '.', 'mean', '(', ')', 'plt', '.', 'figure', '(', 'figsize', '=', '[', '10', ',', '8', ']', ')', 'plt', '.', 'grid', '(', 'True', ')', 'plt', '.', 'title', '(', ""'Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]\\n'"", ',', 'fontsize', '=', '18', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'plot', '(', 'stock_data', '[', ""'Adj Close'"", ']', ',', 'label', '=', ""'Adjusted Closing Price'"", ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'plot', '(', 'stock_data', '[', ""'SMA_30_days'"", ']', ',', 'label', '=', ""'30 days simple moving average'"", ',', 'color', '=', ""'red'"", ')', 'plt', '.', 'plot', '(', 'stock_data', '[', ""'SMA_40_days'"", ']', ',', 'label', '=', ""'40 days simple moving average'"", ',', 'color', '=', ""'green'"", ')', 'plt', '.', 'legend', '(', 'loc', '=', '2', ')', 'plt', '.', 'show', '(', ')']"
967,"['write', 'numpy', 'program', 'create', 'matrix', 'filled', 'value']","['import', 'numpy', 'as', 'np', 'm', '=', 'np', '.', 'arange', '(', '10', ',', '22', ')', '.', 'reshape', '(', '(', '3', ',', '4', ')', ')', 'print', '(', 'm', ')']"
968,"['write', 'numpy', 'program', 'extract', 'second', 'third', 'element', 'second', 'third', 'row', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arra_data', '=', 'np', '.', 'arange', '(', '0', ',', '16', ')', '.', 'reshape', '(', '(', '4', ',', '4', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arra_data', ')', 'print', '(', '""\\nExtracted data: Second and third elements of the second and third rows""', ')', 'print', '(', 'arra_data', '[', '1', ':', '3', ',', '1', ':', '3', ']', ')']"
969,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'survival', 'rate', 'gender', 'various', 'class']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'df', '.', 'pivot_table', '(', ""'survived'"", ',', 'index', '=', ""'sex'"", ',', 'columns', '=', ""'class'"", ')', 'print', '(', 'result', ')']"
970,"['write', 'numpy', 'program', 'calculate', 'percentile', 'sequence', 'singledimensional', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ')', 'print', '(', '""50th percentile (median):""', ')', 'p', '=', 'np', '.', 'percentile', '(', 'nums', ',', '50', ')', 'print', '(', 'p', ')', 'print', '(', '""40th percentile:""', ')', 'p', '=', 'np', '.', 'percentile', '(', 'nums', ',', '40', ')', 'print', '(', 'p', ')', 'print', '(', '""90th percentile:""', ')', 'p', '=', 'np', '.', 'percentile', '(', 'nums', ',', '90', ')', 'print', '(', 'p', ')']"
971,"['write', 'python', 'program', 'break', 'given', 'list', 'integer', 'set', 'given', 'positive', 'number', 'return', 'true', 'false']","['import', 'collections', 'as', 'clt', 'def', 'check_break_list', '(', 'nums', ',', 'n', ')', ':', 'coll_data', '=', 'clt', '.', 'Counter', '(', 'nums', ')', 'for', 'x', 'in', 'sorted', '(', 'coll_data', '.', 'keys', '(', ')', ')', ':', 'for', 'index', 'in', 'range', '(', '1', ',', 'n', ')', ':', 'coll_data', '[', 'x', '+', 'index', ']', '=', 'coll_data', '[', 'x', '+', 'index', ']', '-', 'coll_data', '[', 'x', ']', 'if', 'coll_data', '[', 'x', '+', 'index', ']', '<', '0', ':', 'return', 'False', 'return', 'True', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', 'n', '=', '4', 'print', '(', '""Original list:""', ',', 'nums', ')', 'print', '(', '""Number to devide the said list:""', ',', 'n', ')', 'print', '(', 'check_break_list', '(', 'nums', ',', 'n', ')', ')', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', 'n', '=', '3', 'print', '(', '""\\nOriginal list:""', ',', 'nums', ')', 'print', '(', '""Number to devide the said list:""', ',', 'n', ')', 'print', '(', 'check_break_list', '(', 'nums', ',', 'n', ')', ')']"
972,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'insertion', 'sort', 'algorithm']","['def', 'insertionSort', '(', 'nlist', ')', ':', 'for', 'index', 'in', 'range', '(', '1', ',', 'len', '(', 'nlist', ')', ')', ':', 'currentvalue', '=', 'nlist', '[', 'index', ']', 'position', '=', 'index', 'while', 'position', '>', '0', 'and', 'nlist', '[', 'position', '-', '1', ']', '>', 'currentvalue', ':', 'nlist', '[', 'position', ']', '=', 'nlist', '[', 'position', '-', '1', ']', 'position', '=', 'position', '-', '1', 'nlist', '[', 'position', ']', '=', 'currentvalue', 'nlist', '=', '[', '14', ',', '46', ',', '43', ',', '27', ',', '57', ',', '41', ',', '45', ',', '21', ',', '70', ']', 'insertionSort', '(', 'nlist', ')', 'print', '(', 'nlist', ')']"
973,"['write', 'python', 'program', 'find', 'number', 'given', 'string', 'store', 'list', 'display', 'number', 'bigger', 'length', 'list', 'sorted', 'form', 'use', 'lambda', 'function', 'solve', 'problem']","['str1', '=', '""sdf 23 safs8 5 sdfsd8 sdfs 56 21sfs 20 5""', 'print', '(', '""Original string: ""', ',', 'str1', ')', 'str_num', '=', '[', 'i', 'for', 'i', 'in', 'str1', '.', 'split', '(', ""' '"", ')', ']', 'lenght', '=', 'len', '(', 'str_num', ')', 'numbers', '=', 'sorted', '(', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'str_num', 'if', 'x', '.', 'isdigit', '(', ')', ']', ')', 'print', '(', ""'Numbers in sorted form:'"", ')', 'for', 'i', 'in', '(', '(', 'filter', '(', 'lambda', 'x', ':', 'x', '>', 'lenght', ',', 'numbers', ')', ')', ')', ':', 'print', '(', 'i', ',', 'end', '=', ""' '"", ')']"
974,"['write', 'panda', 'program', 'merge', 'two', 'given', 'dataframes', 'different', 'column']","['import', 'pandas', 'as', 'pd', 'data1', '=', 'pd', '.', 'DataFrame', '(', '{', ""'key1'"", ':', '[', ""'K0'"", ',', ""'K0'"", ',', ""'K1'"", ',', ""'K2'"", ']', ',', ""'key2'"", ':', '[', ""'K0'"", ',', ""'K1'"", ',', ""'K0'"", ',', ""'K1'"", ']', ',', ""'P'"", ':', '[', ""'P0'"", ',', ""'P1'"", ',', ""'P2'"", ',', ""'P3'"", ']', ',', ""'Q'"", ':', '[', ""'Q0'"", ',', ""'Q1'"", ',', ""'Q2'"", ',', ""'Q3'"", ']', '}', ')', 'data2', '=', 'pd', '.', 'DataFrame', '(', '{', ""'key1'"", ':', '[', ""'K0'"", ',', ""'K1'"", ',', ""'K1'"", ',', ""'K2'"", ']', ',', ""'key2'"", ':', '[', ""'K0'"", ',', ""'K0'"", ',', ""'K0'"", ',', ""'K0'"", ']', ',', ""'R'"", ':', '[', ""'R0'"", ',', ""'R1'"", ',', ""'R2'"", ',', ""'R3'"", ']', ',', ""'S'"", ':', '[', ""'S0'"", ',', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ']', '}', ')', 'print', '(', '""Original DataFrames:""', ')', 'print', '(', 'data1', ')', 'print', '(', '""--------------------""', ')', 'print', '(', 'data2', ')', 'print', '(', '""\\nMerge two dataframes with different columns:""', ')', 'result', '=', 'pd', '.', 'concat', '(', '[', 'data1', ',', 'data2', ']', ',', 'axis', '=', '0', ',', 'ignore_index', '=', 'True', ')', 'print', '(', 'result', ')']"
975,"['write', 'panda', 'program', 'drop', 'row', 'given', 'dataframe', 'specific', 'column', 'missing', 'value']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', '70002', ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ']', ',', ""'purch_amt'"", ':', '[', 'np', '.', 'nan', ',', '270.65', ',', '65.26', ',', 'np', '.', 'nan', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', 'np', '.', 'nan', ']', ',', ""'ord_date'"", ':', '[', 'np', '.', 'nan', ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', 'np', '.', 'nan', ']', ',', ""'customer_id'"", ':', '[', 'np', '.', 'nan', ',', '3001', ',', '3001', ',', 'np', '.', 'nan', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', 'np', '.', 'nan', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nDrop those rows in which specific columns have missing values:""', ')', 'result', '=', 'df', '.', 'dropna', '(', 'subset', '=', '[', ""'ord_no'"", ',', ""'customer_id'"", ']', ')', 'print', '(', 'result', ')']"
976,"['write', 'python', 'program', 'find', 'difference', 'element', 'nth', 'given', 'list', 'numeric', 'value']","['def', 'elements_difference', '(', 'nums', ')', ':', 'result', '=', '[', 'j', '-', 'i', 'for', 'i', ',', 'j', 'in', 'zip', '(', 'nums', '[', ':', '-', '1', ']', ',', 'nums', '[', '1', ':', ']', ')', ']', 'return', 'result', 'nums1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', 'nums2', '=', '[', '2', ',', '4', ',', '6', ',', '8', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums1', ')', 'print', '(', '""\\nDfference between elements (n+1th – nth) of the said list :""', ')', 'print', '(', 'elements_difference', '(', 'nums1', ')', ')', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nDfference between elements (n+1th – nth) of the said list :""', ')', 'print', '(', 'elements_difference', '(', 'nums2', ')', ')']"
977,"['write', 'panda', 'program', 'create', 'timeseries', 'given', 'list', 'date', 'string']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'import', 'datetime', 'from', 'datetime', 'import', 'datetime', ',', 'date', 'dates', '=', '[', ""'2014-08-01'"", ',', ""'2014-08-02'"", ',', ""'2014-08-03'"", ',', ""'2014-08-04'"", ']', 'time_series', '=', 'pd', '.', 'Series', '(', 'np', '.', 'random', '.', 'randn', '(', '4', ')', ',', 'dates', ')', 'print', '(', 'time_series', ')']"
978,"['write', 'panda', 'program', 'convert', 'series', 'date', 'string', 'timeseries']","['import', 'pandas', 'as', 'pd', 'date_series', '=', 'pd', '.', 'Series', '(', '[', ""'01 Jan 2015'"", ',', ""'10-02-2016'"", ',', ""'20180307'"", ',', ""'2014/05/06'"", ',', ""'2016-04-12'"", ',', ""'2019-04-06T11:20'"", ']', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'date_series', ')', 'print', '(', '""\\nSeries of date strings to a timeseries:""', ')', 'print', '(', 'pd', '.', 'to_datetime', '(', 'date_series', ')', ')']"
979,"['write', 'numpy', 'program', 'create', 'array', 'filled', 'random', 'point', 'number', 'increase', 'number', 'item', 'edge', 'element', 'shown', 'print', 'statement']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'random', '.', 'randint', '(', '10', ',', 'size', '=', '(', '90', ',', '30', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nIncrease the number of items (10 edge elements) shown by the print statement:""', ')', 'np', '.', 'set_printoptions', '(', 'edgeitems', '=', '10', ')', 'print', '(', 'nums', ')']"
980,"['create', 'dataframe', 'ten', 'row', 'four', 'column', 'random', 'value', 'write', 'panda', 'program', 'highlight', 'minimum', 'value', 'column']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '24', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', 'np', '.', 'linspace', '(', '1', ',', '10', ',', '10', ')', '}', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df', ',', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', ',', 'columns', '=', 'list', '(', ""'BCDE'"", ')', ')', ']', ',', 'axis', '=', '1', ')', 'df', '.', 'iloc', '[', '0', ',', '2', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '3', ',', '3', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '4', ',', '1', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '9', ',', '4', ']', '=', 'np', '.', 'nan', 'print', '(', '""Original array:""', ')', 'print', '(', 'df', ')', 'def', 'highlight_min', '(', 's', ')', ':', ""'''\r    highlight the minimum in a Series red.\r    '''"", 'is_max', '=', 's', '==', 's', '.', 'min', '(', ')', 'return', '[', ""'background-color: red'"", 'if', 'v', 'else', ""''"", 'for', 'v', 'in', 'is_max', ']', 'print', '(', '""\\nHighlight the minimum value in each column:""', ')', 'df', '.', 'style', '.', 'apply', '(', 'highlight_min', ',', 'subset', '=', 'pd', '.', 'IndexSlice', '[', ':', ',', '[', ""'B'"", ',', ""'C'"", ',', ""'D'"", ',', ""'E'"", ']', ']', ')']"
981,"['write', 'panda', 'program', 'split', 'following', 'dataframe', 'group', 'calculate', 'quarterly', 'purchase', 'amount']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', '70009', ',', '70002', ',', '70004', ',', '70007', ',', '70005', ',', '70008', ',', '70010', ',', '70003', ',', '70012', ',', '70011', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'05-10-2012'"", ',', ""'09-10-2012'"", ',', ""'05-10-2012'"", ',', ""'08-17-2012'"", ',', ""'10-09-2012'"", ',', ""'07-27-2012'"", ',', ""'10-09-2012'"", ',', ""'10-10-2012'"", ',', ""'10-10-2012'"", ',', ""'06-17-2012'"", ',', ""'07-08-2012'"", ',', ""'04-25-2012'"", ']', ',', ""'customer_id'"", ':', '[', '3001', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3005', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5005', ',', '5001', ',', '5003', ',', '5002', ',', '5001', ',', '5001', ',', '5006', ',', '5003', ',', '5002', ',', '5007', ',', '5001', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'df', '[', ""'ord_date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'ord_date'"", ']', ')', 'print', '(', '""\\nQuartly purchase amount:""', ')', 'result', '=', 'df', '.', 'set_index', '(', ""'ord_date'"", ')', '.', 'groupby', '(', 'pd', '.', 'Grouper', '(', 'freq', '=', ""'Q'"", ')', ')', '.', 'agg', '(', '{', ""'purch_amt'"", ':', 'sum', '}', ')', 'print', '(', 'result', ')']"
982,"['write', 'numpy', 'program', 'sort', 'given', 'array', 'row', 'column', 'ascending', 'order']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '[', '5.54', ',', '3.38', ',', '7.99', ']', ',', '[', '3.54', ',', '4.38', ',', '6.99', ']', ',', '[', '1.54', ',', '2.39', ',', '9.29', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nSort the said array by row in ascending order:""', ')', 'print', '(', 'np', '.', 'sort', '(', 'nums', ')', ')', 'print', '(', '""\\nSort the said array by column in ascending order:""', ')', 'print', '(', 'np', '.', 'sort', '(', 'nums', ',', 'axis', '=', '0', ')', ')']"
983,"['write', 'python', 'program', 'read', 'given', 'expression', 'evaluates']",[]
984,"['write', 'numpy', 'program', 'create', 'matrix', 'element', 'border', 'equal', 'inside']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'ones', '(', '(', '10', ',', '10', ')', ')', 'x', '[', '1', ':', '-', '1', ',', '1', ':', '-', '1', ']', '=', '0', 'print', '(', 'x', ')']"
985,"['write', 'python', 'program', 'pack', 'consecutive', 'duplicate', 'given', 'list', 'element', 'sublists']","['from', 'itertools', 'import', 'groupby', 'def', 'pack_consecutive_duplicates', '(', 'l_nums', ')', ':', 'return', '[', 'list', '(', 'group', ')', 'for', 'key', ',', 'group', 'in', 'groupby', '(', 'l_nums', ')', ']', 'n_list', '=', '[', '0', ',', '0', ',', '1', ',', '2', ',', '3', ',', '4', ',', '4', ',', '5', ',', '6', ',', '6', ',', '6', ',', '7', ',', '8', ',', '9', ',', '4', ',', '4', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'n_list', ')', 'print', '(', '""\\nAfter packing consecutive duplicates of the said list elements into sublists:""', ')', 'print', '(', 'pack_consecutive_duplicates', '(', 'n_list', ')', ')']"
986,"['write', 'python', 'program', 'remove', 'additional', 'space', 'given', 'list']","['def', 'test', '(', 'lst', ')', ':', 'result', '=', '[', ']', 'for', 'i', 'in', 'lst', ':', 'j', '=', 'i', '.', 'replace', '(', ""' '"", ',', ""''"", ')', 'result', '.', 'append', '(', 'j', ')', 'return', 'result', 'text', '=', '[', ""'abc '"", ',', ""'  '"", ',', ""' '"", ',', ""'sdfds '"", ',', ""' '"", ',', ""'     '"", ',', ""'sdfds '"", ',', ""'huy'"", ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'text', ')', 'print', '(', '""Remove additional spaces from the said list:""', ')', 'print', '(', 'test', '(', 'text', ')', ')']"
987,"['write', 'numpy', 'program', 'compute', 'percentile', 'element', 'given', 'array', 'along', 'second', 'axis']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '12', ')', '.', 'reshape', '(', '(', '2', ',', '6', ')', ')', 'print', '(', '""\\nOriginal array:""', ')', 'print', '(', 'x', ')', 'r1', '=', 'np', '.', 'percentile', '(', 'x', ',', '80', ',', '1', ')', 'print', '(', '""\\n80th percentile for all elements of the said array along the second axis:""', ')', 'print', '(', 'r1', ')']"
988,"['write', 'numpy', 'program', 'multiply', 'matrix', 'matrix', 'create', 'real', 'matrix', 'product']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'random', '.', 'random', '(', '(', '5', ',', '3', ')', ')', 'print', '(', '""First array:""', ')', 'print', '(', 'x', ')', 'y', '=', 'np', '.', 'random', '.', 'random', '(', '(', '3', ',', '2', ')', ')', 'print', '(', '""Second array:""', ')', 'print', '(', 'y', ')', 'z', '=', 'np', '.', 'dot', '(', 'x', ',', 'y', ')', 'print', '(', '""Dot product of two arrays:""', ')', 'print', '(', 'z', ')']"
989,"['write', 'panda', 'program', 'subtract', 'two', 'timestamps', 'time', 'zone', 'different', 'time', 'zone']","['import', 'pandas', 'as', 'pd', 'print', '(', '""Subtract two timestamps of same time zone:""', ')', 'date1', '=', 'pd', '.', 'Timestamp', '(', ""'2019-03-01 12:00'"", ',', 'tz', '=', ""'US/Eastern'"", ')', 'date2', '=', 'pd', '.', 'Timestamp', '(', ""'2019-04-01 07:00'"", ',', 'tz', '=', ""'US/Eastern'"", ')', 'print', '(', '""Difference: ""', ',', '(', 'date2', '-', 'date1', ')', ')', 'print', '(', '""\\nSubtract two timestamps of different time zone:""', ')', 'date1', '=', 'pd', '.', 'Timestamp', '(', ""'2019-03-01 12:00'"", ',', 'tz', '=', ""'US/Eastern'"", ')', 'date2', '=', 'pd', '.', 'Timestamp', '(', ""'2019-03-01 07:00'"", ',', 'tz', '=', ""'US/Pacific'"", ')', 'print', '(', '""Difference: ""', ',', '(', 'date1', '.', 'tz_localize', '(', 'None', ')', '-', 'date2', '.', 'tz_localize', '(', 'None', ')', ')', ')']"
990,"['write', 'python', 'program', 'get', 'weighted', 'average', 'two', 'number']","['def', 'weighted_average', '(', 'nums', ',', 'weights', ')', ':', 'return', 'sum', '(', 'x', '*', 'y', 'for', 'x', ',', 'y', 'in', 'zip', '(', 'nums', ',', 'weights', ')', ')', '/', 'sum', '(', 'weights', ')', 'nums1', '=', '[', '10', ',', '50', ',', '40', ']', 'nums2', '=', '[', '2', ',', '5', ',', '3', ']', 'print', '(', '""Original list elements:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nWeighted average of the said two list of numbers:""', ')', 'print', '(', 'weighted_average', '(', 'nums1', ',', 'nums2', ')', ')', 'nums1', '=', '[', '82', ',', '90', ',', '76', ',', '83', ']', 'nums2', '=', '[', '.2', ',', '.35', ',', '.45', ',', '32', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nWeighted average of the said two list of numbers:""', ')', 'print', '(', 'weighted_average', '(', 'nums1', ',', 'nums2', ')', ')']"
991,"['write', 'python', 'program', 'form', 'bigram', 'word', 'given', 'list', 'string']","['def', 'bigram_sequence', '(', 'text_lst', ')', ':', 'result', '=', '[', 'a', 'for', 'ls', 'in', 'text_lst', 'for', 'a', 'in', 'zip', '(', 'ls', '.', 'split', '(', '"" ""', ')', '[', ':', '-', '1', ']', ',', 'ls', '.', 'split', '(', '"" ""', ')', '[', '1', ':', ']', ')', ']', 'return', 'result', 'text', '=', '[', '""Sum all the items in a list""', ',', '""Find the second smallest number in a list""', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'text', ')', 'print', '(', '""\\nBigram sequence of the said list:""', ')', 'print', '(', 'bigram_sequence', '(', 'text', ')', ')']"
992,"['write', 'python', 'program', 'delete', 'last', 'item', 'singly', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'singly_linked_list', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'tail', '=', 'None', 'self', '.', 'head', '=', 'None', 'self', '.', 'count', '=', '0', 'def', 'append_item', '(', 'self', ',', 'data', ')', ':', 'node', '=', 'Node', '(', 'data', ')', 'if', 'self', '.', 'head', ':', 'self', '.', 'head', '.', 'next', '=', 'node', 'self', '.', 'head', '=', 'node', 'else', ':', 'self', '.', 'tail', '=', 'node', 'self', '.', 'head', '=', 'node', 'self', '.', 'count', '+=', '1', 'def', 'delete_item', '(', 'self', ',', 'data', ')', ':', 'current', '=', 'self', '.', 'tail', 'prev', '=', 'self', '.', 'tail', 'while', 'current', ':', 'if', 'current', '.', 'data', '==', 'data', ':', 'if', 'current', '==', 'self', '.', 'tail', ':', 'self', '.', 'tail', '=', 'current', '.', 'next', 'else', ':', 'prev', '.', 'next', '=', 'current', '.', 'next', 'self', '.', 'count', '-=', '1', 'return', 'prev', '=', 'current', 'current', '=', 'current', '.', 'next', 'def', 'iterate_item', '(', 'self', ')', ':', 'current_item', '=', 'self', '.', 'tail', 'while', 'current_item', ':', 'val', '=', 'current_item', '.', 'data', 'current_item', '=', 'current_item', '.', 'next', 'yield', 'val', 'items', '=', 'singly_linked_list', '(', ')', 'items', '.', 'append_item', '(', ""'PHP'"", ')', 'items', '.', 'append_item', '(', ""'Python'"", ')', 'items', '.', 'append_item', '(', ""'C#'"", ')', 'items', '.', 'append_item', '(', ""'C++'"", ')', 'items', '.', 'append_item', '(', ""'Java'"", ')', 'print', '(', '""Original list:""', ')', 'for', 'val', 'in', 'items', '.', 'iterate_item', '(', ')', ':', 'print', '(', 'val', ')', 'print', '(', '""\\nAfter removing the last item from the list:""', ')', 'items', '.', 'delete_item', '(', ""'Java'"", ')', 'for', 'val', 'in', 'items', '.', 'iterate_item', '(', ')', ':', 'print', '(', 'val', ')']"
993,"['write', 'panda', 'program', 'filter', 'word', 'given', 'series', 'contain', 'atleast', 'two', 'vowel']","['import', 'pandas', 'as', 'pd', 'from', 'collections', 'import', 'Counter', 'color_series', '=', 'pd', '.', 'Series', '(', '[', ""'Red'"", ',', ""'Green'"", ',', ""'Orange'"", ',', ""'Pink'"", ',', ""'Yellow'"", ',', ""'White'"", ']', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'color_series', ')', 'print', '(', '""\\nFiltered words:""', ')', 'result', '=', 'mask', '=', 'color_series', '.', 'map', '(', 'lambda', 'c', ':', 'sum', '(', '[', 'Counter', '(', 'c', '.', 'lower', '(', ')', ')', '.', 'get', '(', 'i', ',', '0', ')', 'for', 'i', 'in', 'list', '(', ""'aeiou'"", ')', ']', ')', '>=', '2', ')', 'print', '(', 'color_series', '[', 'result', ']', ')']"
994,"['write', 'python', 'program', 'add', 'leading', 'zero', 'string']","['str1', '=', ""'122.22'"", 'print', '(', '""Original String: ""', ',', 'str1', ')', 'print', '(', '""\\nAdded trailing zeros:""', ')', 'str1', '=', 'str1', '.', 'ljust', '(', '8', ',', ""'0'"", ')', 'print', '(', 'str1', ')', 'str1', '=', 'str1', '.', 'ljust', '(', '10', ',', ""'0'"", ')', 'print', '(', 'str1', ')', 'print', '(', '""\\nAdded leading zeros:""', ')', 'str1', '=', ""'122.22'"", 'str1', '=', 'str1', '.', 'rjust', '(', '8', ',', ""'0'"", ')', 'print', '(', 'str1', ')', 'str1', '=', 'str1', '.', 'rjust', '(', '10', ',', ""'0'"", ')', 'print', '(', 'str1', ')']"
995,"['write', 'panda', 'program', 'import', 'excel', 'data', 'dataframe', 'find', 'detail', 'mine', 'name', 'start', 'p']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\coalpublic2013.xlsx'"", ')', 'df', '[', 'df', '[', '""Mine_Name""', ']', '.', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'startswith', '(', ""'P'"", ')', ')', ']', '.', 'head', '(', ')']"
996,"['write', 'numpy', 'program', 'calculate', 'round', 'floor', 'ceiling', 'truncated', 'round', 'given', 'number', 'decimal', 'input', 'elementwise', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '3.1', ',', '3.5', ',', '4.5', ',', '2.9', ',', '-', '3.1', ',', '-', '3.5', ',', '-', '5.9', ']', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'r1', '=', 'np', '.', 'around', '(', 'x', ')', 'r2', '=', 'np', '.', 'floor', '(', 'x', ')', 'r3', '=', 'np', '.', 'ceil', '(', 'x', ')', 'r4', '=', 'np', '.', 'trunc', '(', 'x', ')', 'r5', '=', '[', 'round', '(', 'elem', ')', 'for', 'elem', 'in', 'x', ']', 'print', '(', '""\\naround:   ""', ',', 'r1', ')', 'print', '(', '""floor:    ""', ',', 'r2', ')', 'print', '(', '""ceil:     ""', ',', 'r3', ')', 'print', '(', '""trunc:    ""', ',', 'r4', ')', 'print', '(', '""round:    ""', ',', 'r5', ')']"
997,"['write', 'numpy', 'program', 'create', 'vector', 'length', 'value', 'evenly', 'distributed']","['import', 'numpy', 'as', 'np', 'v', '=', 'np', '.', 'linspace', '(', '10', ',', '49', ',', '5', ')', 'print', '(', '""Length 10 with values evenly distributed between 5 and 50:""', ')', 'print', '(', 'v', ')']"
998,"['write', 'python', 'program', 'check', 'whether', 'word', 'given', 'sting', 'contains', 'duplicate', 'characrters', 'return', 'true', 'false']","['def', 'duplicate_letters', '(', 'text', ')', ':', 'word_list', '=', 'text', '.', 'split', '(', ')', 'for', 'word', 'in', 'word_list', ':', 'if', 'len', '(', 'word', ')', '>', 'len', '(', 'set', '(', 'word', ')', ')', ':', 'return', 'False', 'return', 'True', 'text', '=', '""Filter out the factorials of the said list.""', 'print', '(', '""Original text:""', ')', 'print', '(', 'text', ')', 'print', '(', '""Check whether any word in the said sting contains duplicate characrters or not!""', ')', 'print', '(', 'duplicate_letters', '(', 'text', ')', ')', 'text', '=', '""Python Exercise.""', 'print', '(', '""\\nOriginal text:""', ')', 'print', '(', 'text', ')', 'print', '(', '""Check whether any word in the said sting contains duplicate characrters or not!""', ')', 'print', '(', 'duplicate_letters', '(', 'text', ')', ')', 'text', '=', '""The wait is over.""', 'print', '(', '""\\nOriginal text:""', ')', 'print', '(', 'text', ')', 'print', '(', '""Check whether any word in the said sting contains duplicate characrters or not!""', ')', 'print', '(', 'duplicate_letters', '(', 'text', ')', ')']"
999,"['write', 'python', 'program', 'find', 'maximum', 'minimum', 'value', 'three', 'given', 'list']","['nums1', '=', '[', '2', ',', '3', ',', '5', ',', '8', ',', '7', ',', '2', ',', '3', ']', 'nums2', '=', '[', '4', ',', '3', ',', '9', ',', '0', ',', '4', ',', '3', ',', '9', ']', 'nums3', '=', '[', '2', ',', '1', ',', '5', ',', '6', ',', '5', ',', '5', ',', '4', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', 'nums3', ')', 'print', '(', '""Maximum value of the said three lists:""', ')', 'print', '(', 'max', '(', 'nums1', '+', 'nums2', '+', 'nums3', ')', ')', 'print', '(', '""Minimum value of the said three lists:""', ')', 'print', '(', 'min', '(', 'nums1', '+', 'nums2', '+', 'nums3', ')', ')']"
1000,"['write', 'panda', 'program', 'rename', 'name', 'column', 'specific', 'label', 'main', 'index', 'multiindex', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'sales_arrays', '=', '[', '[', ""'sale1'"", ',', ""'sale1'"", ',', ""'sale2'"", ',', ""'sale2'"", ',', ""'sale3'"", ',', ""'sale3'"", ',', ""'sale4'"", ',', ""'sale4'"", ']', ',', '[', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ',', ""'city1'"", ',', ""'city2'"", ']', ']', 'sales_tuples', '=', 'list', '(', 'zip', '(', '*', 'sales_arrays', ')', ')', 'sales_index', '=', 'pd', '.', 'MultiIndex', '.', 'from_tuples', '(', 'sales_tuples', ',', 'names', '=', '[', ""'sale'"", ',', ""'city'"", ']', ')', 'print', '(', 'sales_tuples', ')', 'print', '(', '""\\nConstruct a Dataframe using the said MultiIndex levels: ""', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '8', ',', '5', ')', ',', 'index', '=', 'sales_index', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nRename the columns name of the said dataframe""', ')', 'df1', '=', 'df', '.', 'rename', '(', 'columns', '=', '{', '0', ':', '""col1""', ',', '1', ':', '""col2""', ',', '2', ':', '""col3""', ',', '3', ':', '""col4""', ',', '4', ':', '""col5""', '}', ')', 'print', '(', 'df1', ')', 'print', '(', '""\\nRename specific labels of the main index of the DataFrame""', ')', 'df2', '=', 'df1', '.', 'rename', '(', 'index', '=', '{', '""sale2""', ':', '""S2""', ',', '""city2""', ':', '""C2""', '}', ')', 'print', '(', 'df2', ')']"
1001,"['write', 'panda', 'program', 'create', 'line', 'plot', 'historical', 'stock', 'price', 'alphabet', 'inc', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-09-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'df2', '=', 'df1', '.', 'set_index', '(', ""'Date'"", ')', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '5', ',', '5', ')', ')', 'plt', '.', 'suptitle', '(', ""'Stock prices of Alphabet Inc.,\\n01-04-2020 to 30-09-2020'"", ',', 'fontsize', '=', '18', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'xlabel', '(', '""Date""', ',', 'fontsize', '=', '16', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'ylabel', '(', '""$ price""', ',', 'fontsize', '=', '16', ',', 'color', '=', ""'black'"", ')', 'df2', '[', ""'Close'"", ']', '.', 'plot', '(', 'color', '=', ""'green'"", ')', ';', 'plt', '.', 'show', '(', ')']"
1002,"['write', 'numpy', 'program', 'join', 'sequence', 'array', 'along', 'new', 'axis']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '2', ',', '3', ',', '4', ']', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'x', ')', 'print', '(', 'y', ')', 'print', '(', '""Sequence of arrays along a new axis:""', ')', 'print', '(', 'np', '.', 'vstack', '(', '(', 'x', ',', 'y', ')', ')', ')', 'x', '=', 'np', '.', 'array', '(', '[', '[', '1', ']', ',', '[', '2', ']', ',', '[', '3', ']', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '[', '2', ']', ',', '[', '3', ']', ',', '[', '4', ']', ']', ')', 'print', '(', '""\\nOriginal arrays:""', ')', 'print', '(', 'x', ')', 'print', '(', ')', 'print', '(', 'y', ')', 'print', '(', '""Sequence of arrays along a new axis:""', ')', 'print', '(', 'np', '.', 'vstack', '(', '(', 'x', ',', 'y', ')', ')', ')']"
1003,"['write', 'python', 'program', 'rotate', 'given', 'list', 'specified', 'number', 'item', 'right', 'left', 'direction']","['nums1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', 'print', '(', '""original List:""', ')', 'print', '(', 'nums1', ')', 'print', '(', '""\\nRotate the said list in left direction by 4:""', ')', 'result', '=', 'nums1', '[', '3', ':', ']', '+', 'nums1', '[', ':', '4', ']', 'print', '(', 'result', ')', 'print', '(', '""\\nRotate the said list in left direction by 2:""', ')', 'result', '=', 'nums1', '[', '2', ':', ']', '+', 'nums1', '[', ':', '2', ']', 'print', '(', 'result', ')', 'print', '(', '""\\nRotate the said list in Right direction by 4:""', ')', 'result', '=', 'nums1', '[', '-', '3', ':', ']', '+', 'nums1', '[', ':', '-', '4', ']', 'print', '(', 'result', ')', 'print', '(', '""\\nRotate the said list in Right direction by 2:""', ')', 'result', '=', 'nums1', '[', '-', '2', ':', ']', '+', 'nums1', '[', ':', '-', '2', ']', 'print', '(', 'result', ')']"
1004,"['write', 'python', 'program', 'get', 'last', 'part', 'string', 'specified', 'character']","['str1', '=', ""'https://www.w3resource.com/python-exercises/string'"", 'print', '(', 'str1', '.', 'rsplit', '(', ""'/'"", ',', '1', ')', '[', '0', ']', ')', 'print', '(', 'str1', '.', 'rsplit', '(', ""'-'"", ',', '1', ')', '[', '0', ']', ')']"
1005,"['write', 'numpy', 'program', 'create', 'array', 'random', 'value', 'find', 'minimum', 'maximum', 'value']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'random', '.', 'random', '(', '(', '5', ',', '5', ')', ')', 'print', '(', '""Original Array:""', ')', 'print', '(', 'x', ')', 'xmin', ',', 'xmax', '=', 'x', '.', 'min', '(', ')', ',', 'x', '.', 'max', '(', ')', 'print', '(', '""Minimum and Maximum Values:""', ')', 'print', '(', 'xmin', ',', 'xmax', ')']"
1006,"['write', 'numpy', 'program', 'find', 'element', 'specified', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '2', ',', '4', ',', '6', ']', ',', '[', '6', ',', '8', ',', '10', ']', ']', ',', 'np', '.', 'int32', ')', 'print', '(', 'x', ')', 'e1', '=', 'x', '.', 'flat', '[', '3', ']', 'print', '(', '""Forth e1ement of the array:""', ')', 'print', '(', 'e1', ')']"
1007,"['write', 'python', 'program', 'find', 'list', 'maximum', 'minimum', 'length']","['def', 'max_length_list', '(', 'input_list', ')', ':', 'max_length', '=', 'max', '(', 'len', '(', 'x', ')', 'for', 'x', 'in', 'input_list', ')', 'max_list', '=', 'max', '(', 'input_list', ',', 'key', '=', 'len', ')', 'return', '(', 'max_length', ',', 'max_list', ')', 'def', 'min_length_list', '(', 'input_list', ')', ':', 'min_length', '=', 'min', '(', 'len', '(', 'x', ')', 'for', 'x', 'in', 'input_list', ')', 'min_list', '=', 'min', '(', 'input_list', ',', 'key', '=', 'len', ')', 'return', '(', 'min_length', ',', 'min_list', ')', 'list1', '=', '[', '[', '0', ']', ',', '[', '1', ',', '3', ']', ',', '[', '5', ',', '7', ']', ',', '[', '9', ',', '11', ']', ',', '[', '13', ',', '15', ',', '17', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""\\nList with maximum length of lists:""', ')', 'print', '(', 'max_length_list', '(', 'list1', ')', ')', 'print', '(', '""\\nList with minimum length of lists:""', ')', 'print', '(', 'min_length_list', '(', 'list1', ')', ')', 'list1', '=', '[', '[', '0', ']', ',', '[', '1', ',', '3', ']', ',', '[', '5', ',', '7', ']', ',', '[', '9', ',', '11', ']', ',', '[', '3', ',', '5', ',', '7', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""\\nList with maximum length of lists:""', ')', 'print', '(', 'max_length_list', '(', 'list1', ')', ')', 'print', '(', '""\\nList with minimum length of lists:""', ')', 'print', '(', 'min_length_list', '(', 'list1', ')', ')', 'list1', '=', '[', '[', '12', ']', ',', '[', '1', ',', '3', ']', ',', '[', '1', ',', '34', ',', '5', ',', '7', ']', ',', '[', '9', ',', '11', ']', ',', '[', '3', ',', '5', ',', '7', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""\\nList with maximum length of lists:""', ')', 'print', '(', 'max_length_list', '(', 'list1', ')', ')', 'print', '(', '""\\nList with minimum length of lists:""', ')', 'print', '(', 'min_length_list', '(', 'list1', ')', ')']"
1008,"['write', 'python', 'program', 'extract', 'display', 'header', 'tag']","['from', 'urllib', '.', 'request', 'import', 'urlopen', 'from', 'bs4', 'import', 'BeautifulSoup', 'import', 're', 'html', '=', 'urlopen', '(', ""'https://en.wikipedia.org/wiki/Peter_Jeffrey_(RAAF_officer)'"", ')', 'bs', '=', 'BeautifulSoup', '(', 'html', ',', ""'html.parser'"", ')', 'images', '=', 'bs', '.', 'find_all', '(', ""'img'"", ',', '{', ""'src'"", ':', 're', '.', 'compile', '(', ""'.jpg'"", ')', '}', ')', 'for', 'image', 'in', 'images', ':', 'print', '(', 'image', '[', ""'src'"", ']', '+', ""'\\n'"", ')']"
1009,"['write', 'python', 'program', 'select', 'item', 'randomly', 'list']","['import', 'random', 'color_list', '=', '[', ""'Red'"", ',', ""'Blue'"", ',', ""'Green'"", ',', ""'White'"", ',', ""'Black'"", ']', 'print', '(', 'random', '.', 'choice', '(', 'color_list', ')', ')']"
1010,"['write', 'numpy', 'program', 'build', 'array', 'combination', 'three', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', '[', '1', ',', '2', ',', '3', ']', 'y', '=', '[', '4', ',', '5', ']', 'z', '=', '[', '6', ',', '7', ']', 'print', '(', '""Original arrays:""', ')', 'print', '(', '""Array-1""', ')', 'print', '(', 'x', ')', 'print', '(', '""Array-2""', ')', 'print', '(', 'y', ')', 'print', '(', '""Array-3""', ')', 'print', '(', 'z', ')', 'new_array', '=', 'np', '.', 'array', '(', 'np', '.', 'meshgrid', '(', 'x', ',', 'y', ',', 'z', ')', ')', '.', 'T', '.', 'reshape', '(', '-', '1', ',', '3', ')', 'print', '(', '""Combine array:""', ')', 'print', '(', 'new_array', ')']"
1011,"['write', 'python', 'program', 'count', 'number', 'group', 'nonzero', 'number', 'separated', 'zero', 'given', 'list', 'number']","['def', 'test', '(', 'lst', ')', ':', 'previous_digit', '=', '0', 'ctr', '=', '0', 'for', 'digit', 'in', 'lst', ':', 'if', 'previous_digit', '==', '0', 'and', 'digit', '!=', '0', ':', 'ctr', '+=', '1', 'previous_digit', '=', 'digit', 'return', 'ctr', 'nums', '=', '[', '3', ',', '4', ',', '6', ',', '2', ',', '0', ',', '0', ',', '0', ',', '0', ',', '0', ',', '0', ',', '6', ',', '7', ',', '6', ',', '9', ',', '10', ',', '0', ',', '0', ',', '0', ',', '0', ',', '0', ',', '5', ',', '9', ',', '9', ',', '7', ',', '4', ',', '4', ',', '0', ',', '0', ',', '0', ',', '0', ',', '0', ',', '0', ',', '5', ',', '3', ',', '2', ',', '9', ',', '7', ',', '1', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nNumber of groups of non-zero numbers separated by zeros of the said list:""', ')', 'print', '(', 'test', '(', 'nums', ')', ')']"
1012,"['write', 'python', 'program', 'create', 'copy', 'source', 'code']","['def', 'file_copy', '(', 'src', ',', 'dest', ')', ':', 'with', 'open', '(', 'src', ')', 'as', 'f', ',', 'open', '(', 'dest', ',', ""'w'"", ')', 'as', 'd', ':', 'd', '.', 'write', '(', 'f', '.', 'read', '(', ')', ')', 'file_copy', '(', '""untitled0.py""', ',', '""z.py""', ')', 'with', 'open', '(', ""'z.py'"", ',', ""'r'"", ')', 'as', 'filehandle', ':', 'for', 'line', 'in', 'filehandle', ':', 'print', '(', 'line', ',', 'end', '=', ""''"", ')']"
1013,"['write', 'python', 'code', 'send', 'request', 'web', 'page', 'print', 'response', 'text', 'content', 'also', 'get', 'raw', 'socket', 'response', 'server']","['import', 'requests', 'res', '=', 'requests', '.', 'get', '(', ""'https://www.google.com/'"", ')', 'print', '(', '""Response text of https://google.com/:""', ')', 'print', '(', 'res', '.', 'text', ')', 'print', '(', '""\\n==============================================================================""', ')', 'print', '(', '""\\nContent of the said url:""', ')', 'print', '(', 'res', '.', 'content', ')', 'print', '(', '""\\n==============================================================================""', ')', 'print', '(', '""\\nRaw data of the said url:""', ')', 'r', '=', 'requests', '.', 'get', '(', ""'https://api.github.com/events'"", ',', 'stream', '=', 'True', ')', 'print', '(', 'r', '.', 'raw', ')', 'print', '(', 'r', '.', 'raw', '.', 'read', '(', '15', ')', ')']"
1014,"['write', 'panda', 'program', 'split', 'following', 'dataframe', 'group', 'based', 'customer', 'id', 'create', 'list', 'order', 'date', 'group']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', '70009', ',', '70002', ',', '70004', ',', '70007', ',', '70005', ',', '70008', ',', '70010', ',', '70003', ',', '70012', ',', '70011', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', ""'2012-10-05'"", ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3001', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3001', ',', '3005', ',', '3005', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5005', ',', '5001', ',', '5003', ',', '5002', ',', '5001', ',', '5001', ',', '5006', ',', '5003', ',', '5002', ',', '5007', ',', '5001', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'result', '=', 'df', '.', 'groupby', '(', ""'customer_id'"", ')', '[', ""'ord_date'"", ']', '.', 'apply', '(', 'list', ')', 'print', '(', '""\\nGroup on \'customer_id\' and display the list of order dates in group wise:""', ')', 'print', '(', 'result', ')']"
1015,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'number', 'adult', 'male', 'adult', 'female', 'child']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'df', '.', 'pivot_table', '(', ""'sex'"", ',', ""'who'"", ',', 'aggfunc', '=', ""'count'"", ')', 'print', '(', 'result', ')']"
1016,"['write', 'python', 'program', 'clone', 'copy', 'list']","['original_list', '=', '[', '10', ',', '22', ',', '44', ',', '23', ',', '4', ']', 'new_list', '=', 'list', '(', 'original_list', ')', 'print', '(', 'original_list', ')', 'print', '(', 'new_list', ')']"
1017,"['write', 'numpy', 'program', 'calculate', 'absolute', 'value', 'elementwise']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '-', '10.2', ',', '122.2', ',', '.20', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Element-wise absolute value:""', ')', 'print', '(', 'np', '.', 'absolute', '(', 'x', ')', ')']"
1018,"['write', 'numpy', 'program', 'check', 'whether', 'element', 'given', 'array', 'composed', 'digit', 'lower', 'case', 'letter', 'upper', 'case', 'letter']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', ""'Python'"", ',', ""'PHP'"", ',', ""'JS'"", ',', ""'Examples'"", ',', ""'html5'"", ',', ""'5'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""\\nOriginal Array:""', ')', 'print', '(', 'x', ')', 'r1', '=', 'np', '.', 'char', '.', 'isdigit', '(', 'x', ')', 'r2', '=', 'np', '.', 'char', '.', 'islower', '(', 'x', ')', 'r3', '=', 'np', '.', 'char', '.', 'isupper', '(', 'x', ')', 'print', '(', '""Digits only =""', ',', 'r1', ')', 'print', '(', '""Lower cases only =""', ',', 'r2', ')', 'print', '(', '""Upper cases only =""', ',', 'r3', ')']"
1019,"['write', 'panda', 'program', 'extract', 'year', 'month', 'day', 'hour', 'minute', 'second', 'weekday', 'unidentified', 'flying', 'object', 'ufo', 'reporting', 'date']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'print', '(', '""Original Dataframe:""', ')', 'print', '(', 'df', '.', 'head', '(', ')', ')', 'print', '(', '""\\nYear:""', ')', 'print', '(', 'df', '.', 'Date_time', '.', 'dt', '.', 'year', '.', 'head', '(', ')', ')', 'print', '(', '""\\nMonth:""', ')', 'print', '(', 'df', '.', 'Date_time', '.', 'dt', '.', 'month', '.', 'head', '(', ')', ')', 'print', '(', '""\\nDay:""', ')', 'print', '(', 'df', '.', 'Date_time', '.', 'dt', '.', 'day', '.', 'head', '(', ')', ')', 'print', '(', '""\\nHour:""', ')', 'print', '(', 'df', '.', 'Date_time', '.', 'dt', '.', 'hour', '.', 'head', '(', ')', ')', 'print', '(', '""\\nMinute:""', ')', 'print', '(', 'df', '.', 'Date_time', '.', 'dt', '.', 'minute', '.', 'head', '(', ')', ')', 'print', '(', '""\\nSecond:""', ')', 'print', '(', 'df', '.', 'Date_time', '.', 'dt', '.', 'second', '.', 'head', '(', ')', ')', 'print', '(', '""\\nWeekday:""', ')', 'print', '(', 'df', '.', 'Date_time', '.', 'dt', '.', 'weekday_name', '.', 'head', '(', ')', ')']"
1020,"['write', 'python', 'program', 'wrap', 'element', 'specified', 'tag', 'create', 'new', 'wrapper']","['from', 'bs4', 'import', 'BeautifulSoup', 'soup', '=', 'BeautifulSoup', '(', '""<p>Python exercises.</p>""', ',', '""lxml""', ')', 'print', '(', '""Original Markup:""', ')', 'print', '(', 'soup', '.', 'p', '.', 'string', '.', 'wrap', '(', 'soup', '.', 'new_tag', '(', '""i""', ')', ')', ')', 'print', '(', '""\\nNew Markup:""', ')', 'print', '(', 'soup', '.', 'p', '.', 'wrap', '(', 'soup', '.', 'new_tag', '(', '""div""', ')', ')', ')']"
1021,"['write', 'numpy', 'program', 'find', 'unique', 'row', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '20', ',', '20', ',', '20', ',', '0', ']', ',', '[', '0', ',', '20', ',', '20', ',', '20', ']', ',', '[', '0', ',', '20', ',', '20', ',', '20', ']', ',', '[', '20', ',', '20', ',', '20', ',', '0', ']', ',', '[', '10', ',', '20', ',', '20', ',', '20', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'y', '=', 'np', '.', 'ascontiguousarray', '(', 'x', ')', '.', 'view', '(', 'np', '.', 'dtype', '(', '(', 'np', '.', 'void', ',', 'x', '.', 'dtype', '.', 'itemsize', '*', 'x', '.', 'shape', '[', '1', ']', ')', ')', ')', '_', ',', 'idx', '=', 'np', '.', 'unique', '(', 'y', ',', 'return_index', '=', 'True', ')', 'unique_result', '=', 'x', '[', 'idx', ']', 'print', '(', '""Unique rows of the above array:""', ')', 'print', '(', 'unique_result', ')']"
1022,"['write', 'numpy', 'program', 'sort', 'given', 'complex', 'array', 'using', 'real', 'part', 'first', 'imaginary', 'part']","['import', 'numpy', 'as', 'np', 'complex_num', '=', '[', '1', '+', '2j', ',', '3', '-', '1j', ',', '3', '-', '2j', ',', '4', '-', '3j', ',', '3', '+', '5j', ']', 'print', '(', '""Original array:""', ')', 'print', '(', 'complex_num', ')', 'print', '(', '""\\nSorted a given complex array using the real part first, then the imaginary part.""', ')', 'print', '(', 'np', '.', 'sort_complex', '(', 'complex_num', ')', ')']"
1023,"['write', 'panda', 'program', 'get', 'time', 'series', 'last', 'working', 'day', 'month', 'specific', 'year']","['import', 'pandas', 'as', 'pd', 's', '=', 'pd', '.', 'date_range', '(', ""'2021-01-01'"", ',', 'periods', '=', '12', ',', 'freq', '=', ""'BM'"", ')', 'df', '=', 'pd', '.', 'DataFrame', '(', 's', ',', 'columns', '=', '[', ""'Date'"", ']', ')', 'print', '(', ""'last working days of each month of a specific year:'"", ')', 'print', '(', 'df', ')']"
1024,"['write', 'python', 'program', 'check', 'whether', 'nth', 'element', 'exists', 'given', 'list']","['x', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', 'xlen', '=', 'len', '(', 'x', ')', '-', '1', 'print', '(', 'x', '[', 'xlen', ']', ')']"
1025,"['write', 'panda', 'program', 'create', 'plot', 'adjusted', 'closing', 'price', 'day', 'simple', 'moving', 'average', 'exponential', 'moving', 'average', 'alphabet', 'inc', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-9-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'stock_data', '=', 'df1', '.', 'set_index', '(', ""'Date'"", ')', 'close_px', '=', 'stock_data', '[', ""'Adj Close'"", ']', 'stock_data', '[', ""'SMA_30_days'"", ']', '=', 'stock_data', '.', 'iloc', '[', ':', ',', '4', ']', '.', 'rolling', '(', 'window', '=', '30', ')', '.', 'mean', '(', ')', 'stock_data', '[', ""'EMA_20_days'"", ']', '=', 'stock_data', '.', 'iloc', '[', ':', ',', '4', ']', '.', 'ewm', '(', 'span', '=', '20', ',', 'adjust', '=', 'False', ')', '.', 'mean', '(', ')', 'plt', '.', 'figure', '(', 'figsize', '=', '[', '15', ',', '10', ']', ')', 'plt', '.', 'grid', '(', 'True', ')', 'plt', '.', 'title', '(', ""'Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]\\n'"", ',', 'fontsize', '=', '18', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'plot', '(', 'stock_data', '[', ""'Adj Close'"", ']', ',', 'label', '=', ""'Adjusted Closing Price'"", ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'plot', '(', 'stock_data', '[', ""'SMA_30_days'"", ']', ',', 'label', '=', ""'30 days Simple moving average'"", ',', 'color', '=', ""'red'"", ')', 'plt', '.', 'plot', '(', 'stock_data', '[', ""'EMA_20_days'"", ']', ',', 'label', '=', ""'20 days Exponential moving average'"", ',', 'color', '=', ""'green'"", ')', 'plt', '.', 'legend', '(', 'loc', '=', '2', ')', 'plt', '.', 'show', '(', ')']"
1026,"['write', 'python', 'program', 'create', 'new', 'arrow', 'object', 'representing', 'ceiling', 'timespan', 'arrow', 'object', 'given', 'timeframe', 'using', 'arrow', 'module', 'timeframe', 'datetime', 'property', 'like', 'day', 'hour', 'minute']","['import', 'arrow', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', ')', 'print', '(', '""Hour ceiling:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'ceil', '(', ""'hour'"", ')', ')', 'print', '(', '""\\nMinute ceiling:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'ceil', '(', ""'minute'"", ')', ')', 'print', '(', '""\\nSecond ceiling:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'ceil', '(', ""'second'"", ')', ')']"
1027,"['write', 'numpy', 'program', 'create', 'array', 'random', 'value', 'create', 'new', 'array', 'said', 'array', 'swapping', 'first', 'last', 'row']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'arange', '(', '16', ',', 'dtype', '=', ""'int'"", ')', '.', 'reshape', '(', '-', '1', ',', '4', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nNew array after swapping first and last rows of the said array:""', ')', 'new_nums', '=', 'nums', '[', ':', ':', '-', '1', ']', 'print', '(', 'new_nums', ')']"
1028,"['write', 'python', 'program', 'create', 'beautiful', 'soup', 'parse', 'tree', 'nicely', 'formatted', 'unicode', 'string', 'separate', 'line', 'htmlxml', 'tag', 'string']","['from', 'bs4', 'import', 'BeautifulSoup', 'str1', '=', '""<p>Some<b>bad<i>HTML Code</i></b></p>""', 'print', '(', '""Original string:""', ')', 'print', '(', 'str1', ')', 'soup', '=', 'BeautifulSoup', '(', '""<p>Some<b>bad<i>HTML Code</i></b></p>""', ',', '""xml""', ')', 'print', '(', '""\\nFormatted Unicode string:""', ')', 'print', '(', 'soup', '.', 'prettify', '(', ')', ')']"
1029,"['write', 'python', 'program', 'find', 'index', 'element', 'given', 'list', 'satisfy', 'provided', 'testing', 'function']","['def', 'find_index_of_all', '(', 'lst', ',', 'fn', ')', ':', 'return', '[', 'i', 'for', 'i', ',', 'x', 'in', 'enumerate', '(', 'lst', ')', 'if', 'fn', '(', 'x', ')', ']', 'print', '(', 'find_index_of_all', '(', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', 'lambda', 'n', ':', 'n', '%', '2', '==', '1', ')', ')']"
1030,"['write', 'panda', 'program', 'join', 'two', 'given', 'dataframes', 'along', 'row', 'merge', 'another', 'dataframe', 'along', 'common', 'column', 'id']","['import', 'pandas', 'as', 'pd', 'student_data1', '=', 'pd', '.', 'DataFrame', '(', '{', ""'student_id'"", ':', '[', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ',', ""'S4'"", ',', ""'S5'"", ']', ',', ""'name'"", ':', '[', ""'Danniella Fenton'"", ',', ""'Ryder Storey'"", ',', ""'Bryce Jensen'"", ',', ""'Ed Bernal'"", ',', ""'Kwame Morin'"", ']', ',', ""'marks'"", ':', '[', '200', ',', '210', ',', '190', ',', '222', ',', '199', ']', '}', ')', 'student_data2', '=', 'pd', '.', 'DataFrame', '(', '{', ""'student_id'"", ':', '[', ""'S4'"", ',', ""'S5'"", ',', ""'S6'"", ',', ""'S7'"", ',', ""'S8'"", ']', ',', ""'name'"", ':', '[', ""'Scarlette Fisher'"", ',', ""'Carla Williamson'"", ',', ""'Dante Morse'"", ',', ""'Kaiser William'"", ',', ""'Madeeha Preston'"", ']', ',', ""'marks'"", ':', '[', '201', ',', '200', ',', '198', ',', '219', ',', '201', ']', '}', ')', 'exam_data', '=', 'pd', '.', 'DataFrame', '(', '{', ""'student_id'"", ':', '[', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ',', ""'S4'"", ',', ""'S5'"", ',', ""'S7'"", ',', ""'S8'"", ',', ""'S9'"", ',', ""'S10'"", ',', ""'S11'"", ',', ""'S12'"", ',', ""'S13'"", ']', ',', ""'exam_id'"", ':', '[', '23', ',', '45', ',', '12', ',', '67', ',', '21', ',', '55', ',', '33', ',', '14', ',', '56', ',', '83', ',', '88', ',', '12', ']', '}', ')', 'print', '(', '""Original DataFrames:""', ')', 'print', '(', 'student_data1', ')', 'print', '(', 'student_data2', ')', 'print', '(', 'exam_data', ')', 'print', '(', '""\\nJoin first two said dataframes along rows:""', ')', 'result_data', '=', 'pd', '.', 'concat', '(', '[', 'student_data1', ',', 'student_data2', ']', ')', 'print', '(', 'result_data', ')', 'print', '(', '""\\nNow join the said result_data and df_exam_data along student_id:""', ')', 'final_merged_data', '=', 'pd', '.', 'merge', '(', 'result_data', ',', 'exam_data', ',', 'on', '=', ""'student_id'"", ')', 'print', '(', 'final_merged_data', ')']"
1031,"['write', 'panda', 'program', 'remove', 'duplicate', 'region', 'column', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nAfter removing the duplicates of WHO region column:""', ')', 'print', '(', 'w_a_con', '.', 'drop_duplicates', '(', ""'WHO region'"", ')', ')']"
1032,"['write', 'panda', 'program', 'import', 'three', 'datasheets', 'given', 'excel', 'data', 'combine', 'single', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df1', '=', 'pd', '.', 'read_excel', '(', ""'E:\\employee.xlsx'"", ',', 'sheet_name', '=', '0', ')', 'df2', '=', 'pd', '.', 'read_excel', '(', ""'E:\\employee.xlsx'"", ',', 'sheet_name', '=', '1', ')', 'df3', '=', 'pd', '.', 'read_excel', '(', ""'E:\\employee.xlsx'"", ',', 'sheet_name', '=', '2', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df1', ',', 'df2', ',', 'df3', ']', ')', 'print', '(', 'df', ')']"
1033,"['write', 'python', 'program', 'create', 'string', 'representation', 'arrow', 'object', 'formatted', 'according', 'format', 'string']","['import', 'arrow', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', ')', 'print', '(', '""\\nYYYY-MM-DD HH:mm:ss ZZ:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'format', '(', ""'YYYY-MM-DD HH:mm:ss ZZ'"", ')', ')', 'print', '(', '""\\nDD-MM-YYYY HH:mm:ss ZZ:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'format', '(', ""'DD-MM-YYYY HH:mm:ss ZZ'"", ')', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'format', '(', ""'\\nMMMM DD, YYYY'"", ')', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'format', '(', ')', ')']"
1034,"['write', 'python', 'program', 'get', 'daylight', 'saving', 'time', 'adjustment', 'using', 'arrow', 'module']","['import', 'arrow', 'print', '(', '""Daylight savings time adjustment:""', ')', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', '.', 'dst', '(', ')', 'print', '(', 'a', ')']"
1035,"['write', 'numpy', 'program', 'compute', 'natural', 'logarithm', 'one', 'plus', 'element', 'given', 'array', 'floatingpoint', 'accuracy']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1e-99', ',', '1e-100', ']', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'print', '(', '""\\nNatural logarithm of one plus each element:""', ')', 'print', '(', 'np', '.', 'log1p', '(', 'x', ')', ')']"
1036,"['python', 'dictionary', 'contains', 'list', 'value', 'write', 'python', 'program', 'update', 'list', 'value', 'said', 'dictionary']","['def', 'test', '(', 'dictionary', ')', ':', 'dictionary', '[', ""'Math'"", ']', '=', '[', 'x', '+', '1', 'for', 'x', 'in', 'dictionary', '[', ""'Math'"", ']', ']', 'dictionary', '[', ""'Physics'"", ']', '=', '[', 'x', '-', '2', 'for', 'x', 'in', 'dictionary', '[', ""'Physics'"", ']', ']', 'return', 'dictionary', 'dictionary', '=', '{', ""'Math'"", ':', '[', '88', ',', '89', ',', '90', ']', ',', ""'Physics'"", ':', '[', '92', ',', '94', ',', '89', ']', ',', ""'Chemistry'"", ':', '[', '90', ',', '87', ',', '93', ']', '}', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'dictionary', ')', 'print', '(', '""\\nUpdate the list values of the said dictionary:""', ')', 'print', '(', 'test', '(', 'dictionary', ')', ')']"
1037,"['write', 'numpy', 'program', 'calculate', 'average', 'without', 'nan', 'along', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arr1', '=', 'np', '.', 'array', '(', '[', '[', '10', ',', '20', ',', '30', ']', ',', '[', '40', ',', '50', ',', 'np', '.', 'nan', ']', ',', '[', 'np', '.', 'nan', ',', '6', ',', 'np', '.', 'nan', ']', ',', '[', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arr1', ')', 'temp', '=', 'np', '.', 'ma', '.', 'masked_array', '(', 'arr1', ',', 'np', '.', 'isnan', '(', 'arr1', ')', ')', 'result', '=', 'np', '.', 'mean', '(', 'temp', ',', 'axis', '=', '1', ')', 'print', '(', '""Averages without NaNs along the said array:""', ')', 'print', '(', 'result', '.', 'filled', '(', 'np', '.', 'nan', ')', ')']"
1038,"['write', 'python', 'program', 'create', 'dictionary', 'unique', 'value', 'given', 'list', 'key', 'frequency', 'value']","['from', 'collections', 'import', 'defaultdict', 'def', 'frequencies', '(', 'lst', ')', ':', 'freq', '=', 'defaultdict', '(', 'int', ')', 'for', 'val', 'in', 'lst', ':', 'freq', '[', 'val', ']', '+=', '1', 'return', 'dict', '(', 'freq', ')', 'print', '(', 'frequencies', '(', '[', ""'a'"", ',', ""'b'"", ',', ""'f'"", ',', ""'a'"", ',', ""'c'"", ',', ""'e'"", ',', ""'a'"", ',', ""'a'"", ',', ""'b'"", ',', ""'e'"", ',', ""'f'"", ']', ')', ')', 'print', '(', 'frequencies', '(', '[', '3', ',', '4', ',', '7', ',', '5', ',', '9', ',', '3', ',', '4', ',', '5', ',', '0', ',', '3', ',', '2', ',', '3', ']', ')', ')']"
1039,"['write', 'python', 'program', 'find', 'common', 'element', 'given', 'list']","['from', 'collections', 'import', 'Counter', 'language', '=', '[', ""'PHP'"", ',', ""'PHP'"", ',', ""'Python'"", ',', ""'PHP'"", ',', ""'Python'"", ',', ""'JS'"", ',', ""'Python'"", ',', ""'Python'"", ',', ""'PHP'"", ',', ""'Python'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'language', ')', 'cnt', '=', 'Counter', '(', 'language', ')', 'print', '(', '""\\nMost common element of the said list:""', ')', 'print', '(', 'cnt', '.', 'most_common', '(', '1', ')', '[', '0', ']', '[', '0', ']', ')']"
1040,"['write', 'python', 'program', 'access', 'environment', 'variable', 'value', 'environment', 'variable']","['import', 'os', 'print', '(', '""Access all environment variables:""', ')', 'print', '(', ""'*----------------------------------*'"", ')', 'print', '(', 'os', '.', 'environ', ')', 'print', '(', ""'*----------------------------------*'"", ')', 'print', '(', '""Access a particular environment variable:""', ')', 'print', '(', 'os', '.', 'environ', '[', ""'HOME'"", ']', ')', 'print', '(', ""'*----------------------------------*'"", ')', 'print', '(', 'os', '.', 'environ', '[', ""'PATH'"", ']', ')', 'print', '(', ""'*----------------------------------*'"", ')', 'print', '(', ""'Value of the environment variable key:'"", ')', 'print', '(', 'os', '.', 'getenv', '(', ""'JAVA_HOME'"", ')', ')', 'print', '(', 'os', '.', 'getenv', '(', ""'PYTHONPATH'"", ')', ')']"
1041,"['write', 'python', 'program', 'round', 'every', 'number', 'given', 'list', 'number', 'print', 'total', 'sum', 'multiplied', 'length', 'list']","['nums', '=', '[', '22.4', ',', '4.0', ',', '-', '16.22', ',', '-', '9.10', ',', '11.00', ',', '-', '12.22', ',', '14.20', ',', '-', '5.20', ',', '17.50', ']', 'print', '(', '""Original list: ""', ',', 'nums', ')', 'print', '(', '""Result:""', ')', 'lenght', '=', 'len', '(', 'nums', ')', 'print', '(', 'sum', '(', 'list', '(', 'map', '(', 'round', ',', 'nums', ')', ')', '*', 'lenght', ')', ')']"
1042,"['write', 'python', 'program', 'retrieve', 'descendant', 'body', 'tag', 'given', 'web', 'page']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup', 'url', '=', ""'https://www.python.org/'"", 'reqs', '=', 'requests', '.', 'get', '(', 'url', ')', 'soup', '=', 'BeautifulSoup', '(', 'reqs', '.', 'text', ',', ""'lxml'"", ')', 'print', '(', '""\\nDescendants of the body tag (https://www.python.org):\\n""', ')', 'root', '=', 'soup', '.', 'html', 'root_childs', '=', '[', 'e', '.', 'name', 'for', 'e', 'in', 'root', '.', 'descendants', 'if', 'e', '.', 'name', 'is', 'not', 'None', ']', 'print', '(', 'root_childs', ')']"
1043,"['write', 'panda', 'program', 'capitalize', 'string', 'value', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'name'"", ':', '[', ""'alberto'"", ',', ""'gino'"", ',', ""'ryan'"", ',', ""'Eesha'"", ',', ""'syed'"", ']', ',', ""'date_of_birth '"", ':', '[', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '18.5', ',', '21.2', ',', '22.5', ',', '22', ',', '23', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nAfter capitalizing name column:""', ')', 'df', '[', ""'name'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'capitalize', '(', ')', ',', 'df', '[', ""'name'"", ']', ')', ')', 'print', '(', 'df', ')']"
1044,"['write', 'python', 'program', 'check', 'whether', 'given', 'datetime', 'two', 'date', 'time', 'using', 'arrow', 'module']","['import', 'arrow', 'print', '(', '""Test whether a given datetime is between two dates and times:""', ')', 'start', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '6', ',', '5', ',', '12', ',', '30', ',', '10', ')', ')', 'end', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '6', ',', '5', ',', '12', ',', '30', ',', '36', ')', ')', 'print', '(', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '6', ',', '5', ',', '12', ',', '30', ',', '27', ')', ')', '.', 'is_between', '(', 'start', ',', 'end', ')', ')', 'start', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '5', ',', '5', ')', ')', 'end', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '5', ',', '8', ')', ')', 'print', '(', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '5', ',', '8', ')', ')', '.', 'is_between', '(', 'start', ',', 'end', ',', ""'[]'"", ')', ')', 'start', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '5', ',', '5', ')', ')', 'end', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '5', ',', '8', ')', ')', 'print', '(', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '5', ',', '8', ')', ')', '.', 'is_between', '(', 'start', ',', 'end', ',', ""'[)'"", ')', ')']"
1045,"['write', 'python', 'program', 'get', 'variable', 'unique', 'identification', 'number', 'string']","['x', '=', '100', 'print', '(', 'format', '(', 'id', '(', 'x', ')', ',', ""'x'"", ')', ')', 's', '=', ""'w3resource'"", 'print', '(', 'format', '(', 'id', '(', 's', ')', ',', ""'x'"", ')', ')']"
1046,"['write', 'python', 'program', 'calculate', 'number', 'day', 'two', 'date']","['from', 'datetime', 'import', 'date', 'f_date', '=', 'date', '(', '2014', ',', '7', ',', '2', ')', 'l_date', '=', 'date', '(', '2014', ',', '7', ',', '11', ')', 'delta', '=', 'l_date', '-', 'f_date', 'print', '(', 'delta', '.', 'days', ')']"
1047,"['write', 'python', 'program', 'create', 'string', 'two', 'given', 'string', 'concatenating', 'uncommon', 'character', 'said', 'string']","['def', 'uncommon_chars_concat', '(', 's1', ',', 's2', ')', ':', 'set1', '=', 'set', '(', 's1', ')', 'set2', '=', 'set', '(', 's2', ')', 'common_chars', '=', 'list', '(', 'set1', '&', 'set2', ')', 'result', '=', '[', 'ch', 'for', 'ch', 'in', 's1', 'if', 'ch', 'not', 'in', 'common_chars', ']', '+', '[', 'ch', 'for', 'ch', 'in', 's2', 'if', 'ch', 'not', 'in', 'common_chars', ']', 'return', '(', ""''"", '.', 'join', '(', 'result', ')', ')', 's1', '=', ""'abcdpqr'"", 's2', '=', ""'xyzabcd'"", 'print', '(', '""Original Substrings:\\n""', ',', 's1', '+', '""\\n""', ',', 's2', ')', 'print', '(', '""\\nAfter concatenating uncommon characters:""', ')', 'print', '(', 'uncommon_chars_concat', '(', 's1', ',', 's2', ')', ')']"
1048,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'item', 'wise', 'unit', 'sold']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\SaleData.xlsx'"", ')', 'print', '(', 'pd', '.', 'pivot_table', '(', 'df', ',', 'index', '=', '[', '""Item""', ']', ',', 'values', '=', '""Units""', ',', 'aggfunc', '=', 'np', '.', 'sum', ')', ')']"
1049,"['write', 'numpy', 'program', 'test', 'whether', 'element', 'array', 'evaluate', 'true']","['import', 'numpy', 'as', 'np', 'print', '(', 'np', '.', 'all', '(', '[', '[', 'True', ',', 'False', ']', ',', '[', 'True', ',', 'True', ']', ']', ')', ')', 'print', '(', 'np', '.', 'all', '(', '[', '[', 'True', ',', 'True', ']', ',', '[', 'True', ',', 'True', ']', ']', ')', ')', 'print', '(', 'np', '.', 'all', '(', '[', '10', ',', '20', ',', '0', ',', '-', '50', ']', ')', ')', 'print', '(', 'np', '.', 'all', '(', '[', '10', ',', '20', ',', '-', '50', ']', ')', ')']"
1050,"['write', 'python', 'program', 'remove', 'leading', 'zero', 'ip', 'address']","['def', 'remove_zeros_from_ip', '(', 'ip_add', ')', ':', 'new_ip_add', '=', '"".""', '.', 'join', '(', '[', 'str', '(', 'int', '(', 'i', ')', ')', 'for', 'i', 'in', 'ip_add', '.', 'split', '(', '"".""', ')', ']', ')', 'return', 'new_ip_add', ';', 'print', '(', 'remove_zeros_from_ip', '(', '""255.024.01.01""', ')', ')', 'print', '(', 'remove_zeros_from_ip', '(', '""127.0.0.01 ""', ')', ')']"
1051,"['write', 'numpy', 'program', 'convert', 'specified', 'input', 'array', 'least', 'one', 'dimension']","['import', 'numpy', 'as', 'np', 'x', '=', '12.0', 'print', '(', 'np', '.', 'atleast_1d', '(', 'x', ')', ')', 'x', '=', 'np', '.', 'arange', '(', '6.0', ')', '.', 'reshape', '(', '2', ',', '3', ')', 'print', '(', 'np', '.', 'atleast_1d', '(', 'x', ')', ')', 'print', '(', 'np', '.', 'atleast_1d', '(', '1', ',', '[', '3', ',', '4', ']', ')', ')']"
1052,"['write', 'python', 'program', 'split', 'given', 'list', 'specified', 'sized', 'chunk', 'using', 'itertools', 'module']","['from', 'itertools', 'import', 'islice', 'def', 'split_list', '(', 'lst', ',', 'n', ')', ':', 'lst', '=', 'iter', '(', 'lst', ')', 'result', '=', 'iter', '(', 'lambda', ':', 'tuple', '(', 'islice', '(', 'lst', ',', 'n', ')', ')', ',', '(', ')', ')', 'return', 'list', '(', 'result', ')', 'nums', '=', '[', '12', ',', '45', ',', '23', ',', '67', ',', '78', ',', '90', ',', '45', ',', '32', ',', '100', ',', '76', ',', '38', ',', '62', ',', '73', ',', '29', ',', '83', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'n', '=', '3', 'print', '(', '""\\nSplit the said list into equal size""', ',', 'n', ')', 'print', '(', 'split_list', '(', 'nums', ',', 'n', ')', ')', 'n', '=', '4', 'print', '(', '""\\nSplit the said list into equal size""', ',', 'n', ')', 'print', '(', 'split_list', '(', 'nums', ',', 'n', ')', ')', 'n', '=', '5', 'print', '(', '""\\nSplit the said list into equal size""', ',', 'n', ')', 'print', '(', 'split_list', '(', 'nums', ',', 'n', ')', ')']"
1053,"['write', 'python', 'program', 'find', 'link', 'tag', 'list', 'first', 'ten', 'webpage', 'pythonorg']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup', 'url', '=', ""'https://www.python.org/'"", 'reqs', '=', 'requests', '.', 'get', '(', 'url', ')', 'soup', '=', 'BeautifulSoup', '(', 'reqs', '.', 'text', ',', ""'lxml'"", ')', 'print', '(', '""First four h2 tags from the webpage python.org.:""', ')', 'print', '(', 'soup', '.', 'find_all', '(', ""'a'"", ')', '[', '0', ':', '10', ']', ')']"
1054,"['write', 'panda', 'program', 'check', 'inequality', 'index', 'axis', 'given', 'dataframe', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'df_data', '=', 'pd', '.', 'DataFrame', '(', '{', ""'W'"", ':', '[', '68', ',', '75', ',', '86', ',', '80', ',', 'None', ']', ',', ""'X'"", ':', '[', '78', ',', '75', ',', 'None', ',', '80', ',', '86', ']', ',', ""'Y'"", ':', '[', '84', ',', '94', ',', '89', ',', '86', ',', '86', ']', ',', ""'Z'"", ':', '[', '86', ',', '97', ',', '96', ',', '72', ',', '83', ']', '}', ')', ';', 'sr_data', '=', 'pd', '.', 'Series', '(', '[', '68', ',', '75', ',', '86', ',', '80', ',', 'None', ']', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df_data', ')', 'print', '(', '""\\nOriginal Series:""', ')', 'print', '(', 'sr_data', ')', 'print', '(', '""\\nCheck for inequality of the said series & dataframe:""', ')', 'print', '(', 'df_data', '.', 'ne', '(', 'sr_data', ',', 'axis', '=', '0', ')', ')']"
1055,"['write', 'python', 'function', 'get', 'string', 'made', 'copy', 'last', 'two', 'character', 'specified', 'string', 'length', 'must', 'least']","['def', 'insert_end', '(', 'str', ')', ':', 'sub_str', '=', 'str', '[', '-', '2', ':', ']', 'return', 'sub_str', '*', '4', 'print', '(', 'insert_end', '(', ""'Python'"", ')', ')', 'print', '(', 'insert_end', '(', ""'Exercises'"", ')', ')']"
1056,"['write', 'python', 'program', 'display', 'vertically', 'element', 'given', 'list', 'list', 'list']","['text', '=', '[', '""a""', ',', '""b""', ',', '""c""', ',', '""d""', ',', '""e""', ',', '""f""', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'text', ')', 'print', '(', '""\\nDisplay each element vertically of the said list:""', ')', 'for', 'i', 'in', 'text', ':', 'print', '(', 'i', ')', 'nums', '=', '[', '[', '1', ',', '2', ',', '5', ']', ',', '[', '4', ',', '5', ',', '8', ']', ',', '[', '7', ',', '3', ',', '6', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nDisplay each element vertically of the said list of lists:""', ')', 'for', 'a', ',', 'b', ',', 'c', 'in', 'zip', '(', '*', 'nums', ')', ':', 'print', '(', 'a', ',', 'b', ',', 'c', ')']"
1057,"['write', 'python', 'program', 'check', 'element', 'given', 'list', 'unique']","['def', 'all_unique', '(', 'test_list', ')', ':', 'if', 'len', '(', 'test_list', ')', '>', 'len', '(', 'set', '(', 'test_list', ')', ')', ':', 'return', 'False', 'return', 'True', 'nums1', '=', '[', '1', ',', '2', ',', '4', ',', '6', ',', '8', ',', '2', ',', '1', ',', '4', ',', '10', ',', '12', ',', '14', ',', '12', ',', '16', ',', '17', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums1', ')', 'print', '(', '""\\nIs the said list contains all unique elements!""', ')', 'print', '(', 'all_unique', '(', 'nums1', ')', ')', 'nums2', '=', '[', '2', ',', '4', ',', '6', ',', '8', ',', '10', ',', '12', ',', '14', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nIs the said list contains all unique elements!""', ')', 'print', '(', 'all_unique', '(', 'nums2', ')', ')']"
1058,"['write', 'python', 'program', 'check', 'nested', 'list', 'subset', 'another', 'nested', 'list']","['def', 'checkSubset', '(', 'input_list1', ',', 'input_list2', ')', ':', 'return', 'all', '(', 'map', '(', 'input_list1', '.', '__contains__', ',', 'input_list2', ')', ')', 'list1', '=', '[', '[', '1', ',', '3', ']', ',', '[', '5', ',', '7', ']', ',', '[', '9', ',', '11', ']', ',', '[', '13', ',', '15', ',', '17', ']', ']', 'list2', '=', '[', '[', '1', ',', '3', ']', ',', '[', '13', ',', '15', ',', '17', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', 'list2', ')', 'print', '(', '""\\nIf the one of the said list is a subset of another.:""', ')', 'print', '(', 'checkSubset', '(', 'list1', ',', 'list2', ')', ')', 'list1', '=', '[', '[', '[', '1', ',', '2', ']', ',', '[', '2', ',', '3', ']', ']', ',', '[', '[', '3', ',', '4', ']', ',', '[', '5', ',', '6', ']', ']', ']', 'list2', '=', '[', '[', '[', '3', ',', '4', ']', ',', '[', '5', ',', '6', ']', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', 'list2', ')', 'print', '(', '""\\nIf the one of the said list is a subset of another.:""', ')', 'print', '(', 'checkSubset', '(', 'list1', ',', 'list2', ')', ')', 'list1', '=', '[', '[', '[', '1', ',', '2', ']', ',', '[', '2', ',', '3', ']', ']', ',', '[', '[', '3', ',', '4', ']', ',', '[', '5', ',', '7', ']', ']', ']', 'list2', '=', '[', '[', '[', '3', ',', '4', ']', ',', '[', '5', ',', '6', ']', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', 'list2', ')', 'print', '(', '""\\nIf the one of the said list is a subset of another.:""', ')', 'print', '(', 'checkSubset', '(', 'list1', ',', 'list2', ')', ')']"
1059,"['write', 'panda', 'program', 'import', 'excel', 'data', 'dataframe', 'draw', 'bar', 'plot', 'comparing', 'year', 'msha', 'id', 'production', 'first', 'ten', 'record']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\coalpublic2013.xlsx'"", ')', 'df', '.', 'head', '(', '10', ')', '.', 'plot', '(', 'kind', '=', ""'bar'"", ',', 'figsize', '=', '(', '20', ',', '8', ')', ')', 'plt', '.', 'show', '(', ')']"
1060,"['write', 'numpy', 'program', 'add', 'element', 'matrix', 'element', 'matrix', 'add', 'element', 'element']","['import', 'numpy', 'as', 'np', 'def', 'sum_matrix_Elements', '(', 'm', ')', ':', 'arra', '=', 'np', '.', 'array', '(', 'm', ')', 'element_sum', '=', '0', 'for', 'p', 'in', 'range', '(', 'len', '(', 'arra', ')', ')', ':', 'for', 'q', 'in', 'range', '(', 'len', '(', 'arra', '[', 'p', ']', ')', ')', ':', 'if', 'arra', '[', 'p', ']', '[', 'q', ']', '==', '0', 'and', 'p', '<', 'len', '(', 'arra', ')', '-', '1', ':', 'arra', '[', 'p', '+', '1', ']', '[', 'q', ']', '=', '0', 'element_sum', '+=', 'arra', '[', 'p', ']', '[', 'q', ']', 'return', 'element_sum', 'm', '=', '[', '[', '1', ',', '1', ',', '0', ',', '2', ']', ',', '[', '0', ',', '3', ',', '0', ',', '3', ']', ',', '[', '1', ',', '0', ',', '4', ',', '4', ']', ']', 'print', '(', '""Original matrix:""', ')', 'print', '(', 'm', ')', 'print', '(', '""Sum:""', ')', 'print', '(', 'sum_matrix_Elements', '(', 'm', ')', ')']"
1061,"['write', 'python', 'program', 'get', 'minimum', 'value', 'list', 'mapping', 'element', 'value', 'using', 'given', 'function']","['def', 'min_by', '(', 'lst', ',', 'fn', ')', ':', 'return', 'min', '(', 'map', '(', 'fn', ',', 'lst', ')', ')', 'print', '(', 'min_by', '(', '[', '{', ""'n'"", ':', '4', '}', ',', '{', ""'n'"", ':', '2', '}', ',', '{', ""'n'"", ':', '8', '}', ',', '{', ""'n'"", ':', '6', '}', ']', ',', 'lambda', 'v', ':', 'v', '[', ""'n'"", ']', ')', ')']"
1062,"['write', 'numpy', 'program', 'find', 'number', 'element', 'array', 'length', 'one', 'array', 'element', 'byte', 'total', 'byte', 'consumed', 'element']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ']', ',', 'dtype', '=', 'np', '.', 'float64', ')', 'print', '(', '""Size of the array: ""', ',', 'x', '.', 'size', ')', 'print', '(', '""Length of one array element in bytes: ""', ',', 'x', '.', 'itemsize', ')', 'print', '(', '""Total bytes consumed by the elements of the array: ""', ',', 'x', '.', 'nbytes', ')']"
1063,"['create', 'two', 'array', 'six', 'element', 'write', 'numpy', 'program', 'count', 'number', 'instance', 'value', 'occurring', 'one', 'array', 'condition', 'another', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '10', ',', '-', '10', ',', '10', ',', '-', '10', ',', '-', '10', ',', '10', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '.85', ',', '.45', ',', '.9', ',', '.8', ',', '.12', ',', '.6', ']', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'x', ')', 'print', '(', 'y', ')', 'result', '=', 'np', '.', 'sum', '(', '(', 'x', '==', '10', ')', '&', '(', 'y', '>', '.5', ')', ')', 'print', '(', '""\\nNumber of instances of a value occurring in one array on the condition of another array:""', ')', 'print', '(', 'result', ')']"
1064,"['write', 'python', 'program', 'count', 'number', 'given', 'list']","['def', 'list_count_4', '(', 'nums', ')', ':', 'count', '=', '0', 'for', 'num', 'in', 'nums', ':', 'if', 'num', '==', '4', ':', 'count', '=', 'count', '+', '1', 'return', 'count', 'print', '(', 'list_count_4', '(', '[', '1', ',', '4', ',', '6', ',', '7', ',', '4', ']', ')', ')', 'print', '(', 'list_count_4', '(', '[', '1', ',', '4', ',', '6', ',', '4', ',', '7', ',', '4', ']', ')', ')']"
1065,"['write', 'python', 'script', 'merge', 'two', 'python', 'dictionary']","['d1', '=', '{', ""'a'"", ':', '100', ',', ""'b'"", ':', '200', '}', 'd2', '=', '{', ""'x'"", ':', '300', ',', ""'y'"", ':', '200', '}', 'd', '=', 'd1', '.', 'copy', '(', ')', 'd', '.', 'update', '(', 'd2', ')', 'print', '(', 'd', ')']"
1066,"['write', 'panda', 'program', 'convert', 'unixepoch', 'time', 'regular', 'time', 'stamp', 'utc', 'also', 'convert', 'said', 'timestamp', 'given', 'time', 'zone']","['import', 'pandas', 'as', 'pd', 'epoch_t', '=', '1621132355', 'time_stamp', '=', 'pd', '.', 'to_datetime', '(', 'epoch_t', ',', 'unit', '=', ""'s'"", ')', 'print', '(', '""Regular time stamp in UTC:""', ')', 'print', '(', 'time_stamp', ')', 'print', '(', '""\\nConvert the said timestamp in to US/Pacific:""', ')', 'print', '(', 'time_stamp', '.', 'tz_localize', '(', ""'UTC'"", ')', '.', 'tz_convert', '(', ""'US/Pacific'"", ')', ')', 'print', '(', '""\\nConvert the said timestamp in to Europe/Berlin:""', ')', 'print', '(', 'time_stamp', '.', 'tz_localize', '(', ""'UTC'"", ')', '.', 'tz_convert', '(', ""'Europe/Berlin'"", ')', ')']"
1067,"['write', 'numpy', 'program', 'create', 'random', 'vector', 'size', 'replace', 'maximum', 'value']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'random', '.', 'random', '(', '15', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'x', '[', 'x', '.', 'argmax', '(', ')', ']', '=', '-', '1', 'print', '(', '""Maximum value replaced by -1:""', ')', 'print', '(', 'x', ')']"
1068,"['write', 'python', 'program', 'generate', 'random', 'integer', 'excluding', 'random', 'integer', 'excluding', 'random', 'integer', 'step', 'random', 'date', 'two', 'date', 'use', 'randomrandrange']","['import', 'random', 'import', 'datetime', 'print', '(', '""Generate a random integer between 0 and 6:""', ')', 'print', '(', 'random', '.', 'randrange', '(', '5', ')', ')', 'print', '(', '""Generate random integer between 5 and 10, excluding 10:""', ')', 'print', '(', 'random', '.', 'randrange', '(', 'start', '=', '5', ',', 'stop', '=', '10', ')', ')', 'print', '(', '""Generate random integer between 0 and 10, with a step of 3:""', ')', 'print', '(', 'random', '.', 'randrange', '(', 'start', '=', '0', ',', 'stop', '=', '10', ',', 'step', '=', '3', ')', ')', 'print', '(', '""\\nRandom date between two dates:""', ')', 'start_dt', '=', 'datetime', '.', 'date', '(', '2019', ',', '2', ',', '1', ')', 'end_dt', '=', 'datetime', '.', 'date', '(', '2019', ',', '3', ',', '1', ')', 'time_between_dates', '=', 'end_dt', '-', 'start_dt', 'days_between_dates', '=', 'time_between_dates', '.', 'days', 'random_number_of_days', '=', 'random', '.', 'randrange', '(', 'days_between_dates', ')', 'random_date', '=', 'start_dt', '+', 'datetime', '.', 'timedelta', '(', 'days', '=', 'random_number_of_days', ')', 'print', '(', 'random_date', ')']"
1069,"['write', 'panda', 'program', 'create', 'conversion', 'string', 'datetime']","['from', 'datetime', 'import', 'datetime', 'from', 'dateutil', '.', 'parser', 'import', 'parse', 'print', '(', '""Convert datatime to strings:""', ')', 'stamp', '=', 'datetime', '(', '2019', ',', '7', ',', '1', ')', 'print', '(', 'stamp', '.', 'strftime', '(', ""'%Y-%m-%d'"", ')', ')', 'print', '(', 'stamp', '.', 'strftime', '(', ""'%d/%b/%y'"", ')', ')', 'print', '(', '""\\nConvert strings to datatime:""', ')', 'print', '(', 'parse', '(', ""'Sept 17th 2019'"", ')', ')', 'print', '(', 'parse', '(', ""'1/11/2019'"", ')', ')', 'print', '(', 'parse', '(', ""'1/11/2019'"", ',', 'dayfirst', '=', 'True', ')', ')']"
1070,"['write', 'python', 'program', 'solve', 'x', 'x']","['x', ',', 'y', '=', '4', ',', '3', 'result', '=', 'x', '*', 'x', '+', '2', '*', 'x', '*', 'y', '+', 'y', '*', 'y', 'print', '(', '""({} + {}) ^ 2) = {}""', '.', 'format', '(', 'x', ',', 'y', ',', 'result', ')', ')']"
1071,"['write', 'python', 'program', 'get', 'day', 'visit', 'broken', 'browser', 'site', 'datagov']","['from', 'urllib', '.', 'request', 'import', 'urlopen', 'from', 'bs4', 'import', 'BeautifulSoup', 'html', '=', 'urlopen', '(', '""https://en.wikipedia.org/wiki/Python""', ')', 'bsObj', '=', 'BeautifulSoup', '(', 'html', ')', 'for', 'link', 'in', 'bsObj', '.', 'findAll', '(', '""a""', ')', ':', 'if', ""'href'"", 'in', 'link', '.', 'attrs', ':', 'print', '(', 'link', '.', 'attrs', '[', ""'href'"", ']', ')']"
1072,"['write', 'panda', 'program', 'extract', 'phone', 'number', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', '10', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'c0001'"", ',', ""'c0002'"", ',', ""'c0003'"", ',', ""'c0003'"", ',', ""'c0004'"", ']', ',', ""'company_phone_no'"", ':', '[', ""'Company1-Phone no. 4695168357'"", ',', ""'Company2-Phone no. 8088729013'"", ',', ""'Company3-Phone no. 6204658086'"", ',', ""'Company4-Phone no. 5159530096'"", ',', ""'Company5-Phone no. 9037952371'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'find_phone_number', '(', 'text', ')', ':', 'ph_no', '=', 're', '.', 'findall', '(', 'r""\\b\\d{10}\\b""', ',', 'text', ')', 'return', '""""', '.', 'join', '(', 'ph_no', ')', 'df', '[', ""'number'"", ']', '=', 'df', '[', ""'company_phone_no'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'find_phone_number', '(', 'x', ')', ')', 'print', '(', '""\\Extracting numbers from dataframe columns:""', ')', 'print', '(', 'df', ')']"
1073,"['write', 'panda', 'program', 'split', 'given', 'dataframe', 'group', 'display', 'target', 'column', 'list', 'unique', 'value']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'id'"", ':', '[', ""'A'"", ',', ""'A'"", ',', ""'A'"", ',', ""'A'"", ',', ""'A'"", ',', ""'A'"", ',', ""'B'"", ',', ""'B'"", ',', ""'B'"", ',', ""'B'"", ',', ""'B'"", ']', ',', ""'type'"", ':', '[', '1', ',', '1', ',', '1', ',', '1', ',', '2', ',', '2', ',', '1', ',', '1', ',', '1', ',', '2', ',', '2', ']', ',', ""'book'"", ':', '[', ""'Math'"", ',', ""'Math'"", ',', ""'English'"", ',', ""'Physics'"", ',', ""'Math'"", ',', ""'English'"", ',', ""'Physics'"", ',', ""'English'"", ',', ""'Physics'"", ',', ""'English'"", ',', ""'English'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'new_df', '=', 'df', '[', '[', ""'id'"", ',', ""'type'"", ',', ""'book'"", ']', ']', '.', 'drop_duplicates', '(', ')', '.', 'groupby', '(', '[', ""'id'"", ',', ""'type'"", ']', ')', '[', ""'book'"", ']', '.', 'apply', '(', 'list', ')', '.', 'reset_index', '(', ')', 'new_df', '[', ""'book'"", ']', '=', 'new_df', '.', 'apply', '(', 'lambda', 'x', ':', '(', ""','"", '.', 'join', '(', '[', 'str', '(', 's', ')', 'for', 's', 'in', 'x', '[', ""'book'"", ']', ']', ')', ')', ',', 'axis', '=', '1', ')', 'print', '(', '""\\nList all unique values in a group:""', ')', 'print', '(', 'new_df', ')']"
1074,"['write', 'python', 'program', 'sort', 'given', 'matrix', 'ascending', 'order', 'according', 'sum', 'row', 'using', 'lambda']","['def', 'sort_matrix', '(', 'M', ')', ':', 'result', '=', 'sorted', '(', 'M', ',', 'key', '=', 'lambda', 'matrix_row', ':', 'sum', '(', 'matrix_row', ')', ')', 'return', 'result', 'matrix1', '=', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '2', ',', '4', ',', '5', ']', ',', '[', '1', ',', '1', ',', '1', ']', ']', 'matrix2', '=', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '-', '2', ',', '4', ',', '-', '5', ']', ',', '[', '1', ',', '-', '1', ',', '1', ']', ']', 'print', '(', '""Original Matrix:""', ')', 'print', '(', 'matrix1', ')', 'print', '(', '""\\nSort the said matrix in ascending order according to the sum of its rows""', ')', 'print', '(', 'sort_matrix', '(', 'matrix1', ')', ')', 'print', '(', '""\\nOriginal Matrix:""', ')', 'print', '(', 'matrix2', ')', 'print', '(', '""\\nSort the said matrix in ascending order according to the sum of its rows""', ')', 'print', '(', 'sort_matrix', '(', 'matrix2', ')', ')']"
1075,"['write', 'python', 'program', 'group', 'sequence', 'keyvalue', 'pair', 'dictionary', 'list']","['from', 'collections', 'import', 'defaultdict', 'class_roll', '=', '[', '(', ""'v'"", ',', '1', ')', ',', '(', ""'vi'"", ',', '2', ')', ',', '(', ""'v'"", ',', '3', ')', ',', '(', ""'vi'"", ',', '4', ')', ',', '(', ""'vii'"", ',', '1', ')', ']', 'd', '=', 'defaultdict', '(', 'list', ')', 'for', 'k', ',', 'v', 'in', 'class_roll', ':', 'd', '[', 'k', ']', '.', 'append', '(', 'v', ')', 'print', '(', 'sorted', '(', 'd', '.', 'items', '(', ')', ')', ')']"
1076,"['write', 'panda', 'program', 'drop', 'column', 'least', 'one', 'element', 'missing', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', 'np', '.', 'nan', ',', '70002', ',', '70004', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3002', ',', '3001', ',', '3001', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5003', ',', '5001', ',', 'np', '.', 'nan', ',', '5002', ',', '5001', ',', '5001', ',', 'np', '.', 'nan', ',', '5003', ',', '5002', ',', '5003', ',', 'np', '.', 'nan', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nDrop the columns where at least one element is missing:""', ')', 'result', '=', 'df', '.', 'dropna', '(', 'axis', '=', ""'columns'"", ')', 'print', '(', 'result', ')']"
1077,"['write', 'python', 'program', 'get', 'maximum', 'minimum', 'value', 'dictionary']","['my_dict', '=', '{', ""'x'"", ':', '500', ',', ""'y'"", ':', '5874', ',', ""'z'"", ':', '560', '}', 'key_max', '=', 'max', '(', 'my_dict', '.', 'keys', '(', ')', ',', 'key', '=', '(', 'lambda', 'k', ':', 'my_dict', '[', 'k', ']', ')', ')', 'key_min', '=', 'min', '(', 'my_dict', '.', 'keys', '(', ')', ',', 'key', '=', '(', 'lambda', 'k', ':', 'my_dict', '[', 'k', ']', ')', ')', 'print', '(', ""'Maximum Value: '"", ',', 'my_dict', '[', 'key_max', ']', ')', 'print', '(', ""'Minimum Value: '"", ',', 'my_dict', '[', 'key_min', ']', ')']"
1078,"['write', 'numpy', 'program', 'split', 'array', 'shape', 'two', 'array', 'along', 'second', 'axis']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '16', ')', '.', 'reshape', '(', '(', '4', ',', '4', ')', ')', 'print', '(', '""Original array:""', ',', 'x', ')', 'print', '(', '""After splitting horizontally:""', ')', 'print', '(', 'np', '.', 'hsplit', '(', 'x', ',', '[', '2', ',', '6', ']', ')', ')']"
1079,"['write', 'panda', 'program', 'split', 'given', 'dataframe', 'group', 'create', 'new', 'column', 'count', 'groupby']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'book_name'"", ':', '[', ""'Book1'"", ',', ""'Book2'"", ',', ""'Book3'"", ',', ""'Book4'"", ',', ""'Book1'"", ',', ""'Book2'"", ',', ""'Book3'"", ',', ""'Book5'"", ']', ',', ""'book_type'"", ':', '[', ""'Math'"", ',', ""'Physics'"", ',', ""'Computer'"", ',', ""'Science'"", ',', ""'Math'"", ',', ""'Physics'"", ',', ""'Computer'"", ',', ""'English'"", ']', ',', ""'book_id'"", ':', '[', '1', ',', '2', ',', '3', ',', '4', ',', '1', ',', '2', ',', '3', ',', '5', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nNew column with count from groupby:""', ')', 'result', '=', 'df', '.', 'groupby', '(', '[', '""book_name""', ',', '""book_type""', ']', ')', '[', '""book_type""', ']', '.', 'count', '(', ')', '.', 'reset_index', '(', 'name', '=', '""count""', ')', 'print', '(', 'result', ')']"
1080,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'probability', 'survival', 'class', 'gender', 'solo', 'boarding', 'port', 'embarkation']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'df', '.', 'pivot_table', '(', ""'survived'"", ',', '[', ""'sex'"", ',', ""'alone'"", ']', ',', '[', ""'embark_town'"", ',', ""'class'"", ']', ')', 'print', '(', 'result', ')']"
1081,"['write', 'python', 'program', 'get', 'string', 'given', 'string', 'occurrence', 'first', 'char', 'changed', 'except', 'first', 'char']","['def', 'change_char', '(', 'str1', ')', ':', 'char', '=', 'str1', '[', '0', ']', 'str1', '=', 'str1', '.', 'replace', '(', 'char', ',', ""'$'"", ')', 'str1', '=', 'char', '+', 'str1', '[', '1', ':', ']', 'return', 'str1', 'print', '(', 'change_char', '(', ""'restart'"", ')', ')']"
1082,"['write', 'numpy', 'program', 'create', 'two', 'array', 'size', 'bigger', 'smaller', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '16', ')', '.', 'reshape', '(', '4', ',', '4', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'x', ')', 'print', '(', '""\\nArray with size 2x2 from the said array:""', ')', 'new_array1', '=', 'np', '.', 'resize', '(', 'x', ',', '(', '2', ',', '2', ')', ')', 'print', '(', 'new_array1', ')', 'print', '(', '""\\nArray with size 6x6 from the said array:""', ')', 'new_array2', '=', 'np', '.', 'resize', '(', 'x', ',', '(', '6', ',', '6', ')', ')', 'print', '(', 'new_array2', ')']"
1083,"['write', 'panda', 'program', 'find', 'record', 'consumption', 'beverage', 'per', 'person', 'average', 'beverage', 'type', 'beer', 'wine', 'spirit', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nThe world alcohol consumption details: average consumption of \\nbeverages per person >=4 and Beverage Types is Beer:""', ')', 'print', '(', 'w_a_con', '[', '(', 'w_a_con', '[', ""'Display Value'"", ']', '>=', '4', ')', '&', '(', '(', 'w_a_con', '[', ""'Beverage Types'"", ']', '==', ""'Beer'"", ')', '|', '(', 'w_a_con', '[', ""'Beverage Types'"", ']', '==', ""'Wine'"", ')', '|', '(', 'w_a_con', '[', ""'Beverage Types'"", ']', '==', ""'Spirits'"", ')', ')', ']', '.', 'head', '(', '10', ')', ')']"
1084,"['write', 'numpy', 'program', 'create', 'threedimension', 'array', 'shape', 'set', 'variable', 'fill', 'array', 'element', 'value', 'using', 'unsigned', 'integer']","['import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '32', ')', 'nums', '=', 'np', '.', 'random', '.', 'randint', '(', 'low', '=', '0', ',', 'high', '=', '256', ',', 'size', '=', '(', '300', ',', '400', ',', '5', ')', ',', 'dtype', '=', 'np', '.', 'uint8', ')', 'print', '(', 'nums', ')']"
1085,"['write', 'python', 'program', 'check', 'dictionary', 'empty']","['my_dict', '=', '{', '}', 'if', 'not', 'bool', '(', 'my_dict', ')', ':', 'print', '(', '""Dictionary is empty""', ')']"
1086,"['write', 'numpy', 'program', 'count', 'number', 'p', 'given', 'array', 'elementwise']","['import', 'numpy', 'as', 'np', 'x1', '=', 'np', '.', 'array', '(', '[', ""'Python'"", ',', ""'PHP'"", ',', ""'JS'"", ',', ""'examples'"", ',', ""'html'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""\\nOriginal Array:""', ')', 'print', '(', 'x1', ')', 'print', '(', '""Number of ‘P’:""', ')', 'r', '=', 'np', '.', 'char', '.', 'count', '(', 'x1', ',', '""P""', ')', 'print', '(', 'r', ')']"
1087,"['write', 'python', 'program', 'calculate', 'sum', 'list', 'mapping', 'element', 'value', 'using', 'provided', 'function']","['def', 'sum_by', '(', 'lst', ',', 'fn', ')', ':', 'return', 'sum', '(', 'map', '(', 'fn', ',', 'lst', ')', ')', 'print', '(', 'sum_by', '(', '[', '{', ""'n'"", ':', '4', '}', ',', '{', ""'n'"", ':', '2', '}', ',', '{', ""'n'"", ':', '8', '}', ',', '{', ""'n'"", ':', '6', '}', ']', ',', 'lambda', 'v', ':', 'v', '[', ""'n'"", ']', ')', ')']"
1088,"['write', 'panda', 'program', 'create', 'comparison', 'top', 'year', 'ufo', 'sighted', 'v', 'month']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'most_sightings_years', '=', 'df', '[', ""'Date_time'"", ']', '.', 'dt', '.', 'year', '.', 'value_counts', '(', ')', '.', 'head', '(', '10', ')', 'def', 'is_top_years', '(', 'year', ')', ':', 'if', 'year', 'in', 'most_sightings_years', '.', 'index', ':', 'return', 'year', 'month_vs_year', '=', 'df', '.', 'pivot_table', '(', 'columns', '=', 'df', '[', ""'Date_time'"", ']', '.', 'dt', '.', 'month', ',', 'index', '=', 'df', '[', ""'Date_time'"", ']', '.', 'dt', '.', 'year', '.', 'apply', '(', 'is_top_years', ')', ',', 'aggfunc', '=', ""'count'"", ',', 'values', '=', ""'city'"", ')', 'month_vs_year', '.', 'index', '=', 'month_vs_year', '.', 'index', '.', 'astype', '(', 'int', ')', 'month_vs_year', '.', 'columns', '=', 'month_vs_year', '.', 'columns', '.', 'astype', '(', 'int', ')', 'print', '(', '""\\nComparison of the top 10 years in which the UFO was sighted vs each month:""', ')', 'print', '(', 'month_vs_year', '.', 'head', '(', '10', ')', ')']"
1089,"['write', 'numpy', 'program', 'remove', 'singledimensional', 'entry', 'specified', 'shape']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'zeros', '(', '(', '3', ',', '1', ',', '4', ')', ')', 'print', '(', 'np', '.', 'squeeze', '(', 'x', ')', '.', 'shape', ')']"
1090,"['write', 'python', 'code', 'send', 'cooky', 'given', 'server', 'access', 'cooky', 'response', 'server']","['import', 'requests', 'url', '=', ""'http://httpbin.org/cookies'"", 'my_cookies', '=', 'dict', '(', 'cookies_are', '=', ""'Cookies parameter use to send cookies to the server'"", ')', 'r', '=', 'requests', '.', 'get', '(', 'url', ',', 'cookies', '=', 'my_cookies', ')', 'print', '(', 'r', '.', 'text', ')']"
1091,"['write', 'panda', 'program', 'split', 'dataset', 'group', 'one', 'column', 'get', 'mean', 'min', 'max', 'value', 'group', 'using', 'following', 'dataset', 'find', 'mean', 'min', 'max', 'value', 'purchase', 'amount', 'group', 'customer', 'id']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'orders_data', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', '70009', ',', '70002', ',', '70004', ',', '70007', ',', '70005', ',', '70008', ',', '70010', ',', '70003', ',', '70012', ',', '70011', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', ""'2012-10-05'"", ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3005', ',', '3001', ',', '3002', ',', '3009', ',', '3005', ',', '3007', ',', '3002', ',', '3004', ',', '3009', ',', '3008', ',', '3003', ',', '3002', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5005', ',', '5001', ',', '5003', ',', '5002', ',', '5001', ',', '5001', ',', '5006', ',', '5003', ',', '5002', ',', '5007', ',', '5001', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'orders_data', ')', 'result', '=', 'orders_data', '.', 'groupby', '(', ""'customer_id'"", ')', '.', 'agg', '(', '{', ""'purch_amt'"", ':', '[', ""'mean'"", ',', ""'min'"", ',', ""'max'"", ']', '}', ')', 'print', '(', '""\\nMean, min, and max values of purchase amount (purch_amt) group by customer id  (customer_id).""', ')', 'print', '(', 'result', ')']"
1092,"['write', 'python', 'program', 'sort', 'tuple', 'float', 'element']","['price', '=', '[', '(', ""'item1'"", ',', ""'12.20'"", ')', ',', '(', ""'item2'"", ',', ""'15.10'"", ')', ',', '(', ""'item3'"", ',', ""'24.5'"", ')', ']', 'print', '(', 'sorted', '(', 'price', ',', 'key', '=', 'lambda', 'x', ':', 'float', '(', 'x', '[', '1', ']', ')', ',', 'reverse', '=', 'True', ')', ')']"
1093,"['write', 'numpy', 'program', 'get', 'elementwise', 'remainder', 'array', 'division']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '7', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Element-wise remainder of division:""', ')', 'print', '(', 'np', '.', 'remainder', '(', 'x', ',', '5', ')', ')']"
1094,"['write', 'python', 'program', 'get', 'string', 'representing', 'date', 'controlled', 'explicit', 'format', 'string']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\nString representing the date, controlled by an explicit format string:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'strftime', '(', ""'%d-%m-%Y %H:%M:%S'"", ')', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'strftime', '(', ""'%Y-%m-%d %H:%M:%S'"", ')', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'strftime', '(', ""'%Y-%d-%m %H:%M:%S'"", ')', ')']"
1095,"['write', 'python', 'program', 'remove', 'specified', 'column', 'given', 'nested', 'list']","['def', 'remove_column', '(', 'nums', ',', 'n', ')', ':', 'for', 'i', 'in', 'nums', ':', 'del', 'i', '[', 'n', ']', 'return', 'nums', 'list1', '=', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '2', ',', '4', ',', '5', ']', ',', '[', '1', ',', '1', ',', '1', ']', ']', 'n', '=', '0', 'print', '(', '""Original Nested list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""After removing 1st column:""', ')', 'print', '(', 'remove_column', '(', 'list1', ',', 'n', ')', ')', 'list2', '=', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '-', '2', ',', '4', ',', '-', '5', ']', ',', '[', '1', ',', '-', '1', ',', '1', ']', ']', 'n', '=', '2', 'print', '(', '""\\nOriginal Nested list:""', ')', 'print', '(', 'list2', ')', 'print', '(', '""After removing 3rd column:""', ')', 'print', '(', 'remove_column', '(', 'list2', ',', 'n', ')', ')']"
1096,"['write', 'python', 'program', 'count', 'frequency', 'word', 'file']","['from', 'collections', 'import', 'Counter', 'def', 'word_count', '(', 'fname', ')', ':', 'with', 'open', '(', 'fname', ')', 'as', 'f', ':', 'return', 'Counter', '(', 'f', '.', 'read', '(', ')', '.', 'split', '(', ')', ')', 'print', '(', '""Number of words in the file :""', ',', 'word_count', '(', '""test.txt""', ')', ')']"
1097,"['write', 'python', 'program', 'chunk', 'given', 'list', 'smaller', 'list', 'specified', 'size']","['from', 'math', 'import', 'ceil', 'def', 'chunk_list', '(', 'lst', ',', 'size', ')', ':', 'return', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'lst', '[', 'x', '*', 'size', ':', 'x', '*', 'size', '+', 'size', ']', ',', 'list', '(', 'range', '(', 'ceil', '(', 'len', '(', 'lst', ')', '/', 'size', ')', ')', ')', ')', ')', 'print', '(', 'chunk_list', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ',', '3', ')', ')']"
1098,"['write', 'numpy', 'program', 'create', 'array', 'create', 'new', 'array', 'said', 'array', 'swapping', 'first', 'last', 'second', 'third', 'column']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'arange', '(', '16', ',', 'dtype', '=', ""'int'"", ')', '.', 'reshape', '(', '-', '1', ',', '4', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nNew array after swapping first and last columns of the said array:""', ')', 'new_nums', '=', 'nums', '[', ':', ',', ':', ':', '-', '1', ']', 'print', '(', 'new_nums', ')']"
1099,"['write', 'python', 'program', 'create', 'time', 'object', 'hour', 'minute', 'second', 'microsecond', 'timestamp', 'representation', 'arrow', 'object', 'utc', 'time']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\nTime object with the same hour, minute, second, microsecond:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'time', '(', ')', ')', 'print', '(', '""\\nTimestamp representation of the Arrow object, in UTC time:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'timestamp', ')']"
1100,"['write', 'python', 'program', 'get', 'proleptic', 'gregorian', 'ordinal', 'given', 'date']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\nProleptic Gregorian ordinal of the date:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'toordinal', '(', ')', ')']"
1101,"['write', 'python', 'program', 'capitalize', 'first', 'last', 'letter', 'word', 'given', 'string']","['def', 'capitalize_first_last_letters', '(', 'str1', ')', ':', 'str1', '=', 'result', '=', 'str1', '.', 'title', '(', ')', 'result', '=', '""""', 'for', 'word', 'in', 'str1', '.', 'split', '(', ')', ':', 'result', '+=', 'word', '[', ':', '-', '1', ']', '+', 'word', '[', '-', '1', ']', '.', 'upper', '(', ')', '+', '"" ""', 'return', 'result', '[', ':', '-', '1', ']', 'print', '(', 'capitalize_first_last_letters', '(', '""python exercises practice solution""', ')', ')', 'print', '(', 'capitalize_first_last_letters', '(', '""w3resource""', ')', ')']"
1102,"['write', 'python', 'program', 'find', 'given', 'string', 'start', 'given', 'character', 'using', 'lambda']","['starts_with', '=', 'lambda', 'x', ':', 'True', 'if', 'x', '.', 'startswith', '(', ""'P'"", ')', 'else', 'False', 'print', '(', 'starts_with', '(', ""'Python'"", ')', ')', 'starts_with', '=', 'lambda', 'x', ':', 'True', 'if', 'x', '.', 'startswith', '(', ""'P'"", ')', 'else', 'False', 'print', '(', 'starts_with', '(', ""'Java'"", ')', ')']"
1103,"['write', 'python', 'program', 'read', 'given', 'string', 'character', 'character', 'compress', 'repeated', 'character', 'storing', 'length', 'character']","['from', 'itertools', 'import', 'groupby', 'def', 'encode_str', '(', 'input_str', ')', ':', 'return', '[', '(', 'len', '(', 'list', '(', 'n', ')', ')', ',', 'm', ')', 'for', 'm', ',', 'n', 'in', 'groupby', '(', 'input_str', ')', ']', 'str1', '=', '""AAASSSSKKIOOOORRRREEETTTTAAAABBBBBBDDDDD""', 'print', '(', '""Original string:""', ')', 'print', '(', 'str1', ')', 'print', '(', '""Result:""', ')', 'print', '(', 'encode_str', '(', 'str1', ')', ')', 'str1', '=', '""jjjjiiiiooooosssnssiiiiwwwweeeaaaabbbddddkkkklll""', 'print', '(', '""\\nOriginal string:""', ')', 'print', '(', 'str1', ')', 'print', '(', '""Result:""', ')', 'print', '(', 'encode_str', '(', 'str1', ')', ')']"
1104,"['write', 'numpy', 'program', 'create', 'array', 'filled', 'arbitrary', 'value']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'random', '.', 'random', '(', '(', '3', ',', '3', ',', '3', ')', ')', 'print', '(', 'x', ')']"
1105,"['write', 'python', 'program', 'print', 'variable', 'without', 'space', 'value']","['x', '=', '30', 'print', '(', '\'Value of x is ""{}""\'', '.', 'format', '(', 'x', ')', ')']"
1106,"['write', 'python', 'function', 'revers', 'string', 'length', 'multiple']","['def', 'reverse_string', '(', 'str1', ')', ':', 'if', 'len', '(', 'str1', ')', '%', '4', '==', '0', ':', 'return', ""''"", '.', 'join', '(', 'reversed', '(', 'str1', ')', ')', 'return', 'str1', 'print', '(', 'reverse_string', '(', ""'abcd'"", ')', ')', 'print', '(', 'reverse_string', '(', ""'python'"", ')', ')']"
1107,"['write', 'numpy', 'program', 'convert', 'angle', 'radian', 'degree', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '-', 'np', '.', 'pi', ',', '-', 'np', '.', 'pi', '/', '2', ',', 'np', '.', 'pi', '/', '2', ',', 'np', '.', 'pi', ']', ')', 'r1', '=', 'np', '.', 'degrees', '(', 'x', ')', 'r2', '=', 'np', '.', 'rad2deg', '(', 'x', ')', 'assert', 'np', '.', 'array_equiv', '(', 'r1', ',', 'r2', ')', 'print', '(', 'r1', ')']"
1108,"['write', 'numpy', 'program', 'extract', 'contiguous', 'block', 'given', 'random', 'matrix']","['import', 'numpy', 'as', 'np', 'arra1', '=', 'np', '.', 'random', '.', 'randint', '(', '0', ',', '5', ',', '(', '12', ',', '12', ')', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'arra1', ')', 'n', '=', '4', 'i', '=', '1', '+', '(', 'arra1', '.', 'shape', '[', '0', ']', '-', '4', ')', 'j', '=', '1', '+', '(', 'arra1', '.', 'shape', '[', '1', ']', '-', '4', ')', 'result', '=', 'np', '.', 'lib', '.', 'stride_tricks', '.', 'as_strided', '(', 'arra1', ',', 'shape', '=', '(', 'i', ',', 'j', ',', 'n', ',', 'n', ')', ',', 'strides', '=', 'arra1', '.', 'strides', '+', 'arra1', '.', 'strides', ')', 'print', '(', '""\\nContiguous 4x4 blocks:""', ')', 'print', '(', 'result', ')']"
1109,"['write', 'python', 'program', 'compute', 'greatest', 'common', 'divisor', 'gcd', 'two', 'positive', 'integer']","['def', 'gcd', '(', 'x', ',', 'y', ')', ':', 'gcd', '=', '1', 'if', 'x', '%', 'y', '==', '0', ':', 'return', 'y', 'for', 'k', 'in', 'range', '(', 'int', '(', 'y', '/', '2', ')', ',', '0', ',', '-', '1', ')', ':', 'if', 'x', '%', 'k', '==', '0', 'and', 'y', '%', 'k', '==', '0', ':', 'gcd', '=', 'k', 'break', 'return', 'gcd', 'print', '(', '""GCD of 12 & 17 =""', ',', 'gcd', '(', '12', ',', '17', ')', ')', 'print', '(', '""GCD of 4 & 6 =""', ',', 'gcd', '(', '4', ',', '6', ')', ')', 'print', '(', '""GCD of 336 & 360 =""', ',', 'gcd', '(', '336', ',', '360', ')', ')']"
1110,"['write', 'numpy', 'program', 'change', 'sign', 'given', 'array', 'given', 'array', 'elementwise']","['import', 'numpy', 'as', 'np', 'x1', '=', 'np', '.', 'array', '(', '[', '-', '1', ',', '0', ',', '1', ',', '2', ']', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x1', ')', 'x2', '=', '-', '2.1', 'print', '(', '""\\nSign of x1 to that of x2, element-wise:""', ')', 'print', '(', 'np', '.', 'copysign', '(', 'x1', ',', 'x2', ')', ')']"
1111,"['write', 'python', 'program', 'sort', 'given', 'list', 'list', 'length', 'value']","['def', 'sort_sublists', '(', 'input_list', ')', ':', 'input_list', '.', 'sort', '(', ')', 'input_list', '.', 'sort', '(', 'key', '=', 'len', ')', 'return', 'input_list', 'list1', '=', '[', '[', '2', ']', ',', '[', '0', ']', ',', '[', '1', ',', '3', ']', ',', '[', '0', ',', '7', ']', ',', '[', '9', ',', '11', ']', ',', '[', '13', ',', '15', ',', '17', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""\\nSort the list of lists by length and value:""', ')', 'print', '(', 'sort_sublists', '(', 'list1', ')', ')']"
1112,"['write', 'python', 'program', 'calculate', 'average', 'value', 'number', 'given', 'tuple', 'tuples', 'using', 'lambda']","['def', 'average_tuple', '(', 'nums', ')', ':', 'result', '=', 'tuple', '(', 'map', '(', 'lambda', 'x', ':', 'sum', '(', 'x', ')', '/', 'float', '(', 'len', '(', 'x', ')', ')', ',', 'zip', '(', '*', 'nums', ')', ')', ')', 'return', 'result', 'nums', '=', '(', '(', '10', ',', '10', ',', '10', ')', ',', '(', '30', ',', '45', ',', '56', ')', ',', '(', '81', ',', '80', ',', '39', ')', ',', '(', '1', ',', '2', ',', '3', ')', ')', 'print', '(', '""Original Tuple: ""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nAverage value of the numbers of the said tuple of tuples:\\n""', ',', 'average_tuple', '(', 'nums', ')', ')', 'nums', '=', '(', '(', '1', ',', '1', ',', '-', '5', ')', ',', '(', '30', ',', '-', '15', ',', '56', ')', ',', '(', '81', ',', '-', '60', ',', '-', '39', ')', ',', '(', '-', '10', ',', '2', ',', '3', ')', ')', 'print', '(', '""\\nOriginal Tuple: ""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nAverage value of the numbers of the said tuple of tuples:\\n""', ',', 'average_tuple', '(', 'nums', ')', ')']"
1113,"['write', 'numpy', 'program', 'change', 'dimension', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', ')', 'print', '(', '""6 rows and 0 columns""', ')', 'print', '(', 'x', '.', 'shape', ')', 'y', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ',', '6', ']', ',', '[', '7', ',', '8', ',', '9', ']', ']', ')', 'print', '(', '""(3, 3) -> 3 rows and 3 columns ""', ')', 'print', '(', 'y', ')', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ']', ')', 'print', '(', '""Change array shape to (3, 3) -> 3 rows and 3 columns ""', ')', 'x', '.', 'shape', '=', '(', '3', ',', '3', ')', 'print', '(', 'x', ')']"
1114,"['write', 'panda', 'program', 'replace', 'missing', 'white', 'space', 'given', 'string', 'least', 'frequent', 'character']","['import', 'pandas', 'as', 'pd', 'str1', '=', ""'abc def abcdef icd'"", 'print', '(', '""Original series:""', ')', 'print', '(', 'str1', ')', 'ser', '=', 'pd', '.', 'Series', '(', 'list', '(', 'str1', ')', ')', 'element_freq', '=', 'ser', '.', 'value_counts', '(', ')', 'print', '(', 'element_freq', ')', 'current_freq', '=', 'element_freq', '.', 'dropna', '(', ')', '.', 'index', '[', '-', '1', ']', 'result', '=', '""""', '.', 'join', '(', 'ser', '.', 'replace', '(', ""' '"", ',', 'current_freq', ')', ')', 'print', '(', 'result', ')']"
1115,"['write', 'panda', 'program', 'remove', 'time', 'zone', 'information', 'time', 'series', 'data']","['import', 'pandas', 'as', 'pd', 'date1', '=', 'pd', '.', 'Timestamp', '(', ""'2019-01-01'"", ',', 'tz', '=', ""'Europe/Berlin'"", ')', 'date2', '=', 'pd', '.', 'Timestamp', '(', ""'2019-01-01'"", ',', 'tz', '=', ""'US/Pacific'"", ')', 'date3', '=', 'pd', '.', 'Timestamp', '(', ""'2019-01-01'"", ',', 'tz', '=', ""'US/Eastern'"", ')', 'print', '(', '""Time series data with time zone:""', ')', 'print', '(', 'date1', ')', 'print', '(', 'date2', ')', 'print', '(', 'date3', ')', 'print', '(', '""\\nTime series data without time zone:""', ')', 'print', '(', 'date1', '.', 'tz_localize', '(', 'None', ')', ')', 'print', '(', 'date2', '.', 'tz_localize', '(', 'None', ')', ')', 'print', '(', 'date3', '.', 'tz_localize', '(', 'None', ')', ')']"
1116,"['write', 'python', 'program', 'print', 'calendar', 'given', 'month', 'year']","['import', 'calendar', 'y', '=', 'int', '(', 'input', '(', '""Input the year : ""', ')', ')', 'm', '=', 'int', '(', 'input', '(', '""Input the month : ""', ')', ')', 'print', '(', 'calendar', '.', 'month', '(', 'y', ',', 'm', ')', ')']"
1117,"['write', 'python', 'program', 'count', 'number', 'line', 'text', 'file']","['def', 'file_lengthy', '(', 'fname', ')', ':', 'with', 'open', '(', 'fname', ')', 'as', 'f', ':', 'for', 'i', ',', 'l', 'in', 'enumerate', '(', 'f', ')', ':', 'pass', 'return', 'i', '+', '1', 'print', '(', '""Number of lines in the file: ""', ',', 'file_lengthy', '(', '""test.txt""', ')', ')']"
1118,"['write', 'numpy', 'program', 'check', 'elementwise', 'truefalse', 'given', 'array', 'signbit', 'set']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '-', '4', ',', '-', '3', ',', '-', '2', ',', '-', '1', ',', '0', ',', '1', ',', '2', ',', '3', ',', '4', ']', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'r1', '=', 'np', '.', 'signbit', '(', 'x', ')', 'r2', '=', 'x', '<', '0', 'assert', 'np', '.', 'array_equiv', '(', 'r1', ',', 'r2', ')', 'print', '(', 'r1', ')']"
1119,"['write', 'python', 'program', 'calculate', 'sum', 'three', 'given', 'number', 'value', 'equal', 'return', 'three', 'time', 'sum']","['def', 'sum_thrice', '(', 'x', ',', 'y', ',', 'z', ')', ':', 'sum', '=', 'x', '+', 'y', '+', 'z', 'if', 'x', '==', 'y', '==', 'z', ':', 'sum', '=', 'sum', '*', '3', 'return', 'sum', 'print', '(', 'sum_thrice', '(', '1', ',', '2', ',', '3', ')', ')', 'print', '(', 'sum_thrice', '(', '3', ',', '3', ',', '3', ')', ')']"
1120,"['write', 'python', 'program', 'sort', 'unsorted', 'number', 'using', 'patience', 'sorting']",[]
1121,"['write', 'panda', 'program', 'filter', 'record', 'appears', 'given', 'list', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'new_w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'new_w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nSelect all rows which not appears in a given list:""', ')', 'who_region', '=', '[', '""Africa""', ',', '""Eastern Mediterranean""', ',', '""Europe""', ']', 'flt_wine', '=', '~', 'new_w_a_con', '[', '""WHO region""', ']', '.', 'isin', '(', 'who_region', ')', 'print', '(', 'new_w_a_con', '[', 'flt_wine', ']', ')']"
1122,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'count', 'survival', 'gender', 'category', 'wise', 'age', 'various', 'class']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'age', '=', 'pd', '.', 'cut', '(', 'df', '[', ""'age'"", ']', ',', '[', '0', ',', '10', ',', '30', ',', '60', ',', '80', ']', ')', 'result', '=', 'df', '.', 'pivot_table', '(', ""'survived'"", ',', 'index', '=', '[', ""'sex'"", ',', 'age', ']', ',', 'columns', '=', ""'pclass'"", ',', 'aggfunc', '=', ""'count'"", ')', 'print', '(', 'result', ')']"
1123,"['write', 'numpy', 'program', 'round', 'element', 'array', 'nearest', 'integer']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '-', '.7', ',', '-', '1.5', ',', '-', '1.7', ',', '0.3', ',', '1.5', ',', '1.8', ',', '2.0', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'x', '=', 'np', '.', 'rint', '(', 'x', ')', 'print', '(', '""Round elements of the array to the nearest integer:""', ')', 'print', '(', 'x', ')']"
1124,"['write', 'panda', 'program', 'count', 'missing', 'value', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', 'np', '.', 'nan', ',', '70002', ',', '70004', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', 'np', '.', 'nan', ',', '65.26', ',', '110.5', ',', '948.5', ',', 'np', '.', 'nan', ',', '5760', ',', '1983.43', ',', 'np', '.', 'nan', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_amt'"", ':', '[', '10.5', ',', '20.65', ',', 'np', '.', 'nan', ',', '11.5', ',', '98.5', ',', 'np', '.', 'nan', ',', '57', ',', '19.43', ',', 'np', '.', 'nan', ',', '25.45', ',', '75.29', ',', '35.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3002', ',', '3001', ',', '3001', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5003', ',', '5001', ',', 'np', '.', 'nan', ',', '5002', ',', '5001', ',', '5001', ',', 'np', '.', 'nan', ',', '5003', ',', '5002', ',', '5003', ',', 'np', '.', 'nan', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nTotal missing values in a dataframe:""', ')', 'tot_missing_vals', '=', 'df', '.', 'isnull', '(', ')', '.', 'sum', '(', ')', '.', 'sum', '(', ')', 'print', '(', 'tot_missing_vals', ')']"
1125,"['write', 'python', 'program', 'remove', 'value', 'except', 'integer', 'value', 'given', 'array', 'mixed', 'value']","['def', 'test', '(', 'lst', ')', ':', 'return', '[', 'lst', 'for', 'lst', 'in', 'lst', 'if', 'isinstance', '(', 'lst', ',', 'int', ')', ']', 'mixed_list', '=', '[', '34.67', ',', '12', ',', '-', '94.89', ',', '""Python""', ',', '0', ',', '""C#""', ']', 'print', '(', '""Original list:""', ',', 'mixed_list', ')', 'print', '(', '""After removing all the values except integer values from the said array of mixed values:""', ')', 'print', '(', 'test', '(', 'mixed_list', ')', ')']"
1126,"['write', 'python', 'program', 'calculate', 'sum', 'two', 'lowest', 'negative', 'number', 'given', 'array', 'integer']","['def', 'test', '(', 'nums', ')', ':', 'result', '=', 'sorted', '(', '[', 'item', 'for', 'item', 'in', 'nums', 'if', 'item', '<', '0', ']', ')', 'return', 'result', '[', '0', ']', '+', 'result', '[', '1', ']', 'nums', '=', '[', '-', '14', ',', '15', ',', '-', '10', ',', '-', '11', ',', '-', '12', ',', '-', '13', ',', '16', ',', '17', ',', '18', ',', '19', ',', '20', ']', 'print', '(', '""Original list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Sum of two lowest negative numbers of the said array of integers: ""', ',', 'test', '(', 'nums', ')', ')', 'nums', '=', '[', '-', '4', ',', '5', ',', '-', '2', ',', '0', ',', '3', ',', '-', '1', ',', '4', ',', '9', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Sum of two lowest negative numbers of the said array of integers: ""', ',', 'test', '(', 'nums', ')', ')']"
1127,"['write', 'python', 'program', 'convert', 'given', 'list', 'list', 'dictionary']","['def', 'test', '(', 'lst', ')', ':', 'result', '=', '{', 'item', '[', '0', ']', ':', 'item', '[', '1', ':', ']', 'for', 'item', 'in', 'lst', '}', 'return', 'result', 'students', '=', '[', '[', '1', ',', ""'Jean Castro'"", ',', ""'V'"", ']', ',', '[', '2', ',', ""'Lula Powell'"", ',', ""'V'"", ']', ',', '[', '3', ',', ""'Brian Howell'"", ',', ""'VI'"", ']', ',', '[', '4', ',', ""'Lynne Foster'"", ',', ""'VI'"", ']', ',', '[', '5', ',', ""'Zachary Simon'"", ',', ""'VII'"", ']', ']', 'print', '(', '""\\nOriginal list of lists:""', ')', 'print', '(', 'students', ')', 'print', '(', '""\\nConvert the said list of lists to a dictionary:""', ')', 'print', '(', 'test', '(', 'students', ')', ')']"
1128,"['write', 'python', 'program', 'extract', 'given', 'number', 'randomly', 'selected', 'element', 'given', 'list']","['import', 'random', 'def', 'random_select_nums', '(', 'n_list', ',', 'n', ')', ':', 'return', 'random', '.', 'sample', '(', 'n_list', ',', 'n', ')', 'n_list', '=', '[', '1', ',', '1', ',', '2', ',', '3', ',', '4', ',', '4', ',', '5', ',', '1', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'n_list', ')', 'selec_nums', '=', '3', 'result', '=', 'random_select_nums', '(', 'n_list', ',', 'selec_nums', ')', 'print', '(', '""\\nSelected 3 random numbers of the above list:""', ')', 'print', '(', 'result', ')']"
1129,"['write', 'python', 'program', 'retrieves', 'arbitary', 'wikipedia', 'page', 'python', 'creates', 'list', 'link', 'page']","['from', 'urllib', '.', 'request', 'import', 'urlopen', 'from', 'urllib', '.', 'error', 'import', 'HTTPError', 'from', 'bs4', 'import', 'BeautifulSoup', 'def', 'getTitle', '(', 'url', ')', ':', 'try', ':', 'html', '=', 'urlopen', '(', 'url', ')', 'except', 'HTTPError', 'as', 'e', ':', 'return', 'None', 'try', ':', 'bsObj', '=', 'BeautifulSoup', '(', 'html', '.', 'read', '(', ')', ',', '""lxml""', ')', 'title', '=', 'bsObj', '.', 'body', '.', 'h1', 'except', 'AttributeError', 'as', 'e', ':', 'return', 'None', 'return', 'title', 'title', '=', 'getTitle', '(', 'url', ')', 'if', 'title', '==', 'None', ':', 'return', '""Title could not be found""', 'else', ':', 'return', 'title', 'print', '(', 'getTitle', '(', '""https://www.w3resource.com/""', ')', ')', 'print', '(', 'getTitle', '(', '""http://www.example.com/""', ')', ')']"
1130,"['write', 'python', 'program', 'alter', 'owner', 'group', 'id', 'specified', 'file']","['import', 'os', 'fd', '=', 'os', '.', 'open', '(', '""/tmp""', ',', 'os', '.', 'O_RDONLY', ')', 'os', '.', 'fchown', '(', 'fd', ',', '100', ',', '-', '1', ')', 'os', '.', 'fchown', '(', 'fd', ',', '-', '1', ',', '50', ')', 'print', '(', '""Changed ownership successfully..""', ')', 'os', '.', 'close', '(', 'fd', ')']"
1131,"['write', 'numpy', 'program', 'create', 'twodimensional', 'array', 'shape', 'random', 'number', 'select', 'random', 'number', 'normal', 'distribution']","['import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '20', ')', 'cbrt', '=', 'np', '.', 'cbrt', '(', '7', ')', 'nd1', '=', '200', 'print', '(', 'cbrt', '*', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', '+', 'nd1', ')']"
1132,"['write', 'python', 'program', 'multiply', 'two', 'integer', 'without', 'using', 'operator', 'python']","['def', 'multiply', '(', 'x', ',', 'y', ')', ':', 'if', 'y', '<', '0', ':', 'return', '-', 'multiply', '(', 'x', ',', '-', 'y', ')', 'elif', 'y', '==', '0', ':', 'return', '0', 'elif', 'y', '==', '1', ':', 'return', 'x', 'else', ':', 'return', 'x', '+', 'multiply', '(', 'x', ',', 'y', '-', '1', ')', 'print', '(', 'multiply', '(', '3', ',', '5', ')', ')', ';']"
1133,"['write', 'panda', 'program', 'extract', 'email', 'specified', 'column', 'string', 'type', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', '10', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'name_email'"", ':', '[', ""'Alberto Franco [email\xa0protected]'"", ',', ""'Gino Mcneill [email\xa0protected]'"", ',', ""'Ryan Parkes [email\xa0protected]'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill [email\xa0protected]'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'find_email', '(', 'text', ')', ':', 'email', '=', 're', '.', 'findall', '(', ""r'[\\w\\.-][email\xa0protected][\\w\\.-]+'"", ',', 'str', '(', 'text', ')', ')', 'return', '"",""', '.', 'join', '(', 'email', ')', 'df', '[', ""'email'"", ']', '=', 'df', '[', ""'name_email'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'find_email', '(', 'x', ')', ')', 'print', '(', '""\\Extracting email from dataframe columns:""', ')', 'print', '(', 'df', ')']"
1134,"['write', 'python', 'program', 'read', 'given', 'csv', 'file', 'initial', 'space', 'delimiter', 'remove', 'initial', 'space']","['import', 'csv', 'print', '(', '""\\nWith initial spaces after a delimiter:\\n""', ')', 'with', 'open', '(', ""'departments.csv'"", ',', ""'r'"", ')', 'as', 'csvfile', ':', 'data', '=', 'csv', '.', 'reader', '(', 'csvfile', ',', 'skipinitialspace', '=', 'False', ')', 'for', 'row', 'in', 'data', ':', 'print', '(', ""', '"", '.', 'join', '(', 'row', ')', ')', 'print', '(', '""\\n\\nWithout initial spaces after a delimiter:\\n""', ')', 'with', 'open', '(', ""'departments.csv'"", ',', ""'r'"", ')', 'as', 'csvfile', ':', 'data', '=', 'csv', '.', 'reader', '(', 'csvfile', ',', 'skipinitialspace', '=', 'True', ')', 'for', 'row', 'in', 'data', ':', 'print', '(', ""', '"", '.', 'join', '(', 'row', ')', ')']"
1135,"['write', 'panda', 'program', 'split', 'given', 'dataset', 'group', 'one', 'column', 'remove', 'group', 'value', 'specific', 'column', 'available']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_Of_Birth '"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '12', ',', '12', ',', '13', ',', '13', ',', '14', ',', '12', ']', ',', ""'weight'"", ':', '[', '173', ',', '192', ',', '186', ',', '167', ',', '151', ',', '159', ']', ',', ""'height'"", ':', '[', '35', ',', 'None', ',', '33', ',', '30', ',', 'None', ',', '32', ']', '}', ',', 'index', '=', '[', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ',', ""'S4'"", ',', ""'S5'"", ',', ""'S6'"", ']', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nGroup by one column and remove those groups if all the values of a specific columns are not available:""', ')', 'result', '=', 'df', '[', '(', '~', 'df', '[', ""'height'"", ']', '.', 'isna', '(', ')', ')', '.', 'groupby', '(', 'df', '[', ""'school_code'"", ']', ')', '.', 'transform', '(', ""'any'"", ')', ']', 'print', '(', 'result', ')']"
1136,"['write', 'python', 'program', 'check', 'whether', 'string', 'start', 'specified', 'character']","['string', '=', '""w3resource.com""', 'print', '(', 'string', '.', 'startswith', '(', '""w3r""', ')', ')']"
1137,"['write', 'numpy', 'program', 'get', 'largest', 'integer', 'smaller', 'equal', 'division', 'input']","['import', 'numpy', 'as', 'np', 'x', '=', '[', '1.', ',', '2.', ',', '3.', ',', '4.', ']', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Largest integer smaller or equal to the division of the inputs:""', ')', 'print', '(', 'np', '.', 'floor_divide', '(', 'x', ',', '1.5', ')', ')']"
1138,"['write', 'python', 'program', 'calculate', 'maximum', 'aggregate', 'list', 'tuples', 'pair']","['from', 'collections', 'import', 'defaultdict', 'def', 'max_aggregate', '(', 'st_data', ')', ':', 'temp', '=', 'defaultdict', '(', 'int', ')', 'for', 'name', ',', 'marks', 'in', 'st_data', ':', 'temp', '[', 'name', ']', '+=', 'marks', 'return', 'max', '(', 'temp', '.', 'items', '(', ')', ',', 'key', '=', 'lambda', 'x', ':', 'x', '[', '1', ']', ')', 'students', '=', '[', '(', ""'Juan Whelan'"", ',', '90', ')', ',', '(', ""'Sabah Colley'"", ',', '88', ')', ',', '(', ""'Peter Nichols'"", ',', '7', ')', ',', '(', ""'Juan Whelan'"", ',', '122', ')', ',', '(', ""'Sabah Colley'"", ',', '84', ')', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'students', ')', 'print', '(', '""\\nMaximum aggregate value of the said list of tuple pair:""', ')', 'print', '(', 'max_aggregate', '(', 'students', ')', ')']"
1139,"['write', 'numpy', 'program', 'create', 'random', 'array', 'element', 'compute', 'average', 'variance', 'standard', 'deviation', 'array', 'element']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'random', '.', 'randn', '(', '1000', ')', 'print', '(', '""Average of the array elements:""', ')', 'mean', '=', 'x', '.', 'mean', '(', ')', 'print', '(', 'mean', ')', 'print', '(', '""Standard deviation of the array elements:""', ')', 'std', '=', 'x', '.', 'std', '(', ')', 'print', '(', 'std', ')', 'print', '(', '""Variance of the array elements:""', ')', 'var', '=', 'x', '.', 'var', '(', ')', 'print', '(', 'var', ')']"
1140,"['write', 'numpy', 'program', 'split', 'array', 'multiple', 'subarrays', 'along', 'axis']","['import', 'numpy', 'as', 'np', 'print', '(', '""\\nOriginal arrays:""', ')', 'x', '=', 'np', '.', 'arange', '(', '16.0', ')', '.', 'reshape', '(', '2', ',', '2', ',', '4', ')', 'print', '(', 'x', ')', 'new_array1', '=', 'np', '.', 'dsplit', '(', 'x', ',', '2', ')', 'print', '(', '""\\nsplit array into multiple sub-arrays along the 3rd axis:""', ')', 'print', '(', 'new_array1', ')']"
1141,"['write', 'numpy', 'program', 'change', 'data', 'type', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '2', ',', '4', ',', '6', ']', ',', '[', '6', ',', '8', ',', '10', ']', ']', ',', 'np', '.', 'int32', ')', 'print', '(', 'x', ')', 'print', '(', '""Data type of the array x is:""', ',', 'x', '.', 'dtype', ')', 'y', '=', 'x', '.', 'astype', '(', 'float', ')', 'print', '(', '""New Type: ""', ',', 'y', '.', 'dtype', ')', 'print', '(', 'y', ')']"
1142,"['write', 'numpy', 'program', 'create', 'array', 'evenly', 'spaced', 'element', 'inclusive']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'linspace', '(', '2.5', ',', '6.5', ',', '30', ')', 'print', '(', 'x', ')']"
1143,"['write', 'panda', 'program', 'drop', 'row', 'element', 'missing', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', '70002', ',', '70004', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', 'np', '.', 'nan', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', 'np', '.', 'nan', ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', 'np', '.', 'nan', ',', '3001', ',', '3001', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nDrop the rows where all elements are missing:""', ')', 'result', '=', 'df', '.', 'dropna', '(', 'how', '=', ""'all'"", ')', 'print', '(', 'result', ')']"
1144,"['write', 'panda', 'program', 'remove', 'repetitive', 'character', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', '10', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'text_code'"", ':', '[', ""'t0001.'"", ',', ""'t0002'"", ',', ""'t0003'"", ',', ""'t0004'"", ']', ',', ""'text_lang'"", ':', '[', ""'She livedd a long life.'"", ',', ""'How oold is your father?'"", ',', ""'What is tthe problem?'"", ',', ""'TThhis desk is used by Tom.'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'rep_char', '(', 'str1', ')', ':', 'tchr', '=', 'str1', '.', 'group', '(', '0', ')', 'if', 'len', '(', 'tchr', ')', '>', '1', ':', 'return', 'tchr', '[', '0', ':', '1', ']', 'def', 'unique_char', '(', 'rep', ',', 'sent_text', ')', ':', 'convert', '=', 're', '.', 'sub', '(', ""r'(\\w)\\1+'"", ',', 'rep', ',', 'sent_text', ')', 'return', 'convert', 'df', '[', ""'normal_text'"", ']', '=', 'df', '[', ""'text_lang'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'unique_char', '(', 'rep_char', ',', 'x', ')', ')', 'print', '(', '""\\nRemove repetitive characters:""', ')', 'print', '(', 'df', ')']"
1145,"['write', 'python', 'program', 'remove', 'specific', 'item', 'given', 'list', 'list']","['import', 'copy', 'def', 'remove_list_of_lists', '(', 'color', ',', 'N', ')', ':', 'for', 'x', 'in', 'color', ':', 'del', 'x', '[', 'N', ']', 'return', 'color', 'nums', '=', '[', '[', '""Red""', ',', '""Maroon""', ',', '""Yellow""', ',', '""Olive""', ']', ',', '[', '""#FF0000""', ',', '""#800000""', ',', '""#FFFF00""', ',', '""#808000""', ']', ',', '[', '""rgb(255,0,0)""', ',', '""rgb(128,0,0)""', ',', '""rgb(255,255,0)""', ',', '""rgb(128,128,0)""', ']', ']', 'nums1', '=', 'copy', '.', 'deepcopy', '(', 'nums', ')', 'nums2', '=', 'copy', '.', 'deepcopy', '(', 'nums', ')', 'nums3', '=', 'copy', '.', 'deepcopy', '(', 'nums', ')', 'print', '(', '""Original list of lists:""', ')', 'print', '(', 'nums', ')', 'N', '=', '0', 'print', '(', '""\\nRemove 1st item from the said list of lists:""', ')', 'print', '(', 'remove_list_of_lists', '(', 'nums1', ',', 'N', ')', ')', 'N', '=', '1', 'print', '(', '""\\nRemove 2nd item from the said list of lists:""', ')', 'print', '(', 'remove_list_of_lists', '(', 'nums2', ',', 'N', ')', ')', 'N', '=', '3', 'print', '(', '""\\nRemove 4th item from the said list of lists:""', ')', 'print', '(', 'remove_list_of_lists', '(', 'nums3', ',', 'N', ')', ')']"
1146,"['write', 'panda', 'program', 'convert', 'given', 'series', 'array']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 's1', '=', 'pd', '.', 'Series', '(', '[', ""'100'"", ',', ""'200'"", ',', ""'python'"", ',', ""'300.12'"", ',', ""'400'"", ']', ')', 'print', '(', '""Original Data Series:""', ')', 'print', '(', 's1', ')', 'print', '(', '""Series to an array""', ')', 'a', '=', 'np', '.', 'array', '(', 's1', '.', 'values', '.', 'tolist', '(', ')', ')', 'print', '(', 'a', ')']"
1147,"['write', 'numpy', 'program', 'split', 'element', 'given', 'array', 'space']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', ""'Python PHP Java C++'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""Original Array:""', ')', 'print', '(', 'x', ')', 'r', '=', 'np', '.', 'char', '.', 'split', '(', 'x', ')', 'print', '(', '""\\nSplit the element of the said array with spaces: ""', ')', 'print', '(', 'r', ')']"
1148,"['write', 'python', 'program', 'find', 'item', 'maximum', 'frequency', 'given', 'list']","['from', 'collections', 'import', 'defaultdict', 'def', 'max_occurrences', '(', 'nums', ')', ':', 'dict', '=', 'defaultdict', '(', 'int', ')', 'for', 'i', 'in', 'nums', ':', 'dict', '[', 'i', ']', '+=', '1', 'result', '=', 'max', '(', 'dict', '.', 'items', '(', ')', ',', 'key', '=', 'lambda', 'x', ':', 'x', '[', '1', ']', ')', 'return', 'result', 'nums', '=', '[', '2', ',', '3', ',', '8', ',', '4', ',', '7', ',', '9', ',', '8', ',', '2', ',', '6', ',', '5', ',', '1', ',', '6', ',', '1', ',', '2', ',', '3', ',', '2', ',', '4', ',', '6', ',', '9', ',', '1', ',', '2', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nItem with maximum frequency of the said list:""', ')', 'print', '(', 'max_occurrences', '(', 'nums', ')', ')']"
1149,"['write', 'python', 'program', 'check', 'given', 'element', 'occurs', 'least', 'n', 'time', 'list']","['def', 'check_element_in_list', '(', 'lst', ',', 'x', ',', 'n', ')', ':', 't', '=', '0', 'try', ':', 'for', '_', 'in', 'range', '(', 'n', ')', ':', 't', '=', 'lst', '.', 'index', '(', 'x', ',', 't', ')', '+', '1', 'return', 'True', 'except', 'ValueError', ':', 'return', 'False', 'nums', '=', '[', '0', ',', '1', ',', '3', ',', '5', ',', '0', ',', '3', ',', '4', ',', '5', ',', '0', ',', '8', ',', '0', ',', '3', ',', '6', ',', '0', ',', '3', ',', '1', ',', '1', ',', '0', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'x', '=', '3', 'n', '=', '4', 'print', '(', '""\\nCheck if""', ',', 'x', ',', '""occurs at least""', ',', 'n', ',', '""times in a list:""', ')', 'print', '(', 'check_element_in_list', '(', 'nums', ',', 'x', ',', 'n', ')', ')', 'x', '=', '0', 'n', '=', '5', 'print', '(', '""\\nCheck if""', ',', 'x', ',', '""occurs at least""', ',', 'n', ',', '""times in a list:""', ')', 'print', '(', 'check_element_in_list', '(', 'nums', ',', 'x', ',', 'n', ')', ')', 'x', '=', '8', 'n', '=', '3', 'print', '(', '""\\nCheck if""', ',', 'x', ',', '""occurs at least""', ',', 'n', ',', '""times in a list:""', ')', 'print', '(', 'check_element_in_list', '(', 'nums', ',', 'x', ',', 'n', ')', ')']"
1150,"['write', 'python', 'program', 'find', 'maximum', 'length', 'consecutive', 'given', 'binary', 'string']","['def', 'max_consecutive_0', '(', 'input_str', ')', ':', 'return', 'max', '(', 'map', '(', 'len', ',', 'input_str', '.', 'split', '(', ""'1'"", ')', ')', ')', 'str1', '=', ""'111000010000110'"", 'print', '(', '""Original string:""', '+', 'str1', ')', 'print', '(', '""Maximum length of consecutive 0’s:""', ')', 'print', '(', 'max_consecutive_0', '(', 'str1', ')', ')', 'str1', '=', ""'111000111'"", 'print', '(', '""Original string:""', '+', 'str1', ')', 'print', '(', '""Maximum length of consecutive 0’s:""', ')', 'print', '(', 'max_consecutive_0', '(', 'str1', ')', ')']"
1151,"['write', 'python', 'program', 'find', 'next', 'smallest', 'palindrome', 'specified', 'number']","['import', 'sys', 'def', 'Next_smallest_Palindrome', '(', 'num', ')', ':', 'numstr', '=', 'str', '(', 'num', ')', 'for', 'i', 'in', 'range', '(', 'num', '+', '1', ',', 'sys', '.', 'maxsize', ')', ':', 'if', 'str', '(', 'i', ')', '==', 'str', '(', 'i', ')', '[', ':', ':', '-', '1', ']', ':', 'return', 'i', 'print', '(', 'Next_smallest_Palindrome', '(', '99', ')', ')', ';', 'print', '(', 'Next_smallest_Palindrome', '(', '1221', ')', ')', ';']"
1152,"['write', 'python', 'program', 'generate', 'infinite', 'cycle', 'element', 'iterable']","['import', 'itertools', 'as', 'it', 'def', 'cycle_data', '(', 'iter', ')', ':', 'return', 'it', '.', 'cycle', '(', 'iter', ')', 'result', '=', 'cycle_data', '(', '[', ""'A'"", ',', ""'B'"", ',', ""'C'"", ',', ""'D'"", ']', ')', 'print', '(', '""The said function print never-ending items:""', ')', 'for', 'i', 'in', 'result', ':', 'print', '(', 'i', ')', 'result', '=', 'cycle_data', '(', ""'Python itertools'"", ')', 'print', '(', '""The said function print never-ending items:""', ')', 'for', 'i', 'in', 'result', ':', 'print', '(', 'i', ')']"
1153,"['write', 'numpy', 'program', 'test', 'whether', 'element', 'given', 'array', 'nonzero']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '0', ',', '0', ',', '0', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Test whether any of the elements of a given array is non-zero:""', ')', 'print', '(', 'np', '.', 'any', '(', 'x', ')', ')', 'x', '=', 'np', '.', 'array', '(', '[', '0', ',', '0', ',', '0', ',', '0', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Test whether any of the elements of a given array is non-zero:""', ')', 'print', '(', 'np', '.', 'any', '(', 'x', ')', ')']"
1154,"['write', 'python', 'program', 'get', 'array', 'size', 'type', 'unsigned', 'integer', 'float']","['from', 'array', 'import', 'array', 'a', '=', 'array', '(', '""I""', ',', '(', '12', ',', '25', ')', ')', 'print', '(', 'a', '.', 'itemsize', ')', 'a', '=', 'array', '(', '""f""', ',', '(', '12.236', ',', '36.36', ')', ')', 'print', '(', 'a', '.', 'itemsize', ')']"
1155,"['write', 'python', 'program', 'print', 'index', 'character', 'string']","['str1', '=', '""w3resource""', 'for', 'index', ',', 'char', 'in', 'enumerate', '(', 'str1', ')', ':', 'print', '(', '""Current character""', ',', 'char', ',', '""position at""', ',', 'index', ')']"
1156,"['write', 'python', 'program', 'parse', 'given', 'csv', 'string', 'get', 'list', 'list', 'string', 'value', 'use', 'csvreader']","['import', 'csv', 'csv_string', '=', '""""""1,2,3\r4,5,6\r7,8,9\r""""""', 'print', '(', '""Original string:""', ')', 'print', '(', 'csv_string', ')', 'lines', '=', 'csv_string', '.', 'splitlines', '(', ')', 'print', '(', '""List of CSV formatted strings:""', ')', 'print', '(', 'lines', ')', 'reader', '=', 'csv', '.', 'reader', '(', 'lines', ')', 'parsed_csv', '=', 'list', '(', 'reader', ')', 'print', '(', '""\\nList representation of the CSV file:""', ')', 'print', '(', 'parsed_csv', ')']"
1157,"['write', 'panda', 'program', 'filter', 'record', 'starting', 'year', 'column', 'access', 'every', 'column', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nFrom the \'Year\' column, access every other column:""', ')', 'print', '(', 'w_a_con', '.', 'loc', '[', ':', ',', ""'Year'"", ':', ':', '2', ']', '.', 'head', '(', '10', ')', ')', 'print', '(', '""\\nAlternate solution:""', ')', 'print', '(', 'w_a_con', '.', 'iloc', '[', ':', ',', '0', ':', ':', '2', ']', '.', 'head', '(', '10', ')', ')']"
1158,"['write', 'panda', 'program', 'get', 'current', 'date', 'oldest', 'date', 'number', 'day', 'current', 'date', 'oldest', 'date', 'ufo', 'dataset']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'print', '(', '""Original Dataframe:""', ')', 'print', '(', 'df', '.', 'head', '(', ')', ')', 'print', '(', '""\\nCurrent date of Ufo dataset:""', ')', 'print', '(', 'df', '.', 'Date_time', '.', 'max', '(', ')', ')', 'print', '(', '""\\nOldest date of Ufo dataset:""', ')', 'print', '(', 'df', '.', 'Date_time', '.', 'min', '(', ')', ')', 'print', '(', '""\\nNumber of days between Current date and oldest date of Ufo dataset:""', ')', 'print', '(', '(', 'df', '.', 'Date_time', '.', 'max', '(', ')', '-', 'df', '.', 'Date_time', '.', 'min', '(', ')', ')', '.', 'days', ')']"
1159,"['write', 'python', 'program', 'filter', 'even', 'number', 'given', 'dictionary', 'value']","['def', 'test', '(', 'dictt', ')', ':', 'result', '=', '{', 'key', ':', '[', 'idx', 'for', 'idx', 'in', 'val', 'if', 'not', 'idx', '%', '2', ']', 'for', 'key', ',', 'val', 'in', 'dictt', '.', 'items', '(', ')', '}', 'return', 'result', 'students', '=', '{', ""'V'"", ':', '[', '1', ',', '4', ',', '6', ',', '10', ']', ',', ""'VI'"", ':', '[', '1', ',', '4', ',', '12', ']', ',', ""'VII'"", ':', '[', '1', ',', '3', ',', '8', ']', '}', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'students', ')', 'print', '(', '""Filter even numbers from said dictionary values:""', ')', 'print', '(', 'test', '(', 'students', ')', ')', 'students', '=', '{', ""'V'"", ':', '[', '1', ',', '3', ',', '5', ']', ',', ""'VI'"", ':', '[', '1', ',', '5', ']', ',', ""'VII'"", ':', '[', '2', ',', '7', ',', '9', ']', '}', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'students', ')', 'print', '(', '""Filter even numbers from said dictionary values:""', ')', 'print', '(', 'test', '(', 'students', ')', ')']"
1160,"['write', 'panda', 'program', 'split', 'following', 'dataset', 'using', 'group', 'first', 'column', 'aggregate', 'multiple', 'list', 'second', 'column']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'student_id'"", ':', '[', ""'S001'"", ',', ""'S001'"", ',', ""'S002'"", ',', ""'S002'"", ',', ""'S003'"", ',', ""'S003'"", ']', ',', ""'marks'"", ':', '[', '[', '88', ',', '89', ',', '90', ']', ',', '[', '78', ',', '81', ',', '60', ']', ',', '[', '84', ',', '83', ',', '91', ']', ',', '[', '84', ',', '88', ',', '91', ']', ',', '[', '90', ',', '89', ',', '92', ']', ',', '[', '88', ',', '59', ',', '90', ']', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nGroupby and aggregate over multiple lists:""', ')', 'result', '=', 'df', '.', 'set_index', '(', ""'student_id'"", ')', '[', ""'marks'"", ']', '.', 'groupby', '(', ""'student_id'"", ')', '.', 'apply', '(', 'list', ')', '.', 'apply', '(', 'lambda', 'x', ':', 'np', '.', 'mean', '(', 'x', ',', '0', ')', ')', 'print', '(', 'result', ')']"
1161,"['write', 'numpy', 'program', 'calculate', 'arithmetic', 'mean', 'corresponding', 'element', 'two', 'given', 'array', 'size']","['import', 'numpy', 'as', 'np', 'nums1', '=', 'np', '.', 'array', '(', '[', '[', '2', ',', '5', ',', '2', ']', ',', '[', '1', ',', '5', ',', '5', ']', ']', ')', 'nums2', '=', 'np', '.', 'array', '(', '[', '[', '5', ',', '3', ',', '4', ']', ',', '[', '3', ',', '2', ',', '5', ']', ']', ')', 'print', '(', '""Array1:""', ')', 'print', '(', 'nums1', ')', 'print', '(', '""Array2:""', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nArithmetic means of corresponding elements of said two arrays:""', ')', 'print', '(', 'np', '.', 'divide', '(', 'np', '.', 'add', '(', 'nums1', ',', 'nums2', ')', ',', '2', ')', ')']"
1162,"['write', 'python', 'program', 'count', 'number', 'sublists', 'contain', 'particular', 'element']","['def', 'count_element_in_list', '(', 'input_list', ',', 'x', ')', ':', 'ctr', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'input_list', ')', ')', ':', 'if', 'x', 'in', 'input_list', '[', 'i', ']', ':', 'ctr', '+=', '1', 'return', 'ctr', 'list1', '=', '[', '[', '1', ',', '3', ']', ',', '[', '5', ',', '7', ']', ',', '[', '1', ',', '11', ']', ',', '[', '1', ',', '15', ',', '7', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""\\nCount 1 in the said list:""', ')', 'print', '(', 'count_element_in_list', '(', 'list1', ',', '1', ')', ')', 'print', '(', '""\\nCount 7 in the said list:""', ')', 'print', '(', 'count_element_in_list', '(', 'list1', ',', '7', ')', ')', 'list1', '=', '[', '[', ""'A'"", ',', ""'B'"", ']', ',', '[', ""'A'"", ',', ""'C'"", ']', ',', '[', ""'A'"", ',', ""'D'"", ',', ""'E'"", ']', ',', '[', ""'B'"", ',', ""'C'"", ',', ""'D'"", ']', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""\\nCount \'A\' in the said list:""', ')', 'print', '(', 'count_element_in_list', '(', 'list1', ',', ""'A'"", ')', ')', 'print', '(', '""\\nCount \'E\' in the said list:""', ')', 'print', '(', 'count_element_in_list', '(', 'list1', ',', ""'E'"", ')', ')']"
1163,"['write', 'numpy', 'program', 'create', 'threedimension', 'array', 'shape', 'set', 'variable']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '[', '[', '1', ',', '5', ',', '2', ',', '1', ']', ',', '[', '4', ',', '3', ',', '5', ',', '6', ']', ',', '[', '6', ',', '3', ',', '0', ',', '6', ']', ',', '[', '7', ',', '3', ',', '5', ',', '0', ']', ',', '[', '2', ',', '3', ',', '3', ',', '5', ']', ']', ',', '[', '[', '2', ',', '2', ',', '3', ',', '1', ']', ',', '[', '4', ',', '0', ',', '0', ',', '5', ']', ',', '[', '6', ',', '3', ',', '2', ',', '1', ']', ',', '[', '5', ',', '1', ',', '0', ',', '0', ']', ',', '[', '0', ',', '1', ',', '9', ',', '1', ']', ']', ',', '[', '[', '3', ',', '1', ',', '4', ',', '2', ']', ',', '[', '4', ',', '1', ',', '6', ',', '0', ']', ',', '[', '1', ',', '2', ',', '0', ',', '6', ']', ',', '[', '8', ',', '3', ',', '4', ',', '0', ']', ',', '[', '2', ',', '0', ',', '2', ',', '8', ']', ']', ']', ')', 'print', '(', '""Array:""', ')', 'print', '(', 'nums', ')']"
1164,"['write', 'numpy', 'program', 'create', 'random', 'set', 'row', 'array']","['import', 'numpy', 'as', 'np', 'new_array', '=', 'np', '.', 'random', '.', 'randint', '(', '5', ',', 'size', '=', '(', '5', ',', '3', ')', ')', 'print', '(', '""Random set of rows from 2D array array:""', ')', 'print', '(', 'new_array', ')']"
1165,"['write', 'python', 'program', 'get', 'difference', 'two', 'given', 'list', 'applying', 'provided', 'function', 'list', 'element']","['def', 'difference_by', '(', 'a', ',', 'b', ',', 'fn', ')', ':', '_b', '=', 'set', '(', 'map', '(', 'fn', ',', 'b', ')', ')', 'return', '[', 'item', 'for', 'item', 'in', 'a', 'if', 'fn', '(', 'item', ')', 'not', 'in', '_b', ']', 'from', 'math', 'import', 'floor', 'print', '(', 'difference_by', '(', '[', '2.1', ',', '1.2', ']', ',', '[', '2.3', ',', '3.4', ']', ',', 'floor', ')', ')', 'print', '(', 'difference_by', '(', '[', '{', ""'x'"", ':', '2', '}', ',', '{', ""'x'"", ':', '1', '}', ']', ',', '[', '{', ""'x'"", ':', '1', '}', ']', ',', 'lambda', 'v', ':', 'v', '[', ""'x'"", ']', ')', ')']"
1166,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'calculate', 'number', 'woman', 'men', 'particular', 'cabin', 'class']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'df', '.', 'pivot_table', '(', 'index', '=', '[', ""'sex'"", ']', ',', 'columns', '=', '[', ""'pclass'"", ']', ',', 'aggfunc', '=', ""'count'"", ')', 'print', '(', 'result', ')']"
1167,"['write', 'python', 'program', 'get', 'new', 'string', 'given', 'string', 'added', 'front', 'given', 'string', 'already', 'begin', 'return', 'string', 'unchanged']","['def', 'new_string', '(', 'str', ')', ':', 'if', 'len', '(', 'str', ')', '>=', '2', 'and', 'str', '[', ':', '2', ']', '==', '""Is""', ':', 'return', 'str', 'return', '""Is""', '+', 'str', 'print', '(', 'new_string', '(', '""Array""', ')', ')', 'print', '(', 'new_string', '(', '""IsEmpty""', ')', ')']"
1168,"['write', 'python', 'program', 'remove', 'element', 'given', 'list', 'present', 'another', 'list']","['def', 'index_on_inner_list', '(', 'list1', ',', 'list2', ')', ':', 'result', '=', '[', 'x', 'for', 'x', 'in', 'list1', 'if', 'x', 'not', 'in', 'list2', ']', 'return', 'result', 'list1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', 'list2', '=', '[', '2', ',', '4', ',', '6', ',', '8', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', '""list1:""', ',', 'list1', ')', 'print', '(', '""list2:""', ',', 'list2', ')', 'print', '(', '""\\nRemove all elements from \'list1\' present in \'list2:""', ')', 'print', '(', 'index_on_inner_list', '(', 'list1', ',', 'list2', ')', ')']"
1169,"['write', 'python', 'program', 'concatenate', 'element', 'list', 'string', 'return']","['def', 'concatenate_list_data', '(', 'list', ')', ':', 'result', '=', ""''"", 'for', 'element', 'in', 'list', ':', 'result', '+=', 'str', '(', 'element', ')', 'return', 'result', 'print', '(', 'concatenate_list_data', '(', '[', '1', ',', '5', ',', '12', ',', '2', ']', ')', ')']"
1170,"['write', 'panda', 'program', 'select', 'specific', 'row', 'given', 'seriesdataframe', 'integer', 'index']","['import', 'pandas', 'as', 'pd', 'ds', '=', 'pd', '.', 'Series', '(', '[', '1', ',', '3', ',', '5', ',', '7', ',', '9', ',', '11', ',', '13', ',', '15', ']', ',', 'index', '=', '[', '0', ',', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '7', ',', '8', ']', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'ds', ')', 'print', '(', '""\\nPrint specified row from the said series using location based indexing:""', ')', 'print', '(', '""\\nThird row:""', ')', 'print', '(', 'ds', '.', 'iloc', '[', '[', '2', ']', ']', ')', 'print', '(', '""\\nFifth row:""', ')', 'print', '(', 'ds', '.', 'iloc', '[', '[', '4', ']', ']', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_of_birth'"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', '}', ')', 'print', '(', '""Original DataFrame with single index:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nPrint specified row from the said DataFrame using location based indexing:""', ')', 'print', '(', '""\\nThird row:""', ')', 'print', '(', 'df', '.', 'iloc', '[', '[', '2', ']', ']', ')', 'print', '(', '""\\nFifth row:""', ')', 'print', '(', 'df', '.', 'iloc', '[', '[', '4', ']', ']', ')']"
1171,"['write', 'python', 'program', 'check', 'function', 'userdefined', 'function', 'use', 'typesfunctiontype', 'typeslambdatype']","['import', 'types', 'def', 'func', '(', ')', ':', 'return', '1', 'print', '(', 'isinstance', '(', 'func', ',', 'types', '.', 'FunctionType', ')', ')', 'print', '(', 'isinstance', '(', 'func', ',', 'types', '.', 'LambdaType', ')', ')', 'print', '(', 'isinstance', '(', 'lambda', 'x', ':', 'x', ',', 'types', '.', 'FunctionType', ')', ')', 'print', '(', 'isinstance', '(', 'lambda', 'x', ':', 'x', ',', 'types', '.', 'LambdaType', ')', ')', 'print', '(', 'isinstance', '(', 'max', ',', 'types', '.', 'FunctionType', ')', ')', 'print', '(', 'isinstance', '(', 'max', ',', 'types', '.', 'LambdaType', ')', ')', 'print', '(', 'isinstance', '(', 'abs', ',', 'types', '.', 'FunctionType', ')', ')', 'print', '(', 'isinstance', '(', 'abs', ',', 'types', '.', 'LambdaType', ')', ')']"
1172,"['write', 'python', 'program', 'match', 'key', 'value', 'two', 'dictionary']","['x', '=', '{', ""'key1'"", ':', '1', ',', ""'key2'"", ':', '3', ',', ""'key3'"", ':', '2', '}', 'y', '=', '{', ""'key1'"", ':', '1', ',', ""'key2'"", ':', '2', '}', 'for', '(', 'key', ',', 'value', ')', 'in', 'set', '(', 'x', '.', 'items', '(', ')', ')', '&', 'set', '(', 'y', '.', 'items', '(', ')', ')', ':', 'print', '(', ""'%s: %s is present in both x and y'"", '%', '(', 'key', ',', 'value', ')', ')']"
1173,"['write', 'python', 'program', 'add', 'prefix', 'text', 'line', 'string']","['import', 'textwrap', 'sample_text', '=', ""'''\r    Python is a widely used high-level, general-purpose, interpreted,\r    dynamic programming language. Its design philosophy emphasizes\r    code readability, and its syntax allows programmers to express\r    concepts in fewer lines of code than possible in languages such\r    as C++ or Java.\r    '''"", 'text_without_Indentation', '=', 'textwrap', '.', 'dedent', '(', 'sample_text', ')', 'wrapped', '=', 'textwrap', '.', 'fill', '(', 'text_without_Indentation', ',', 'width', '=', '50', ')', 'final_result', '=', 'textwrap', '.', 'indent', '(', 'wrapped', ',', ""'> '"", ')', 'print', '(', ')', 'print', '(', 'final_result', ')', 'print', '(', ')']"
1174,"['write', 'python', 'program', 'move', 'specified', 'element', 'given', 'list']","['def', 'group_similar_items', '(', 'seq', ',', 'el', ')', ':', 'seq', '.', 'append', '(', 'seq', '.', 'pop', '(', 'seq', '.', 'index', '(', 'el', ')', ')', ')', 'return', 'seq', 'colors', '=', '[', ""'red'"", ',', ""'green'"", ',', ""'white'"", ',', ""'black'"", ',', ""'orange'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'colors', ')', 'el', '=', '""white""', 'print', '(', '""Move""', ',', 'el', ',', '""at the end of the said list:""', ')', 'print', '(', 'group_similar_items', '(', 'colors', ',', 'el', ')', ')', 'colors', '=', '[', ""'red'"", ',', ""'green'"", ',', ""'white'"", ',', ""'black'"", ',', ""'orange'"", ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'colors', ')', 'el', '=', '""red""', 'print', '(', '""Move""', ',', 'el', ',', '""at the end of the said list:""', ')', 'print', '(', 'group_similar_items', '(', 'colors', ',', 'el', ')', ')', 'colors', '=', '[', ""'red'"", ',', ""'green'"", ',', ""'white'"", ',', ""'black'"", ',', ""'orange'"", ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'colors', ')', 'el', '=', '""black""', 'print', '(', '""Move""', ',', 'el', ',', '""at the end of the said list:""', ')', 'print', '(', 'group_similar_items', '(', 'colors', ',', 'el', ')', ')']"
1175,"['write', 'numpy', 'program', 'create', 'array', 'whose', 'diagonal', 'equal', 'elsewhere']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'diagflat', '(', '[', '4', ',', '5', ',', '6', ',', '8', ']', ')', 'print', '(', 'x', ')']"
1176,"['write', 'python', 'program', 'computing', 'square', 'root', 'using', 'babylonian', 'method']","['def', 'BabylonianAlgorithm', '(', 'number', ')', ':', 'if', '(', 'number', '==', '0', ')', ':', 'return', '0', ';', 'g', '=', 'number', '/', '2.0', ';', 'g2', '=', 'g', '+', '1', ';', 'while', '(', 'g', '!=', 'g2', ')', ':', 'n', '=', 'number', '/', 'g', ';', 'g2', '=', 'g', ';', 'g', '=', '(', 'g', '+', 'n', ')', '/', '2', ';', 'return', 'g', ';', 'print', '(', ""'The Square root of 0.3 ='"", ',', 'BabylonianAlgorithm', '(', '0.3', ')', ')', ';']"
1177,"['write', 'python', 'program', 'find', 'greatest', 'common', 'divisor', 'gcd', 'two', 'integer']","['def', 'Recurgcd', '(', 'a', ',', 'b', ')', ':', 'low', '=', 'min', '(', 'a', ',', 'b', ')', 'high', '=', 'max', '(', 'a', ',', 'b', ')', 'if', 'low', '==', '0', ':', 'return', 'high', 'elif', 'low', '==', '1', ':', 'return', '1', 'else', ':', 'return', 'Recurgcd', '(', 'low', ',', 'high', '%', 'low', ')', 'print', '(', 'Recurgcd', '(', '12', ',', '14', ')', ')']"
1178,"['write', 'panda', 'program', 'create', 'dataframe', 'using', 'interval', 'index']","['import', 'pandas', 'as', 'pd', 'print', '(', '""Create an Interval Index using IntervalIndex.from_breaks:""', ')', 'df_interval', '=', 'pd', '.', 'DataFrame', '(', '{', '""X""', ':', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ']', '}', ',', 'index', '=', 'pd', '.', 'IntervalIndex', '.', 'from_breaks', '(', '[', '0', ',', '0.5', ',', '1.0', ',', '1.5', ',', '2.0', ',', '2.5', ',', '3', ',', '3.5', ']', ')', ')', 'print', '(', 'df_interval', ')', 'print', '(', 'df_interval', '.', 'index', ')', 'print', '(', '""\\nCreate an Interval Index using IntervalIndex.from_tuples:""', ')', 'df_interval', '=', 'pd', '.', 'DataFrame', '(', '{', '""X""', ':', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ']', '}', ',', 'index', '=', 'pd', '.', 'IntervalIndex', '.', 'from_tuples', '(', '[', '(', '0', ',', '.5', ')', ',', '(', '.5', ',', '1', ')', ',', '(', '1', ',', '1.5', ')', ',', '(', '1.5', ',', '2', ')', ',', '(', '2', ',', '2.5', ')', ',', '(', '2.5', ',', '3', ')', ',', '(', '3', ',', '3.5', ')', ']', ')', ')', 'print', '(', 'df_interval', ')', 'print', '(', 'df_interval', '.', 'index', ')', 'print', '(', '""\\nCreate an Interval Index using IntervalIndex.from_arrays:""', ')', 'df_interval', '=', 'pd', '.', 'DataFrame', '(', '{', '""X""', ':', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ']', '}', ',', 'index', '=', 'pd', '.', 'IntervalIndex', '.', 'from_arrays', '(', '[', '0', ',', '.5', ',', '1', ',', '1.5', ',', '2', ',', '2.5', ',', '3', ']', ',', '[', '.5', ',', '1', ',', '1.5', ',', '2', ',', '2.5', ',', '3', ',', '3.5', ']', ')', ')', 'print', '(', 'df_interval', ')', 'print', '(', 'df_interval', '.', 'index', ')']"
1179,"['write', 'numpy', 'program', 'divide', 'row', 'vector', 'element']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '20', ',', '20', ',', '20', ']', ',', '[', '30', ',', '30', ',', '30', ']', ',', '[', '40', ',', '40', ',', '40', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'v', '=', 'np', '.', 'array', '(', '[', '20', ',', '30', ',', '40', ']', ')', 'print', '(', '""Vector:""', ')', 'print', '(', 'v', ')', 'print', '(', 'x', '/', 'v', '[', ':', ',', 'None', ']', ')']"
1180,"['write', 'python', 'program', 'print', 'following', 'document']","['print', '(', '""""""\ra string that you ""don\'t"" have to escape\rThis\ris a  ....... multi-line\rheredoc string --------> example\r""""""', ')']"
1181,"['write', 'python', 'program', 'print', 'element', 'specified', 'id', 'given', 'web', 'page']","['import', 'requests', 'import', 're', 'from', 'bs4', 'import', 'BeautifulSoup', 'url', '=', ""'https://www.python.org/'"", 'reqs', '=', 'requests', '.', 'get', '(', 'url', ')', 'soup', '=', 'BeautifulSoup', '(', 'reqs', '.', 'text', ',', ""'lxml'"", ')', 'print', '(', '""\\nelement(s) that has #python-network id:\\n""', ')', 'print', '(', 'soup', '.', 'select_one', '(', '""#python-network""', ')', ')']"
1182,"['write', 'python', 'program', 'get', 'string', 'n', 'nonnegative', 'integer', 'copy', 'given', 'string']","['def', 'larger_string', '(', 'str', ',', 'n', ')', ':', 'result', '=', '""""', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'result', '=', 'result', '+', 'str', 'return', 'result', 'print', '(', 'larger_string', '(', ""'abc'"", ',', '2', ')', ')', 'print', '(', 'larger_string', '(', ""'.py'"", ',', '3', ')', ')']"
1183,"['write', 'python', 'program', 'split', 'list', 'based', 'first', 'character', 'word']","['from', 'itertools', 'import', 'groupby', 'from', 'operator', 'import', 'itemgetter', 'word_list', '=', '[', ""'be'"", ',', ""'have'"", ',', ""'do'"", ',', ""'say'"", ',', ""'get'"", ',', ""'make'"", ',', ""'go'"", ',', ""'know'"", ',', ""'take'"", ',', ""'see'"", ',', ""'come'"", ',', ""'think'"", ',', ""'look'"", ',', ""'want'"", ',', ""'give'"", ',', ""'use'"", ',', ""'find'"", ',', ""'tell'"", ',', ""'ask'"", ',', ""'work'"", ',', ""'seem'"", ',', ""'feel'"", ',', ""'leave'"", ',', ""'call'"", ']', 'for', 'letter', ',', 'words', 'in', 'groupby', '(', 'sorted', '(', 'word_list', ')', ',', 'key', '=', 'itemgetter', '(', '0', ')', ')', ':', 'print', '(', 'letter', ')', 'for', 'word', 'in', 'words', ':', 'print', '(', 'word', ')']"
1184,"['write', 'numpy', 'program', 'extract', 'element', 'third', 'column', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arra_data', '=', 'np', '.', 'arange', '(', '0', ',', '16', ')', '.', 'reshape', '(', '(', '4', ',', '4', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arra_data', ')', 'print', '(', '""\\nExtracted data: Third column""', ')', 'print', '(', 'arra_data', '[', ':', ',', '2', ']', ')']"
1185,"['write', 'python', 'program', 'format', 'specified', 'string', 'limiting', 'length', 'string']","['str_num', '=', '""1234567890""', 'print', '(', '""Original string:""', ',', 'str_num', ')', 'print', '(', ""'%.6s'"", '%', 'str_num', ')', 'print', '(', ""'%.9s'"", '%', 'str_num', ')', 'print', '(', ""'%.10s'"", '%', 'str_num', ')']"
1186,"['write', 'python', 'program', 'check', 'whether', 'given', 'string', 'number', 'using', 'lambda']","['is_num', '=', 'lambda', 'q', ':', 'q', '.', 'replace', '(', ""'.'"", ',', ""''"", ',', '1', ')', '.', 'isdigit', '(', ')', 'print', '(', 'is_num', '(', ""'26587'"", ')', ')', 'print', '(', 'is_num', '(', ""'4.2365'"", ')', ')', 'print', '(', 'is_num', '(', ""'-12547'"", ')', ')', 'print', '(', 'is_num', '(', ""'00'"", ')', ')', 'print', '(', 'is_num', '(', ""'A001'"", ')', ')', 'print', '(', 'is_num', '(', ""'001'"", ')', ')', 'print', '(', '""\\nPrint checking numbers:""', ')', 'is_num1', '=', 'lambda', 'r', ':', 'is_num', '(', 'r', '[', '1', ':', ']', ')', 'if', 'r', '[', '0', ']', '==', ""'-'"", 'else', 'is_num', '(', 'r', ')', 'print', '(', 'is_num1', '(', ""'-16.4'"", ')', ')', 'print', '(', 'is_num1', '(', ""'-24587.11'"", ')', ')']"
1187,"['write', 'python', 'program', 'count', 'number', 'occurrence', 'specific', 'character', 'string']","['s', '=', '""The quick brown fox jumps over the lazy dog.""', 'print', '(', '""Original string:""', ')', 'print', '(', 's', ')', 'print', '(', '""Number of occurrence of \'o\' in the said string:""', ')', 'print', '(', 's', '.', 'count', '(', '""o""', ')', ')']"
1188,"['write', 'numpy', 'program', 'create', 'array', 'element', 'spaced', 'evenly', 'log', 'scale', 'exclusive']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'logspace', '(', '2.', ',', '5.', ',', '20', ',', 'endpoint', '=', 'False', ')', 'print', '(', 'x', ')']"
1189,"['write', 'numpy', 'program', 'broadcast', 'different', 'shape', 'array']","['import', 'numpy', 'as', 'np', 'p', '=', 'np', '.', 'array', '(', '[', '[', '0', ']', ',', '[', '10', ']', ',', '[', '20', ']', ']', ')', 'q', '=', 'np', '.', 'array', '(', '[', '10', ',', '11', ',', '12', ']', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', '""Array-1""', ')', 'print', '(', 'p', ')', 'print', '(', '""Array-2""', ')', 'print', '(', 'q', ')', 'print', '(', '""\\nNew Array:""', ')', 'new_array1', '=', 'p', '+', 'q', 'print', '(', 'new_array1', ')']"
1190,"['write', 'python', 'program', 'configure', 'rounding', 'round', 'floor', 'ceiling', 'use']","['import', 'decimal', 'print', '(', '""Configure the rounding to round to the floor:""', ')', 'decimal', '.', 'getcontext', '(', ')', '.', 'prec', '=', '4', 'decimal', '.', 'getcontext', '(', ')', '.', 'rounding', '=', 'decimal', '.', 'ROUND_FLOOR', 'print', '(', 'decimal', '.', 'Decimal', '(', '20', ')', '/', 'decimal', '.', 'Decimal', '(', '6', ')', ')', 'print', '(', '""\\nConfigure the rounding to round to the ceiling:""', ')', 'decimal', '.', 'getcontext', '(', ')', '.', 'prec', '=', '4', 'decimal', '.', 'getcontext', '(', ')', '.', 'rounding', '=', 'decimal', '.', 'ROUND_CEILING', 'print', '(', 'decimal', '.', 'Decimal', '(', '20', ')', '/', 'decimal', '.', 'Decimal', '(', '6', ')', ')']"
1191,"['write', 'python', 'program', 'read', 'display', 'content', 'given', 'csv', 'file', 'use', 'csvreader']","['import', 'csv', 'reader', '=', 'csv', '.', 'reader', '(', 'open', '(', '""employees.csv""', ')', ')', 'for', 'row', 'in', 'reader', ':', 'print', '(', 'row', ')']"
1192,"['write', 'python', 'program', 'accept', 'base', 'height', 'triangle', 'compute', 'area']","['b', '=', 'int', '(', 'input', '(', '""Input the base : ""', ')', ')', 'h', '=', 'int', '(', 'input', '(', '""Input the height : ""', ')', ')', 'area', '=', 'b', '*', 'h', '/', '2', 'print', '(', '""area = ""', ',', 'area', ')']"
1193,"['write', 'numpy', 'program', 'compute', 'sum', 'diagonal', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'm', '=', 'np', '.', 'arange', '(', '6', ')', '.', 'reshape', '(', '2', ',', '3', ')', 'print', '(', '""Original matrix:""', ')', 'print', '(', 'm', ')', 'result', '=', 'np', '.', 'trace', '(', 'm', ')', 'print', '(', '""Condition number of the said matrix:""', ')', 'print', '(', 'result', ')']"
1194,"['write', 'python', 'program', 'find', 'three', 'integer', 'give', 'sum', 'zero', 'given', 'array', 'integer', 'using', 'binary', 'search', 'bisect']","['from', 'bisect', 'import', 'bisect', ',', 'bisect_left', 'from', 'collections', 'import', 'Counter', 'class', 'Solution', ':', 'def', 'three_Sum', '(', 'self', ',', 'nums', ')', ':', '""""""\r        :type nums: List[int]\r        :rtype: List[List[int]]\r        """"""', 'triplets', '=', '[', ']', 'if', 'len', '(', 'nums', ')', '<', '3', ':', 'return', 'triplets', 'num_freq', '=', 'Counter', '(', 'nums', ')', 'nums', '=', 'sorted', '(', 'num_freq', ')', 'max_num', '=', 'nums', '[', '-', '1', ']', 'for', 'i', ',', 'v', 'in', 'enumerate', '(', 'nums', ')', ':', 'if', 'num_freq', '[', 'v', ']', '>=', '2', ':', 'complement', '=', '-', '2', '*', 'v', 'if', 'complement', 'in', 'num_freq', ':', 'if', 'complement', '!=', 'v', 'or', 'num_freq', '[', 'v', ']', '>=', '3', ':', 'triplets', '.', 'append', '(', '[', 'v', ']', '*', '2', '+', '[', 'complement', ']', ')', 'if', 'v', '<', '0', ':', 'two_sum', '=', '-', 'v', 'lb', '=', 'bisect_left', '(', 'nums', ',', 'two_sum', '-', 'max_num', ',', 'i', '+', '1', ')', 'ub', '=', 'bisect', '(', 'nums', ',', 'two_sum', '//', '2', ',', 'lb', ')', 'for', 'u', 'in', 'nums', '[', 'lb', ':', 'ub', ']', ':', 'complement', '=', 'two_sum', '-', 'u', 'if', 'complement', 'in', 'num_freq', 'and', 'u', '!=', 'complement', ':', 'triplets', '.', 'append', '(', '[', 'v', ',', 'u', ',', 'complement', ']', ')', 'return', 'triplets', 'nums', '=', '[', '-', '20', ',', '0', ',', '20', ',', '40', ',', '-', '20', ',', '-', '40', ',', '80', ']', 's', '=', 'Solution', '(', ')', 'result', '=', 's', '.', 'three_Sum', '(', 'nums', ')', 'print', '(', 'result', ')', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '-', '6', ']', 'result', '=', 's', '.', 'three_Sum', '(', 'nums', ')', 'print', '(', 'result', ')']"
1195,"['write', 'python', 'program', 'find', 'item', 'parity', 'outlier', 'given', 'list']","['from', 'collections', 'import', 'Counter', 'def', 'find_parity_outliers', '(', 'nums', ')', ':', 'return', '[', 'x', 'for', 'x', 'in', 'nums', 'if', 'x', '%', '2', '!=', 'Counter', '(', '[', 'n', '%', '2', 'for', 'n', 'in', 'nums', ']', ')', '.', 'most_common', '(', ')', '[', '0', ']', '[', '0', ']', ']', 'print', '(', 'find_parity_outliers', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '6', ']', ')', ')', 'print', '(', 'find_parity_outliers', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ']', ')', ')']"
1196,"['write', 'python', 'program', 'convert', 'array', 'array', 'machine', 'value', 'return', 'byte', 'representation']","['from', 'array', 'import', '*', 'print', '(', '""Bytes to String: ""', ')', 'x', '=', 'array', '(', ""'b'"", ',', '[', '119', ',', '51', ',', '114', ',', '101', ',', '115', ',', '111', ',', '117', ',', '114', ',', '99', ',', '101', ']', ')', 's', '=', 'x', '.', 'tobytes', '(', ')', 'print', '(', 's', ')']"
1197,"['write', 'python', 'program', 'retrieve', 'child', 'html', 'tag', 'given', 'web', 'page']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup', 'url', '=', ""'https://www.python.org/'"", 'reqs', '=', 'requests', '.', 'get', '(', 'url', ')', 'soup', '=', 'BeautifulSoup', '(', 'reqs', '.', 'text', ',', ""'lxml'"", ')', 'print', '(', '""\\nChildren of the html tag (https://www.python.org):\\n""', ')', 'root', '=', 'soup', '.', 'html', 'root_childs', '=', '[', 'e', '.', 'name', 'for', 'e', 'in', 'root', '.', 'children', 'if', 'e', '.', 'name', 'is', 'not', 'None', ']', 'print', '(', 'root_childs', ')']"
1198,"['write', 'panda', 'program', 'append', 'list', 'dictioneries', 'series', 'existing', 'dataframe', 'display', 'combined', 'data']","['import', 'pandas', 'as', 'pd', 'student_data1', '=', 'pd', '.', 'DataFrame', '(', '{', ""'student_id'"", ':', '[', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ',', ""'S4'"", ',', ""'S5'"", ']', ',', ""'name'"", ':', '[', ""'Danniella Fenton'"", ',', ""'Ryder Storey'"", ',', ""'Bryce Jensen'"", ',', ""'Ed Bernal'"", ',', ""'Kwame Morin'"", ']', ',', ""'marks'"", ':', '[', '200', ',', '210', ',', '190', ',', '222', ',', '199', ']', '}', ')', 's6', '=', 'pd', '.', 'Series', '(', '[', ""'S6'"", ',', ""'Scarlette Fisher'"", ',', '205', ']', ',', 'index', '=', '[', ""'student_id'"", ',', ""'name'"", ',', ""'marks'"", ']', ')', 'dicts', '=', '[', '{', ""'student_id'"", ':', ""'S6'"", ',', ""'name'"", ':', ""'Scarlette Fisher'"", ',', ""'marks'"", ':', '203', '}', ',', '{', ""'student_id'"", ':', ""'S7'"", ',', ""'name'"", ':', ""'Bryce Jensen'"", ',', ""'marks'"", ':', '207', '}', ']', 'print', '(', '""Original DataFrames:""', ')', 'print', '(', 'student_data1', ')', 'print', '(', '""\\nDictionary:""', ')', 'print', '(', 's6', ')', 'combined_data', '=', 'student_data1', '.', 'append', '(', 'dicts', ',', 'ignore_index', '=', 'True', ',', 'sort', '=', 'False', ')', 'print', '(', '""\\nCombined Data:""', ')', 'print', '(', 'combined_data', ')']"
1199,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'shell', 'sort', 'algorithm']","['def', 'shellSort', '(', 'alist', ')', ':', 'sublistcount', '=', 'len', '(', 'alist', ')', '//', '2', 'while', 'sublistcount', '>', '0', ':', 'for', 'start_position', 'in', 'range', '(', 'sublistcount', ')', ':', 'gap_InsertionSort', '(', 'alist', ',', 'start_position', ',', 'sublistcount', ')', 'print', '(', '""After increments of size""', ',', 'sublistcount', ',', '""The list is""', ',', 'nlist', ')', 'sublistcount', '=', 'sublistcount', '//', '2', 'def', 'gap_InsertionSort', '(', 'nlist', ',', 'start', ',', 'gap', ')', ':', 'for', 'i', 'in', 'range', '(', 'start', '+', 'gap', ',', 'len', '(', 'nlist', ')', ',', 'gap', ')', ':', 'current_value', '=', 'nlist', '[', 'i', ']', 'position', '=', 'i', 'while', 'position', '>=', 'gap', 'and', 'nlist', '[', 'position', '-', 'gap', ']', '>', 'current_value', ':', 'nlist', '[', 'position', ']', '=', 'nlist', '[', 'position', '-', 'gap', ']', 'position', '=', 'position', '-', 'gap', 'nlist', '[', 'position', ']', '=', 'current_value', 'nlist', '=', '[', '14', ',', '46', ',', '43', ',', '27', ',', '57', ',', '41', ',', '45', ',', '21', ',', '70', ']', 'shellSort', '(', 'nlist', ')', 'print', '(', 'nlist', ')']"
1200,"['write', 'python', 'numpy', 'program', 'compute', 'weighted', 'average', 'along', 'specified', 'axis', 'given', 'flattened', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'arange', '(', '9', ')', '.', 'reshape', '(', '(', '3', ',', '3', ')', ')', 'print', '(', '""Original flattened array:""', ')', 'print', '(', 'a', ')', 'print', '(', '""Weighted average along the specified axis of the above flattened array:""', ')', 'print', '(', 'np', '.', 'average', '(', 'a', ',', 'axis', '=', '1', ',', 'weights', '=', '[', '1.', '/', '4', ',', '2.', '/', '4', ',', '2.', '/', '4', ']', ')', ')']"
1201,"['write', 'python', 'program', 'multiply', 'item', 'dictionary']","['my_dict', '=', '{', ""'data1'"", ':', '100', ',', ""'data2'"", ':', '-', '54', ',', ""'data3'"", ':', '247', '}', 'result', '=', '1', 'for', 'key', 'in', 'my_dict', ':', 'result', '=', 'result', '*', 'my_dict', '[', 'key', ']', 'print', '(', 'result', ')']"
1202,"['write', 'python', 'program', 'count', 'number', 'substring', 'first', 'last', 'character', 'given', 'string']","['def', 'no_of_substring_with_equalEnds', '(', 'str1', ')', ':', 'result', '=', '0', ';', 'n', '=', 'len', '(', 'str1', ')', ';', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', ',', 'n', ')', ':', 'if', '(', 'str1', '[', 'i', ']', '==', 'str1', '[', 'j', ']', ')', ':', 'result', '=', 'result', '+', '1', 'return', 'result', 'str1', '=', 'input', '(', '""Input a string: ""', ')', 'print', '(', 'no_of_substring_with_equalEnds', '(', 'str1', ')', ')']"
1203,"['write', 'python', 'program', 'create', 'list', 'empty', 'dictionary']","['n', '=', '5', 'l', '=', '[', '{', '}', 'for', '_', 'in', 'range', '(', 'n', ')', ']', 'print', '(', 'l', ')']"
1204,"['write', 'python', 'program', 'test', 'whether', 'number', 'within']","['def', 'near_thousand', '(', 'n', ')', ':', 'return', '(', '(', 'abs', '(', '1000', '-', 'n', ')', '<=', '100', ')', 'or', '(', 'abs', '(', '2000', '-', 'n', ')', '<=', '100', ')', ')', 'print', '(', 'near_thousand', '(', '1000', ')', ')', 'print', '(', 'near_thousand', '(', '900', ')', ')', 'print', '(', 'near_thousand', '(', '800', ')', ')', 'print', '(', 'near_thousand', '(', '2200', ')', ')']"
1205,"['write', 'python', 'program', 'sort', 'unsorted', 'number', 'using', 'random', 'pivot', 'quick', 'sort', 'pick', 'random', 'index', 'pivot']",[]
1206,"['write', 'numpy', 'program', 'compute', 'natural', 'base', 'base', 'logarithm', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', 'np', '.', 'e', ',', 'np', '.', 'e', '**', '2', ']', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'print', '(', '""\\nNatural log =""', ',', 'np', '.', 'log', '(', 'x', ')', ')', 'print', '(', '""Common log =""', ',', 'np', '.', 'log10', '(', 'x', ')', ')', 'print', '(', '""Base 2 log =""', ',', 'np', '.', 'log2', '(', 'x', ')', ')']"
1207,"['write', 'numpy', 'program', 'find', 'root', 'following', 'polynomial']","['import', 'numpy', 'as', 'np', 'print', '(', '""Roots of the first polynomial:""', ')', 'print', '(', 'np', '.', 'roots', '(', '[', '1', ',', '-', '2', ',', '1', ']', ')', ')', 'print', '(', '""Roots of the second polynomial:""', ')', 'print', '(', 'np', '.', 'roots', '(', '[', '1', ',', '-', '12', ',', '10', ',', '7', ',', '-', '10', ']', ')', ')']"
1208,"['write', 'python', 'program', 'generate', 'float', 'inclusive', 'generate', 'random', 'float', 'within', 'specific', 'range', 'use', 'randomuniform']","['import', 'random', 'print', '(', '""Generate a float between 0 and 1, inclusive:""', ')', 'print', '(', 'random', '.', 'uniform', '(', '0', ',', '1', ')', ')', 'print', '(', '""\\nGenerate a random float within a range:""', ')', 'random_float', '=', 'random', '.', 'uniform', '(', '1.0', ',', '3.0', ')', 'print', '(', 'random_float', ')']"
1209,"['write', 'python', 'program', 'print', 'number', 'comma', 'thousand', 'separatorsfrom', 'right', 'side']","['print', '(', '""{:,}""', '.', 'format', '(', '1000000', ')', ')', 'print', '(', '""{:,}""', '.', 'format', '(', '10000', ')', ')']"
1210,"['write', 'numpy', 'program', 'create', 'array', 'filled', 'random', 'floating', 'point', 'number', 'value', 'set', 'array', 'value', 'specified', 'precision']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Set the array values with specified precision:""', ')', 'np', '.', 'set_printoptions', '(', 'precision', '=', '4', ')', 'print', '(', 'nums', ')']"
1211,"['write', 'python', 'program', 'generate', 'sublists', 'list']","['from', 'itertools', 'import', 'combinations', 'def', 'sub_lists', '(', 'my_list', ')', ':', 'subs', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'my_list', ')', '+', '1', ')', ':', 'temp', '=', '[', 'list', '(', 'x', ')', 'for', 'x', 'in', 'combinations', '(', 'my_list', ',', 'i', ')', ']', 'if', 'len', '(', 'temp', ')', '>', '0', ':', 'subs', '.', 'extend', '(', 'temp', ')', 'return', 'subs', 'l1', '=', '[', '10', ',', '20', ',', '30', ',', '40', ']', 'l2', '=', '[', ""'X'"", ',', ""'Y'"", ',', ""'Z'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'l1', ')', 'print', '(', '""S""', ')', 'print', '(', 'sub_lists', '(', 'l1', ')', ')', 'print', '(', '""Sublists of the said list:""', ')', 'print', '(', 'sub_lists', '(', 'l1', ')', ')', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'l2', ')', 'print', '(', '""Sublists of the said list:""', ')', 'print', '(', 'sub_lists', '(', 'l2', ')', ')']"
1212,"['write', 'python', 'program', 'split', 'given', 'list', 'specified', 'sized', 'chunk']","['def', 'split_list', '(', 'lst', ',', 'n', ')', ':', 'result', '=', 'list', '(', '(', 'lst', '[', 'i', ':', 'i', '+', 'n', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'lst', ')', ',', 'n', ')', ')', ')', 'return', 'result', 'nums', '=', '[', '12', ',', '45', ',', '23', ',', '67', ',', '78', ',', '90', ',', '45', ',', '32', ',', '100', ',', '76', ',', '38', ',', '62', ',', '73', ',', '29', ',', '83', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'n', '=', '3', 'print', '(', '""\\nSplit the said list into equal size""', ',', 'n', ')', 'print', '(', 'split_list', '(', 'nums', ',', 'n', ')', ')', 'n', '=', '4', 'print', '(', '""\\nSplit the said list into equal size""', ',', 'n', ')', 'print', '(', 'split_list', '(', 'nums', ',', 'n', ')', ')', 'n', '=', '5', 'print', '(', '""\\nSplit the said list into equal size""', ',', 'n', ')', 'print', '(', 'split_list', '(', 'nums', ',', 'n', ')', ')']"
1213,"['write', 'python', 'program', 'strip', 'set', 'character', 'string']","['def', 'strip_chars', '(', 'str', ',', 'chars', ')', ':', 'return', '""""', '.', 'join', '(', 'c', 'for', 'c', 'in', 'str', 'if', 'c', 'not', 'in', 'chars', ')', 'print', '(', '""\\nOriginal String: ""', ')', 'print', '(', '""The quick brown fox jumps over the lazy dog.""', ')', 'print', '(', '""After stripping a,e,i,o,u""', ')', 'print', '(', 'strip_chars', '(', '""The quick brown fox jumps over the lazy dog.""', ',', '""aeiou""', ')', ')', 'print', '(', ')']"
1214,"['write', 'python', 'program', 'find', 'nested', 'list', 'element', 'present', 'another', 'list']","['def', 'intersection_nested_lists', '(', 'l1', ',', 'l2', ')', ':', 'result', '=', '[', '[', 'n', 'for', 'n', 'in', 'lst', 'if', 'n', 'in', 'l1', ']', 'for', 'lst', 'in', 'l2', ']', 'return', 'result', 'nums1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ',', '11', ',', '12', ',', '13', ',', '14', ']', 'nums2', '=', '[', '[', '12', ',', '18', ',', '23', ',', '25', ',', '45', ']', ',', '[', '7', ',', '11', ',', '19', ',', '24', ',', '28', ']', ',', '[', '1', ',', '5', ',', '8', ',', '18', ',', '15', ',', '16', ']', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nIntersection of said nested lists:""', ')', 'print', '(', 'intersection_nested_lists', '(', 'nums1', ',', 'nums2', ')', ')']"
1215,"['write', 'numpy', 'program', 'take', 'value', 'source', 'array', 'put', 'specified', 'index', 'another', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '10', ',', '10', ',', '20', ',', '30', ',', '30', ']', ',', 'float', ')', 'print', '(', 'x', ')', 'print', '(', '""Put 0 and 40 in first and fifth position of the above array""', ')', 'y', '=', 'np', '.', 'array', '(', '[', '0', ',', '40', ',', '60', ']', ',', 'float', ')', 'x', '.', 'put', '(', '[', '0', ',', '4', ']', ',', 'y', ')', 'print', '(', '""Array x, after putting two values:""', ')', 'print', '(', 'x', ')']"
1216,"['write', 'python', 'program', 'create', 'dictionary', 'grouping', 'sequence', 'keyvalue', 'pair', 'dictionary', 'list']","['def', 'grouping_dictionary', '(', 'l', ')', ':', 'result', '=', '{', '}', 'for', 'k', ',', 'v', 'in', 'l', ':', 'result', '.', 'setdefault', '(', 'k', ',', '[', ']', ')', '.', 'append', '(', 'v', ')', 'return', 'result', 'colors', '=', '[', '(', ""'yellow'"", ',', '1', ')', ',', '(', ""'blue'"", ',', '2', ')', ',', '(', ""'yellow'"", ',', '3', ')', ',', '(', ""'blue'"", ',', '4', ')', ',', '(', ""'red'"", ',', '1', ')', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'colors', ')', 'print', '(', '""\\nGrouping a sequence of key-value pairs into a dictionary of lists:""', ')', 'print', '(', 'grouping_dictionary', '(', 'colors', ')', ')']"
1217,"['write', 'python', 'program', 'find', 'file', 'skip', 'directory', 'given', 'directory']","['import', 'os', 'print', '(', '[', 'f', 'for', 'f', 'in', 'os', '.', 'listdir', '(', ""'/home/students'"", ')', 'if', 'os', '.', 'path', '.', 'isfile', '(', 'os', '.', 'path', '.', 'join', '(', ""'/home/students'"", ',', 'f', ')', ')', ']', ')']"
1218,"['write', 'numpy', 'program', 'check', 'two', 'random', 'array', 'equal']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'random', '.', 'randint', '(', '0', ',', '2', ',', '6', ')', 'print', '(', '""First array:""', ')', 'print', '(', 'x', ')', 'y', '=', 'np', '.', 'random', '.', 'randint', '(', '0', ',', '2', ',', '6', ')', 'print', '(', '""Second array:""', ')', 'print', '(', 'y', ')', 'print', '(', '""Test above two arrays are equal or not!""', ')', 'array_equal', '=', 'np', '.', 'allclose', '(', 'x', ',', 'y', ')', 'print', '(', 'array_equal', ')']"
1219,"['write', 'python', 'program', 'find', 'minimum', 'window', 'given', 'string', 'contain', 'character', 'another', 'given', 'string']","['import', 'collections', 'def', 'min_window', '(', 'str1', ',', 'str2', ')', ':', 'result_char', ',', 'missing_char', '=', 'collections', '.', 'Counter', '(', 'str2', ')', ',', 'len', '(', 'str2', ')', 'i', '=', 'p', '=', 'q', '=', '0', 'for', 'j', ',', 'c', 'in', 'enumerate', '(', 'str1', ',', '1', ')', ':', 'missing_char', '-=', 'result_char', '[', 'c', ']', '>', '0', 'result_char', '[', 'c', ']', '-=', '1', 'if', 'not', 'missing_char', ':', 'while', 'i', '<', 'q', 'and', 'result_char', '[', 'str1', '[', 'i', ']', ']', '<', '0', ':', 'result_char', '[', 'str1', '[', 'i', ']', ']', '+=', '1', 'i', '+=', '1', 'if', 'not', 'q', 'or', 'j', '-', 'i', '<=', 'q', '-', 'p', ':', 'p', ',', 'q', '=', 'i', ',', 'j', 'return', 'str1', '[', 'p', ':', 'q', ']', 'str1', '=', '""PRWSOERIUSFK""', 'str2', '=', '""OSU""', 'print', '(', '""Original Strings:\\n""', ',', 'str1', ',', '""\\n""', ',', 'str2', ')', 'print', '(', '""Minimum window:""', ')', 'print', '(', 'min_window', '(', 'str1', ',', 'str2', ')', ')']"
1220,"['write', 'panda', 'program', 'get', 'sighting', 'day', 'unidentified', 'flying', 'object', 'ufo', 'le', 'equal', 'year', 'day']","['import', 'pandas', 'as', 'pd', 'import', 'datetime', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'now', '=', 'pd', '.', 'to_datetime', '(', ""'today'"", ')', 'duration', '=', 'datetime', '.', 'timedelta', '(', 'days', '=', '365', '*', '40', ')', 'print', '(', '""Original Dataframe:""', ')', 'print', '(', 'df', '.', 'head', '(', ')', ')', 'print', '(', '""\\nCurrent date:""', ')', 'print', '(', 'now', ')', 'print', '(', '""\\nSighting days of the unidentified flying object (ufo) which are less than or equal to 40 years (365*40 days):""', ')', 'df', '=', 'df', '[', 'now', '-', 'df', '[', ""'Date_time'"", ']', '<=', 'duration', ']', 'print', '(', 'df', '.', 'head', '(', ')', ')']"
1221,"['write', 'python', 'program', 'get', 'date', 'time', 'property', 'datetime', 'function', 'using', 'arrow', 'module']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current date:""', ')', 'print', '(', 'a', '.', 'date', '(', ')', ')', 'print', '(', '""\\nCurrent time:""', ')', 'print', '(', 'a', '.', 'time', '(', ')', ')']"
1222,"['write', 'python', 'program', 'convert', 'list', 'character', 'string']","['s', '=', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", ']', 'str1', '=', ""''"", '.', 'join', '(', 's', ')', 'print', '(', 'str1', ')']"
1223,"['write', 'python', 'program', 'map', 'value', 'given', 'list', 'dictionary', 'using', 'function', 'keyvalue', 'pair', 'consist', 'original', 'value', 'key', 'result', 'function', 'value']","['def', 'test', '(', 'itr', ',', 'fn', ')', ':', 'return', 'dict', '(', 'zip', '(', 'itr', ',', 'map', '(', 'fn', ',', 'itr', ')', ')', ')', 'print', '(', 'test', '(', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', 'lambda', 'x', ':', 'x', '*', 'x', ')', ')']"
1224,"['write', 'numpy', 'program', 'remove', 'specific', 'element', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '10', ',', '20', ',', '30', ',', '40', ',', '50', ',', '60', ',', '70', ',', '80', ',', '90', ',', '100', ']', ')', 'index', '=', '[', '0', ',', '3', ',', '4', ']', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Delete first, fourth and fifth elements:""', ')', 'new_x', '=', 'np', '.', 'delete', '(', 'x', ',', 'index', ')', 'print', '(', 'new_x', ')']"
1225,"['write', 'panda', 'program', 'get', 'difference', 'day', 'documented', 'date', 'reporting', 'date', 'unidentified', 'flying', 'object', 'ufo']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'df', '[', ""'date_documented'"", ']', '=', 'df', '[', ""'date_documented'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'print', '(', '""Original Dataframe:""', ')', 'print', '(', 'df', '.', 'head', '(', ')', ')', 'print', '(', '""\\nDifference (in days) between documented date and reporting date of UFO:""', ')', 'df', '[', ""'Difference'"", ']', '=', '(', 'df', '[', ""'date_documented'"", ']', '-', 'df', '[', ""'Date_time'"", ']', ')', '.', 'dt', '.', 'days', 'print', '(', 'df', ')']"
1226,"['write', 'panda', 'program', 'check', 'whether', 'alphabetic', 'value', 'present', 'given', 'column', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Company'"", ',', ""'Company a001'"", ',', ""'Company 123'"", ',', ""'abcd'"", ',', ""'Company 12'"", ']', ',', ""'date_of_sale '"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nWhether Alphabetic values present in company_code column?""', ')', 'df', '[', ""'company_code_is_alpha'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'isalpha', '(', ')', ',', 'df', '[', ""'company_code'"", ']', ')', ')', 'print', '(', 'df', ')']"
1227,"['write', 'python', 'program', 'convert', 'given', 'unicode', 'list', 'list', 'contains', 'string']","['def', 'unicode_to_str', '(', 'lst', ')', ':', 'result', '=', '[', 'str', '(', 'x', ')', 'for', 'x', 'in', 'lst', ']', 'return', 'result', 'students', '=', '[', ""u'S001'"", ',', ""u'S002'"", ',', ""u'S003'"", ',', ""u'S004'"", ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'students', ')', 'print', '(', '"" Convert the said unicode list to a list contains strings:""', ')', 'print', '(', 'unicode_to_str', '(', 'students', ')', ')']"
1228,"['write', 'python', 'program', 'round', 'number', 'given', 'list', 'print', 'minimum', 'maximum', 'number', 'multiply', 'number', 'print', 'unique', 'number', 'ascending', 'order', 'separated', 'space']","['nums', '=', '[', '22.4', ',', '4.0', ',', '16.22', ',', '9.10', ',', '11.00', ',', '12.22', ',', '14.20', ',', '5.20', ',', '17.50', ']', 'print', '(', '""Original list:""', ',', 'nums', ')', 'numbers', '=', 'list', '(', 'map', '(', 'round', ',', 'nums', ')', ')', 'print', '(', '""Minimum value: ""', ',', 'min', '(', 'numbers', ')', ')', 'print', '(', '""Maximum value: ""', ',', 'max', '(', 'numbers', ')', ')', 'numbers', '=', 'list', '(', 'set', '(', 'numbers', ')', ')', 'numbers', '=', '(', 'sorted', '(', 'map', '(', 'lambda', 'n', ':', 'n', '*', '5', ',', 'numbers', ')', ')', ')', 'print', '(', '""Result:""', ')', 'for', 'numb', 'in', 'numbers', ':', 'print', '(', 'numb', ',', 'end', '=', ""' '"", ')']"
1229,"['write', 'python', 'program', 'get', 'dictionary', 'object', 'field']","['class', 'dictObj', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'x', '=', ""'red'"", 'self', '.', 'y', '=', ""'Yellow'"", 'self', '.', 'z', '=', ""'Green'"", 'def', 'do_nothing', '(', 'self', ')', ':', 'pass', 'test', '=', 'dictObj', '(', ')', 'print', '(', 'test', '.', '__dict__', ')']"
1230,"['write', 'python', 'program', 'find', 'longest', 'common', 'substring', 'two', 'given', 'string']","['from', 'difflib', 'import', 'SequenceMatcher', 'def', 'longest_Substring', '(', 's1', ',', 's2', ')', ':', 'seq_match', '=', 'SequenceMatcher', '(', 'None', ',', 's1', ',', 's2', ')', 'match', '=', 'seq_match', '.', 'find_longest_match', '(', '0', ',', 'len', '(', 's1', ')', ',', '0', ',', 'len', '(', 's2', ')', ')', 'if', '(', 'match', '.', 'size', '!=', '0', ')', ':', 'return', '(', 's1', '[', 'match', '.', 'a', ':', 'match', '.', 'a', '+', 'match', '.', 'size', ']', ')', 'else', ':', 'return', '(', ""'Longest common sub-string not present'"", ')', 's1', '=', ""'abcdefgh'"", 's2', '=', ""'xswerabcdwd'"", 'print', '(', '""Original Substrings:\\n""', ',', 's1', '+', '""\\n""', ',', 's2', ')', 'print', '(', '""\\nCommon longest sub_string:""', ')', 'print', '(', 'longest_Substring', '(', 's1', ',', 's2', ')', ')']"
1231,"['write', 'panda', 'program', 'keep', 'row', 'least', 'nan', 'value', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', '70002', ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ']', ',', ""'purch_amt'"", ':', '[', 'np', '.', 'nan', ',', '270.65', ',', '65.26', ',', 'np', '.', 'nan', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', 'np', '.', 'nan', ']', ',', ""'ord_date'"", ':', '[', 'np', '.', 'nan', ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', 'np', '.', 'nan', ']', ',', ""'customer_id'"", ':', '[', 'np', '.', 'nan', ',', '3001', ',', '3001', ',', 'np', '.', 'nan', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', 'np', '.', 'nan', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nKeep the rows with at least 2 NaN values of the said DataFrame:""', ')', 'result', '=', 'df', '.', 'dropna', '(', 'thresh', '=', '2', ')', 'print', '(', 'result', ')']"
1232,"['write', 'python', 'program', 'calculate', 'value', 'power', 'b']","['def', 'power', '(', 'a', ',', 'b', ')', ':', 'if', 'b', '==', '0', ':', 'return', '1', 'elif', 'a', '==', '0', ':', 'return', '0', 'elif', 'b', '==', '1', ':', 'return', 'a', 'else', ':', 'return', 'a', '*', 'power', '(', 'a', ',', 'b', '-', '1', ')', 'print', '(', 'power', '(', '3', ',', '4', ')', ')']"
1233,"['write', 'python', 'program', 'find', 'factorial', 'number', 'using', 'itertools', 'module']","['import', 'itertools', 'as', 'it', 'import', 'operator', 'as', 'op', 'def', 'factorials_nums', '(', 'n', ')', ':', 'result', '=', 'list', '(', 'it', '.', 'accumulate', '(', 'it', '.', 'chain', '(', '[', '1', ']', ',', 'range', '(', '1', ',', '1', '+', 'n', ')', ')', ',', 'op', '.', 'mul', ')', ')', 'return', 'result', ';', 'print', '(', '""Factorials of 5 :""', ',', 'factorials_nums', '(', '5', ')', ')', 'print', '(', '""Factorials of 9 :""', ',', 'factorials_nums', '(', '9', ')', ')']"
1234,"['write', 'python', 'program', 'add', 'ing', 'end', 'given', 'string', 'length', 'least', 'given', 'string', 'already', 'end', 'ing', 'add', 'ly', 'instead', 'string', 'length', 'given', 'string', 'le', 'leave', 'unchanged']","['def', 'add_string', '(', 'str1', ')', ':', 'length', '=', 'len', '(', 'str1', ')', 'if', 'length', '>', '2', ':', 'if', 'str1', '[', '-', '3', ':', ']', '==', ""'ing'"", ':', 'str1', '+=', ""'ly'"", 'else', ':', 'str1', '+=', ""'ing'"", 'return', 'str1', 'print', '(', 'add_string', '(', ""'ab'"", ')', ')', 'print', '(', 'add_string', '(', ""'abc'"", ')', ')', 'print', '(', 'add_string', '(', ""'string'"", ')', ')']"
1235,"['write', 'python', 'program', 'compute', 'square', 'first', 'n', 'fibonacci', 'number', 'using', 'map', 'function', 'generate', 'list', 'number']","['import', 'itertools', 'n', '=', '10', 'def', 'fibonacci_nums', '(', 'x', '=', '0', ',', 'y', '=', '1', ')', ':', 'yield', 'x', 'while', 'True', ':', 'yield', 'y', 'x', ',', 'y', '=', 'y', ',', 'x', '+', 'y', 'print', '(', '""First 10 Fibonacci numbers:""', ')', 'result', '=', 'list', '(', 'itertools', '.', 'islice', '(', 'fibonacci_nums', '(', ')', ',', 'n', ')', ')', 'print', '(', 'result', ')', 'square', '=', 'lambda', 'x', ':', 'x', '*', 'x', 'print', '(', '""\\nAfter squaring said numbers of the list:""', ')', 'print', '(', 'list', '(', 'map', '(', 'square', ',', 'result', ')', ')', ')']"
1236,"['write', 'numpy', 'program', 'compute', 'elementwise', 'indication', 'sign', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '3', ',', '5', ',', '0', ',', '-', '1', ',', '-', '7', ',', '0', ',', '5', ']', ')', 'print', '(', '""Original array;""', ')', 'print', '(', 'x', ')', 'r1', '=', 'np', '.', 'sign', '(', 'x', ')', 'r2', '=', 'np', '.', 'copy', '(', 'x', ')', 'r2', '[', 'r2', '>', '0', ']', '=', '1', 'r2', '[', 'r2', '<', '0', ']', '=', '-', '1', 'assert', 'np', '.', 'array_equal', '(', 'r1', ',', 'r2', ')', 'print', '(', '""Element-wise indication of the sign for all elements of the said array:""', ')', 'print', '(', 'r1', ')']"
1237,"['write', 'python', 'program', 'create', 'naïve', 'without', 'time', 'zone', 'datetime', 'representation', 'arrow', 'object']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'r', '=', 'arrow', '.', 'now', '(', ""'US/Mountain'"", ')', 'print', '(', '""\\nNaive datetime representation:""', ')', 'print', '(', 'r', '.', 'naive', ')']"
1238,"['write', 'python', 'program', 'extract', 'list', 'value', 'given', 'list', 'dictionary']","['def', 'test', '(', 'lst', ',', 'marks', ')', ':', 'result', '=', '[', 'd', '[', 'marks', ']', 'for', 'd', 'in', 'lst', 'if', 'marks', 'in', 'd', ']', 'return', 'result', 'marks', '=', '[', '{', ""'Math'"", ':', '90', ',', ""'Science'"", ':', '92', '}', ',', '{', ""'Math'"", ':', '89', ',', ""'Science'"", ':', '94', '}', ',', '{', ""'Math'"", ':', '92', ',', ""'Science'"", ':', '88', '}', ']', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'marks', ')', 'subj', '=', '""Science""', 'print', '(', '""\\nExtract a list of values from said list of dictionaries where subject =""', ',', 'subj', ')', 'print', '(', 'test', '(', 'marks', ',', 'subj', ')', ')', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'marks', ')', 'subj', '=', '""Math""', 'print', '(', '""\\nExtract a list of values from said list of dictionaries where subject =""', ',', 'subj', ')', 'print', '(', 'test', '(', 'marks', ',', 'subj', ')', ')']"
1239,"['hrefeditorgo', 'editora']","['def', 'pascal_triangle', '(', 'n', ')', ':', 'trow', '=', '[', '1', ']', 'y', '=', '[', '0', ']', 'for', 'x', 'in', 'range', '(', 'max', '(', 'n', ',', '0', ')', ')', ':', 'print', '(', 'trow', ')', 'trow', '=', '[', 'l', '+', 'r', 'for', 'l', ',', 'r', 'in', 'zip', '(', 'trow', '+', 'y', ',', 'y', '+', 'trow', ')', ']', 'return', 'n', '>=', '1', 'pascal_triangle', '(', '6', ')']"
1240,"['write', 'python', 'function', 'take', 'two', 'list', 'return', 'true', 'least', 'one', 'common', 'member']","['def', 'common_data', '(', 'list1', ',', 'list2', ')', ':', 'result', '=', 'False', 'for', 'x', 'in', 'list1', ':', 'for', 'y', 'in', 'list2', ':', 'if', 'x', '==', 'y', ':', 'result', '=', 'True', 'return', 'result', 'print', '(', 'common_data', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ',', '[', '5', ',', '6', ',', '7', ',', '8', ',', '9', ']', ')', ')', 'print', '(', 'common_data', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ',', '[', '6', ',', '7', ',', '8', ',', '9', ']', ')', ')']"
1241,"['write', 'panda', 'program', 'create', 'stacked', 'histogram', 'plot', 'opening', 'closing', 'high', 'low', 'stock', 'price', 'alphabet', 'inc', 'two', 'specific', 'date', 'bin']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-9-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'df2', '=', 'df1', '[', '[', ""'Open'"", ',', ""'Close'"", ',', ""'High'"", ',', ""'Low'"", ']', ']', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '25', ',', '25', ')', ')', 'df2', '.', 'plot', '.', 'hist', '(', 'stacked', '=', 'True', ',', 'bins', '=', '200', ')', 'plt', '.', 'suptitle', '(', ""'Opening/Closing/High/Low stock prices of Alphabet Inc.,\\n From 01-04-2020 to 30-09-2020'"", ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'show', '(', ')']"
1242,"['write', 'python', 'program', 'combine', 'two', 'list', 'dictionary', 'element', 'first', 'one', 'serve', 'key', 'element', 'second', 'one', 'serve', 'value', 'value', 'first', 'list', 'need', 'unique', 'hashable']","['def', 'test', '(', 'keys', ',', 'values', ')', ':', 'return', 'dict', '(', 'zip', '(', 'keys', ',', 'values', ')', ')', 'l1', '=', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", ',', ""'e'"", ',', ""'f'"", ']', 'l2', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'l1', ')', 'print', '(', 'l2', ')', 'print', '(', '""\\nCombine the values of the said two lists into a dictionary:""', ')', 'print', '(', 'test', '(', 'l1', ',', 'l2', ')', ')']"
1243,"['write', 'python', 'program', 'replace', 'last', 'element', 'list', 'another', 'list']","['num1', '=', '[', '1', ',', '3', ',', '5', ',', '7', ',', '9', ',', '10', ']', 'num2', '=', '[', '2', ',', '4', ',', '6', ',', '8', ']', 'num1', '[', '-', '1', ':', ']', '=', 'num2', 'print', '(', 'num1', ')']"
1244,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'topological', 'sort']",[]
1245,"['write', 'panda', 'program', 'change', 'data', 'type', 'given', 'column', 'series']","['import', 'pandas', 'as', 'pd', 's1', '=', 'pd', '.', 'Series', '(', '[', ""'100'"", ',', ""'200'"", ',', ""'python'"", ',', ""'300.12'"", ',', ""'400'"", ']', ')', 'print', '(', '""Original Data Series:""', ')', 'print', '(', 's1', ')', 'print', '(', '""Change the said data type to numeric:""', ')', 's2', '=', 'pd', '.', 'to_numeric', '(', 's1', ',', 'errors', '=', ""'coerce'"", ')', 'print', '(', 's2', ')']"
1246,"['write', 'numpy', 'program', 'convert', 'python', 'dictionary', 'numpy', 'ndarray']","['import', 'numpy', 'as', 'np', 'from', 'ast', 'import', 'literal_eval', 'udict', '=', '""""""{""column0"":{""a"":1,""b"":0.0,""c"":0.0,""d"":2.0},\r   ""column1"":{""a"":3.0,""b"":1,""c"":0.0,""d"":-1.0},\r   ""column2"":{""a"":4,""b"":1,""c"":5.0,""d"":-1.0},\r   ""column3"":{""a"":3.0,""b"":-1.0,""c"":-1.0,""d"":-1.0}\r  }""""""', 't', '=', 'literal_eval', '(', 'udict', ')', 'print', '(', '""\\nOriginal dictionary:""', ')', 'print', '(', 't', ')', 'print', '(', '""Type: ""', ',', 'type', '(', 't', ')', ')', 'result_nparra', '=', 'np', '.', 'array', '(', '[', '[', 'v', '[', 'j', ']', 'for', 'j', 'in', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", ']', ']', 'for', 'k', ',', 'v', 'in', 't', '.', 'items', '(', ')', ']', ')', 'print', '(', '""\\nndarray:""', ')', 'print', '(', 'result_nparra', ')', 'print', '(', '""Type: ""', ',', 'type', '(', 'result_nparra', ')', ')']"
1247,"['write', 'python', 'program', 'get', 'maximum', 'value', 'list', 'mapping', 'element', 'value', 'using', 'given', 'function']","['def', 'max_by', '(', 'lst', ',', 'fn', ')', ':', 'return', 'max', '(', 'map', '(', 'fn', ',', 'lst', ')', ')', 'print', '(', 'max_by', '(', '[', '{', ""'n'"", ':', '4', '}', ',', '{', ""'n'"", ':', '2', '}', ',', '{', ""'n'"", ':', '8', '}', ',', '{', ""'n'"", ':', '6', '}', ']', ',', 'lambda', 'v', ':', 'v', '[', ""'n'"", ']', ')', ')']"
1248,"['write', 'python', 'program', 'check', 'priority', 'four', 'operator']","['from', 'collections', 'import', 'deque', 'import', 're', '__operators__', '=', '""+-/*""', '__parenthesis__', '=', '""()""', '__priority__', '=', '{', ""'+'"", ':', '0', ',', ""'-'"", ':', '0', ',', ""'*'"", ':', '1', ',', ""'/'"", ':', '1', ',', '}', 'def', 'test_higher_priority', '(', 'operator1', ',', 'operator2', ')', ':', 'return', '__priority__', '[', 'operator1', ']', '>=', '__priority__', '[', 'operator2', ']', 'print', '(', 'test_higher_priority', '(', ""'*'"", ',', ""'-'"", ')', ')', 'print', '(', 'test_higher_priority', '(', ""'+'"", ',', ""'-'"", ')', ')', 'print', '(', 'test_higher_priority', '(', ""'+'"", ',', ""'*'"", ')', ')', 'print', '(', 'test_higher_priority', '(', ""'+'"", ',', ""'/'"", ')', ')', 'print', '(', 'test_higher_priority', '(', ""'*'"", ',', ""'/'"", ')', ')']"
1249,"['write', 'python', 'program', 'wrap', 'given', 'string', 'paragraph', 'given', 'width']","['import', 'textwrap', 's', '=', 'input', '(', '""Input a string: ""', ')', 'w', '=', 'int', '(', 'input', '(', '""Input the width of the paragraph: ""', ')', '.', 'strip', '(', ')', ')', 'print', '(', '""Result:""', ')', 'print', '(', 'textwrap', '.', 'fill', '(', 's', ',', 'w', ')', ')']"
1250,"['write', 'python', 'program', 'count', 'number', 'student', 'individual', 'class']","['from', 'collections', 'import', 'Counter', 'classes', '=', '(', '(', ""'V'"", ',', '1', ')', ',', '(', ""'VI'"", ',', '1', ')', ',', '(', ""'V'"", ',', '2', ')', ',', '(', ""'VI'"", ',', '2', ')', ',', '(', ""'VI'"", ',', '3', ')', ',', '(', ""'VII'"", ',', '1', ')', ',', ')', 'students', '=', 'Counter', '(', 'class_name', 'for', 'class_name', ',', 'no_students', 'in', 'classes', ')', 'print', '(', 'students', ')']"
1251,"['write', 'python', 'program', 'get', 'every', 'element', 'exists', 'two', 'given', 'list', 'applying', 'provided', 'function', 'element']","['def', 'union_by_el', '(', 'x', ',', 'y', ',', 'fn', ')', ':', '_x', '=', 'set', '(', 'map', '(', 'fn', ',', 'x', ')', ')', 'return', 'list', '(', 'set', '(', 'x', '+', '[', 'item', 'for', 'item', 'in', 'y', 'if', 'fn', '(', 'item', ')', 'not', 'in', '_x', ']', ')', ')', 'from', 'math', 'import', 'floor', 'print', '(', 'union_by_el', '(', '[', '4.1', ']', ',', '[', '2.2', ',', '4.3', ']', ',', 'floor', ')', ')']"
1252,"['write', 'python', 'program', 'generate', 'permutation', 'n', 'item', 'successive', 'permutation', 'differ', 'swapping', 'two', 'item']","['from', 'operator', 'import', 'itemgetter', 'DEBUG', '=', 'False', 'def', 'spermutations', '(', 'n', ')', ':', '""""""permutations by swapping. Yields: perm, sign""""""', 'sign', '=', '1', 'p', '=', '[', '[', 'i', ',', '0', 'if', 'i', '==', '0', 'else', '-', '1', ']', 'for', 'i', 'in', 'range', '(', 'n', ')', ']', 'if', 'DEBUG', ':', 'print', '(', ""' #'"", ',', 'p', ')', 'yield', 'tuple', '(', 'pp', '[', '0', ']', 'for', 'pp', 'in', 'p', ')', ',', 'sign', 'while', 'any', '(', 'pp', '[', '1', ']', 'for', 'pp', 'in', 'p', ')', ':', 'i1', ',', '(', 'n1', ',', 'd1', ')', '=', 'max', '(', '(', '(', 'i', ',', 'pp', ')', 'for', 'i', ',', 'pp', 'in', 'enumerate', '(', 'p', ')', 'if', 'pp', '[', '1', ']', ')', ',', 'key', '=', 'itemgetter', '(', '1', ')', ')', 'sign', '*=', '-', '1', 'if', 'd1', '==', '-', '1', ':', 'i2', '=', 'i1', '-', '1', 'p', '[', 'i1', ']', ',', 'p', '[', 'i2', ']', '=', 'p', '[', 'i2', ']', ',', 'p', '[', 'i1', ']', 'if', 'i2', '==', '0', 'or', 'p', '[', 'i2', '-', '1', ']', '[', '0', ']', '>', 'n1', ':', 'p', '[', 'i2', ']', '[', '1', ']', '=', '0', 'elif', 'd1', '==', '1', ':', 'i2', '=', 'i1', '+', '1', 'p', '[', 'i1', ']', ',', 'p', '[', 'i2', ']', '=', 'p', '[', 'i2', ']', ',', 'p', '[', 'i1', ']', 'if', 'i2', '==', 'n', '-', '1', 'or', 'p', '[', 'i2', '+', '1', ']', '[', '0', ']', '>', 'n1', ':', 'p', '[', 'i2', ']', '[', '1', ']', '=', '0', 'if', 'DEBUG', ':', 'print', '(', ""' #'"", ',', 'p', ')', 'yield', 'tuple', '(', 'pp', '[', '0', ']', 'for', 'pp', 'in', 'p', ')', ',', 'sign', 'for', 'i3', ',', 'pp', 'in', 'enumerate', '(', 'p', ')', ':', 'n3', ',', 'd3', '=', 'pp', 'if', 'n3', '>', 'n1', ':', 'pp', '[', '1', ']', '=', '1', 'if', 'i3', '<', 'i2', 'else', '-', '1', 'if', 'DEBUG', ':', 'print', '(', ""' # Set Moving'"", ')', 'if', '__name__', '==', ""'__main__'"", ':', 'from', 'itertools', 'import', 'permutations', 'for', 'n', 'in', '(', '3', ',', '4', ')', ':', 'print', '(', ""'\\nPermutations and sign of %i items'"", '%', 'n', ')', 'sp', '=', 'set', '(', ')', 'for', 'i', 'in', 'spermutations', '(', 'n', ')', ':', 'sp', '.', 'add', '(', 'i', '[', '0', ']', ')', 'print', '(', ""'Permutation: %r Sign: %2i'"", '%', 'i', ')', 'p', '=', 'set', '(', 'permutations', '(', 'range', '(', 'n', ')', ')', ')', 'assert', 'sp', '==', 'p', ',', ""'Two methods of generating permutations do not agree'""]"
1253,"['write', 'python', 'program', 'get', 'number', 'occurrence', 'specified', 'element', 'array']","['from', 'array', 'import', '*', 'array_num', '=', 'array', '(', ""'i'"", ',', '[', '1', ',', '3', ',', '5', ',', '3', ',', '7', ',', '9', ',', '3', ']', ')', 'print', '(', '""Original array: ""', '+', 'str', '(', 'array_num', ')', ')', 'print', '(', '""Number of occurrences of the number 3 in the said array: ""', '+', 'str', '(', 'array_num', '.', 'count', '(', '3', ')', ')', ')']"
1254,"['write', 'python', 'program', 'check', 'substring', 'present', 'given', 'list', 'string', 'value']","['def', 'find_substring', '(', 'str1', ',', 'sub_str', ')', ':', 'if', 'any', '(', 'sub_str', 'in', 's', 'for', 's', 'in', 'str1', ')', ':', 'return', 'True', 'return', 'False', 'colors', '=', '[', '""red""', ',', '""black""', ',', '""white""', ',', '""green""', ',', '""orange""', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'colors', ')', 'sub_str', '=', '""ack""', 'print', '(', '""Substring to search:""', ')', 'print', '(', 'sub_str', ')', 'print', '(', '""Check if a substring presents in the said list of string values:""', ')', 'print', '(', 'find_substring', '(', 'colors', ',', 'sub_str', ')', ')', 'sub_str', '=', '""abc""', 'print', '(', '""Substring to search:""', ')', 'print', '(', 'sub_str', ')', 'print', '(', '""Check if a substring presents in the said list of string values:""', ')', 'print', '(', 'find_substring', '(', 'colors', ',', 'sub_str', ')', ')']"
1255,"['write', 'python', 'program', 'print', 'dictionary', 'line', 'line']","['students', '=', '{', ""'Aex'"", ':', '{', ""'class'"", ':', ""'V'"", ',', ""'rolld_id'"", ':', '2', '}', ',', ""'Puja'"", ':', '{', ""'class'"", ':', ""'V'"", ',', ""'roll_id'"", ':', '3', '}', '}', 'for', 'a', 'in', 'students', ':', 'print', '(', 'a', ')', 'for', 'b', 'in', 'students', '[', 'a', ']', ':', 'print', '(', 'b', ',', ""':'"", ',', 'students', '[', 'a', ']', '[', 'b', ']', ')']"
1256,"['write', 'python', 'program', 'create', 'shallow', 'copy', 'given', 'list', 'use', 'copycopy']","['import', 'copy', 'nums_x', '=', '[', '1', ',', '[', '2', ',', '3', ',', '4', ']', ']', 'print', '(', '""Original list: ""', ',', 'nums_x', ')', 'nums_y', '=', 'copy', '.', 'copy', '(', 'nums_x', ')', 'print', '(', '""\\nCopy of the said list:""', ')', 'print', '(', 'nums_y', ')', 'print', '(', '""\\nChange the value of an element of the original list:""', ')', 'nums_x', '[', '1', ']', '[', '1', ']', '=', '10', 'print', '(', 'nums_x', ')', 'print', '(', '""\\nSecond list:""', ')', 'print', '(', 'nums_y', ')', 'nums', '=', '[', '[', '1', ']', ',', '[', '2', ']', ']', 'nums_copy', '=', 'copy', '.', 'copy', '(', 'nums', ')', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nCopy of the said list:""', ')', 'print', '(', 'nums_copy', ')', 'print', '(', '""\\nChange the value of an element of the original list:""', ')', 'nums', '[', '0', ']', '[', '0', ']', '=', '0', 'print', '(', '""\\nFirst list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nSecond list:""', ')', 'print', '(', 'nums_copy', ')']"
1257,"['write', 'python', 'program', 'extend', 'list', 'without', 'append']","['x', '=', '[', '10', ',', '20', ',', '30', ']', 'y', '=', '[', '40', ',', '50', ',', '60', ']', 'x', '[', ':', '0', ']', '=', 'y', 'print', '(', 'x', ')']"
1258,"['write', 'python', 'program', 'create', 'naïve', 'without', 'time', 'zone', 'datetime', 'representation', 'arrow', 'object']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'r', '=', 'arrow', '.', 'now', '(', ""'US/Mountain'"", ')', 'print', '(', '""\\nNaive datetime representation:""', ')', 'print', '(', 'r', '.', 'naive', ')']"
1259,"['write', 'numpy', 'program', 'count', 'lowest', 'index', 'p', 'given', 'array', 'elementwise']","['import', 'numpy', 'as', 'np', 'x1', '=', 'np', '.', 'array', '(', '[', ""'Python'"", ',', ""'PHP'"", ',', ""'JS'"", ',', ""'EXAMPLES'"", ',', ""'HTML'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""\\nOriginal Array:""', ')', 'print', '(', 'x1', ')', 'print', '(', '""count the lowest index of ‘P’:""', ')', 'r', '=', 'np', '.', 'char', '.', 'find', '(', 'x1', ',', '""P""', ')', 'print', '(', 'r', ')']"
1260,"['write', 'panda', 'program', 'display', 'frequent', 'value', 'given', 'series', 'replace', 'everything', 'else', 'series']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'RandomState', '(', '100', ')', 'num_series', '=', 'pd', '.', 'Series', '(', 'np', '.', 'random', '.', 'randint', '(', '1', ',', '5', ',', '[', '15', ']', ')', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'num_series', ')', 'print', '(', '""Top 2 Freq:""', ',', 'num_series', '.', 'value_counts', '(', ')', ')', 'result', '=', 'num_series', '[', '~', 'num_series', '.', 'isin', '(', 'num_series', '.', 'value_counts', '(', ')', '.', 'index', '[', ':', '1', ']', ')', ']', '=', ""'Other'"", 'print', '(', 'num_series', ')']"
1261,"['write', 'python', 'program', 'find', 'common', 'value', 'appear', 'two', 'given', 'string']","['def', 'intersection_of_two_string', '(', 'str1', ',', 'str2', ')', ':', 'result', '=', '""""', 'for', 'ch', 'in', 'str1', ':', 'if', 'ch', 'in', 'str2', 'and', 'not', 'ch', 'in', 'result', ':', 'result', '+=', 'ch', 'return', 'result', 'str1', '=', ""'Python3'"", 'str2', '=', ""'Python2.7'"", 'print', '(', '""Original strings:""', ')', 'print', '(', 'str1', ')', 'print', '(', 'str2', ')', 'print', '(', '""\\nIntersection of two said String:""', ')', 'print', '(', 'intersection_of_two_string', '(', 'str1', ',', 'str2', ')', ')']"
1262,"['write', 'python', 'program', 'create', 'iso', 'year', 'iso', 'week', 'number', 'iso', 'weekday', 'iso', 'formatted', 'representation', 'date', 'time']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\n3-tuple - ISO year, ISO week number, ISO weekday:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'isocalendar', '(', ')', ')', 'print', '(', '""\\nISO 8601 formatted representation of the date and time:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'isoformat', '(', ')', ')']"
1263,"['write', 'python', 'program', 'count', 'number', 'occurrence', 'value', 'given', 'array', 'nonnegative', 'integer']","['import', 'numpy', 'as', 'np', 'array1', '=', '[', '0', ',', '1', ',', '6', ',', '1', ',', '4', ',', '1', ',', '2', ',', '2', ',', '7', ']', 'print', '(', '""Original array:""', ')', 'print', '(', 'array1', ')', 'print', '(', '""Number of occurrences of each value in array: ""', ')', 'print', '(', 'np', '.', 'bincount', '(', 'array1', ')', ')']"
1264,"['write', 'python', 'program', 'get', 'list', 'locally', 'installed', 'python', 'module']","['import', 'pkg_resources', 'installed_packages', '=', 'pkg_resources', '.', 'working_set', 'installed_packages_list', '=', 'sorted', '(', '[', '""%s==%s""', '%', '(', 'i', '.', 'key', ',', 'i', '.', 'version', ')', 'for', 'i', 'in', 'installed_packages', ']', ')', 'for', 'm', 'in', 'installed_packages_list', ':', 'print', '(', 'm', ')']"
1265,"['write', 'python', 'program', 'find', 'intersection', 'two', 'given', 'array', 'using', 'lambda']","['array_nums1', '=', '[', '1', ',', '2', ',', '3', ',', '5', ',', '7', ',', '8', ',', '9', ',', '10', ']', 'array_nums2', '=', '[', '1', ',', '2', ',', '4', ',', '8', ',', '9', ']', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'array_nums1', ')', 'print', '(', 'array_nums2', ')', 'result', '=', 'list', '(', 'filter', '(', 'lambda', 'x', ':', 'x', 'in', 'array_nums1', ',', 'array_nums2', ')', ')', 'print', '(', '""\\nIntersection of the said arrays: ""', ',', 'result', ')']"
1266,"['write', 'python', 'program', 'combine', 'value', 'python', 'list', 'dictionary']","['from', 'collections', 'import', 'Counter', 'item_list', '=', '[', '{', ""'item'"", ':', ""'item1'"", ',', ""'amount'"", ':', '400', '}', ',', '{', ""'item'"", ':', ""'item2'"", ',', ""'amount'"", ':', '300', '}', ',', '{', ""'item'"", ':', ""'item1'"", ',', ""'amount'"", ':', '750', '}', ']', 'result', '=', 'Counter', '(', ')', 'for', 'd', 'in', 'item_list', ':', 'result', '[', 'd', '[', ""'item'"", ']', ']', '+=', 'd', '[', ""'amount'"", ']', 'print', '(', 'result', ')']"
1267,"['write', 'numpy', 'program', 'create', 'new', 'array', 'filled']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'full', '(', '(', '3', ',', '5', ')', ',', '2', ',', 'dtype', '=', 'np', '.', 'uint', ')', 'print', '(', 'x', ')', 'y', '=', 'np', '.', 'ones', '(', '[', '3', ',', '5', ']', ',', 'dtype', '=', 'np', '.', 'uint', ')', '*', '2', 'print', '(', 'y', ')']"
1268,"['write', 'panda', 'program', 'filter', 'record', 'starting', 'row', 'access', 'every', 'row', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nStarting from the 2nd row, access every 5th row:""', ')', 'print', '(', 'w_a_con', '.', 'iloc', '[', '1', ':', ':', '5', ']', '.', 'head', '(', '10', ')', ')']"
1269,"['write', 'numpy', 'program', 'check', 'whether', 'dimension', 'two', 'given', 'array']","['import', 'numpy', 'as', 'np', 'def', 'test_array_dimensions', '(', 'ar1', ',', 'ar2', ')', ':', 'try', ':', 'ar1', '+', 'ar2', 'except', 'ValueError', ':', 'return', '""Different dimensions""', 'else', ':', 'return', '""Same dimensions""', 'ar1', '=', 'np', '.', 'arange', '(', '20', ')', '.', 'reshape', '(', '4', ',', '5', ')', 'ar2', '=', 'np', '.', 'arange', '(', '20', ')', '.', 'reshape', '(', '4', ',', '5', ')', 'print', '(', 'test_array_dimensions', '(', 'ar1', ',', 'ar2', ')', ')', 'ar1', '=', 'np', '.', 'arange', '(', '20', ')', '.', 'reshape', '(', '5', ',', '4', ')', 'ar2', '=', 'np', '.', 'arange', '(', '20', ')', '.', 'reshape', '(', '4', ',', '5', ')', 'print', '(', 'test_array_dimensions', '(', 'ar1', ',', 'ar2', ')', ')']"
1270,"['write', 'panda', 'program', 'create', 'timeseries', 'two', 'index', 'label', 'random', 'value', 'also', 'print', 'type', 'index']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'import', 'datetime', 'from', 'datetime', 'import', 'datetime', ',', 'date', 'dates', '=', '[', 'datetime', '(', '2011', ',', '9', ',', '1', ')', ',', 'datetime', '(', '2011', ',', '9', ',', '2', ')', ']', 'print', '(', '""Time-series with two index labels:""', ')', 'time_series', '=', 'pd', '.', 'Series', '(', 'np', '.', 'random', '.', 'randn', '(', '2', ')', ',', 'dates', ')', 'print', '(', 'time_series', ')', 'print', '(', '""\\nType of the index:""', ')', 'print', '(', 'type', '(', 'time_series', '.', 'index', ')', ')']"
1271,"['write', 'numpy', 'program', 'compute', 'condition', 'number', 'given', 'matrix']","['import', 'numpy', 'as', 'np', 'from', 'numpy', 'import', 'linalg', 'as', 'LA', 'a', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '0', ',', '-', '1', ']', ',', '[', '0', ',', '1', ',', '0', ']', ',', '[', '1', ',', '0', ',', '1', ']', ']', ')', 'print', '(', '""Original matrix:""', ')', 'print', '(', 'a', ')', 'print', '(', '""The condition number of the said matrix:""', ')', 'print', '(', 'LA', '.', 'cond', '(', 'a', ')', ')']"
1272,"['write', 'numpy', 'program', 'view', 'input', 'array', 'least', 'two', 'dimension', 'three', 'dimension']","['import', 'numpy', 'as', 'np', 'x', '=', '10', 'print', '(', '""View inputs as arrays with at least two dimensions:""', ')', 'print', '(', 'np', '.', 'atleast_1d', '(', 'x', ')', ')', 'x', '=', 'np', '.', 'arange', '(', '4.0', ')', '.', 'reshape', '(', '2', ',', '2', ')', 'print', '(', 'np', '.', 'atleast_1d', '(', 'x', ')', ')', 'print', '(', '""View inputs as arrays with at least three dimensions:""', ')', 'x', '=', '15', 'print', '(', 'np', '.', 'atleast_3d', '(', 'x', ')', ')', 'x', '=', 'np', '.', 'arange', '(', '3.0', ')', 'print', '(', 'np', '.', 'atleast_3d', '(', 'x', ')', ')']"
1273,"['write', 'panda', 'program', 'create', 'today', 'date']","['import', 'pandas', 'as', 'pd', 'from', 'datetime', 'import', 'date', 'now', '=', 'pd', '.', 'to_datetime', '(', 'str', '(', 'date', '.', 'today', '(', ')', ')', ',', 'format', '=', ""'%Y-%m-%d'"", ')', 'print', '(', '""Today\'s date:""', ')', 'print', '(', 'now', ')']"
1274,"['write', 'numpy', 'program', 'create', 'new', 'array', 'given', 'shape', 'type', 'filled', 'zero']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'zeros', '(', 'shape', '=', '(', '5', ',', '6', ')', ',', 'dtype', '=', ""'int'"", ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'nums', '[', ':', ':', '2', ',', ':', ':', '2', ']', '=', '3', 'nums', '[', '1', ':', ':', '2', ',', ':', ':', '2', ']', '=', '7', 'print', '(', '""\\nNew array:""', ')', 'print', '(', 'nums', ')']"
1275,"['write', 'numpy', 'program', 'save', 'given', 'array', 'binary', 'file']","['import', 'numpy', 'as', 'np', 'import', 'os', 'a', '=', 'np', '.', 'arange', '(', '20', ')', 'np', '.', 'save', '(', ""'temp_arra.npy'"", ',', 'a', ')', 'print', '(', '""Check if \'temp_arra.npy\' exists or not?""', ')', 'if', 'os', '.', 'path', '.', 'exists', '(', ""'temp_arra.npy'"", ')', ':', 'x2', '=', 'np', '.', 'load', '(', ""'temp_arra.npy'"", ')', 'print', '(', 'np', '.', 'array_equal', '(', 'a', ',', 'x2', ')', ')']"
1276,"['write', 'python', 'program', 'extract', 'nth', 'element', 'given', 'list', 'tuples']","['def', 'extract_nth_element', '(', 'test_list', ',', 'n', ')', ':', 'result', '=', '[', 'x', '[', 'n', ']', 'for', 'x', 'in', 'test_list', ']', 'return', 'result', 'students', '=', '[', '(', ""'Greyson Fulton'"", ',', '98', ',', '99', ')', ',', '(', ""'Brady Kent'"", ',', '97', ',', '96', ')', ',', '(', ""'Wyatt Knott'"", ',', '91', ',', '94', ')', ',', '(', ""'Beau Turnbull'"", ',', '94', ',', '98', ')', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'students', ')', 'n', '=', '0', 'print', '(', '""\\nExtract nth element ( n =""', ',', 'n', ',', '"") from the said list of tuples:""', ')', 'print', '(', 'extract_nth_element', '(', 'students', ',', 'n', ')', ')', 'n', '=', '2', 'print', '(', '""\\nExtract nth element ( n =""', ',', 'n', ',', '"") from the said list of tuples:""', ')', 'print', '(', 'extract_nth_element', '(', 'students', ',', 'n', ')', ')']"
1277,"['write', 'numpy', 'program', 'create', 'contiguous', 'flattened', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '10', ',', '20', ',', '30', ']', ',', '[', '20', ',', '40', ',', '50', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'y', '=', 'np', '.', 'ravel', '(', 'x', ')', 'print', '(', '""New flattened array:""', ')', 'print', '(', 'y', ')']"
1278,"['write', 'python', 'program', 'print', 'first', 'n', 'lucky', 'number']","['n', '=', 'int', '(', 'input', '(', '""Input a Number: ""', ')', ')', 'List', '=', 'range', '(', '-', '1', ',', 'n', '*', 'n', '+', '9', ',', '2', ')', 'i', '=', '2', 'while', 'List', '[', 'i', ':', ']', ':', 'List', '=', 'sorted', '(', 'set', '(', 'List', ')', '-', 'set', '(', 'List', '[', 'List', '[', 'i', ']', ':', ':', 'List', '[', 'i', ']', ']', ')', ')', ';', 'i', '+=', '1', 'print', '(', 'List', '[', '1', ':', 'n', '+', '1', ']', ')']"
1279,"['write', 'python', 'function', 'calculate', 'factorial', 'number', 'nonnegative', 'integer', 'function', 'accepts', 'number', 'argument']","['def', 'factorial', '(', 'n', ')', ':', 'if', 'n', '==', '0', ':', 'return', '1', 'else', ':', 'return', 'n', '*', 'factorial', '(', 'n', '-', '1', ')', 'n', '=', 'int', '(', 'input', '(', '""Input a number to compute the factiorial : ""', ')', ')', 'print', '(', 'factorial', '(', 'n', ')', ')']"
1280,"['write', 'python', 'program', 'convert', 'list', 'nested', 'dictionary', 'key']","['num_list', '=', '[', '1', ',', '2', ',', '3', ',', '4', ']', 'new_dict', '=', 'current', '=', '{', '}', 'for', 'name', 'in', 'num_list', ':', 'current', '[', 'name', ']', '=', '{', '}', 'current', '=', 'current', '[', 'name', ']', 'print', '(', 'new_dict', ')']"
1281,"['write', 'python', 'program', 'find', 'second', 'lowest', 'grade', 'student', 'given', 'name', 'grade', 'student', 'using', 'list', 'lambda', 'input', 'number', 'student', 'name', 'grade', 'student']","['students', '=', '[', ']', 'sec_name', '=', '[', ']', 'second_low', '=', '0', 'n', '=', 'int', '(', 'input', '(', '""Input number of students: ""', ')', ')', 'for', '_', 'in', 'range', '(', 'n', ')', ':', 's_name', '=', 'input', '(', '""Name: ""', ')', 'score', '=', 'float', '(', 'input', '(', '""Grade: ""', ')', ')', 'students', '.', 'append', '(', '[', 's_name', ',', 'score', ']', ')', 'print', '(', '""\\nNames and Grades of all students:""', ')', 'print', '(', 'students', ')', 'order', '=', 'sorted', '(', 'students', ',', 'key', '=', 'lambda', 'x', ':', 'int', '(', 'x', '[', '1', ']', ')', ')', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'if', 'order', '[', 'i', ']', '[', '1', ']', '!=', 'order', '[', '0', ']', '[', '1', ']', ':', 'second_low', '=', 'order', '[', 'i', ']', '[', '1', ']', 'break', 'print', '(', '""\\nSecond lowest grade: ""', ',', 'second_low', ')', 'sec_student_name', '=', '[', 'x', '[', '0', ']', 'for', 'x', 'in', 'order', 'if', 'x', '[', '1', ']', '==', 'second_low', ']', 'sec_student_name', '.', 'sort', '(', ')', 'print', '(', '""\\nNames:""', ')', 'for', 's_name', 'in', 'sec_student_name', ':', 'print', '(', 's_name', ')']"
1282,"['write', 'python', 'program', 'check', 'whether', 'given', 'datetime', 'two', 'date', 'time', 'using', 'arrow', 'module']","['import', 'arrow', 'print', '(', '""Test whether a given datetime is between two dates and times:""', ')', 'start', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '6', ',', '5', ',', '12', ',', '30', ',', '10', ')', ')', 'end', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '6', ',', '5', ',', '12', ',', '30', ',', '36', ')', ')', 'print', '(', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '6', ',', '5', ',', '12', ',', '30', ',', '27', ')', ')', '.', 'is_between', '(', 'start', ',', 'end', ')', ')', 'start', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '5', ',', '5', ')', ')', 'end', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '5', ',', '8', ')', ')', 'print', '(', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '5', ',', '8', ')', ')', '.', 'is_between', '(', 'start', ',', 'end', ',', ""'[]'"", ')', ')', 'start', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '5', ',', '5', ')', ')', 'end', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '5', ',', '8', ')', ')', 'print', '(', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '5', ',', '8', ')', ')', '.', 'is_between', '(', 'start', ',', 'end', ',', ""'[)'"", ')', ')']"
1283,"['write', 'python', 'program', 'convert', 'string', 'element', 'integer', 'inside', 'given', 'tuple', 'using', 'lambda']","['def', 'tuple_int_str', '(', 'tuple_str', ')', ':', 'result', '=', 'tuple', '(', 'map', '(', 'lambda', 'x', ':', '(', 'int', '(', 'x', '[', '0', ']', ')', ',', 'int', '(', 'x', '[', '2', ']', ')', ')', ',', 'tuple_str', ')', ')', 'return', 'result', 'tuple_str', '=', '(', '(', ""'233'"", ',', ""'ABCD'"", ',', ""'33'"", ')', ',', '(', ""'1416'"", ',', ""'EFGH'"", ',', ""'55'"", ')', ',', '(', ""'2345'"", ',', ""'WERT'"", ',', ""'34'"", ')', ')', 'print', '(', '""Original tuple values:""', ')', 'print', '(', 'tuple_str', ')', 'print', '(', '""\\nNew tuple values:""', ')', 'print', '(', 'tuple_int_str', '(', 'tuple_str', ')', ')']"
1284,"['write', 'panda', 'program', 'extract', 'hash', 'attached', 'word', 'twitter', 'text', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', '10', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'tweets'"", ':', '[', ""'#Obama says goodbye'"", ',', ""'Retweets for #cash'"", ',', ""'A political endorsement in #Indonesia'"", ',', ""'1 dog = many #retweets'"", ',', ""'Just a simple #egg'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'find_hash', '(', 'text', ')', ':', 'hword', '=', 're', '.', 'findall', '(', ""r'(?<=#)\\w+'"", ',', 'text', ')', 'return', '"" ""', '.', 'join', '(', 'hword', ')', 'df', '[', ""'hash_word'"", ']', '=', 'df', '[', ""'tweets'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'find_hash', '(', 'x', ')', ')', 'print', '(', '""\\Extracting#@word from dataframe columns:""', ')', 'print', '(', 'df', ')']"
1285,"['write', 'python', 'program', 'get', 'index', 'first', 'element', 'greater', 'specified', 'element', 'using', 'itertools', 'module']","['from', 'itertools', 'import', 'takewhile', 'def', 'first_index', '(', 'l1', ',', 'n', ')', ':', 'return', 'len', '(', 'list', '(', 'takewhile', '(', 'lambda', 'x', ':', 'x', '[', '1', ']', '<=', 'n', ',', 'enumerate', '(', 'l1', ')', ')', ')', ')', 'nums', '=', '[', '12', ',', '45', ',', '23', ',', '67', ',', '78', ',', '90', ',', '100', ',', '76', ',', '38', ',', '62', ',', '73', ',', '29', ',', '83', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'n', '=', '73', 'print', '(', '""\\nIndex of the first element which is greater than""', ',', 'n', ',', '""in the said list:""', ')', 'print', '(', 'first_index', '(', 'nums', ',', 'n', ')', ')', 'n', '=', '21', 'print', '(', '""\\nIndex of the first element which is greater than""', ',', 'n', ',', '""in the said list:""', ')', 'print', '(', 'first_index', '(', 'nums', ',', 'n', ')', ')', 'n', '=', '80', 'print', '(', '""\\nIndex of the first element which is greater than""', ',', 'n', ',', '""in the said list:""', ')', 'print', '(', 'first_index', '(', 'nums', ',', 'n', ')', ')', 'n', '=', '55', 'print', '(', '""\\nIndex of the first element which is greater than""', ',', 'n', ',', '""in the said list:""', ')', 'print', '(', 'first_index', '(', 'nums', ',', 'n', ')', ')']"
1286,"['write', 'python', 'program', 'sort', 'unsorted', 'number', 'using', 'timsort']",[]
1287,"['write', 'python', 'program', 'check', 'given', 'function', 'return', 'true', 'least', 'one', 'element', 'list']","['def', 'test', '(', 'lst', ',', 'fn', '=', 'lambda', 'x', ':', 'x', ')', ':', 'return', 'all', '(', 'not', 'fn', '(', 'x', ')', 'for', 'x', 'in', 'lst', ')', 'print', '(', 'test', '(', '[', '1', ',', '0', ',', '2', ',', '3', ']', ',', 'lambda', 'x', ':', 'x', '>=', '3', ')', ')', 'print', '(', 'test', '(', '[', '1', ',', '0', ',', '2', ',', '3', ']', ',', 'lambda', 'x', ':', 'x', '<', '0', ')', ')', 'print', '(', 'test', '(', '[', '2', ',', '2', ',', '4', ',', '4', ']', ')', ')']"
1288,"['write', 'python', 'program', 'initialize', 'list', 'containing', 'number', 'specified', 'range', 'start', 'end', 'inclusive', 'ratio', 'two', 'term', 'step', 'return', 'error', 'step', 'equal']","['from', 'math', 'import', 'floor', ',', 'log', 'def', 'geometric_progression', '(', 'end', ',', 'start', '=', '1', ',', 'step', '=', '2', ')', ':', 'return', '[', 'start', '*', 'step', '**', 'i', 'for', 'i', 'in', 'range', '(', 'floor', '(', 'log', '(', 'end', '/', 'start', ')', '/', 'log', '(', 'step', ')', ')', '+', '1', ')', ']', 'print', '(', 'geometric_progression', '(', '256', ')', ')', 'print', '(', 'geometric_progression', '(', '256', ',', '3', ')', ')', 'print', '(', 'geometric_progression', '(', '256', ',', '1', ',', '4', ')', ')']"
1289,"['write', 'panda', 'program', 'create', 'whole', 'month', 'date', 'daily', 'frequency', 'also', 'find', 'maximum', 'minimum', 'timestamp', 'index']","['import', 'pandas', 'as', 'pd', 'dates', '=', 'pd', '.', 'Series', '(', 'pd', '.', 'date_range', '(', ""'2020-12-01'"", ',', 'periods', '=', '31', ',', 'freq', '=', ""'D'"", ')', ')', 'print', '(', '""Month of December 2020:""', ')', 'print', '(', 'dates', ')', 'dates', '=', 'pd', '.', 'Series', '(', 'pd', '.', 'date_range', '(', ""'2020-12-01'"", ',', 'periods', '=', '31', ',', 'freq', '=', ""'D'"", ')', ')', 'print', '(', '""\\nMaximum date: ""', ',', 'dates', '.', 'max', '(', ')', ')', 'print', '(', '""Minimum date: ""', ',', 'dates', '.', 'min', '(', ')', ')', 'print', '(', '""Maximum index: ""', ',', 'dates', '.', 'idxmax', '(', ')', ')', 'print', '(', '""Minimum index: ""', ',', 'dates', '.', 'idxmin', '(', ')', ')']"
1290,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'radix', 'sort']","['def', 'radix_sort', '(', 'nums', ')', ':', 'RADIX', '=', '10', 'placement', '=', '1', 'max_digit', '=', 'max', '(', 'nums', ')', 'while', 'placement', '<', 'max_digit', ':', 'buckets', '=', '[', 'list', '(', ')', 'for', '_', 'in', 'range', '(', 'RADIX', ')', ']', 'for', 'i', 'in', 'nums', ':', 'tmp', '=', 'int', '(', '(', 'i', '/', 'placement', ')', '%', 'RADIX', ')', 'buckets', '[', 'tmp', ']', '.', 'append', '(', 'i', ')', 'a', '=', '0', 'for', 'b', 'in', 'range', '(', 'RADIX', ')', ':', 'buck', '=', 'buckets', '[', 'b', ']', 'for', 'i', 'in', 'buck', ':', 'nums', '[', 'a', ']', '=', 'i', 'a', '+=', '1', 'placement', '*=', 'RADIX', 'return', 'nums', 'user_input', '=', 'input', '(', '""Input numbers separated by a comma:\\n""', ')', '.', 'strip', '(', ')', 'nums', '=', '[', 'int', '(', 'item', ')', 'for', 'item', 'in', 'user_input', '.', 'split', '(', ""','"", ')', ']', 'print', '(', 'radix_sort', '(', 'nums', ')', ')']"
1291,"['write', 'panda', 'program', 'add', 'data', 'existing', 'series']","['import', 'pandas', 'as', 'pd', 's', '=', 'pd', '.', 'Series', '(', '[', ""'100'"", ',', ""'200'"", ',', ""'python'"", ',', ""'300.12'"", ',', ""'400'"", ']', ')', 'print', '(', '""Original Data Series:""', ')', 'print', '(', 's', ')', 'print', '(', '""\\nData Series after adding some data:""', ')', 'new_s', '=', 's', '.', 'append', '(', 'pd', '.', 'Series', '(', '[', ""'500'"", ',', ""'php'"", ']', ')', ')', 'print', '(', 'new_s', ')']"
1292,"['write', 'python', 'program', 'create', 'datetime', 'object', 'converted', 'specified', 'timezone', 'using', 'arrow', 'module']","['import', 'arrow', 'utc', '=', 'arrow', '.', 'utcnow', '(', ')', 'pacific', '=', 'arrow', '.', 'now', '(', ""'US/Pacific'"", ')', 'nyc', '=', 'arrow', '.', 'now', '(', ""'America/Chicago'"", ')', '.', 'tzinfo', 'print', '(', 'pacific', '.', 'astimezone', '(', 'nyc', ')', ')']"
1293,"['write', 'python', 'program', 'create', 'dictionary', 'two', 'list', 'without', 'losing', 'duplicate', 'value']","['from', 'collections', 'import', 'defaultdict', 'class_list', '=', '[', ""'Class-V'"", ',', ""'Class-VI'"", ',', ""'Class-VII'"", ',', ""'Class-VIII'"", ']', 'id_list', '=', '[', '1', ',', '2', ',', '2', ',', '3', ']', 'temp', '=', 'defaultdict', '(', 'set', ')', 'for', 'c', ',', 'i', 'in', 'zip', '(', 'class_list', ',', 'id_list', ')', ':', 'temp', '[', 'c', ']', '.', 'add', '(', 'i', ')', 'print', '(', 'temp', ')']"
1294,"['write', 'python', 'program', 'create', 'dictionary', 'key', 'given', 'dictionary', 'value', 'generated', 'running', 'given', 'function', 'value']","['def', 'test', '(', 'obj', ',', 'fn', ')', ':', 'return', 'dict', '(', '(', 'k', ',', 'fn', '(', 'v', ')', ')', 'for', 'k', ',', 'v', 'in', 'obj', '.', 'items', '(', ')', ')', 'users', '=', '{', ""'Theodore'"", ':', '{', ""'user'"", ':', ""'Theodore'"", ',', ""'age'"", ':', '45', '}', ',', ""'Roxanne'"", ':', '{', ""'user'"", ':', ""'Roxanne'"", ',', ""'age'"", ':', '15', '}', ',', ""'Mathew'"", ':', '{', ""'user'"", ':', ""'Mathew'"", ',', ""'age'"", ':', '21', '}', ',', '}', 'print', '(', '""\\nOriginal dictionary elements:""', ')', 'print', '(', 'users', ')', 'print', '(', '""\\nDictionary with the same keys:""', ')', 'print', '(', 'test', '(', 'users', ',', 'lambda', 'u', ':', 'u', '[', ""'age'"", ']', ')', ')']"
1295,"['write', 'panda', 'program', 'create', 'plot', 'stock', 'price', 'trading', 'volume', 'alphabet', 'inc', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-9-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'stock_data', '=', 'df1', '.', 'set_index', '(', ""'Date'"", ')', 'top_plt', '=', 'plt', '.', 'subplot2grid', '(', '(', '5', ',', '4', ')', ',', '(', '0', ',', '0', ')', ',', 'rowspan', '=', '3', ',', 'colspan', '=', '4', ')', 'top_plt', '.', 'plot', '(', 'stock_data', '.', 'index', ',', 'stock_data', '[', '""Close""', ']', ')', 'plt', '.', 'title', '(', ""'Historical stock prices of Alphabet Inc. [01-04-2020 to 30-09-2020]'"", ')', 'bottom_plt', '=', 'plt', '.', 'subplot2grid', '(', '(', '5', ',', '4', ')', ',', '(', '3', ',', '0', ')', ',', 'rowspan', '=', '1', ',', 'colspan', '=', '4', ')', 'bottom_plt', '.', 'bar', '(', 'stock_data', '.', 'index', ',', 'stock_data', '[', ""'Volume'"", ']', ')', 'plt', '.', 'title', '(', ""'\\nAlphabet Inc. Trading Volume'"", ',', 'y', '=', '-', '0.60', ')', 'plt', '.', 'gcf', '(', ')', '.', 'set_size_inches', '(', '12', ',', '8', ')']"
1296,"['write', 'python', 'program', 'square', 'cube', 'every', 'number', 'given', 'list', 'integer', 'using', 'lambda']","['nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', 'print', '(', '""Original list of integers:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nSquare every number of the said list:""', ')', 'square_nums', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '**', '2', ',', 'nums', ')', ')', 'print', '(', 'square_nums', ')', 'print', '(', '""\\nCube every number of the said list:""', ')', 'cube_nums', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '**', '3', ',', 'nums', ')', ')', 'print', '(', 'cube_nums', ')']"
1297,"['write', 'numpy', 'program', 'generate', 'uniform', 'nonuniform', 'random', 'sample', 'given', 'array', 'without', 'replacement']","['import', 'numpy', 'as', 'np', 'print', '(', '""Generate a uniform random sample with replacement:""', ')', 'print', '(', 'np', '.', 'random', '.', 'choice', '(', '7', ',', '5', ')', ')', 'print', '(', '""\\nGenerate a uniform random sample without replacement:""', ')', 'print', '(', 'np', '.', 'random', '.', 'choice', '(', '7', ',', '5', ',', 'replace', '=', 'False', ')', ')', 'print', '(', '""\\nGenerate a non-uniform random sample with replacement:""', ')', 'print', '(', 'np', '.', 'random', '.', 'choice', '(', '7', ',', '5', ',', 'p', '=', '[', '0.1', ',', '0.2', ',', '0', ',', '0.2', ',', '0.4', ',', '0', ',', '0.1', ']', ')', ')', 'print', '(', '""\\nGenerate a uniform random sample without replacement:""', ')', 'print', '(', 'np', '.', 'random', '.', 'choice', '(', '7', ',', '5', ',', 'replace', '=', 'False', ',', 'p', '=', '[', '0.1', ',', '0.2', ',', '0', ',', '0.2', ',', '0.4', ',', '0', ',', '0.1', ']', ')', ')']"
1298,"['write', 'python', 'program', 'use', 'double', 'quote', 'display', 'string']","['import', 'json', 'print', '(', 'json', '.', 'dumps', '(', '{', ""'Alex'"", ':', '1', ',', ""'Suresh'"", ':', '2', ',', ""'Agnessa'"", ':', '3', '}', ')', ')']"
1299,"['write', 'python', 'program', 'get', 'current', 'memory', 'address', 'length', 'element', 'buffer', 'used', 'hold', 'array', 'content', 'also', 'find', 'size', 'memory', 'buffer', 'byte']","['from', 'array', 'import', '*', 'array_num', '=', 'array', '(', ""'i'"", ',', '[', '1', ',', '3', ',', '5', ',', '7', ',', '9', ']', ')', 'print', '(', '""Original array: ""', '+', 'str', '(', 'array_num', ')', ')', 'print', '(', '""Current memory address and the length in elements of the buffer: ""', '+', 'str', '(', 'array_num', '.', 'buffer_info', '(', ')', ')', ')', 'print', '(', '""The size of the memory buffer in bytes: ""', '+', 'str', '(', 'array_num', '.', 'buffer_info', '(', ')', '[', '1', ']', '*', 'array_num', '.', 'itemsize', ')', ')']"
1300,"['write', 'numpy', 'program', 'compute', 'determinant', 'given', 'square', 'array']","['import', 'numpy', 'as', 'np', 'from', 'numpy', 'import', 'linalg', 'as', 'LA', 'a', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '0', ']', ',', '[', '1', ',', '2', ']', ']', ')', 'print', '(', '""Original 2-d array""', ')', 'print', '(', 'a', ')', 'print', '(', '""Determinant of the said 2-D array:""', ')', 'print', '(', 'np', '.', 'linalg', '.', 'det', '(', 'a', ')', ')']"
1301,"['write', 'panda', 'program', 'split', 'following', 'dataframe', 'group', 'school', 'code', 'get', 'mean', 'min', 'max', 'value', 'age', 'customized', 'column', 'name', 'school']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'student_data', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_Of_Birth '"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '12', ',', '12', ',', '13', ',', '13', ',', '14', ',', '12', ']', ',', ""' height '"", ':', '[', '173', ',', '192', ',', '186', ',', '167', ',', '151', ',', '159', ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', ',', ""'address'"", ':', '[', ""'street1'"", ',', ""'street2'"", ',', ""'street3'"", ',', ""'street1'"", ',', ""'street2'"", ',', ""'street4'"", ']', '}', ',', 'index', '=', '[', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ',', ""'S4'"", ',', ""'S5'"", ',', ""'S6'"", ']', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'student_data', ')', 'print', '(', ""'\\nMean, min, and max value of age for each school with customized column names:'"", ')', 'grouped_single', '=', 'student_data', '.', 'groupby', '(', ""'school_code'"", ')', '.', 'agg', '(', 'Age_Mean', '=', '(', ""'age'"", ',', ""'mean'"", ')', ',', 'Age_Max', '=', '(', ""'age'"", ',', 'max', ')', ',', 'Age_Min', '=', '(', ""'age'"", ',', 'min', ')', ')', 'print', '(', 'grouped_single', ')']"
1302,"['write', 'python', 'program', 'filter', 'height', 'width', 'student', 'stored', 'dictionary', 'using', 'lambda']","['def', 'filter_data', '(', 'students', ')', ':', 'result', '=', 'dict', '(', 'filter', '(', 'lambda', 'x', ':', '(', 'x', '[', '1', ']', '[', '0', ']', ',', 'x', '[', '1', ']', '[', '1', ']', ')', '>', '(', '6.0', ',', '70', ')', ',', 'students', '.', 'items', '(', ')', ')', ')', 'return', 'result', 'students', '=', '{', ""'Cierra Vega'"", ':', '(', '6.2', ',', '70', ')', ',', ""'Alden Cantrell'"", ':', '(', '5.9', ',', '65', ')', ',', ""'Kierra Gentry'"", ':', '(', '6.0', ',', '68', ')', ',', ""'Pierre Cox'"", ':', '(', '5.8', ',', '66', ')', '}', 'print', '(', '""Original Dictionary:""', ')', 'print', '(', 'students', ')', 'print', '(', '""\\nHeight> 6ft and Weight> 70kg:""', ')', 'print', '(', 'filter_data', '(', 'students', ')', ')']"
1303,"['write', 'numpy', 'program', 'remove', 'first', 'dimension', 'given', 'array', 'shape']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '[', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', '[', '0', ',', '1', ',', '3', ',', '4', ']', ',', '[', '5', ',', '0', ',', '3', ',', '2', ']', ']', ']', ')', 'print', '(', ""'Shape of the said array:'"", ')', 'print', '(', 'nums', '.', 'shape', ')', 'print', '(', '""\\nAfter removing the first dimension of the shape of the said array:""', ')']"
1304,"['write', 'numpy', 'program', 'compute', 'following', 'polynomial', 'value']","['import', 'numpy', 'as', 'np', 'print', '(', '""Polynomial value when x = 2:""', ')', 'print', '(', 'np', '.', 'polyval', '(', '[', '1', ',', '-', '2', ',', '1', ']', ',', '2', ')', ')', 'print', '(', '""Polynomial value when x = 3:""', ')', 'print', '(', 'np', '.', 'polyval', '(', '[', '1', ',', '-', '12', ',', '10', ',', '7', ',', '-', '10', ']', ',', '3', ')', ')']"
1305,"['write', 'python', 'program', 'get', 'file', 'size', 'plain', 'file']","['def', 'file_size', '(', 'fname', ')', ':', 'import', 'os', 'statinfo', '=', 'os', '.', 'stat', '(', 'fname', ')', 'return', 'statinfo', '.', 'st_size', 'print', '(', '""File size in bytes of a plain file: ""', ',', 'file_size', '(', '""test.txt""', ')', ')']"
1306,"['write', 'python', 'program', 'remove', 'consecutive', 'duplicate', 'given', 'string']","['from', 'itertools', 'import', 'groupby', 'def', 'remove_all_consecutive', '(', 'str1', ')', ':', 'result_str', '=', '[', ']', 'for', '(', 'key', ',', 'group', ')', 'in', 'groupby', '(', 'str1', ')', ':', 'result_str', '.', 'append', '(', 'key', ')', 'return', ""''"", '.', 'join', '(', 'result_str', ')', 'str1', '=', ""'xxxxxyyyyy'"", 'print', '(', '""Original string:""', '+', 'str1', ')', 'print', '(', '""After removing consecutive duplicates: ""', '+', 'str1', ')', 'print', '(', 'remove_all_consecutive', '(', 'str1', ')', ')']"
1307,"['write', 'python', 'program', 'accept', 'word', 'count', 'number', 'distinct', 'word', 'print', 'number', 'distinct', 'word', 'number', 'occurrence', 'distinct', 'word', 'according', 'appearance']","['from', 'collections', 'import', 'Counter', ',', 'OrderedDict', 'class', 'OrderedCounter', '(', 'Counter', ',', 'OrderedDict', ')', ':', 'pass', 'word_array', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Input number of words: ""', ')', ')', 'print', '(', '""Input the words: ""', ')', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'word_array', '.', 'append', '(', 'input', '(', ')', '.', 'strip', '(', ')', ')', 'word_ctr', '=', 'OrderedCounter', '(', 'word_array', ')', 'print', '(', 'len', '(', 'word_ctr', ')', ')', 'for', 'word', 'in', 'word_ctr', ':', 'print', '(', 'word_ctr', '[', 'word', ']', ',', 'end', '=', ""' '"", ')']"
1308,"['write', 'panda', 'program', 'get', 'average', 'mean', 'ufo', 'unidentified', 'flying', 'object', 'sighting', 'reported']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'date_documented'"", ']', '=', 'df', '[', ""'date_documented'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'print', '(', '""Original Dataframe:""', ')', 'print', '(', 'df', '.', 'head', '(', ')', ')', 'df', '[', ""'instance'"", ']', '=', '1', 'df', '.', 'set_index', '(', 'df', '[', ""'date_documented'"", ']', ',', 'drop', '=', 'True', ',', 'inplace', '=', 'True', ')', 'ufo2', '=', 'pd', '.', 'DataFrame', '(', 'df', '[', ""'instance'"", ']', '.', 'resample', '(', ""'M'"", ')', '.', 'count', '(', ')', ')', 'ufo2', '[', ""'date_documented'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'ufo2', '.', 'index', '.', 'values', ')', 'ufo2', '[', ""'month'"", ']', '=', 'ufo2', '[', ""'date_documented'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'x', '.', 'month', ')', 'print', '(', '""Average mean of  the UFO (unidentified flying object) sighting was reported:""', ')', 'print', '(', 'ufo2', '.', 'groupby', '(', 'by', '=', ""'month'"", ')', '.', 'mean', '(', ')', ')']"
1309,"['write', 'python', 'program', 'reverse', 'given', 'list', 'list']","['def', 'reverse_list_of_lists', '(', 'list1', ')', ':', 'return', 'list1', '[', ':', ':', '-', '1', ']', 'colors', '=', '[', '[', ""'orange'"", ',', ""'red'"", ']', ',', '[', ""'green'"", ',', ""'blue'"", ']', ',', '[', ""'white'"", ',', ""'black'"", ',', ""'pink'"", ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'colors', ')', 'print', '(', '""\\nReverse said list of lists:""', ')', 'print', '(', 'reverse_list_of_lists', '(', 'colors', ')', ')', 'nums', '=', '[', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', '[', '0', ',', '2', ',', '4', ',', '5', ']', ',', '[', '2', ',', '3', ',', '4', ',', '2', ',', '4', ']', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nReverse said list of lists:""', ')', 'print', '(', 'reverse_list_of_lists', '(', 'nums', ')', ')']"
1310,"['write', 'python', 'program', 'iterate', 'two', 'list', 'simultaneously']","['num', '=', '[', '1', ',', '2', ',', '3', ']', 'color', '=', '[', ""'red'"", ',', ""'white'"", ',', ""'black'"", ']', 'for', '(', 'a', ',', 'b', ')', 'in', 'zip', '(', 'num', ',', 'color', ')', ':', 'print', '(', 'a', ',', 'b', ')']"
1311,"['write', 'python', 'program', 'split', 'given', 'dictionary', 'list', 'list', 'dictionary', 'using', 'map', 'function']","['def', 'list_of_dicts', '(', 'marks', ')', ':', 'result', '=', 'map', '(', 'dict', ',', 'zip', '(', '*', '[', '[', '(', 'key', ',', 'val', ')', 'for', 'val', 'in', 'value', ']', 'for', 'key', ',', 'value', 'in', 'marks', '.', 'items', '(', ')', ']', ')', ')', 'return', 'list', '(', 'result', ')', 'marks', '=', '{', ""'Science'"", ':', '[', '88', ',', '89', ',', '62', ',', '95', ']', ',', ""'Language'"", ':', '[', '77', ',', '78', ',', '84', ',', '80', ']', '}', 'print', '(', '""Original dictionary of lists:""', ')', 'print', '(', 'marks', ')', 'print', '(', '""\\nSplit said dictionary of lists into list of dictionaries:""', ')', 'print', '(', 'list_of_dicts', '(', 'marks', ')', ')']"
1312,"['write', 'python', 'program', 'find', 'second', 'largest', 'number', 'list']","['def', 'second_largest', '(', 'numbers', ')', ':', 'if', '(', 'len', '(', 'numbers', ')', '<', '2', ')', ':', 'return', 'if', '(', '(', 'len', '(', 'numbers', ')', '==', '2', ')', 'and', '(', 'numbers', '[', '0', ']', '==', 'numbers', '[', '1', ']', ')', ')', ':', 'return', 'dup_items', '=', 'set', '(', ')', 'uniq_items', '=', '[', ']', 'for', 'x', 'in', 'numbers', ':', 'if', 'x', 'not', 'in', 'dup_items', ':', 'uniq_items', '.', 'append', '(', 'x', ')', 'dup_items', '.', 'add', '(', 'x', ')', 'uniq_items', '.', 'sort', '(', ')', 'return', 'uniq_items', '[', '-', '2', ']', 'print', '(', 'second_largest', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '4', ']', ')', ')', 'print', '(', 'second_largest', '(', '[', '1', ',', '1', ',', '1', ',', '0', ',', '0', ',', '0', ',', '2', ',', '-', '2', ',', '-', '2', ']', ')', ')', 'print', '(', 'second_largest', '(', '[', '2', ',', '2', ']', ')', ')', 'print', '(', 'second_largest', '(', '[', '1', ']', ')', ')']"
1313,"['write', 'panda', 'program', 'split', 'following', 'dataframe', 'group', 'based', 'column', 'calculate', 'groupby', 'value', 'count', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'id'"", ':', '[', '1', ',', '2', ',', '1', ',', '1', ',', '2', ',', '1', ',', '2', ']', ',', ""'type'"", ':', '[', '10', ',', '15', ',', '11', ',', '20', ',', '21', ',', '12', ',', '14', ']', ',', ""'book'"", ':', '[', ""'Math'"", ',', ""'English'"", ',', ""'Physics'"", ',', ""'Math'"", ',', ""'English'"", ',', ""'Physics'"", ',', ""'English'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'result', '=', 'df', '.', 'groupby', '(', '[', ""'id'"", ',', ""'type'"", ',', ""'book'"", ']', ')', '.', 'size', '(', ')', '.', 'unstack', '(', 'fill_value', '=', '0', ')', 'print', '(', '""\\nResult:""', ')', 'print', '(', 'result', ')']"
1314,"['write', 'python', 'program', 'sort', 'list', 'list', 'given', 'index', 'inner', 'list', 'using', 'lambda']","['def', 'index_on_inner_list', '(', 'list_data', ',', 'index_no', ')', ':', 'result', '=', 'sorted', '(', 'list_data', ',', 'key', '=', 'lambda', 'x', ':', 'x', '[', 'index_no', ']', ')', 'return', 'result', 'students', '=', '[', '(', ""'Greyson Fulton'"", ',', '98', ',', '99', ')', ',', '(', ""'Brady Kent'"", ',', '97', ',', '96', ')', ',', '(', ""'Wyatt Knott'"", ',', '91', ',', '94', ')', ',', '(', ""'Beau Turnbull'"", ',', '94', ',', '98', ')', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'students', ')', 'index_no', '=', '0', 'print', '(', '""\\nSort the said list of lists by a given index""', ',', '""( Index = ""', ',', 'index_no', ',', '"") of the inner list""', ')', 'print', '(', 'index_on_inner_list', '(', 'students', ',', 'index_no', ')', ')', 'index_no', '=', '2', 'print', '(', '""\\nSort the said list of lists by a given index""', ',', '""( Index = ""', ',', 'index_no', ',', '"") of the inner list""', ')', 'print', '(', 'index_on_inner_list', '(', 'students', ',', 'index_no', ')', ')']"
1315,"['write', 'python', 'program', 'get', 'combination', 'keyvalue', 'pair', 'given', 'dictionary']","['import', 'itertools', 'def', 'test', '(', 'dictt', ')', ':', 'result', '=', 'list', '(', 'map', '(', 'dict', ',', 'itertools', '.', 'combinations', '(', 'dictt', '.', 'items', '(', ')', ',', '2', ')', ')', ')', 'return', 'result', 'students', '=', '{', ""'V'"", ':', '[', '1', ',', '4', ',', '6', ',', '10', ']', ',', ""'VI'"", ':', '[', '1', ',', '4', ',', '12', ']', ',', ""'VII'"", ':', '[', '1', ',', '3', ',', '8', ']', '}', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'students', ')', 'print', '(', '""\\nCombinations of key-value pairs of the said dictionary:""', ')', 'print', '(', 'test', '(', 'students', ')', ')', 'students', '=', '{', ""'V'"", ':', '[', '1', ',', '3', ',', '5', ']', ',', ""'VI'"", ':', '[', '1', ',', '5', ']', '}', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'students', ')', 'print', '(', '""\\nCombinations of key-value pairs of the said dictionary:""', ')', 'print', '(', 'test', '(', 'students', ')', ')']"
1316,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'region', 'wise', 'total', 'sale']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\SaleData.xlsx'"", ')', 'table', '=', 'pd', '.', 'pivot_table', '(', 'df', ',', 'index', '=', '""Region""', ',', 'values', '=', '""Sale_amt""', ',', 'aggfunc', '=', 'np', '.', 'sum', ')', 'print', '(', 'table', ')']"
1317,"['write', 'python', 'program', 'sort', 'list', 'alphabetically', 'dictionary']","['num', '=', '{', ""'n1'"", ':', '[', '2', ',', '3', ',', '1', ']', ',', ""'n2'"", ':', '[', '5', ',', '1', ',', '2', ']', ',', ""'n3'"", ':', '[', '3', ',', '2', ',', '4', ']', '}', 'sorted_dict', '=', '{', 'x', ':', 'sorted', '(', 'y', ')', 'for', 'x', ',', 'y', 'in', 'num', '.', 'items', '(', ')', '}', 'print', '(', 'sorted_dict', ')']"
1318,"['write', 'python', 'program', 'sort', 'unsorted', 'number', 'using', 'mergeinsertion', 'sort']",[]
1319,"['write', 'numpy', 'program', 'save', 'given', 'array', 'text', 'file', 'load']","['import', 'numpy', 'as', 'np', 'import', 'os', 'x', '=', 'np', '.', 'arange', '(', '12', ')', '.', 'reshape', '(', '4', ',', '3', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'header', '=', ""'col1 col2 col3'"", 'np', '.', 'savetxt', '(', ""'temp.txt'"", ',', 'x', ',', 'fmt', '=', '""%d""', ',', 'header', '=', 'header', ')', 'print', '(', '""After loading, content of the text file:""', ')', 'result', '=', 'np', '.', 'loadtxt', '(', ""'temp.txt'"", ')', 'print', '(', 'result', ')']"
1320,"['write', 'python', 'program', 'sum', 'two', 'list', 'length', 'list', 'may', 'different']","['def', 'sum_lists_diff_length', '(', 'test_list', ')', ':', 'result', '=', '[', 'sum', '(', 'x', ')', 'for', 'x', 'in', 'zip', '(', '*', 'map', '(', 'lambda', 'x', ':', 'x', '+', '[', '0', ']', '*', 'max', '(', 'map', '(', 'len', ',', 'test_list', ')', ')', 'if', 'len', '(', 'x', ')', '<', 'max', '(', 'map', '(', 'len', ',', 'test_list', ')', ')', 'else', 'x', ',', 'test_list', ')', ')', ']', 'return', 'result', 'nums', '=', '[', '[', '1', ',', '2', ',', '4', ']', ',', '[', '2', ',', '4', ',', '4', ']', ',', '[', '1', ',', '2', ']', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Sum said lists with different lengths:""', ')', 'print', '(', 'sum_lists_diff_length', '(', 'nums', ')', ')', 'nums', '=', '[', '[', '1', ']', ',', '[', '2', ',', '4', ',', '4', ']', ',', '[', '1', ',', '2', ']', ',', '[', '4', ']', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Sum said lists with different lengths:""', ')', 'print', '(', 'sum_lists_diff_length', '(', 'nums', ')', ')']"
1321,"['write', 'python', 'program', 'create', 'new', 'arrow', 'object', 'representing', 'floor', 'timespan', 'arrow', 'object', 'given', 'timeframe', 'using', 'arrow', 'module', 'timeframe', 'datetime', 'property', 'like', 'day', 'hour', 'minute']","['import', 'arrow', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', ')', 'print', '(', '""Hour ceiling:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'floor', '(', ""'hour'"", ')', ')', 'print', '(', '""\\nMinute ceiling:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'floor', '(', ""'minute'"", ')', ')', 'print', '(', '""\\nSecond ceiling:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'floor', '(', ""'second'"", ')', ')']"
1322,"['write', 'python', 'program', 'get', 'third', 'side', 'right', 'angled', 'triangle', 'two', 'given', 'side']","['def', 'pythagoras', '(', 'opposite_side', ',', 'adjacent_side', ',', 'hypotenuse', ')', ':', 'if', 'opposite_side', '==', 'str', '(', '""x""', ')', ':', 'return', '(', '""Opposite = ""', '+', 'str', '(', '(', '(', 'hypotenuse', '**', '2', ')', '-', '(', 'adjacent_side', '**', '2', ')', ')', '**', '0.5', ')', ')', 'elif', 'adjacent_side', '==', 'str', '(', '""x""', ')', ':', 'return', '(', '""Adjacent = ""', '+', 'str', '(', '(', '(', 'hypotenuse', '**', '2', ')', '-', '(', 'opposite_side', '**', '2', ')', ')', '**', '0.5', ')', ')', 'elif', 'hypotenuse', '==', 'str', '(', '""x""', ')', ':', 'return', '(', '""Hypotenuse = ""', '+', 'str', '(', '(', '(', 'opposite_side', '**', '2', ')', '+', '(', 'adjacent_side', '**', '2', ')', ')', '**', '0.5', ')', ')', 'else', ':', 'return', '""You know the answer!""', 'print', '(', 'pythagoras', '(', '3', ',', '4', ',', ""'x'"", ')', ')', 'print', '(', 'pythagoras', '(', '3', ',', ""'x'"", ',', '5', ')', ')', 'print', '(', 'pythagoras', '(', ""'x'"", ',', '4', ',', '5', ')', ')', 'print', '(', 'pythagoras', '(', '3', ',', '4', ',', '5', ')', ')']"
1323,"['write', 'python', 'function', 'create', 'html', 'string', 'tag', 'around', 'word']","['def', 'add_tags', '(', 'tag', ',', 'word', ')', ':', 'return', '""<%s>%s</%s>""', '%', '(', 'tag', ',', 'word', ',', 'tag', ')', 'print', '(', 'add_tags', '(', ""'i'"", ',', ""'Python'"", ')', ')', 'print', '(', 'add_tags', '(', ""'b'"", ',', ""'Python Tutorial'"", ')', ')']"
1324,"['write', 'python', 'program', 'get', 'least', 'common', 'multiple', 'lcm', 'two', 'positive', 'integer']","['def', 'lcm', '(', 'x', ',', 'y', ')', ':', 'if', 'x', '>', 'y', ':', 'z', '=', 'x', 'else', ':', 'z', '=', 'y', 'while', '(', 'True', ')', ':', 'if', '(', '(', 'z', '%', 'x', '==', '0', ')', 'and', '(', 'z', '%', 'y', '==', '0', ')', ')', ':', 'lcm', '=', 'z', 'break', 'z', '+=', '1', 'return', 'lcm', 'print', '(', 'lcm', '(', '4', ',', '6', ')', ')', 'print', '(', 'lcm', '(', '15', ',', '17', ')', ')']"
1325,"['write', 'python', 'program', 'count', 'uppercase', 'lowercase', 'special', 'character', 'numeric', 'value', 'given', 'string']","['def', 'count_chars', '(', 'str', ')', ':', 'upper_ctr', ',', 'lower_ctr', ',', 'number_ctr', ',', 'special_ctr', '=', '0', ',', '0', ',', '0', ',', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '>=', ""'A'"", 'and', 'str', '[', 'i', ']', '<=', ""'Z'"", ':', 'upper_ctr', '+=', '1', 'elif', 'str', '[', 'i', ']', '>=', ""'a'"", 'and', 'str', '[', 'i', ']', '<=', ""'z'"", ':', 'lower_ctr', '+=', '1', 'elif', 'str', '[', 'i', ']', '>=', ""'0'"", 'and', 'str', '[', 'i', ']', '<=', ""'9'"", ':', 'number_ctr', '+=', '1', 'else', ':', 'special_ctr', '+=', '1', 'return', 'upper_ctr', ',', 'lower_ctr', ',', 'number_ctr', ',', 'special_ctr', 'str', '=', '""@W3Resource.Com""', 'print', '(', '""Original Substrings:""', ',', 'str', ')', 'u', ',', 'l', ',', 'n', ',', 's', '=', 'count_chars', '(', 'str', ')', 'print', '(', ""'\\nUpper case characters: '"", ',', 'u', ')', 'print', '(', ""'Lower case characters: '"", ',', 'l', ')', 'print', '(', ""'Number case: '"", ',', 'n', ')', 'print', '(', ""'Special case characters: '"", ',', 's', ')']"
1326,"['write', 'python', 'program', 'find', 'value', 'list', 'greater', 'specified', 'number']","['list1', '=', '[', '220', ',', '330', ',', '500', ']', 'list2', '=', '[', '12', ',', '17', ',', '21', ']', 'print', '(', 'all', '(', 'x', '>=', '200', 'for', 'x', 'in', 'list1', ')', ')', 'print', '(', 'all', '(', 'x', '>=', '25', 'for', 'x', 'in', 'list2', ')', ')']"
1327,"['write', 'python', 'program', 'join', 'two', 'given', 'list', 'list', 'length', 'element', 'wise']","['def', 'elementswise_join', '(', 'l1', ',', 'l2', ')', ':', 'result', '=', '[', 'x', '+', 'y', 'for', 'x', ',', 'y', 'in', 'zip', '(', 'l1', ',', 'l2', ')', ']', 'return', 'result', 'nums1', '=', '[', '[', '10', ',', '20', ']', ',', '[', '30', ',', '40', ']', ',', '[', '50', ',', '60', ']', ',', '[', '30', ',', '20', ',', '80', ']', ']', 'nums2', '=', '[', '[', '61', ']', ',', '[', '12', ',', '14', ',', '15', ']', ',', '[', '12', ',', '13', ',', '19', ',', '20', ']', ',', '[', '12', ']', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nJoin the said two lists element wise:""', ')', 'print', '(', 'elementswise_join', '(', 'nums1', ',', 'nums2', ')', ')', 'list1', '=', '[', '[', ""'a'"", ',', ""'b'"", ']', ',', '[', ""'b'"", ',', ""'c'"", ',', ""'d'"", ']', ',', '[', ""'e'"", ',', ""'f'"", ']', ']', 'list2', '=', '[', '[', ""'p'"", ',', ""'q'"", ']', ',', '[', ""'p'"", ',', ""'s'"", ',', ""'t'"", ']', ',', '[', ""'u'"", ',', ""'v'"", ',', ""'w'"", ']', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'list1', ')', 'print', '(', 'list2', ')', 'print', '(', '""\\nJoin the said two lists element wise:""', ')', 'print', '(', 'elementswise_join', '(', 'list1', ',', 'list2', ')', ')']"
1328,"['write', 'numpy', 'program', 'find', 'index', 'element', 'equal', 'zero', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '1', ',', '0', ',', '2', ',', '0', ',', '3', ',', '0', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Indices of elements equal to zero of the said array:""', ')', 'result', '=', 'np', '.', 'where', '(', 'nums', '==', '0', ')', '[', '0', ']', 'print', '(', 'result', ')']"
1329,"['write', 'python', 'program', 'search', 'date', 'given', 'string', 'using', 'arrow', 'module']","['import', 'arrow', 'print', '(', '""\\nSearch a date from a string:""', ')', 'd1', '=', 'arrow', '.', 'get', '(', ""'David was born in 11 June 2003'"", ',', ""'DD MMMM YYYY'"", ')', 'print', '(', 'd1', ')']"
1330,"['write', 'panda', 'program', 'join', 'left', 'join', 'two', 'dataframes', 'using', 'key', 'left', 'dataframe']","['import', 'pandas', 'as', 'pd', 'data1', '=', 'pd', '.', 'DataFrame', '(', '{', ""'key1'"", ':', '[', ""'K0'"", ',', ""'K0'"", ',', ""'K1'"", ',', ""'K2'"", ']', ',', ""'key2'"", ':', '[', ""'K0'"", ',', ""'K1'"", ',', ""'K0'"", ',', ""'K1'"", ']', ',', ""'P'"", ':', '[', ""'P0'"", ',', ""'P1'"", ',', ""'P2'"", ',', ""'P3'"", ']', ',', ""'Q'"", ':', '[', ""'Q0'"", ',', ""'Q1'"", ',', ""'Q2'"", ',', ""'Q3'"", ']', '}', ')', 'data2', '=', 'pd', '.', 'DataFrame', '(', '{', ""'key1'"", ':', '[', ""'K0'"", ',', ""'K1'"", ',', ""'K1'"", ',', ""'K2'"", ']', ',', ""'key2'"", ':', '[', ""'K0'"", ',', ""'K0'"", ',', ""'K0'"", ',', ""'K0'"", ']', ',', ""'R'"", ':', '[', ""'R0'"", ',', ""'R1'"", ',', ""'R2'"", ',', ""'R3'"", ']', ',', ""'S'"", ':', '[', ""'S0'"", ',', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ']', '}', ')', 'print', '(', '""Original DataFrames:""', ')', 'print', '(', 'data1', ')', 'print', '(', '""--------------------""', ')', 'print', '(', 'data2', ')', 'print', '(', '""\\nMerged Data (keys from data1):""', ')', 'merged_data', '=', 'pd', '.', 'merge', '(', 'data1', ',', 'data2', ',', 'how', '=', ""'left'"", ',', 'on', '=', '[', ""'key1'"", ',', ""'key2'"", ']', ')', 'print', '(', 'merged_data', ')', 'print', '(', '""\\nMerged Data (keys from data2):""', ')', 'merged_data', '=', 'pd', '.', 'merge', '(', 'data2', ',', 'data1', ',', 'how', '=', ""'left'"", ',', 'on', '=', '[', ""'key1'"", ',', ""'key2'"", ']', ')', 'print', '(', 'merged_data', ')']"
1331,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'heap', 'sort']","['def', 'heap_data', '(', 'nums', ',', 'index', ',', 'heap_size', ')', ':', 'largest_num', '=', 'index', 'left_index', '=', '2', '*', 'index', '+', '1', 'right_index', '=', '2', '*', 'index', '+', '2', 'if', 'left_index', '<', 'heap_size', 'and', 'nums', '[', 'left_index', ']', '>', 'nums', '[', 'largest_num', ']', ':', 'largest_num', '=', 'left_index', 'if', 'right_index', '<', 'heap_size', 'and', 'nums', '[', 'right_index', ']', '>', 'nums', '[', 'largest_num', ']', ':', 'largest_num', '=', 'right_index', 'if', 'largest_num', '!=', 'index', ':', 'nums', '[', 'largest_num', ']', ',', 'nums', '[', 'index', ']', '=', 'nums', '[', 'index', ']', ',', 'nums', '[', 'largest_num', ']', 'heap_data', '(', 'nums', ',', 'largest_num', ',', 'heap_size', ')', 'def', 'heap_sort', '(', 'nums', ')', ':', 'n', '=', 'len', '(', 'nums', ')', 'for', 'i', 'in', 'range', '(', 'n', '//', '2', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'heap_data', '(', 'nums', ',', 'i', ',', 'n', ')', 'for', 'i', 'in', 'range', '(', 'n', '-', '1', ',', '0', ',', '-', '1', ')', ':', 'nums', '[', '0', ']', ',', 'nums', '[', 'i', ']', '=', 'nums', '[', 'i', ']', ',', 'nums', '[', '0', ']', 'heap_data', '(', 'nums', ',', '0', ',', 'i', ')', 'return', 'nums', 'user_input', '=', 'input', '(', '""Input numbers separated by a comma:\\n""', ')', '.', 'strip', '(', ')', 'nums', '=', '[', 'int', '(', 'item', ')', 'for', 'item', 'in', 'user_input', '.', 'split', '(', ""','"", ')', ']', 'heap_sort', '(', 'nums', ')', 'print', '(', 'nums', ')']"
1332,"['write', 'python', 'program', 'find', 'maximum', 'minimum', 'aggregation', 'pair', 'given', 'list', 'integer']","['from', 'itertools', 'import', 'combinations', 'def', 'max_aggregate', '(', 'l_data', ')', ':', 'max_pair', '=', 'max', '(', 'combinations', '(', 'l_data', ',', '2', ')', ',', 'key', '=', 'lambda', 'pair', ':', 'pair', '[', '0', ']', '+', 'pair', '[', '1', ']', ')', 'min_pair', '=', 'min', '(', 'combinations', '(', 'l_data', ',', '2', ')', ',', 'key', '=', 'lambda', 'pair', ':', 'pair', '[', '0', ']', '+', 'pair', '[', '1', ']', ')', 'return', 'max_pair', ',', 'min_pair', 'nums', '=', '[', '1', ',', '3', ',', '4', ',', '5', ',', '4', ',', '7', ',', '9', ',', '11', ',', '10', ',', '9', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'result', '=', 'max_aggregate', '(', 'nums', ')', 'print', '(', '""\\nMaximum aggregation pair of the said list of tuple pair:""', ')', 'print', '(', 'result', '[', '0', ']', ')', 'print', '(', '""\\nMinimum aggregation pair of the said list of tuple pair:""', ')', 'print', '(', 'result', '[', '1', ']', ')']"
1333,"['write', 'panda', 'program', 'split', 'following', 'dataset', 'using', 'group', 'find', 'first', 'order', 'date', 'group']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', '70009', ',', '70002', ',', '70004', ',', '70007', ',', '70005', ',', '70008', ',', '70010', ',', '70003', ',', '70012', ',', '70011', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', ""'2012-10-05'"", ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3005', ',', '3001', ',', '3002', ',', '3009', ',', '3005', ',', '3007', ',', '3002', ',', '3004', ',', '3009', ',', '3008', ',', '3003', ',', '3002', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5005', ',', '5001', ',', '5003', ',', '5002', ',', '5001', ',', '5001', ',', '5004', ',', '5003', ',', '5002', ',', '5004', ',', '5001', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nGroupby to find first order date for each group(salesman_id):""', ')', 'result', '=', 'df', '.', 'groupby', '(', ""'salesman_id'"", ')', '[', ""'ord_date'"", ']', '.', 'min', '(', ')', 'print', '(', 'result', ')']"
1334,"['write', 'python', 'program', 'create', 'largest', 'possible', 'number', 'using', 'element', 'given', 'list', 'positive', 'integer']","['def', 'create_largest_number', '(', 'lst', ')', ':', 'if', 'all', '(', 'val', '==', '0', 'for', 'val', 'in', 'lst', ')', ':', 'return', ""'0'"", 'result', '=', ""''"", '.', 'join', '(', 'sorted', '(', '(', 'str', '(', 'val', ')', 'for', 'val', 'in', 'lst', ')', ',', 'reverse', '=', 'True', ',', 'key', '=', 'lambda', 'i', ':', 'i', '*', '(', 'len', '(', 'str', '(', 'max', '(', 'lst', ')', ')', ')', '*', '2', '//', 'len', '(', 'i', ')', ')', ')', ')', 'return', 'result', 'nums', '=', '[', '3', ',', '40', ',', '41', ',', '43', ',', '74', ',', '9', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Largest possible number using the elements of the said list of positive integers:""', ')', 'print', '(', 'create_largest_number', '(', 'nums', ')', ')', 'nums', '=', '[', '10', ',', '40', ',', '20', ',', '30', ',', '50', ',', '60', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Largest possible number using the elements of the said list of positive integers:""', ')', 'print', '(', 'create_largest_number', '(', 'nums', ')', ')', 'nums', '=', '[', '8', ',', '4', ',', '2', ',', '9', ',', '5', ',', '6', ',', '1', ',', '0', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Largest possible number using the elements of the said list of positive integers:""', ')', 'print', '(', 'create_largest_number', '(', 'nums', ')', ')']"
1335,"['write', 'numpy', 'program', 'get', 'index', 'maximum', 'element', 'numpy', 'array', 'along', 'one', 'axis']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '3', ',', '1', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'a', ')', 'i', ',', 'j', '=', 'np', '.', 'unravel_index', '(', 'a', '.', 'argmax', '(', ')', ',', 'a', '.', 'shape', ')', 'print', '(', '""Index of a maximum element in a numpy array along one axis:""', ')', 'print', '(', 'a', '[', 'i', ',', 'j', ']', ')']"
1336,"['write', 'python', 'program', 'create', 'localized', 'humanized', 'representation', 'relative', 'difference', 'time', 'using', 'arrow', 'module']","['import', 'arrow', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', ')', 'earlier', '=', 'arrow', '.', 'utcnow', '(', ')', '.', 'shift', '(', 'hours', '=', '-', '4', ')', 'print', '(', 'earlier', '.', 'humanize', '(', ')', ')', 'later', '=', 'earlier', '.', 'shift', '(', 'hours', '=', '3', ')', 'print', '(', 'later', '.', 'humanize', '(', 'earlier', ')', ')']"
1337,"['write', 'python', 'program', 'get', 'difference', 'two', 'list']","['list1', '=', '[', '1', ',', '3', ',', '5', ',', '7', ',', '9', ']', 'list2', '=', '[', '1', ',', '2', ',', '4', ',', '6', ',', '7', ',', '8', ']', 'diff_list1_list2', '=', 'list', '(', 'set', '(', 'list1', ')', '-', 'set', '(', 'list2', ')', ')', 'diff_list2_list1', '=', 'list', '(', 'set', '(', 'list2', ')', '-', 'set', '(', 'list1', ')', ')', 'total_diff', '=', 'diff_list1_list2', '+', 'diff_list2_list1', 'print', '(', 'total_diff', ')']"
1338,"['write', 'numpy', 'program', 'create', 'array', 'one', 'five']","['import', 'numpy', 'as', 'np', 'array', '=', 'np', '.', 'zeros', '(', '10', ')', 'print', '(', '""An array of 10 zeros:""', ')', 'print', '(', 'array', ')', 'array', '=', 'np', '.', 'ones', '(', '10', ')', 'print', '(', '""An array of 10 ones:""', ')', 'print', '(', 'array', ')', 'array', '=', 'np', '.', 'ones', '(', '10', ')', '*', '5', 'print', '(', '""An array of 10 fives:""', ')', 'print', '(', 'array', ')']"
1339,"['write', 'python', 'program', 'calculate', 'difference', 'squared', 'sum', 'first', 'n', 'natural', 'number', 'sum', 'squared', 'first', 'n', 'natural', 'numbersdefault', 'value']","['def', 'sum_difference', '(', 'n', '=', '2', ')', ':', 'sum_of_squares', '=', '0', 'square_of_sum', '=', '0', 'for', 'num', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum_of_squares', '+=', 'num', '*', 'num', 'square_of_sum', '+=', 'num', 'square_of_sum', '=', 'square_of_sum', '**', '2', 'return', 'square_of_sum', '-', 'sum_of_squares', 'print', '(', 'sum_difference', '(', '12', ')', ')']"
1340,"['write', 'panda', 'program', 'create', 'stacked', 'histogram', 'plot', 'bin', 'opening', 'closing', 'high', 'low', 'stock', 'price', 'alphabet', 'inc', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-9-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'df2', '=', 'df1', '[', '[', ""'Open'"", ',', ""'Close'"", ',', ""'High'"", ',', ""'Low'"", ']', ']', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '30', ',', '30', ')', ')', 'df2', '.', 'hist', '(', ')', ';', 'plt', '.', 'suptitle', '(', ""'Opening/Closing/High/Low stock prices of Alphabet Inc., From 01-04-2020 to 30-09-2020'"", ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'show', '(', ')']"
1341,"['write', 'python', 'program', 'read', 'string', 'interpreting', 'string', 'array', 'machine', 'value']","['from', 'array', 'import', 'array', 'import', 'binascii', 'array1', '=', 'array', '(', ""'i'"", ',', '[', '7', ',', '8', ',', '9', ',', '10', ']', ')', 'print', '(', ""'array1:'"", ',', 'array1', ')', 'as_bytes', '=', 'array1', '.', 'tobytes', '(', ')', 'print', '(', ""'Bytes:'"", ',', 'binascii', '.', 'hexlify', '(', 'as_bytes', ')', ')', 'array2', '=', 'array', '(', ""'i'"", ')', 'array2', '.', 'frombytes', '(', 'as_bytes', ')', 'print', '(', ""'array2:'"", ',', 'array2', ')']"
1342,"['create', 'array', 'size', 'x', 'composed', 'integer', 'element', 'write', 'numpy', 'program', 'find', 'number', 'occurrence', 'sequence', 'said', 'array']","['import', 'numpy', 'as', 'np', 'np_array', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '2', ',', '1', ',', '2', ']', ']', ',', 'np', '.', 'int32', ')', 'print', '(', '""Original Numpy array:""', ')', 'print', '(', 'np_array', ')', 'print', '(', '""Type: ""', ',', 'type', '(', 'np_array', ')', ')', 'print', '(', '""Sequence: 1,2""', ',', ')', 'result', '=', 'repr', '(', 'np_array', ')', '.', 'count', '(', '""1, 2""', ')', 'print', '(', '""Number of occurrences of the said sequence:""', ',', 'result', ')']"
1343,"['write', 'panda', 'program', 'import', 'excel', 'data', 'dataframe', 'find', 'specific', 'msha', 'id']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\coalpublic2013.xlsx'"", ')', 'df', '[', 'df', '[', '""MSHA ID""', ']', '==', '102901', ']', '.', 'head', '(', ')']"
1344,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'bubble', 'sort', 'algorithm']","['def', 'bubbleSort', '(', 'nlist', ')', ':', 'for', 'passnum', 'in', 'range', '(', 'len', '(', 'nlist', ')', '-', '1', ',', '0', ',', '-', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'passnum', ')', ':', 'if', 'nlist', '[', 'i', ']', '>', 'nlist', '[', 'i', '+', '1', ']', ':', 'temp', '=', 'nlist', '[', 'i', ']', 'nlist', '[', 'i', ']', '=', 'nlist', '[', 'i', '+', '1', ']', 'nlist', '[', 'i', '+', '1', ']', '=', 'temp', 'nlist', '=', '[', '14', ',', '46', ',', '43', ',', '27', ',', '57', ',', '41', ',', '45', ',', '21', ',', '70', ']', 'bubbleSort', '(', 'nlist', ')', 'print', '(', 'nlist', ')']"
1345,"['write', 'numpy', 'program', 'get', 'floor', 'ceiling', 'truncated', 'value', 'element', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '-', '1.6', ',', '-', '1.5', ',', '-', '0.3', ',', '0.1', ',', '1.4', ',', '1.8', ',', '2.0', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Floor values of the above array elements:""', ')', 'print', '(', 'np', '.', 'floor', '(', 'x', ')', ')', 'print', '(', '""Ceil values of the above array elements:""', ')', 'print', '(', 'np', '.', 'ceil', '(', 'x', ')', ')', 'print', '(', '""Truncated values of the above array elements:""', ')', 'print', '(', 'np', '.', 'trunc', '(', 'x', ')', ')']"
1346,"['write', 'python', 'program', 'check', 'whether', 'json', 'string', 'contains', 'complex', 'object']","['import', 'json', 'def', 'is_complex_num', '(', 'objct', ')', ':', 'if', ""'__complex__'"", 'in', 'objct', ':', 'return', 'complex', '(', 'objct', '[', ""'real'"", ']', ',', 'objct', '[', ""'img'"", ']', ')', 'return', 'objct', 'complex_object', '=', 'json', '.', 'loads', '(', '\'{""__complex__"": true, ""real"": 4, ""img"": 5}\'', ',', 'object_hook', '=', 'is_complex_num', ')', 'simple_object', '=', 'json', '.', 'loads', '(', '\'{""real"": 4, ""img"": 3}\'', ',', 'object_hook', '=', 'is_complex_num', ')', 'print', '(', '""Complex_object: ""', ',', 'complex_object', ')', 'print', '(', '""Without complex object: ""', ',', 'simple_object', ')']"
1347,"['write', 'python', 'program', 'remove', 'character', 'odd', 'index', 'value', 'given', 'string']","['def', 'odd_values_string', '(', 'str', ')', ':', 'result', '=', '""""', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'i', '%', '2', '==', '0', ':', 'result', '=', 'result', '+', 'str', '[', 'i', ']', 'return', 'result', 'print', '(', 'odd_values_string', '(', ""'abcdef'"", ')', ')', 'print', '(', 'odd_values_string', '(', ""'python'"", ')', ')']"
1348,"['write', 'python', 'program', 'configure', 'rounding', 'round', 'nearest', 'tie', 'going', 'nearest', 'even', 'integer', 'use']","['import', 'decimal', 'print', '(', '""Configure the rounding to round to the nearest, with ties going to the nearest even integer:""', ')', 'decimal', '.', 'getcontext', '(', ')', '.', 'prec', '=', '1', 'decimal', '.', 'getcontext', '(', ')', '.', 'rounding', '=', 'decimal', '.', 'ROUND_HALF_EVEN', 'print', '(', 'decimal', '.', 'Decimal', '(', '10', ')', '/', 'decimal', '.', 'Decimal', '(', '4', ')', ')']"
1349,"['write', 'numpy', 'program', 'generate', 'generic', 'gaussianlike', 'array']","['import', 'numpy', 'as', 'np', 'x', ',', 'y', '=', 'np', '.', 'meshgrid', '(', 'np', '.', 'linspace', '(', '-', '1', ',', '1', ',', '10', ')', ',', 'np', '.', 'linspace', '(', '-', '1', ',', '1', ',', '10', ')', ')', 'd', '=', 'np', '.', 'sqrt', '(', 'x', '*', 'x', '+', 'y', '*', 'y', ')', 'sigma', ',', 'mu', '=', '1.0', ',', '0.0', 'g', '=', 'np', '.', 'exp', '(', '-', '(', '(', 'd', '-', 'mu', ')', '**', '2', '/', '(', '2.0', '*', 'sigma', '**', '2', ')', ')', ')', 'print', '(', '""2D Gaussian-like array:""', ')', 'print', '(', 'g', ')']"
1350,"['write', 'python', 'program', 'calculate', 'distance', 'london', 'new', 'york', 'city']","['from', 'geopy', 'import', 'distance', 'london', '=', '(', '""51.5074° N, 0.1278° W""', ')', 'newyork', '=', '(', '""40.7128° N, 74.0060° W""', ')', 'print', '(', '""Distance between London and New York city (in km):""', ')', 'print', '(', 'distance', '.', 'distance', '(', 'london', ',', 'newyork', ')', '.', 'km', ',', '"" kms""', ')']"
1351,"['write', 'numpy', 'program', 'create', 'function', 'cube', 'cube', 'element', 'array']","['import', 'numpy', 'as', 'np', 'def', 'cube', '(', 'e', ')', ':', 'it', '=', 'np', '.', 'nditer', '(', '[', 'e', ',', 'None', ']', ')', 'for', 'a', ',', 'b', 'in', 'it', ':', 'b', '[', '...', ']', '=', 'a', '*', 'a', '*', 'a', 'return', 'it', '.', 'operands', '[', '1', ']', 'print', '(', 'cube', '(', '[', '1', ',', '2', ',', '3', ']', ')', ')']"
1352,"['write', 'python', 'program', 'reverse', 'word', 'string']","['def', 'reverse_string_words', '(', 'text', ')', ':', 'for', 'line', 'in', 'text', '.', 'split', '(', ""'\\n'"", ')', ':', 'return', '(', ""' '"", '.', 'join', '(', 'line', '.', 'split', '(', ')', '[', ':', ':', '-', '1', ']', ')', ')', 'print', '(', 'reverse_string_words', '(', '""The quick brown fox jumps over the lazy dog.""', ')', ')', 'print', '(', 'reverse_string_words', '(', '""Python Exercises.""', ')', ')']"
1353,"['write', 'python', 'program', 'find', 'specified', 'number', 'maximum', 'value', 'given', 'dictionary']","['def', 'test', '(', 'dictt', ',', 'N', ')', ':', 'result', '=', 'sorted', '(', 'dictt', ',', 'key', '=', 'dictt', '.', 'get', ',', 'reverse', '=', 'True', ')', '[', ':', 'N', ']', 'return', 'result', 'dictt', '=', '{', ""'a'"", ':', '5', ',', ""'b'"", ':', '14', ',', ""'c'"", ':', '32', ',', ""'d'"", ':', '35', ',', ""'e'"", ':', '24', ',', ""'f'"", ':', '100', ',', ""'g'"", ':', '57', ',', ""'h'"", ':', '8', ',', ""'i'"", ':', '100', '}', 'print', '(', '""\\nOriginal Dictionary:""', ')', 'print', '(', 'dictt', ')', 'N', '=', '1', 'print', '(', '""\\n""', ',', 'N', ',', '""maximum value(s) in the said dictionary:""', ')', 'print', '(', 'test', '(', 'dictt', ',', 'N', ')', ')', 'N', '=', '2', 'print', '(', '""\\n""', ',', 'N', ',', '""maximum value(s) in the said dictionary:""', ')', 'print', '(', 'test', '(', 'dictt', ',', 'N', ')', ')', 'N', '=', '5', 'print', '(', '""\\n""', ',', 'N', ',', '""maximum value(s) in the said dictionary:""', ')', 'print', '(', 'test', '(', 'dictt', ',', 'N', ')', ')']"
1354,"['write', 'python', 'program', 'iterate', 'root', 'level', 'path', 'print', 'subdirectory', 'file', 'also', 'loop', 'specified', 'dirs', 'file']","['import', 'os', 'print', '(', ""'Iterate over a root level path:'"", ')', 'path', '=', ""'/tmp/'"", 'for', 'root', ',', 'dirs', ',', 'files', 'in', 'os', '.', 'walk', '(', 'path', ')', ':', 'print', '(', 'root', ')']"
1355,"['write', 'python', 'code', 'remove', 'character', 'except', 'specified', 'character', 'given', 'string']","['def', 'remove_characters', '(', 'str1', ',', 'c', ')', ':', 'return', ""''"", '.', 'join', '(', '[', 'el', 'for', 'el', 'in', 'str1', 'if', 'el', '==', 'c', ']', ')', 'text', '=', '""Python Exercises""', 'print', '(', '""Original string""', ')', 'print', '(', 'text', ')', 'except_char', '=', '""P""', 'print', '(', '""Remove all characters except""', ',', 'except_char', ',', '""in the said string:""', ')', 'print', '(', 'remove_characters', '(', 'text', ',', 'except_char', ')', ')', 'text', '=', '""google""', 'print', '(', '""\\nOriginal string""', ')', 'print', '(', 'text', ')', 'except_char', '=', '""g""', 'print', '(', '""Remove all characters except""', ',', 'except_char', ',', '""in the said string:""', ')', 'print', '(', 'remove_characters', '(', 'text', ',', 'except_char', ')', ')', 'text', '=', '""exercises""', 'print', '(', '""\\nOriginal string""', ')', 'print', '(', 'text', ')', 'except_char', '=', '""e""', 'print', '(', '""Remove all characters except""', ',', 'except_char', ',', '""in the said string:""', ')', 'print', '(', 'remove_characters', '(', 'text', ',', 'except_char', ')', ')']"
1356,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'number', 'survivor', 'average', 'rate', 'grouped', 'gender', 'class']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'df', '.', 'pivot_table', '(', 'index', '=', ""'sex'"", ',', 'columns', '=', ""'class'"", ',', 'aggfunc', '=', '{', ""'survived'"", ':', 'sum', ',', ""'fare'"", ':', ""'mean'"", '}', ')', 'print', '(', 'result', ')']"
1357,"['write', 'python', 'program', 'find', 'key', 'provided', 'dictionary', 'given', 'value']","['def', 'test', '(', 'dict', ',', 'val', ')', ':', 'return', 'list', '(', 'key', 'for', 'key', ',', 'value', 'in', 'dict', '.', 'items', '(', ')', 'if', 'value', '==', 'val', ')', 'students', '=', '{', ""'Theodore'"", ':', '19', ',', ""'Roxanne'"", ':', '20', ',', ""'Mathew'"", ':', '21', ',', ""'Betty'"", ':', '20', '}', 'print', '(', '""\\nOriginal dictionary elements:""', ')', 'print', '(', 'students', ')', 'print', '(', '""\\nFind all keys in the said dictionary that have the specified value:""', ')', 'print', '(', 'test', '(', 'students', ',', '20', ')', ')']"
1358,"['write', 'numpy', 'program', 'find', 'closest', 'value', 'given', 'scalar', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '100', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'a', '=', 'np', '.', 'random', '.', 'uniform', '(', '0', ',', '100', ')', 'print', '(', '""Value to compare:""', ')', 'print', '(', 'a', ')', 'index', '=', '(', 'np', '.', 'abs', '(', 'x', '-', 'a', ')', ')', '.', 'argmin', '(', ')', 'print', '(', 'x', '[', 'index', ']', ')']"
1359,"['write', 'panda', 'program', 'split', 'string', 'column', 'given', 'dataframe', 'multiple', 'column']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'name'"", ':', '[', ""'Alberto  Franco'"", ',', ""'Gino Ann Mcneill'"", ',', ""'Ryan  Parkes'"", ',', ""'Eesha Artur Hinton'"", ',', ""'Syed  Wharton'"", ']', ',', ""'date_of_birth '"", ':', '[', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '18.5', ',', '21.2', ',', '22.5', ',', '22', ',', '23', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'df', '[', '[', '""first""', ',', '""middle""', ',', '""last""', ']', ']', '=', 'df', '[', '""name""', ']', '.', 'str', '.', 'split', '(', '"" ""', ',', 'expand', '=', 'True', ')', 'print', '(', '""\\nNew DataFrame:""', ')', 'print', '(', 'df', ')']"
1360,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'multiple', 'index', 'given', 'excel', 'sheet', 'salesdataxlsx']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\SaleData.xlsx'"", ')', 'print', '(', 'df', ')', 'pd', '.', 'pivot_table', '(', 'df', ',', 'index', '=', '[', '""Region""', ',', '""SalesMan""', ']', ')']"
1361,"['write', 'python', 'program', 'iterates', 'integer', 'given', 'number', 'print', 'fizz', 'multiple', 'three', 'print', 'buzz', 'multiple', 'five', 'print', 'fizzbuzz', 'multiple', 'three', 'five', 'using', 'itertools', 'module']",[]
1362,"['write', 'python', 'program', 'create', 'shallow', 'copy', 'given', 'dictionary', 'use', 'copycopy']","['import', 'copy', 'nums_x', '=', '{', '""a""', ':', '1', ',', '""b""', ':', '2', ',', ""'cc'"", ':', '{', '""c""', ':', '3', '}', '}', 'print', '(', '""Original dictionary: ""', ',', 'nums_x', ')', 'nums_y', '=', 'copy', '.', 'copy', '(', 'nums_x', ')', 'print', '(', '""\\nCopy of the said list:""', ')', 'print', '(', 'nums_y', ')', 'print', '(', '""\\nChange the value of an element of the original dictionary:""', ')', 'nums_x', '[', '""cc""', ']', '[', '""c""', ']', '=', '10', 'print', '(', 'nums_x', ')', 'print', '(', '""\\nSecond dictionary:""', ')', 'print', '(', 'nums_y', ')', 'nums', '=', '{', '""x""', ':', '1', ',', '""y""', ':', '2', ',', ""'zz'"", ':', '{', '""z""', ':', '3', '}', '}', 'nums_copy', '=', 'copy', '.', 'copy', '(', 'nums', ')', 'print', '(', '""\\nOriginal dictionary :""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nCopy of the said list:""', ')', 'print', '(', 'nums_copy', ')', 'print', '(', '""\\nChange the value of an element of the original dictionary:""', ')', 'nums', '[', '""zz""', ']', '[', '""z""', ']', '=', '10', 'print', '(', '""\\nFirst dictionary:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nSecond dictionary (copy):""', ')', 'print', '(', 'nums_copy', ')']"
1363,"['write', 'python', 'program', 'access', 'index', 'list']","['nums', '=', '[', '5', ',', '15', ',', '35', ',', '8', ',', '98', ']', 'for', 'num_index', ',', 'num_val', 'in', 'enumerate', '(', 'nums', ')', ':', 'print', '(', 'num_index', ',', 'num_val', ')']"
1364,"['write', 'python', 'program', 'remove', 'sublists', 'given', 'list', 'list', 'contains', 'element', 'outside', 'given', 'range']",[]
1365,"['write', 'python', 'program', 'create', 'string', 'representation', 'arrow', 'object', 'formatted', 'according', 'format', 'string']","['import', 'arrow', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', ')', 'print', '(', '""\\nYYYY-MM-DD HH:mm:ss ZZ:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'format', '(', ""'YYYY-MM-DD HH:mm:ss ZZ'"", ')', ')', 'print', '(', '""\\nDD-MM-YYYY HH:mm:ss ZZ:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'format', '(', ""'DD-MM-YYYY HH:mm:ss ZZ'"", ')', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'format', '(', ""'\\nMMMM DD, YYYY'"", ')', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'format', '(', ')', ')']"
1366,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'survival', 'rate', 'gender']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'df', '.', 'groupby', '(', ""'sex'"", ')', '[', '[', ""'survived'"", ']', ']', '.', 'mean', '(', ')', 'print', '(', 'result', ')']"
1367,"['write', 'python', 'program', 'calculate', 'surface', 'volume', 'area', 'sphere']","['pi', '=', '22', '/', '7', 'radian', '=', 'float', '(', 'input', '(', ""'Radius of sphere: '"", ')', ')', 'sur_area', '=', '4', '*', 'pi', '*', 'radian', '**', '2', 'volume', '=', '(', '4', '/', '3', ')', '*', '(', 'pi', '*', 'radian', '**', '3', ')', 'print', '(', '""Surface Area is: ""', ',', 'sur_area', ')', 'print', '(', '""Volume is: ""', ',', 'volume', ')']"
1368,"['write', 'python', 'program', 'convert', 'character', 'uppercase', 'lowercase', 'eliminate', 'duplicate', 'letter', 'given', 'sequence', 'use', 'map', 'function']","['def', 'change_cases', '(', 's', ')', ':', 'return', 'str', '(', 's', ')', '.', 'upper', '(', ')', ',', 'str', '(', 's', ')', '.', 'lower', '(', ')', 'chrars', '=', '{', ""'a'"", ',', ""'b'"", ',', ""'E'"", ',', ""'f'"", ',', ""'a'"", ',', ""'i'"", ',', ""'o'"", ',', ""'U'"", ',', ""'a'"", '}', 'print', '(', '""Original Characters:\\n""', ',', 'chrars', ')', 'result', '=', 'map', '(', 'change_cases', ',', 'chrars', ')', 'print', '(', '""\\nAfter converting above characters in upper and lower cases\\nand eliminating duplicate letters:""', ')', 'print', '(', 'set', '(', 'result', ')', ')']"
1369,"['write', 'python', 'program', 'create', 'deque', 'existing', 'iterable', 'object']","['import', 'collections', 'even_nums', '=', '(', '2', ',', '4', ',', '6', ')', 'print', '(', '""Original tuple:""', ')', 'print', '(', 'even_nums', ')', 'print', '(', 'type', '(', 'even_nums', ')', ')', 'even_nums_deque', '=', 'collections', '.', 'deque', '(', 'even_nums', ')', 'print', '(', '""\\nOriginal deque:""', ')', 'print', '(', 'even_nums_deque', ')', 'even_nums_deque', '.', 'append', '(', '8', ')', 'even_nums_deque', '.', 'append', '(', '10', ')', 'even_nums_deque', '.', 'append', '(', '12', ')', 'even_nums_deque', '.', 'appendleft', '(', '2', ')', 'print', '(', '""New deque from an existing iterable object:""', ')', 'print', '(', 'even_nums_deque', ')', 'print', '(', 'type', '(', 'even_nums_deque', ')', ')']"
1370,"['write', 'panda', 'program', 'find', 'index', 'substring', 'dataframe', 'beginning', 'end', 'position']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'name_code'"", ':', '[', ""'c0001'"", ',', ""'1000c'"", ',', ""'b00c2'"", ',', ""'b2c02'"", ',', ""'c2222'"", ']', ',', ""'date_of_birth '"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '18.5', ',', '21.2', ',', '22.5', ',', '22', ',', '23', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nIndex of a substring in a specified column of a dataframe:""', ')', 'df', '[', ""'Index'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'find', '(', ""'c'"", ',', '0', ',', '5', ')', ',', 'df', '[', ""'name_code'"", ']', ')', ')', 'print', '(', 'df', ')']"
1371,"['write', 'panda', 'program', 'check', 'whether', 'space', 'present', 'given', 'column', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF '"", ',', ""'  '"", ',', ""'abcd'"", ',', ""' '"", ']', ',', ""'date_of_sale '"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'sale_amount'"", ':', '[', '12348.5', ',', '233331.2', ',', '22.5', ',', '2566552.0', ',', '23.0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nIs space is present?""', ')', 'df', '[', ""'company_code_is_title'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'isspace', '(', ')', ',', 'df', '[', ""'company_code'"", ']', ')', ')', 'print', '(', 'df', ')']"
1372,"['write', 'numpy', 'program', 'calculate', 'difference', 'neighboring', 'element', 'elementwise', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '3', ',', '5', ',', '7', ',', '0', ']', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'print', '(', '""Difference between neighboring elements, element-wise of the said array.""', ')', 'print', '(', 'np', '.', 'diff', '(', 'x', ')', ')']"
1373,"['write', 'python', 'program', 'count', 'character', 'position', 'given', 'string', 'lower', 'uppercase', 'character', 'english', 'alphabet']","['def', 'count_char_position', '(', 'str1', ')', ':', 'count_chars', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str1', ')', ')', ':', 'if', '(', '(', 'i', '==', 'ord', '(', 'str1', '[', 'i', ']', ')', '-', 'ord', '(', ""'A'"", ')', ')', 'or', '(', 'i', '==', 'ord', '(', 'str1', '[', 'i', ']', ')', '-', 'ord', '(', ""'a'"", ')', ')', ')', ':', 'count_chars', '+=', '1', 'return', 'count_chars', 'str1', '=', 'input', '(', '""Input a string: ""', ')', 'print', '(', '""Number of characters of the said string at same position as in English alphabet:""', ')', 'print', '(', 'count_char_position', '(', 'str1', ')', ')']"
1374,"['write', 'numpy', 'program', 'multiply', 'value', 'two', 'given', 'vector']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '8', ',', '3', ',', '5', ']', ')', 'print', '(', '""Vector-1""', ')', 'print', '(', 'x', ')', 'y', '=', 'np', '.', 'random', '.', 'randint', '(', '0', ',', '11', ',', '4', ')', 'print', '(', '""Vector-2""', ')', 'print', '(', 'y', ')', 'result', '=', 'x', '*', 'y', 'print', '(', '""Multiply the values of two said vectors:""', ')', 'print', '(', 'result', ')']"
1375,"['write', 'python', 'program', 'remove', 'duplicate', 'word', 'given', 'string', 'use', 'collection', 'module']","['from', 'collections', 'import', 'OrderedDict', 'text_str', '=', '""Python Exercises Practice Solution Exercises""', 'print', '(', '""Original String:""', ')', 'print', '(', 'text_str', ')', 'print', '(', '""\\nAfter removing duplicate words from the said string:""', ')', 'result', '=', ""' '"", '.', 'join', '(', 'OrderedDict', '(', '(', 'w', ',', 'w', ')', 'for', 'w', 'in', 'text_str', '.', 'split', '(', ')', ')', '.', 'keys', '(', ')', ')', 'print', '(', 'result', ')']"
1376,"['write', 'numpy', 'program', 'test', 'given', 'array', 'elementwise', 'finiteness', 'infinity', 'number']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '1', ',', '0', ',', 'np', '.', 'nan', ',', 'np', '.', 'inf', ']', ')', 'print', '(', '""Original array""', ')', 'print', '(', 'a', ')', 'print', '(', '""Test a given array element-wise for finiteness :""', ')', 'print', '(', 'np', '.', 'isfinite', '(', 'a', ')', ')']"
1377,"['write', 'numpy', 'program', 'convert', 'numpy', 'array', 'float', 'value', 'numpy', 'array', 'integer', 'value']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '12.0', ',', '12.51', ']', ',', '[', '2.34', ',', '7.98', ']', ',', '[', '25.23', ',', '36.50', ']', ']', ')', 'print', '(', '""Original array elements:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Convert float values to integer values:""', ')', 'print', '(', 'x', '.', 'astype', '(', 'int', ')', ')']"
1378,"['write', 'python', 'program', 'find', 'second', 'repeated', 'word', 'given', 'string']","['def', 'word_count', '(', 'str', ')', ':', 'counts', '=', 'dict', '(', ')', 'words', '=', 'str', '.', 'split', '(', ')', 'for', 'word', 'in', 'words', ':', 'if', 'word', 'in', 'counts', ':', 'counts', '[', 'word', ']', '+=', '1', 'else', ':', 'counts', '[', 'word', ']', '=', '1', 'counts_x', '=', 'sorted', '(', 'counts', '.', 'items', '(', ')', ',', 'key', '=', 'lambda', 'kv', ':', 'kv', '[', '1', ']', ')', 'return', 'counts_x', '[', '-', '2', ']', 'print', '(', 'word_count', '(', '""Both of these issues are fixed by postponing the evaluation of annotations. Instead of compiling code which executes expressions in annotations at their definition time, the compiler stores the annotation in a string form equivalent to the AST of the expression in question. If needed, annotations can be resolved at runtime using typing.get_type_hints(). In the common case where this is not required, the annotations are cheaper to store (since short strings are interned by the interpreter) and make startup time faster.""', ')', ')']"
1379,"['write', 'python', 'program', 'find', 'specified', 'number', 'largest', 'product', 'two', 'given', 'list', 'multiplying', 'element', 'list']","['def', 'top_product', '(', 'nums1', ',', 'nums2', ',', 'N', ')', ':', 'result', '=', 'sorted', '(', '[', 'x', '*', 'y', 'for', 'x', 'in', 'nums1', 'for', 'y', 'in', 'nums2', ']', ',', 'reverse', '=', 'True', ')', '[', ':', 'N', ']', 'return', 'result', 'nums1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', 'nums2', '=', '[', '3', ',', '6', ',', '8', ',', '9', ',', '10', ',', '6', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ',', '""\\n""', ')', 'N', '=', '3', 'print', '(', 'N', ',', '""Number of largest products from the said two lists:""', ')', 'print', '(', 'top_product', '(', 'nums1', ',', 'nums2', ',', 'N', ')', ')', 'N', '=', '4', 'print', '(', 'N', ',', '""Number of largest products from the said two lists:""', ')', 'print', '(', 'top_product', '(', 'nums1', ',', 'nums2', ',', 'N', ')', ')']"
1380,"['write', 'panda', 'program', 'extract', 'non', 'alphanumeric', 'character', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', '10', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'c0001#'"", ',', ""'[email\xa0protected]^2'"", ',', ""'$c0003'"", ',', ""'c0003'"", ',', ""'&c0004'"", ']', ',', ""'year'"", ':', '[', ""'year 1800'"", ',', ""'year 1700'"", ',', ""'year 2300'"", ',', ""'year 1900'"", ',', ""'year 2200'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'find_nonalpha', '(', 'text', ')', ':', 'result', '=', 're', '.', 'findall', '(', '""[^A-Za-z0-9 ]""', ',', 'text', ')', 'return', 'result', 'df', '[', ""'nonalpha'"", ']', '=', 'df', '[', ""'company_code'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'find_nonalpha', '(', 'x', ')', ')', 'print', '(', '""\\Extracting only non alphanumeric characters from company_code:""', ')', 'print', '(', 'df', ')']"
1381,"['write', 'panda', 'program', 'import', 'excel', 'data', 'dataframe', 'draw', 'bar', 'plot', 'bar', 'represent', 'one', 'top', 'production']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\coalpublic2013.xlsx'"", ')', 'sorted_by_production', '=', 'df', '.', 'sort_values', '(', '[', ""'Production'"", ']', ',', 'ascending', '=', 'False', ')', '.', 'head', '(', '10', ')', 'sorted_by_production', '[', ""'Production'"", ']', '.', 'head', '(', '10', ')', '.', 'plot', '(', 'kind', '=', '""barh""', ')', 'plt', '.', 'show', '(', ')']"
1382,"['write', 'python', 'program', 'chose', 'specified', 'number', 'colour', 'three', 'different', 'colour', 'generate', 'combination', 'repetition']","['from', 'itertools', 'import', 'combinations_with_replacement', 'def', 'combinations_colors', '(', 'l', ',', 'n', ')', ':', 'return', 'combinations_with_replacement', '(', 'l', ',', 'n', ')', 'l', '=', '[', '""Red""', ',', '""Green""', ',', '""Blue""', ']', 'print', '(', '""Original List: ""', ',', 'l', ')', 'n', '=', '1', 'print', '(', '""\\nn = 1""', ')', 'print', '(', 'list', '(', 'combinations_colors', '(', 'l', ',', 'n', ')', ')', ')', 'n', '=', '2', 'print', '(', '""\\nn = 2""', ')', 'print', '(', 'list', '(', 'combinations_colors', '(', 'l', ',', 'n', ')', ')', ')', 'n', '=', '3', 'print', '(', '""\\nn = 3""', ')', 'print', '(', 'list', '(', 'combinations_colors', '(', 'l', ',', 'n', ')', ')', ')']"
1383,"['write', 'python', 'program', 'add', 'two', 'given', 'list', 'different', 'length', 'start', 'left']","['def', 'elementswise_left_join', '(', 'l1', ',', 'l2', ')', ':', 'f_len', '=', 'len', '(', 'l1', ')', '-', '(', 'len', '(', 'l2', ')', '-', '1', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'l2', ')', ',', '1', ')', ':', 'if', 'f_len', '-', 'i', '>=', 'len', '(', 'l1', ')', ':', 'break', 'else', ':', 'l1', '[', 'i', ']', '=', 'l1', '[', 'i', ']', '+', 'l2', '[', 'i', ']', 'return', 'l1', 'nums1', '=', '[', '2', ',', '4', ',', '7', ',', '0', ',', '5', ',', '8', ']', 'nums2', '=', '[', '3', ',', '3', ',', '-', '1', ',', '7', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nAdd said two lists from left:""', ')', 'print', '(', 'elementswise_left_join', '(', 'nums1', ',', 'nums2', ')', ')', 'nums3', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', 'nums4', '=', '[', '2', ',', '4', ',', '-', '3', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums3', ')', 'print', '(', 'nums4', ')', 'print', '(', '""\\nAdd said two lists from left:""', ')', 'print', '(', 'elementswise_left_join', '(', 'nums3', ',', 'nums4', ')', ')']"
1384,"['write', 'panda', 'program', 'draw', 'horizontal', 'cumulative', 'histogram', 'plot', 'opening', 'stock', 'price', 'alphabet', 'inc', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'df2', '=', 'df1', '[', '[', ""'Open'"", ']', ']', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '15', ',', '15', ')', ')', 'df2', '.', 'plot', '.', 'hist', '(', 'orientation', '=', ""'horizontal'"", ',', 'cumulative', '=', 'True', ')', 'plt', '.', 'suptitle', '(', ""'Opening stock prices of Alphabet Inc.,\\n From 01-04-2020 to 30-04-2020'"", ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'show', '(', ')']"
1385,"['write', 'python', 'program', 'generate', 'array', 'whose', 'element']","['array', '=', '[', '[', '[', ""'*'"", 'for', 'col', 'in', 'range', '(', '6', ')', ']', 'for', 'col', 'in', 'range', '(', '4', ')', ']', 'for', 'row', 'in', 'range', '(', '3', ')', ']', 'print', '(', 'array', ')']"
1386,"['write', 'python', 'program', 'group', 'element', 'given', 'list', 'based', 'given', 'function']","['from', 'collections', 'import', 'defaultdict', 'from', 'math', 'import', 'floor', 'def', 'test', '(', 'lst', ',', 'fn', ')', ':', 'd', '=', 'defaultdict', '(', 'list', ')', 'for', 'el', 'in', 'lst', ':', 'd', '[', 'fn', '(', 'el', ')', ']', '.', 'append', '(', 'el', ')', 'return', 'dict', '(', 'd', ')', 'nums', '=', '[', '7', ',', '23', ',', '3.2', ',', '3.3', ',', '8.4', ']', 'print', '(', '""Original list & function:""', ')', 'print', '(', 'nums', ',', '"" Function name: floor:""', ')', 'print', '(', '""Group the elements of the said list based on the given function:""', ')', 'print', '(', 'test', '(', 'nums', ',', 'floor', ')', ')', 'print', '(', '""\\n""', ')', 'print', '(', '""Original list & function:""', ')', 'colors', '=', '[', ""'Red'"", ',', ""'Green'"", ',', ""'Black'"", ',', ""'White'"", ',', ""'Pink'"", ']', 'print', '(', 'colors', ',', '"" Function name: len:""', ')', 'print', '(', '""Group the elements of the said list based on the given function:""', ')', 'print', '(', 'test', '(', 'colors', ',', 'len', ')', ')']"
1387,"['write', 'python', 'program', 'get', 'unique', 'value', 'list']","['my_list', '=', '[', '10', ',', '20', ',', '30', ',', '40', ',', '20', ',', '50', ',', '60', ',', '40', ']', 'print', '(', '""Original List : ""', ',', 'my_list', ')', 'my_set', '=', 'set', '(', 'my_list', ')', 'my_new_list', '=', 'list', '(', 'my_set', ')', 'print', '(', '""List of unique numbers : ""', ',', 'my_new_list', ')']"
1388,"['write', 'python', 'program', 'access', 'specific', 'item', 'singly', 'linked', 'list', 'using', 'index', 'value']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'singly_linked_list', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'tail', '=', 'None', 'self', '.', 'head', '=', 'None', 'self', '.', 'count', '=', '0', 'def', 'append_item', '(', 'self', ',', 'data', ')', ':', 'node', '=', 'Node', '(', 'data', ')', 'if', 'self', '.', 'head', ':', 'self', '.', 'head', '.', 'next', '=', 'node', 'self', '.', 'head', '=', 'node', 'else', ':', 'self', '.', 'tail', '=', 'node', 'self', '.', 'head', '=', 'node', 'self', '.', 'count', '+=', '1', 'def', '__getitem__', '(', 'self', ',', 'index', ')', ':', 'if', 'index', '>', 'self', '.', 'count', '-', '1', ':', 'return', '""Index out of range""', 'current_val', '=', 'self', '.', 'tail', 'for', 'n', 'in', 'range', '(', 'index', ')', ':', 'current_val', '=', 'current_val', '.', 'next', 'return', 'current_val', '.', 'data', 'items', '=', 'singly_linked_list', '(', ')', 'items', '.', 'append_item', '(', ""'PHP'"", ')', 'items', '.', 'append_item', '(', ""'Python'"", ')', 'items', '.', 'append_item', '(', ""'C#'"", ')', 'items', '.', 'append_item', '(', ""'C++'"", ')', 'items', '.', 'append_item', '(', ""'Java'"", ')', 'print', '(', '""Search using index:""', ')', 'print', '(', 'items', '[', '0', ']', ')', 'print', '(', 'items', '[', '1', ']', ')', 'print', '(', 'items', '[', '4', ']', ')', 'print', '(', 'items', '[', '5', ']', ')', 'print', '(', 'items', '[', '10', ']', ')']"
1389,"['write', 'panda', 'program', 'select', 'random', 'number', 'row', 'fraction', 'random', 'row', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nSelect random number of rows:""', ')', 'print', '(', 'w_a_con', '.', 'sample', '(', '5', ')', ')', 'print', '(', '""\\nSelect fraction of randome rows:""', ')', 'print', '(', 'w_a_con', '.', 'sample', '(', 'frac', '=', '0.02', ')', ')']"
1390,"['write', 'numpy', 'program', 'create', 'zero', 'matrix', 'element', 'main', 'diagonal', 'equal']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'diag', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ')', 'print', '(', 'x', ')']"
1391,"['write', 'numpy', 'program', 'compute', 'trigonometric', 'sine', 'cosine', 'tangent', 'array', 'angle', 'given', 'degree']","['import', 'numpy', 'as', 'np', 'print', '(', '""sine: array of angles given in degrees""', ')', 'print', '(', 'np', '.', 'sin', '(', 'np', '.', 'array', '(', '(', '0.', ',', '30.', ',', '45.', ',', '60.', ',', '90.', ')', ')', '*', 'np', '.', 'pi', '/', '180.', ')', ')', 'print', '(', '""cosine: array of angles given in degrees""', ')', 'print', '(', 'np', '.', 'cos', '(', 'np', '.', 'array', '(', '(', '0.', ',', '30.', ',', '45.', ',', '60.', ',', '90.', ')', ')', '*', 'np', '.', 'pi', '/', '180.', ')', ')', 'print', '(', '""tangent: array of angles given in degrees""', ')', 'print', '(', 'np', '.', 'tan', '(', 'np', '.', 'array', '(', '(', '0.', ',', '30.', ',', '45.', ',', '60.', ',', '90.', ')', ')', '*', 'np', '.', 'pi', '/', '180.', ')', ')']"
1392,"['write', 'python', 'program', 'print', 'name', 'html', 'tag', 'given', 'web', 'page', 'going', 'document', 'tree']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup', 'url', '=', ""'https://www.python.org/'"", 'reqs', '=', 'requests', '.', 'get', '(', 'url', ')', 'soup', '=', 'BeautifulSoup', '(', 'reqs', '.', 'text', ',', ""'lxml'"", ')', 'print', '(', '""\\nNames of all HTML tags (https://www.python.org):\\n""', ')', 'for', 'child', 'in', 'soup', '.', 'recursiveChildGenerator', '(', ')', ':', 'if', 'child', '.', 'name', ':', 'print', '(', 'child', '.', 'name', ')']"
1393,"['write', 'python', 'program', 'create', 'backup', 'sqlite', 'database']","['import', 'sqlite3', 'import', 'io', 'conn', '=', 'sqlite3', '.', 'connect', '(', ""'mydatabase.db'"", ')', 'with', 'io', '.', 'open', '(', ""'clientes_dump.sql'"", ',', ""'w'"", ')', 'as', 'f', ':', 'for', 'linha', 'in', 'conn', '.', 'iterdump', '(', ')', ':', 'f', '.', 'write', '(', ""'%s\\n'"", '%', 'linha', ')', 'print', '(', ""'Backup performed successfully.'"", ')', 'print', '(', ""'Saved as mydatabase_dump.sql'"", ')', 'conn', '.', 'close', '(', ')']"
1394,"['write', 'python', 'program', 'find', 'dimension', 'given', 'matrix']","['def', 'matrix_dimensions', '(', 'test_list', ')', ':', 'row', '=', 'len', '(', 'test_list', ')', 'column', '=', 'len', '(', 'test_list', '[', '0', ']', ')', 'return', 'row', ',', 'column', 'lst', '=', '[', '[', '1', ',', '2', ']', ',', '[', '2', ',', '4', ']', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'lst', ')', 'print', '(', '""Dimension of the said matrix:""', ')', 'print', '(', 'matrix_dimensions', '(', 'lst', ')', ')', 'lst', '=', '[', '[', '0', ',', '1', ',', '2', ']', ',', '[', '2', ',', '4', ',', '5', ']', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'lst', ')', 'print', '(', '""Dimension of the said matrix:""', ')', 'print', '(', 'matrix_dimensions', '(', 'lst', ')', ')', 'lst', '=', '[', '[', '0', ',', '1', ',', '2', ']', ',', '[', '2', ',', '4', ',', '5', ']', ',', '[', '2', ',', '3', ',', '4', ']', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'lst', ')', 'print', '(', '""Dimension of the said matrix:""', ')', 'print', '(', 'matrix_dimensions', '(', 'lst', ')', ')']"
1395,"['write', 'python', 'program', 'find', 'index', 'position', 'last', 'occurrence', 'given', 'number', 'sorted', 'list', 'using', 'binary', 'search', 'bisect']","['from', 'bisect', 'import', 'bisect_right', 'def', 'BinarySearch', '(', 'a', ',', 'x', ')', ':', 'i', '=', 'bisect_right', '(', 'a', ',', 'x', ')', 'if', 'i', '!=', 'len', '(', 'a', ')', '+', '1', 'and', 'a', '[', 'i', '-', '1', ']', '==', 'x', ':', 'return', '(', 'i', '-', '1', ')', 'else', ':', 'return', '-', '1', 'nums', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '8', ',', '8', ',', '10', ',', '12', ']', 'x', '=', '8', 'num_position', '=', 'BinarySearch', '(', 'nums', ',', 'x', ')', 'if', 'num_position', '==', '-', '1', ':', 'print', '(', '""not presetn!""', ')', 'else', ':', 'print', '(', '""Last occurrence of""', ',', 'x', ',', '""is present at""', ',', 'num_position', ')']"
1396,"['write', 'python', 'program', 'list', 'home', 'directory', 'without', 'absolute', 'path']","['import', 'os', '.', 'path', 'print', '(', 'os', '.', 'path', '.', 'expanduser', '(', ""'~'"", ')', ')']"
1397,"['write', 'python', 'program', 'check', 'two', 'given', 'list', 'contain', 'element', 'regardless', 'order']","['def', 'check_same_contents', '(', 'nums1', ',', 'nums2', ')', ':', 'for', 'x', 'in', 'set', '(', 'nums1', '+', 'nums2', ')', ':', 'if', 'nums1', '.', 'count', '(', 'x', ')', '!=', 'nums2', '.', 'count', '(', 'x', ')', ':', 'return', 'False', 'return', 'True', 'nums1', '=', '[', '1', ',', '2', ',', '4', ']', 'nums2', '=', '[', '2', ',', '4', ',', '1', ']', 'print', '(', '""Original list elements:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nCheck two said lists contain the same elements regardless of order!""', ')', 'print', '(', 'check_same_contents', '(', 'nums1', ',', 'nums2', ')', ')', 'nums1', '=', '[', '1', ',', '2', ',', '3', ']', 'nums2', '=', '[', '1', ',', '2', ',', '3', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nCheck two said lists contain the same elements regardless of order!""', ')', 'print', '(', 'check_same_contents', '(', 'nums1', ',', 'nums2', ')', ')', 'nums1', '=', '[', '1', ',', '2', ',', '3', ']', 'nums2', '=', '[', '1', ',', '2', ',', '4', ']', 'print', '(', '""\\nOriginal list elements:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nCheck two said lists contain the same elements regardless of order!""', ')', 'print', '(', 'check_same_contents', '(', 'nums1', ',', 'nums2', ')', ')']"
1398,"['write', 'numpy', 'program', 'insert', 'new', 'axis', 'within', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'zeros', '(', '(', '3', ',', '4', ')', ')', 'y', '=', 'np', '.', 'expand_dims', '(', 'x', ',', 'axis', '=', '1', ')', '.', 'shape', 'print', '(', 'y', ')']"
1399,"['write', 'python', 'program', 'print', 'set', 'containing', 'color', 'present']","['color_list_1', '=', 'set', '(', '[', '""White""', ',', '""Black""', ',', '""Red""', ']', ')', 'color_list_2', '=', 'set', '(', '[', '""Red""', ',', '""Green""', ']', ')', 'print', '(', '""Original set elements:""', ')', 'print', '(', 'color_list_1', ')', 'print', '(', 'color_list_2', ')', 'print', '(', '""\\nDifferenct of color_list_1 and color_list_2:""', ')', 'print', '(', 'color_list_1', '.', 'difference', '(', 'color_list_2', ')', ')', 'print', '(', '""\\nDifferenct of color_list_2 and color_list_1:""', ')', 'print', '(', 'color_list_2', '.', 'difference', '(', 'color_list_1', ')', ')']"
1400,"['write', 'python', 'program', 'read', 'last', 'n', 'line', 'file']","['import', 'sys', 'import', 'os', 'def', 'file_read_from_tail', '(', 'fname', ',', 'lines', ')', ':', 'bufsize', '=', '8192', 'fsize', '=', 'os', '.', 'stat', '(', 'fname', ')', '.', 'st_size', 'iter', '=', '0', 'with', 'open', '(', 'fname', ')', 'as', 'f', ':', 'if', 'bufsize', '>', 'fsize', ':', 'bufsize', '=', 'fsize', '-', '1', 'data', '=', '[', ']', 'while', 'True', ':', 'iter', '+=', '1', 'f', '.', 'seek', '(', 'fsize', '-', 'bufsize', '*', 'iter', ')', 'data', '.', 'extend', '(', 'f', '.', 'readlines', '(', ')', ')', 'if', 'len', '(', 'data', ')', '>=', 'lines', 'or', 'f', '.', 'tell', '(', ')', '==', '0', ':', 'print', '(', ""''"", '.', 'join', '(', 'data', '[', '-', 'lines', ':', ']', ')', ')', 'break', 'file_read_from_tail', '(', ""'test.txt'"", ',', '2', ')']"
1401,"['write', 'panda', 'program', 'find', 'sum', 'mean', 'max', 'min', 'value', 'production', 'short', 'ton', 'column', 'file']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\coalpublic2013.xlsx'"", ')', 'print', '(', '""Sum: ""', ',', 'df', '[', '""Production""', ']', '.', 'sum', '(', ')', ')', 'print', '(', '""Mean: ""', ',', 'df', '[', '""Production""', ']', '.', 'mean', '(', ')', ')', 'print', '(', '""Maximum: ""', ',', 'df', '[', '""Production""', ']', '.', 'max', '(', ')', ')', 'print', '(', '""Minimum: ""', ',', 'df', '[', '""Production""', ']', '.', 'min', '(', ')', ')']"
1402,"['write', 'panda', 'program', 'filter', 'row', 'based', 'row', 'number', 'ended', 'like', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nFilter rows based on row numbers ended with 0, like 0, 10, 20, 30:""', ')', 'print', '(', 'w_a_con', '.', 'filter', '(', 'regex', '=', ""'0$'"", ',', 'axis', '=', '0', ')', ')']"
1403,"['write', 'panda', 'program', 'split', 'given', 'dataframe', 'group', 'bin', 'count']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'pd', '.', 'set_option', '(', ""'display.max_columns'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', '70009', ',', '70002', ',', '70004', ',', '70007', ',', '70005', ',', '70008', ',', '70010', ',', '70003', ',', '70012', ',', '70011', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'customer_id'"", ':', '[', '3005', ',', '3001', ',', '3002', ',', '3009', ',', '3005', ',', '3007', ',', '3002', ',', '3004', ',', '3009', ',', '3008', ',', '3003', ',', '3002', ']', ',', ""'sales_id'"", ':', '[', '5002', ',', '5003', ',', '5004', ',', '5003', ',', '5002', ',', '5001', ',', '5005', ',', '5007', ',', '5008', ',', '5004', ',', '5005', ',', '5001', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'groups', '=', 'df', '.', 'groupby', '(', '[', ""'customer_id'"", ',', 'pd', '.', 'cut', '(', 'df', '.', 'sales_id', ',', '3', ')', ']', ')', 'result', '=', 'groups', '.', 'size', '(', ')', '.', 'unstack', '(', ')', 'print', '(', 'result', ')']"
1404,"['write', 'panda', 'program', 'keep', 'valid', 'entry', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', '70002', ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ']', ',', ""'purch_amt'"", ':', '[', 'np', '.', 'nan', ',', '270.65', ',', '65.26', ',', 'np', '.', 'nan', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', 'np', '.', 'nan', ']', ',', ""'ord_date'"", ':', '[', 'np', '.', 'nan', ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', 'np', '.', 'nan', ']', ',', ""'customer_id'"", ':', '[', 'np', '.', 'nan', ',', '3001', ',', '3001', ',', 'np', '.', 'nan', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', 'np', '.', 'nan', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nKeep the said DataFrame with valid entries:""', ')', 'result', '=', 'df', '.', 'dropna', '(', 'inplace', '=', 'False', ')', 'print', '(', 'result', ')']"
1405,"['write', 'panda', 'program', 'create', 'graphical', 'analysis', 'ufo', 'unidentified', 'flying', 'object', 'sighting', 'year']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'import', 'seaborn', 'as', 'sns', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'df', '[', '""ufo_yr""', ']', '=', 'df', '.', 'Date_time', '.', 'dt', '.', 'year', 'years_data', '=', 'df', '.', 'ufo_yr', '.', 'value_counts', '(', ')', 'years_index', '=', 'years_data', '.', 'index', 'years_values', '=', 'years_data', '.', 'get_values', '(', ')', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '15', ',', '8', ')', ')', 'plt', '.', 'xticks', '(', 'rotation', '=', '60', ')', 'plt', '.', 'title', '(', ""'UFO Sightings by Year'"", ')', 'plt', '.', 'xlabel', '(', '""Year""', ')', 'plt', '.', 'ylabel', '(', '""Number of reports""', ')', 'years_plot', '=', 'sns', '.', 'barplot', '(', 'x', '=', 'years_index', '[', ':', '60', ']', ',', 'y', '=', 'years_values', '[', ':', '60', ']', ',', 'palette', '=', '""Reds""', ')']"
1406,"['write', 'numpy', 'program', 'remove', 'trailing', 'whitespaces', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', ""' python exercises '"", ',', ""' PHP  '"", ',', ""' java  '"", ',', ""'  C++'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""Original Array:""', ')', 'print', '(', 'x', ')', 'rstripped_char', '=', 'np', '.', 'char', '.', 'rstrip', '(', 'x', ')', 'print', '(', '""\\nRemove the trailing whitespaces : ""', ',', 'rstripped_char', ')']"
1407,"['write', 'python', 'program', 'calculate', 'sum', 'item', 'container', 'tuple', 'list', 'set', 'dictionary']","['s', '=', 'sum', '(', '[', '10', ',', '20', ',', '30', ']', ')', 'print', '(', '""\\nSum of the container: ""', ',', 's', ')', 'print', '(', ')']"
1408,"['write', 'numpy', 'program', 'test', 'elementwise', 'nan', 'given', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '1', ',', '0', ',', 'np', '.', 'nan', ',', 'np', '.', 'inf', ']', ')', 'print', '(', '""Original array""', ')', 'print', '(', 'a', ')', 'print', '(', '""Test element-wise for NaN:""', ')', 'print', '(', 'np', '.', 'isnan', '(', 'a', ')', ')']"
1409,"['write', 'numpy', 'program', 'find', 'index', 'sliced', 'element', 'follows', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'reshape', '(', 'np', '.', 'arange', '(', '16', ')', ',', '(', '4', ',', '4', ')', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Sliced elements:""', ')', 'result', '=', 'x', '[', '[', '0', ',', '1', ',', '2', ']', ',', '[', '0', ',', '1', ',', '3', ']', ']', 'print', '(', 'result', ')']"
1410,"['create', 'dataframe', 'ten', 'row', 'four', 'column', 'random', 'value', 'write', 'panda', 'program', 'highlight', 'dataframes', 'specific', 'column', 'different', 'color']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '24', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', 'np', '.', 'linspace', '(', '1', ',', '10', ',', '10', ')', '}', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df', ',', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'randn', '(', '10', ',', '4', ')', ',', 'columns', '=', 'list', '(', ""'BCDE'"", ')', ')', ']', ',', 'axis', '=', '1', ')', 'df', '.', 'iloc', '[', '0', ',', '2', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '3', ',', '3', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '4', ',', '1', ']', '=', 'np', '.', 'nan', 'df', '.', 'iloc', '[', '9', ',', '4', ']', '=', 'np', '.', 'nan', 'print', '(', '""Original array:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nDifferent background color:""', ')', 'coldict', '=', '{', ""'B'"", ':', ""'red'"", ',', ""'D'"", ':', ""'yellow'"", '}', 'def', 'highlight_cols', '(', 'x', ')', ':', 'df', '=', 'x', '.', 'copy', '(', ')', 'df', '.', 'loc', '[', ':', ',', ':', ']', '=', ""'background-color: red'"", 'df', '[', '[', ""'B'"", ',', ""'C'"", ',', ""'E'"", ']', ']', '=', ""'background-color: grey'"", 'return', 'df', 'df', '.', 'style', '.', 'apply', '(', 'highlight_cols', ',', 'axis', '=', 'None', ')']"
1411,"['write', 'numpy', 'program', 'calculate', 'expx', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1.', ',', '2.', ',', '3.', ',', '4.', ']', ',', 'np', '.', 'float32', ')', 'print', '(', '""Original array: ""', ')', 'print', '(', 'x', ')', 'print', '(', '""\\nexp(x)-1 for all elements of the said array:""', ')', 'r1', '=', 'np', '.', 'expm1', '(', 'x', ')', 'r2', '=', 'np', '.', 'exp', '(', 'x', ')', '-', '1.', 'assert', 'np', '.', 'allclose', '(', 'r1', ',', 'r2', ')', 'print', '(', 'r1', ')']"
1412,"['write', 'panda', 'program', 'count', 'occurrence', 'specified', 'substring', 'dataframe', 'column']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'name_code'"", ':', '[', ""'c001'"", ',', ""'c002'"", ',', ""'c022'"", ',', ""'c2002'"", ',', ""'c2222'"", ']', ',', ""'date_of_birth '"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '18.5', ',', '21.2', ',', '22.5', ',', '22', ',', '23', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nCount occurrence of 2 in date_of_birth column:""', ')', 'df', '[', ""'count'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'count', '(', '""2""', ')', ',', 'df', '[', ""'name_code'"", ']', ')', ')', 'print', '(', 'df', ')']"
1413,"['write', 'python', 'program', 'create', 'file', 'letter', 'english', 'alphabet', 'listed', 'specified', 'number', 'letter', 'line']","['import', 'string', 'def', 'letters_file_line', '(', 'n', ')', ':', 'with', 'open', '(', '""words1.txt""', ',', '""w""', ')', 'as', 'f', ':', 'alphabet', '=', 'string', '.', 'ascii_uppercase', 'letters', '=', '[', 'alphabet', '[', 'i', ':', 'i', '+', 'n', ']', '+', '""\\n""', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'alphabet', ')', ',', 'n', ')', ']', 'f', '.', 'writelines', '(', 'letters', ')', 'letters_file_line', '(', '3', ')']"
1414,"['write', 'python', 'program', 'convert', 'given', 'heterogeneous', 'list', 'scalar', 'string']","['def', 'heterogeneous_list_to_str', '(', 'lst', ')', ':', 'result', '=', ""','"", '.', 'join', '(', 'str', '(', 'x', ')', 'for', 'x', 'in', 'lst', ')', 'return', 'result', 'h_data', '=', '[', '""Red""', ',', '100', ',', '-', '50', ',', '""green""', ',', '""w,3,r""', ',', '12.12', ',', 'False', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'h_data', ')', 'print', '(', '""\\nConvert the heterogeneous list of scalars into a string:""', ')', 'print', '(', 'heterogeneous_list_to_str', '(', 'h_data', ')', ')']"
1415,"['write', 'python', 'program', 'get', 'possible', 'combination', 'element', 'given', 'list']","['def', 'combinations_list', '(', 'colors', ')', ':', 'if', 'len', '(', 'colors', ')', '==', '0', ':', 'return', '[', '[', ']', ']', 'result', '=', '[', ']', 'for', 'el', 'in', 'combinations_list', '(', 'colors', '[', '1', ':', ']', ')', ':', 'result', '+=', '[', 'el', ',', 'el', '+', '[', 'colors', '[', '0', ']', ']', ']', 'return', 'result', 'colors', '=', '[', ""'orange'"", ',', ""'red'"", ',', ""'green'"", ',', ""'blue'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'colors', ')', 'print', '(', '""\\nAll possible combinations of the said list’s elements:""', ')', 'print', '(', 'combinations_list', '(', 'colors', ')', ')']"
1416,"['write', 'numpy', 'program', 'combine', 'last', 'element', 'first', 'element', 'two', 'given', 'ndarray', 'different', 'shape']","['import', 'numpy', 'as', 'np', 'array1', '=', '[', ""'PHP'"", ',', ""'JS'"", ',', ""'C++'"", ']', 'array2', '=', '[', ""'Python'"", ',', ""'C#'"", ',', ""'NumPy'"", ']', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'array1', ')', 'print', '(', 'array2', ')', 'result', '=', 'np', '.', 'r_', '[', 'array1', '[', ':', '-', '1', ']', ',', '[', 'array1', '[', '-', '1', ']', '+', 'array2', '[', '0', ']', ']', ',', 'array2', '[', '1', ':', ']', ']', 'print', '(', '""\\nAfter Combining:""', ')', 'print', '(', 'result', ')']"
1417,"['write', 'python', 'program', 'count', 'least', 'common', 'character', 'given', 'string']","['from', 'collections', 'import', 'Counter', 'def', 'max_least_char', '(', 'str1', ')', ':', 'temp', '=', 'Counter', '(', 'str1', ')', 'max_char', '=', 'max', '(', 'temp', ',', 'key', '=', 'temp', '.', 'get', ')', 'min_char', '=', 'min', '(', 'temp', ',', 'key', '=', 'temp', '.', 'get', ')', 'return', '(', 'max_char', ',', 'min_char', ')', 'str1', '=', '""hello world""', 'print', '(', '""Original string: ""', ')', 'print', '(', 'str1', ')', 'result', '=', 'max_least_char', '(', 'str1', ')', 'print', '(', '""\\nMost common character of the said string:""', ',', 'result', '[', '0', ']', ')', 'print', '(', '""Least common character of the said string:""', ',', 'result', '[', '1', ']', ')']"
1418,"['write', 'python', 'program', 'using', 'sieve', 'eratosthenes', 'method', 'computing', 'prime', 'upto', 'specified', 'number']","['def', 'prime_eratosthenes', '(', 'n', ')', ':', 'prime_list', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '2', ',', 'n', '+', '1', ')', ':', 'if', 'i', 'not', 'in', 'prime_list', ':', 'print', '(', 'i', ')', 'for', 'j', 'in', 'range', '(', 'i', '*', 'i', ',', 'n', '+', '1', ',', 'i', ')', ':', 'prime_list', '.', 'append', '(', 'j', ')', 'print', '(', 'prime_eratosthenes', '(', '100', ')', ')', ';']"
1419,"['write', 'numpy', 'program', 'convert', 'raw', 'data', 'array', 'binary', 'string', 'create', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '10', ',', '20', ',', '30', ']', ',', 'float', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 's', '=', 'x', '.', 'tostring', '(', ')', 'print', '(', '""Binary string array:""', ')', 'print', '(', 's', ')', 'print', '(', '""Array using fromstring():""', ')', 'y', '=', 'np', '.', 'fromstring', '(', 's', ')', 'print', '(', 'y', ')']"
1420,"['write', 'python', 'program', 'remove', 'space', 'dictionary', 'key']","['student_list', '=', '{', ""'S  001'"", ':', '[', ""'Math'"", ',', ""'Science'"", ']', ',', ""'S    002'"", ':', '[', ""'Math'"", ',', ""'English'"", ']', '}', 'print', '(', '""Original dictionary: ""', ',', 'student_list', ')', 'student_dict', '=', '{', 'x', '.', 'translate', '(', '{', '32', ':', 'None', '}', ')', ':', 'y', 'for', 'x', ',', 'y', 'in', 'student_list', '.', 'items', '(', ')', '}', 'print', '(', '""New dictionary: ""', ',', 'student_dict', ')']"
1421,"['write', 'python', 'program', 'sort', 'unsorted', 'number', 'using', 'multikey', 'quicksort']",[]
1422,"['write', 'python', 'program', 'return', 'sum', 'divisor', 'number']","['def', 'sum_div', '(', 'number', ')', ':', 'divisors', '=', '[', '1', ']', 'for', 'i', 'in', 'range', '(', '2', ',', 'number', ')', ':', 'if', '(', 'number', '%', 'i', ')', '==', '0', ':', 'divisors', '.', 'append', '(', 'i', ')', 'return', 'sum', '(', 'divisors', ')', 'print', '(', 'sum_div', '(', '8', ')', ')', 'print', '(', 'sum_div', '(', '12', ')', ')']"
1423,"['write', 'panda', 'program', 'plot', 'volatility', 'period', 'time', 'alphabet', 'inc', 'stock', 'price', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-9-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'df2', '=', 'df1', '[', '[', ""'Date'"", ',', ""'Close'"", ']', ']', 'df3', '=', 'df2', '.', 'set_index', '(', ""'Date'"", ')', 'data_filled', '=', 'df3', '.', 'asfreq', '(', ""'D'"", ',', 'method', '=', ""'ffill'"", ')', 'data_returns', '=', 'data_filled', '.', 'pct_change', '(', ')', 'data_std', '=', 'data_returns', '.', 'rolling', '(', 'window', '=', '30', ',', 'min_periods', '=', '30', ')', '.', 'std', '(', ')', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '20', ',', '20', ')', ')', 'data_std', '.', 'plot', '(', ')', ';', 'plt', '.', 'suptitle', '(', ""'Volatility over a period of time  of Alphabet Inc. stock price,\\n01-04-2020 to 30-09-2020'"", ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'grid', '(', 'True', ')', 'plt', '.', 'show', '(', ')']"
1424,"['write', 'python', 'program', 'create', 'list', 'reflecting', 'modified', 'runlength', 'encoding', 'given', 'list', 'integer', 'given', 'list', 'character']","['from', 'itertools', 'import', 'groupby', 'def', 'modified_encode', '(', 'alist', ')', ':', 'def', 'ctr_ele', '(', 'el', ')', ':', 'if', 'len', '(', 'el', ')', '>', '1', ':', 'return', '[', 'len', '(', 'el', ')', ',', 'el', '[', '0', ']', ']', 'else', ':', 'return', 'el', '[', '0', ']', 'return', '[', 'ctr_ele', '(', 'list', '(', 'group', ')', ')', 'for', 'key', ',', 'group', 'in', 'groupby', '(', 'alist', ')', ']', 'n_list', '=', '[', '1', ',', '1', ',', '2', ',', '3', ',', '4', ',', '4', ',', '5', ',', '1', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'n_list', ')', 'print', '(', '""\\nList reflecting the modified run-length encoding from the said list:""', ')', 'print', '(', 'modified_encode', '(', 'n_list', ')', ')', 'n_list', '=', ""'aabcddddadnss'"", 'print', '(', '""\\nOriginal String:""', ')', 'print', '(', 'n_list', ')', 'print', '(', '""\\nList reflecting the modified run-length encoding from the said string:""', ')', 'print', '(', 'modified_encode', '(', 'n_list', ')', ')']"
1425,"['write', 'numpy', 'program', 'create', 'vector', 'value', 'ranging', 'print', 'value', 'except', 'first', 'last']","['import', 'numpy', 'as', 'np', 'v', '=', 'np', '.', 'arange', '(', '15', ',', '55', ')', 'print', '(', '""Original vector:""', ')', 'print', '(', 'v', ')', 'print', '(', '""All values except the first and last of the said vector:""', ')', 'print', '(', 'v', '[', '1', ':', '-', '1', ']', ')']"
1426,"['write', 'python', 'program', 'flatten', 'shallow', 'list']","['import', 'itertools', 'original_list', '=', '[', '[', '2', ',', '4', ',', '3', ']', ',', '[', '1', ',', '5', ',', '6', ']', ',', '[', '9', ']', ',', '[', '7', ',', '9', ',', '0', ']', ']', 'new_merged_list', '=', 'list', '(', 'itertools', '.', 'chain', '(', '*', 'original_list', ')', ')', 'print', '(', 'new_merged_list', ')']"
1427,"['write', 'python', 'program', 'return', 'true', 'two', 'given', 'integer', 'value', 'equal', 'sum', 'difference']","['def', 'test_number5', '(', 'x', ',', 'y', ')', ':', 'if', 'x', '==', 'y', 'or', 'abs', '(', 'x', '-', 'y', ')', '==', '5', 'or', '(', 'x', '+', 'y', ')', '==', '5', ':', 'return', 'True', 'else', ':', 'return', 'False', 'print', '(', 'test_number5', '(', '7', ',', '2', ')', ')', 'print', '(', 'test_number5', '(', '3', ',', '2', ')', ')', 'print', '(', 'test_number5', '(', '2', ',', '2', ')', ')', 'print', '(', 'test_number5', '(', '7', ',', '3', ')', ')', 'print', '(', 'test_number5', '(', '27', ',', '53', ')', ')']"
1428,"['write', 'python', 'program', 'find', 'common', 'tuples', 'two', 'given', 'list']","['def', 'test', '(', 'list1', ',', 'list2', ')', ':', 'result', '=', 'set', '(', 'list1', ')', '.', 'intersection', '(', 'list2', ')', 'return', 'list', '(', 'result', ')', 'list1', '=', '[', '(', ""'red'"", ',', ""'green'"", ')', ',', '(', ""'black'"", ',', ""'white'"", ')', ',', '(', ""'orange'"", ',', ""'pink'"", ')', ']', 'list2', '=', '[', '(', ""'red'"", ',', ""'green'"", ')', ',', '(', ""'orange'"", ',', ""'pink'"", ')', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'list1', ')', 'print', '(', 'list2', ')', 'print', '(', '""\\nCommon tuples between two said lists""', ')', 'print', '(', 'test', '(', 'list1', ',', 'list2', ')', ')', 'list1', '=', '[', '(', ""'red'"", ',', ""'green'"", ')', ',', '(', ""'orange'"", ',', ""'pink'"", ')', ']', 'list2', '=', '[', '(', ""'red'"", ',', ""'green'"", ')', ',', '(', ""'black'"", ',', ""'white'"", ')', ',', '(', ""'orange'"", ',', ""'pink'"", ')', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'list1', ')', 'print', '(', 'list2', ')', 'print', '(', '""\\nCommon tuples between two said lists""', ')', 'print', '(', 'test', '(', 'list1', ',', 'list2', ')', ')']"
1429,"['write', 'python', 'program', 'change', 'given', 'string', 'new', 'string', 'first', 'last', 'char', 'exchanged']","['def', 'change_sring', '(', 'str1', ')', ':', 'return', 'str1', '[', '-', '1', ':', ']', '+', 'str1', '[', '1', ':', '-', '1', ']', '+', 'str1', '[', ':', '1', ']', 'print', '(', 'change_sring', '(', ""'abcd'"", ')', ')', 'print', '(', 'change_sring', '(', ""'12345'"", ')', ')']"
1430,"['write', 'python', 'program', 'convert', 'given', 'list', 'dictionary', 'list', 'value', 'corresponding', 'specified', 'key']","['def', 'pluck', '(', 'lst', ',', 'key', ')', ':', 'return', '[', 'x', '.', 'get', '(', 'key', ')', 'for', 'x', 'in', 'lst', ']', 'simpsons', '=', '[', '{', ""'name'"", ':', ""'Areeba'"", ',', ""'age'"", ':', '8', '}', ',', '{', ""'name'"", ':', ""'Zachariah'"", ',', ""'age'"", ':', '36', '}', ',', '{', ""'name'"", ':', ""'Caspar'"", ',', ""'age'"", ':', '34', '}', ',', '{', ""'name'"", ':', ""'Presley'"", ',', ""'age'"", ':', '10', '}', ']', 'print', '(', 'pluck', '(', 'simpsons', ',', ""'age'"", ')', ')']"
1431,"['write', 'panda', 'program', 'create', 'time', 'series', 'combining', 'hour', 'minute']","['import', 'pandas', 'as', 'pd', 'result', '=', 'pd', '.', 'timedelta_range', '(', '0', ',', 'periods', '=', '30', ',', 'freq', '=', '""1H20T""', ')', 'print', '(', '""For a frequency of 1 hours 20 minutes, here we have combined the hour (H) and minute (T):\\n""', ')', 'print', '(', 'result', ')']"
1432,"['write', 'python', 'program', 'format', 'number', 'percentage']","['x', '=', '0.25', 'y', '=', '-', '0.25', 'print', '(', '""\\nOriginal Number: ""', ',', 'x', ')', 'print', '(', '""Formatted Number with percentage: ""', '+', '""{:.2%}""', '.', 'format', '(', 'x', ')', ')', ';', 'print', '(', '""Original Number: ""', ',', 'y', ')', 'print', '(', '""Formatted Number with percentage: ""', '+', '""{:.2%}""', '.', 'format', '(', 'y', ')', ')', ';', 'print', '(', ')']"
1433,"['write', 'python', 'program', 'generate', 'combination', 'given', 'length', 'given', 'iterable']","['import', 'itertools', 'as', 'it', 'def', 'combinations_data', '(', 'iter', ',', 'length', ')', ':', 'return', 'it', '.', 'combinations', '(', 'iter', ',', 'length', ')', 'result', '=', 'combinations_data', '(', '[', ""'A'"", ',', ""'B'"", ',', ""'C'"", ',', ""'D'"", ']', ',', '1', ')', 'print', '(', '""\\nCombinations of an given iterable of length 1:""', ')', 'for', 'i', 'in', 'result', ':', 'print', '(', 'i', ')', 'result', '=', 'combinations_data', '(', '""Python""', ',', '1', ')', 'print', '(', '""\\nCombinations of an given iterable of length 1:""', ')', 'for', 'i', 'in', 'result', ':', 'print', '(', 'i', ')', 'result', '=', 'combinations_data', '(', '[', ""'A'"", ',', ""'B'"", ',', ""'C'"", ',', ""'D'"", ']', ',', '2', ')', 'print', '(', '""\\nCombinations of an given iterable of length 2:""', ')', 'for', 'i', 'in', 'result', ':', 'print', '(', 'i', ')', 'result', '=', 'combinations_data', '(', '""Python""', ',', '2', ')', 'print', '(', '""\\nCombinations of an given iterable of length 2:""', ')', 'for', 'i', 'in', 'result', ':', 'print', '(', 'i', ')']"
1434,"['write', 'panda', 'program', 'find', 'index', 'given', 'substring', 'dataframe', 'column']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'name_code'"", ':', '[', ""'c001'"", ',', ""'c002'"", ',', ""'c022'"", ',', ""'c2002'"", ',', ""'c2222'"", ']', ',', ""'date_of_birth '"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '18.5', ',', '21.2', ',', '22.5', ',', '22', ',', '23', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nCount occurrence of 22 in date_of_birth column:""', ')', 'df', '[', ""'Index'"", ']', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '.', 'find', '(', ""'22'"", ')', ',', 'df', '[', ""'name_code'"", ']', ')', ')', 'print', '(', 'df', ')']"
1435,"['write', 'numpy', 'program', 'get', 'blocksum', 'block', 'size', 'given', 'array', 'shape']","['import', 'numpy', 'as', 'np', 'arra1', '=', 'np', '.', 'ones', '(', '(', '25', ',', '25', ')', ')', 'k', '=', '5', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'arra1', ')', 'result', '=', 'np', '.', 'add', '.', 'reduceat', '(', 'np', '.', 'add', '.', 'reduceat', '(', 'arra1', ',', 'np', '.', 'arange', '(', '0', ',', 'arra1', '.', 'shape', '[', '0', ']', ',', 'k', ')', ',', 'axis', '=', '0', ')', ',', 'np', '.', 'arange', '(', '0', ',', 'arra1', '.', 'shape', '[', '1', ']', ',', 'k', ')', ',', 'axis', '=', '1', ')', 'print', '(', '""\\nBlock-sum (5x5) of the said array:""', ')', 'print', '(', 'result', ')']"
1436,"['write', 'python', 'program', 'get', 'length', 'array']","['from', 'array', 'import', 'array', 'num_array', '=', 'array', '(', ""'i'"", ',', '[', '10', ',', '20', ',', '30', ',', '40', ',', '50', ']', ')', 'print', '(', '""Length of the array is:""', ')', 'print', '(', 'len', '(', 'num_array', ')', ')']"
1437,"['write', 'numpy', 'program', 'get', 'magnitude', 'vector', 'numpy']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Magnitude of the vector:""', ')', 'print', '(', 'np', '.', 'linalg', '.', 'norm', '(', 'x', ')', ')']"
1438,"['write', 'python', 'program', 'remove', 'word', 'given', 'list', 'string', 'containing', 'character', 'string']","['def', 'remove_words', '(', 'in_list', ',', 'char_list', ')', ':', 'new_list', '=', '[', ']', 'for', 'line', 'in', 'in_list', ':', 'new_words', '=', ""' '"", '.', 'join', '(', '[', 'word', 'for', 'word', 'in', 'line', '.', 'split', '(', ')', 'if', 'not', 'any', '(', '[', 'phrase', 'in', 'word', 'for', 'phrase', 'in', 'char_list', ']', ')', ']', ')', 'new_list', '.', 'append', '(', 'new_words', ')', 'return', 'new_list', 'str_list', '=', '[', ""'Red color'"", ',', ""'Orange#'"", ',', ""'Green'"", ',', ""'Orange @'"", ',', '""White""', ']', 'print', '(', '""Original list:""', ')', 'print', '(', '""list1:""', ',', 'str_list', ')', 'char_list', '=', '[', ""'#'"", ',', ""'color'"", ',', ""'@'"", ']', 'print', '(', '""\\nCharacter list:""', ')', 'print', '(', 'char_list', ')', 'print', '(', '""\\nNew list:""', ')', 'print', '(', 'remove_words', '(', 'str_list', ',', 'char_list', ')', ')']"
1439,"['write', 'panda', 'program', 'split', 'dataset', 'group', 'one', 'column', 'get', 'mean', 'min', 'max', 'value', 'group', 'also', 'change', 'column', 'name', 'aggregated', 'metric', 'using', 'following', 'dataset', 'find', 'mean', 'min', 'max', 'value', 'purchase', 'amount', 'group', 'customer', 'id']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_Of_Birth '"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '12', ',', '12', ',', '13', ',', '13', ',', '14', ',', '12', ']', ',', ""'height'"", ':', '[', '173', ',', '192', ',', '186', ',', '167', ',', '151', ',', '159', ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', ',', ""'address'"", ':', '[', ""'street1'"", ',', ""'street2'"", ',', ""'street3'"", ',', ""'street1'"", ',', ""'street2'"", ',', ""'street4'"", ']', '}', ',', 'index', '=', '[', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ',', ""'S4'"", ',', ""'S5'"", ',', ""'S6'"", ']', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', ""'\\nChange the name of an aggregated metric:'"", ')', 'grouped_single', '=', 'df', '.', 'groupby', '(', ""'school_code'"", ')', '.', 'agg', '(', '{', ""'age'"", ':', '[', '(', '""mean_age""', ',', '""mean""', ')', ',', '(', '""min_age""', ',', '""min""', ')', ',', '(', '""max_age""', ',', '""max""', ')', ']', '}', ')', 'print', '(', 'grouped_single', ')']"
1440,"['write', 'python', 'program', 'check', 'list', 'empty']","['l', '=', '[', ']', 'if', 'not', 'l', ':', 'print', '(', '""List is empty""', ')']"
1441,"['write', 'panda', 'program', 'create', 'scatter', 'plot', 'trading', 'volumestock', 'price', 'alphabet', 'inc', 'stock', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-9-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'df2', '=', 'df1', '.', 'set_index', '(', ""'Date'"", ')', 'x', '=', '[', ""'Close'"", ']', ';', 'y', '=', '[', ""'Volume'"", ']', 'plt', '.', 'figure', '(', 'figsize', '=', '[', '15', ',', '10', ']', ')', 'df2', '.', 'plot', '.', 'scatter', '(', 'x', ',', 'y', ',', 's', '=', '50', ')', ';', 'plt', '.', 'grid', '(', 'True', ')', 'plt', '.', 'title', '(', ""'Trading Volume/Price of Alphabet Inc. stock,\\n01-04-2020 to 30-09-2020'"", ',', 'fontsize', '=', '14', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'xlabel', '(', '""Stock Price""', ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'ylabel', '(', '""Trading Volume""', ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'show', '(', ')']"
1442,"['write', 'python', 'program', 'calculate', 'magic', 'square']","['def', 'magic_square_test', '(', 'my_matrix', ')', ':', 'iSize', '=', 'len', '(', 'my_matrix', '[', '0', ']', ')', 'sum_list', '=', '[', ']', 'sum_list', '.', 'extend', '(', '[', 'sum', '(', 'lines', ')', 'for', 'lines', 'in', 'my_matrix', ']', ')', 'for', 'col', 'in', 'range', '(', 'iSize', ')', ':', 'sum_list', '.', 'append', '(', 'sum', '(', 'row', '[', 'col', ']', 'for', 'row', 'in', 'my_matrix', ')', ')', 'result1', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'iSize', ')', ':', 'result1', '+=', 'my_matrix', '[', 'i', ']', '[', 'i', ']', 'sum_list', '.', 'append', '(', 'result1', ')', 'result2', '=', '0', 'for', 'i', 'in', 'range', '(', 'iSize', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'result2', '+=', 'my_matrix', '[', 'i', ']', '[', 'i', ']', 'sum_list', '.', 'append', '(', 'result2', ')', 'if', 'len', '(', 'set', '(', 'sum_list', ')', ')', '>', '1', ':', 'return', 'False', 'return', 'True', 'm', '=', '[', '[', '7', ',', '12', ',', '1', ',', '14', ']', ',', '[', '2', ',', '13', ',', '8', ',', '11', ']', ',', '[', '16', ',', '3', ',', '10', ',', '5', ']', ',', '[', '9', ',', '6', ',', '15', ',', '4', ']', ']', 'print', '(', 'magic_square_test', '(', 'm', ')', ')', ';', 'm', '=', '[', '[', '2', ',', '7', ',', '6', ']', ',', '[', '9', ',', '5', ',', '1', ']', ',', '[', '4', ',', '3', ',', '8', ']', ']', 'print', '(', 'magic_square_test', '(', 'm', ')', ')', ';', 'm', '=', '[', '[', '2', ',', '7', ',', '6', ']', ',', '[', '9', ',', '5', ',', '1', ']', ',', '[', '4', ',', '3', ',', '7', ']', ']', 'print', '(', 'magic_square_test', '(', 'm', ')', ')', ';']"
1443,"['write', 'python', 'program', 'append', 'list', 'second', 'list']","['list1', '=', '[', '1', ',', '2', ',', '3', ',', '0', ']', 'list2', '=', '[', ""'Red'"", ',', ""'Green'"", ',', ""'Black'"", ']', 'final_list', '=', 'list1', '+', 'list2', 'print', '(', 'final_list', ')']"
1444,"['write', 'numpy', 'program', 'find', 'real', 'imaginary', 'part', 'array', 'complex', 'number']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'sqrt', '(', '[', '1', '+', '0j', ']', ')', 'y', '=', 'np', '.', 'sqrt', '(', '[', '0', '+', '1j', ']', ')', 'print', '(', '""Original array:x ""', ',', 'x', ')', 'print', '(', '""Original array:y ""', ',', 'y', ')', 'print', '(', '""Real part of the array:""', ')', 'print', '(', 'x', '.', 'real', ')', 'print', '(', 'y', '.', 'real', ')', 'print', '(', '""Imaginary part of the array:""', ')', 'print', '(', 'x', '.', 'imag', ')', 'print', '(', 'y', '.', 'imag', ')']"
1445,"['write', 'python', 'program', 'parse', 'string', 'representing', 'time', 'according', 'format']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\ntime.struct_time, in the current timezone:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'timetuple', '(', ')', ')']"
1446,"['write', 'numpy', 'program', 'create', 'new', 'shape', 'array', 'without', 'changing', 'data']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', ')', 'y', '=', 'np', '.', 'reshape', '(', 'x', ',', '(', '3', ',', '2', ')', ')', 'print', '(', '""Reshape 3x2:""', ')', 'print', '(', 'y', ')', 'z', '=', 'np', '.', 'reshape', '(', 'x', ',', '(', '2', ',', '3', ')', ')', 'print', '(', '""Reshape 2x3:""', ')', 'print', '(', 'z', ')']"
1447,"['write', 'python', 'program', 'find', 'location', 'address', 'specified', 'latitude', 'longitude', 'using', 'nominatim', 'api', 'geopy', 'package']","['from', 'geopy', '.', 'geocoders', 'import', 'Nominatim', 'geolocator', '=', 'Nominatim', '(', 'user_agent', '=', '""geoapiExercises""', ')', 'lald', '=', '""47.470706, -99.704723""', 'print', '(', '""Latitude and Longitude:""', ',', 'lald', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'lald', ')', 'print', '(', '""Location address of the said Latitude and Longitude:""', ')', 'print', '(', 'location', ')', 'lald', '=', '""34.05728435, -117.194132331602""', 'print', '(', '""\\nLatitude and Longitude:""', ',', 'lald', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'lald', ')', 'print', '(', '""Location address of the said Latitude and Longitude:""', ')', 'print', '(', 'location', ')', 'lald', '=', '""38.8976998, -77.0365534886228""', 'print', '(', '""\\nLatitude and Longitude:""', ',', 'lald', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'lald', ')', 'print', '(', '""Location address of the said Latitude and Longitude:""', ')', 'print', '(', 'location', ')', 'lald', '=', '""55.7558° N, 37.6173° E""', 'print', '(', '""\\nLatitude and Longitude:""', ',', 'lald', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'lald', ')', 'print', '(', '""Location address of the said Latitude and Longitude:""', ')', 'print', '(', 'location', ')', 'lald', '=', '""35.6762° N, 139.6503° E""', 'print', '(', '""\\nLatitude and Longitude:""', ',', 'lald', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'lald', ')', 'print', '(', '""Location address of the said Latitude and Longitude:""', ')', 'print', '(', 'location', ')', 'lald', '=', '""41.9185° N, 45.4777° E""', 'print', '(', '""\\nLatitude and Longitude:""', ',', 'lald', ')', 'location', '=', 'geolocator', '.', 'geocode', '(', 'lald', ')', 'print', '(', '""Location address of the said Latitude and Longitude:""', ')', 'print', '(', 'location', ')']"
1448,"['write', 'python', 'program', 'flatten', 'given', 'nested', 'list', 'structure']","['def', 'flatten_list', '(', 'n_list', ')', ':', 'result_list', '=', '[', ']', 'if', 'not', 'n_list', ':', 'return', 'result_list', 'stack', '=', '[', 'list', '(', 'n_list', ')', ']', 'while', 'stack', ':', 'c_num', '=', 'stack', '.', 'pop', '(', ')', 'next', '=', 'c_num', '.', 'pop', '(', ')', 'if', 'c_num', ':', 'stack', '.', 'append', '(', 'c_num', ')', 'if', 'isinstance', '(', 'next', ',', 'list', ')', ':', 'if', 'next', ':', 'stack', '.', 'append', '(', 'list', '(', 'next', ')', ')', 'else', ':', 'result_list', '.', 'append', '(', 'next', ')', 'result_list', '.', 'reverse', '(', ')', 'return', 'result_list', 'n_list', '=', '[', '0', ',', '10', ',', '[', '20', ',', '30', ']', ',', '40', ',', '50', ',', '[', '60', ',', '70', ',', '80', ']', ',', '[', '90', ',', '100', ',', '110', ',', '120', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'n_list', ')', 'print', '(', '""\\nFlatten list:""', ')', 'print', '(', 'flatten_list', '(', 'n_list', ')', ')']"
1449,"['write', 'python', 'program', 'extract', 'text', 'first', 'paragraph', 'tag', 'given', 'html', 'document']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_doc', '=', '""""""\r<html>\r<head>\r<meta http-equiv=""Content-Type"" content=""text/html;\rcharset=iso-8859-1"">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from\rw3resource.com</a></p>\r<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from \rw3resource.com</a></p>\r</body>\r</html>\r""""""', 'soup', '=', 'BeautifulSoup', '(', 'html_doc', ',', ""'html.parser'"", ')', 'print', '(', '""The text in the first paragraph tag:""', ')', 'print', '(', 'soup', '.', 'find_all', '(', ""'p'"", ')', '[', '0', ']', '.', 'text', ')']"
1450,"['write', 'python', 'program', 'get', 'index', 'first', 'element', 'greater', 'specified', 'element']","['def', 'first_index', '(', 'l1', ',', 'n', ')', ':', 'return', 'next', '(', 'a', '[', '0', ']', 'for', 'a', 'in', 'enumerate', '(', 'l1', ')', 'if', 'a', '[', '1', ']', '>', 'n', ')', 'nums', '=', '[', '12', ',', '45', ',', '23', ',', '67', ',', '78', ',', '90', ',', '100', ',', '76', ',', '38', ',', '62', ',', '73', ',', '29', ',', '83', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'n', '=', '73', 'print', '(', '""\\nIndex of the first element which is greater than""', ',', 'n', ',', '""in the said list:""', ')', 'print', '(', 'first_index', '(', 'nums', ',', 'n', ')', ')', 'n', '=', '21', 'print', '(', '""\\nIndex of the first element which is greater than""', ',', 'n', ',', '""in the said list:""', ')', 'print', '(', 'first_index', '(', 'nums', ',', 'n', ')', ')', 'n', '=', '80', 'print', '(', '""\\nIndex of the first element which is greater than""', ',', 'n', ',', '""in the said list:""', ')', 'print', '(', 'first_index', '(', 'nums', ',', 'n', ')', ')', 'n', '=', '55', 'print', '(', '""\\nIndex of the first element which is greater than""', ',', 'n', ',', '""in the said list:""', ')', 'print', '(', 'first_index', '(', 'nums', ',', 'n', ')', ')']"
1451,"['rite', 'python', 'program', 'accepts', 'string', 'calculate', 'number', 'digit', 'letter']","['s', '=', 'input', '(', '""Input a string""', ')', 'd', '=', 'l', '=', '0', 'for', 'c', 'in', 's', ':', 'if', 'c', '.', 'isdigit', '(', ')', ':', 'd', '=', 'd', '+', '1', 'elif', 'c', '.', 'isalpha', '(', ')', ':', 'l', '=', 'l', '+', '1', 'else', ':', 'pass', 'print', '(', '""Letters""', ',', 'l', ')', 'print', '(', '""Digits""', ',', 'd', ')']"
1452,"['write', 'numpy', 'program', 'create', 'array', 'shape', 'multiply', 'every', 'element', 'value', 'display', 'new', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '12', ')', '.', 'reshape', '(', '3', ',', '4', ')', 'print', '(', '""Original array elements:""', ')', 'print', '(', 'x', ')', 'for', 'a', 'in', 'np', '.', 'nditer', '(', 'x', ',', 'op_flags', '=', '[', ""'readwrite'"", ']', ')', ':', 'a', '[', '...', ']', '=', '3', '*', 'a', 'print', '(', '""New array elements:""', ')', 'print', '(', 'x', ')']"
1453,"['write', 'numpy', 'program', 'convert', 'value', 'centigrade', 'degree', 'fahrenheit', 'degree', 'centigrade', 'value', 'stored', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'fvalues', '=', '[', '0', ',', '12', ',', '45.21', ',', '34', ',', '99.91', ']', 'F', '=', 'np', '.', 'array', '(', 'fvalues', ')', 'print', '(', '""Values in Fahrenheit degrees:""', ')', 'print', '(', 'F', ')', 'print', '(', '""Values in  Centigrade degrees:""', ')', 'print', '(', '5', '*', 'F', '/', '9', '-', '5', '*', '32', '/', '9', ')']"
1454,"['write', 'numpy', 'program', 'compute', 'weighted', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '5', ')', 'print', '(', '""\\nOriginal array:""', ')', 'print', '(', 'x', ')', 'weights', '=', 'np', '.', 'arange', '(', '1', ',', '6', ')', 'r1', '=', 'np', '.', 'average', '(', 'x', ',', 'weights', '=', 'weights', ')', 'r2', '=', '(', 'x', '*', '(', 'weights', '/', 'weights', '.', 'sum', '(', ')', ')', ')', '.', 'sum', '(', ')', 'assert', 'np', '.', 'allclose', '(', 'r1', ',', 'r2', ')', 'print', '(', '""\\nWeighted average of the said array:""', ')', 'print', '(', 'r1', ')']"
1455,"['write', 'numpy', 'program', 'compute', 'kronecker', 'product', 'two', 'given', 'mulitdimension', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ']', ')', 'b', '=', 'np', '.', 'array', '(', '[', '0', ',', '1', ',', '0', ']', ')', 'print', '(', '""Original 1-d arrays:""', ')', 'print', '(', 'a', ')', 'print', '(', 'b', ')', 'result', '=', 'np', '.', 'kron', '(', 'a', ',', 'b', ')', 'print', '(', '""Kronecker product of the said arrays:""', ')', 'print', '(', 'result', ')', 'x', '=', 'np', '.', 'arange', '(', '9', ')', '.', 'reshape', '(', '3', ',', '3', ')', 'y', '=', 'np', '.', 'arange', '(', '3', ',', '12', ')', '.', 'reshape', '(', '3', ',', '3', ')', 'print', '(', '""Original Higher dimension:""', ')', 'print', '(', 'x', ')', 'print', '(', 'y', ')', 'result', '=', 'np', '.', 'kron', '(', 'x', ',', 'y', ')', 'print', '(', '""Kronecker product  of the said arrays:""', ')', 'print', '(', 'result', ')']"
1456,"['write', 'python', 'program', 'sort', 'given', 'list', 'stringsnumbers', 'numerically']","['def', 'sort_numeric_strings', '(', 'nums_str', ')', ':', 'result', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'nums_str', ']', 'result', '.', 'sort', '(', ')', 'return', 'result', 'nums_str', '=', '[', ""'4'"", ',', ""'12'"", ',', ""'45'"", ',', ""'7'"", ',', ""'0'"", ',', ""'100'"", ',', ""'200'"", ',', ""'-12'"", ',', ""'-500'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums_str', ')', 'print', '(', '""\\nSort the said list of strings(numbers) numerically:""', ')', 'print', '(', 'sort_numeric_strings', '(', 'nums_str', ')', ')']"
1457,"['write', 'python', 'program', 'compute', 'difference', 'two', 'list']","['from', 'collections', 'import', 'Counter', 'color1', '=', '[', '""red""', ',', '""orange""', ',', '""green""', ',', '""blue""', ',', '""white""', ']', 'color2', '=', '[', '""black""', ',', '""yellow""', ',', '""green""', ',', '""blue""', ']', 'counter1', '=', 'Counter', '(', 'color1', ')', 'counter2', '=', 'Counter', '(', 'color2', ')', 'print', '(', '""Color1-Color2: ""', ',', 'list', '(', 'counter1', '-', 'counter2', ')', ')', 'print', '(', '""Color2-Color1: ""', ',', 'list', '(', 'counter2', '-', 'counter1', ')', ')']"
1458,"['write', 'numpy', 'program', 'replace', 'number', 'given', 'array', 'equal', 'le', 'greater', 'given', 'number']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '[', '5.54', ',', '3.38', ',', '7.99', ']', ',', '[', '3.54', ',', '8.32', ',', '6.99', ']', ',', '[', '1.54', ',', '2.39', ',', '9.29', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'nums', ')', 'n', '=', '8.32', 'r', '=', '18.32', 'print', '(', '""\\nReplace elements of the said array which are equal to ""', ',', 'n', ',', '""with""', ',', 'r', ')', 'print', '(', 'np', '.', 'where', '(', 'nums', '==', 'n', ',', 'r', ',', 'nums', ')', ')', 'print', '(', '""\\nReplace elements with of the said array which are less than""', ',', 'n', ',', '""with""', ',', 'r', ')', 'print', '(', 'np', '.', 'where', '(', 'nums', '<', 'n', ',', 'r', ',', 'nums', ')', ')', 'print', '(', '""\\nReplace elements with of the said array which are greater than""', ',', 'n', ',', '""with""', ',', 'r', ')', 'print', '(', 'np', '.', 'where', '(', 'nums', '>', 'n', ',', 'r', ',', 'nums', ')', ')']"
1459,"['write', 'python', 'program', 'split', 'value', 'two', 'group', 'based', 'result', 'given', 'filtering', 'function']","['def', 'bifurcate_by', '(', 'lst', ',', 'fn', ')', ':', 'return', '[', '[', 'x', 'for', 'x', 'in', 'lst', 'if', 'fn', '(', 'x', ')', ']', ',', '[', 'x', 'for', 'x', 'in', 'lst', 'if', 'not', 'fn', '(', 'x', ')', ']', ']', 'print', '(', 'bifurcate_by', '(', '[', ""'red'"", ',', ""'green'"", ',', ""'black'"", ',', ""'white'"", ']', ',', 'lambda', 'x', ':', 'x', '[', '0', ']', '==', ""'w'"", ')', ')']"
1460,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'check', 'missing', 'value', 'child']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'df', '.', 'loc', '[', 'df', '[', ""'who'"", ']', '==', ""'child'"", ']', '.', 'isnull', '(', ')', '.', 'sum', '(', ')', 'print', '(', 'result', ')']"
1461,"['write', 'python', 'program', 'sort', 'list', 'nested', 'dictionary']","['my_list', '=', '[', '{', ""'key'"", ':', '{', ""'subkey'"", ':', '1', '}', '}', ',', '{', ""'key'"", ':', '{', ""'subkey'"", ':', '10', '}', '}', ',', '{', ""'key'"", ':', '{', ""'subkey'"", ':', '5', '}', '}', ']', 'print', '(', '""Original List: ""', ')', 'print', '(', 'my_list', ')', 'my_list', '.', 'sort', '(', 'key', '=', 'lambda', 'e', ':', 'e', '[', ""'key'"", ']', '[', ""'subkey'"", ']', ',', 'reverse', '=', 'True', ')', 'print', '(', '""Sorted List: ""', ')', 'print', '(', 'my_list', ')']"
1462,"['write', 'numpy', 'program', 'get', 'unique', 'element', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '10', ',', '10', ',', '20', ',', '20', ',', '30', ',', '30', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Unique elements of the above array:""', ')', 'print', '(', 'np', '.', 'unique', '(', 'x', ')', ')', 'x', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '1', ']', ',', '[', '2', ',', '3', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Unique elements of the above array:""', ')', 'print', '(', 'np', '.', 'unique', '(', 'x', ')', ')']"
1463,"['write', 'python', 'program', 'extract', 'specified', 'column', 'given', 'nested', 'list']","['def', 'remove_column', '(', 'nums', ',', 'n', ')', ':', 'result', '=', '[', 'i', '.', 'pop', '(', 'n', ')', 'for', 'i', 'in', 'nums', ']', 'return', 'result', 'list1', '=', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '2', ',', '4', ',', '5', ']', ',', '[', '1', ',', '1', ',', '1', ']', ']', 'n', '=', '0', 'print', '(', '""Original Nested list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""Extract 1st column:""', ')', 'print', '(', 'remove_column', '(', 'list1', ',', 'n', ')', ')', 'list2', '=', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '-', '2', ',', '4', ',', '-', '5', ']', ',', '[', '1', ',', '-', '1', ',', '1', ']', ']', 'n', '=', '2', 'print', '(', '""\\nOriginal Nested list:""', ')', 'print', '(', 'list2', ')', 'print', '(', '""Extract 3rd column:""', ')', 'print', '(', 'remove_column', '(', 'list2', ',', 'n', ')', ')']"
1464,"['write', 'python', 'program', 'print', 'following', 'floating', 'number', 'decimal', 'place']","['x', '=', '3.1415926', 'y', '=', '-', '12.9999', 'print', '(', '""\\nOriginal Number: ""', ',', 'x', ')', 'print', '(', '""Formatted Number with no decimal places: ""', '+', '""{:.0f}""', '.', 'format', '(', 'x', ')', ')', ';', 'print', '(', '""Original Number: ""', ',', 'y', ')', 'print', '(', '""Formatted Number with no decimal places: ""', '+', '""{:.0f}""', '.', 'format', '(', 'y', ')', ')', ';', 'print', '(', ')']"
1465,"['write', 'python', 'program', 'get', 'key', 'value', 'item', 'dictionary']","['dict_num', '=', '{', '1', ':', '10', ',', '2', ':', '20', ',', '3', ':', '30', ',', '4', ':', '40', ',', '5', ':', '50', ',', '6', ':', '60', '}', 'print', '(', '""key  value  count""', ')', 'for', 'count', ',', '(', 'key', ',', 'value', ')', 'in', 'enumerate', '(', 'dict_num', '.', 'items', '(', ')', ',', '1', ')', ':', 'print', '(', 'key', ',', ""'   '"", ',', 'value', ',', ""'    '"", ',', 'count', ')']"
1466,"['write', 'numpy', 'program', 'create', 'array', 'value', 'ranging']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '12', ',', '38', ')', 'print', '(', 'x', ')']"
1467,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'separate', 'gender', 'according', 'whether', 'traveled', 'alone', 'get', 'probability', 'survival']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_csv', '(', ""'titanic.csv'"", ')', 'result', '=', 'df', '.', 'pivot_table', '(', ""'survived'"", ',', '[', ""'sex'"", ',', ""'alone'"", ']', ',', ""'class'"", ')', 'print', '(', 'result', ')']"
1468,"['write', 'python', 'program', 'convert', 'given', 'list', 'string', 'list', 'list', 'using', 'map', 'function']","['def', 'strings_to_listOflists', '(', 'str', ')', ':', 'result', '=', 'map', '(', 'list', ',', 'str', ')', 'return', 'list', '(', 'result', ')', 'colors', '=', '[', '""Red""', ',', '""Green""', ',', '""Black""', ',', '""Orange""', ']', 'print', '(', ""'Original list of strings:'"", ')', 'print', '(', 'colors', ')', 'print', '(', '""\\nConvert the said list of strings into list of lists:""', ')', 'print', '(', 'strings_to_listOflists', '(', 'colors', ')', ')']"
1469,"['write', 'python', 'program', 'get', 'single', 'string', 'two', 'given', 'string', 'separated', 'space', 'swap', 'first', 'two', 'character', 'string']","['def', 'chars_mix_up', '(', 'a', ',', 'b', ')', ':', 'new_a', '=', 'b', '[', ':', '2', ']', '+', 'a', '[', '2', ':', ']', 'new_b', '=', 'a', '[', ':', '2', ']', '+', 'b', '[', '2', ':', ']', 'return', 'new_a', '+', ""' '"", '+', 'new_b', 'print', '(', 'chars_mix_up', '(', ""'abc'"", ',', ""'xyz'"", ')', ')']"
1470,"['write', 'panda', 'program', 'get', 'day', 'month', 'day', 'year', 'week', 'number', 'day', 'week', 'given', 'series', 'date', 'string']","['import', 'pandas', 'as', 'pd', 'from', 'dateutil', '.', 'parser', 'import', 'parse', 'date_series', '=', 'pd', '.', 'Series', '(', '[', ""'01 Jan 2015'"", ',', ""'10-02-2016'"", ',', ""'20180307'"", ',', ""'2014/05/06'"", ',', ""'2016-04-12'"", ',', ""'2019-04-06T11:20'"", ']', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'date_series', ')', 'date_series', '=', 'date_series', '.', 'map', '(', 'lambda', 'x', ':', 'parse', '(', 'x', ')', ')', 'print', '(', '""Day of month:""', ')', 'print', '(', 'date_series', '.', 'dt', '.', 'day', '.', 'tolist', '(', ')', ')', 'print', '(', '""Day of year:""', ')', 'print', '(', 'date_series', '.', 'dt', '.', 'dayofyear', '.', 'tolist', '(', ')', ')', 'print', '(', '""Week number:""', ')', 'print', '(', 'date_series', '.', 'dt', '.', 'weekofyear', '.', 'tolist', '(', ')', ')', 'print', '(', '""Day of week:""', ')', 'print', '(', 'date_series', '.', 'dt', '.', 'weekday_name', '.', 'tolist', '(', ')', ')']"
1471,"['write', 'python', 'program', 'sort', 'given', 'collection', 'number', 'length', 'ascending', 'order', 'using', 'recursive', 'insertion', 'sort']",[]
1472,"['write', 'numpy', 'program', 'create', 'array', 'filled', 'student', 'information', 'id', 'class', 'name', 'shuffle', 'said', 'array', 'row', 'starting']","['import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '42', ')', 'student', '=', 'np', '.', 'array', '(', '[', '[', ""'stident_id'"", ',', ""'Class'"", ',', ""'Name'"", ']', ',', '[', ""'01'"", ',', ""'V'"", ',', ""'Debby Pramod'"", ']', ',', '[', ""'02'"", ',', ""'V'"", ',', ""'Artemiy Ellie'"", ']', ',', '[', ""'03'"", ',', ""'V'"", ',', ""'Baptist Kamal'"", ']', ',', '[', ""'04'"", ',', ""'V'"", ',', ""'Lavanya Davide'"", ']', ',', '[', ""'05'"", ',', ""'V'"", ',', ""'Fulton Antwan'"", ']', ',', '[', ""'06'"", ',', ""'V'"", ',', ""'Euanthe Sandeep'"", ']', ',', '[', ""'07'"", ',', ""'V'"", ',', ""'Endzela Sanda'"", ']', ',', '[', ""'08'"", ',', ""'V'"", ',', ""'Victoire Waman'"", ']', ',', '[', ""'09'"", ',', ""'V'"", ',', ""'Briar Nur'"", ']', ',', '[', ""'10'"", ',', ""'V'"", ',', ""'Rose Lykos'"", ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'student', ')', 'np', '.', 'random', '.', 'shuffle', '(', 'student', '[', '2', ':', '8', ']', ')', 'print', '(', '""Shuffle the said array rows starting from 3rd to 9th""', ')', 'print', '(', 'student', ')']"
1473,"['write', 'panda', 'program', 'get', 'sighting', 'year', 'unidentified', 'flying', 'object', 'ufo', 'create', 'year', 'column']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'print', '(', '""Original Dataframe:""', ')', 'print', '(', 'df', '.', 'head', '(', ')', ')', 'print', '(', '""\\nSighting years of the unidentified flying object:""', ')', 'df', '[', '""Year""', ']', '=', 'df', '.', 'Date_time', '.', 'dt', '.', 'year', 'print', '(', 'df', '.', 'head', '(', '10', ')', ')']"
1474,"['write', 'python', 'program', 'remove', 'key', 'dictionary']","['myDict', '=', '{', ""'a'"", ':', '1', ',', ""'b'"", ':', '2', ',', ""'c'"", ':', '3', ',', ""'d'"", ':', '4', '}', 'print', '(', 'myDict', ')', 'if', ""'a'"", 'in', 'myDict', ':', 'del', 'myDict', '[', ""'a'"", ']', 'print', '(', 'myDict', ')']"
1475,"['write', 'python', 'program', 'find', 'occurrence', 'common', 'word', 'given', 'text']","['from', 'collections', 'import', 'Counter', 'import', 're', 'text', '=', '""""""The Python Software Foundation (PSF) is a 501(c)(3) non-profit \rcorporation that holds the intellectual property rights behind\rthe Python programming language. We manage the open source licensing \rfor Python version 2.1 and later and own and protect the trademarks \rassociated with Python. We also run the North American PyCon conference \rannually, support other Python conferences around the world, and \rfund Python related development with our grants program and by funding \rspecial projects.""""""', 'words', '=', 're', '.', 'findall', '(', ""'\\w+'"", ',', 'text', ')', 'print', '(', 'Counter', '(', 'words', ')', '.', 'most_common', '(', '10', ')', ')']"
1476,"['write', 'python', 'function', 'get', 'city', 'state', 'country', 'name', 'specified', 'latitude', 'longitude', 'using', 'nominatim', 'api', 'geopy', 'package']","['from', 'geopy', '.', 'geocoders', 'import', 'Nominatim', 'geolocator', '=', 'Nominatim', '(', 'user_agent', '=', '""geoapiExercises""', ')', 'def', 'city_state_country', '(', 'coord', ')', ':', 'location', '=', 'geolocator', '.', 'reverse', '(', 'coord', ',', 'exactly_one', '=', 'True', ')', 'address', '=', 'location', '.', 'raw', '[', ""'address'"", ']', 'city', '=', 'address', '.', 'get', '(', ""'city'"", ',', ""''"", ')', 'state', '=', 'address', '.', 'get', '(', ""'state'"", ',', ""''"", ')', 'country', '=', 'address', '.', 'get', '(', ""'country'"", ',', ""''"", ')', 'return', 'city', ',', 'state', ',', 'country', 'print', '(', 'city_state_country', '(', '""47.470706, -99.704723""', ')', ')']"
1477,"['write', 'panda', 'program', 'create', 'period', 'index', 'represent', 'monthly', 'boundary', 'given', 'year', 'also', 'print', 'start', 'end', 'time', 'period', 'object', 'said', 'index']","['import', 'pandas', 'as', 'pd', 'import', 'datetime', 'from', 'datetime', 'import', 'datetime', ',', 'date', 'sdt', '=', 'datetime', '(', '2020', ',', '1', ',', '1', ')', 'edt', '=', 'datetime', '(', '2020', ',', '12', ',', '31', ')', 'dateset', '=', 'pd', '.', 'period_range', '(', 'sdt', ',', 'edt', ',', 'freq', '=', ""'M'"", ')', 'print', '(', '""All monthly boundaries of a given year:""', ')', 'print', '(', 'dateset', ')', 'print', '(', '""\\nStart and end time for each period object in the said index:""', ')', 'for', 'd', 'in', 'dateset', ':', 'print', '(', '""{0} {1}""', '.', 'format', '(', 'd', '.', 'start_time', ',', 'd', '.', 'end_time', ')', ')']"
1478,"['write', 'python', 'program', 'create', 'new', 'list', 'taking', 'specific', 'element', 'tuple', 'convert', 'string', 'value', 'integer']","['student_data', '=', '[', '(', ""'Alberto Franco'"", ',', ""'15/05/2002'"", ',', ""'35kg'"", ')', ',', '(', ""'Gino Mcneill'"", ',', ""'17/05/2002'"", ',', ""'37kg'"", ')', ',', '(', ""'Ryan Parkes'"", ',', ""'16/02/1999'"", ',', ""'39kg'"", ')', ',', '(', ""'Eesha Hinton'"", ',', ""'25/09/1998'"", ',', ""'35kg'"", ')', ']', 'print', '(', '""Original data:""', ')', 'print', '(', 'student_data', ')', 'students_data_name', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '[', '0', ']', ',', 'student_data', ')', ')', 'students_data_dob', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '[', '1', ']', ',', 'student_data', ')', ')', 'students_data_weight', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'int', '(', 'x', '[', '2', ']', '[', ':', '-', '2', ']', ')', ',', 'student_data', ')', ')', 'print', '(', '""\\nStudent name:""', ')', 'print', '(', 'students_data_name', ')', 'print', '(', '""Student name:""', ')', 'print', '(', 'students_data_dob', ')', 'print', '(', '""Student weight:""', ')', 'print', '(', 'students_data_weight', ')']"
1479,"['write', 'python', 'program', 'create', 'floatingpoint', 'representation', 'arrow', 'object', 'utc', 'time', 'using', 'arrow', 'module']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current Datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\nFloating-point representation of the said Arrow object:""', ')', 'f', '=', 'arrow', '.', 'utcnow', '(', ')', '.', 'float_timestamp', 'print', '(', 'f', ')']"
1480,"['write', 'numpy', 'program', 'compute', 'line', 'graph', 'set', 'data']","['import', 'numpy', 'as', 'np', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'arr', '=', 'np', '.', 'random', '.', 'randint', '(', '1', ',', '50', ',', '10', ')', 'y', ',', 'x', '=', 'np', '.', 'histogram', '(', 'arr', ',', 'bins', '=', 'np', '.', 'arange', '(', '51', ')', ')', 'fig', ',', 'ax', '=', 'plt', '.', 'subplots', '(', ')', 'ax', '.', 'plot', '(', 'x', '[', ':', '-', '1', ']', ',', 'y', ')', 'fig', '.', 'show', '(', ')']"
1481,"['write', 'python', 'program', 'remove', 'lowercase', 'substring', 'given', 'string']","['import', 're', 'str1', '=', ""'KDeoALOklOOHserfLoAJSIskdsf'"", 'print', '(', '""Original string:""', ')', 'print', '(', 'str1', ')', 'print', '(', '""After removing lowercase letters, above string becomes:""', ')', 'remove_lower', '=', 'lambda', 'text', ':', 're', '.', 'sub', '(', ""'[a-z]'"", ',', ""''"", ',', 'text', ')', 'result', '=', 'remove_lower', '(', 'str1', ')', 'print', '(', 'result', ')']"
1482,"['write', 'python', 'program', 'count', 'occurrence', 'substring', 'string']","['str1', '=', ""'The quick brown fox jumps over the lazy dog.'"", 'print', '(', ')', 'print', '(', 'str1', '.', 'count', '(', '""fox""', ')', ')', 'print', '(', ')']"
1483,"['write', 'python', 'program', 'read', 'row', 'given', 'csv', 'file', 'skip', 'header', 'file', 'also', 'print', 'number', 'row', 'field', 'name']","['import', 'csv', 'fields', '=', '[', ']', 'rows', '=', '[', ']', 'with', 'open', '(', ""'departments.csv'"", ',', 'newline', '=', ""''"", ')', 'as', 'csvfile', ':', 'data', '=', 'csv', '.', 'reader', '(', 'csvfile', ',', 'delimiter', '=', ""' '"", ',', 'quotechar', '=', ""','"", ')', 'fields', '=', 'next', '(', 'data', ')', 'for', 'row', 'in', 'data', ':', 'print', '(', ""', '"", '.', 'join', '(', 'row', ')', ')', 'print', '(', '""\\nTotal no. of rows: %d""', '%', '(', 'data', '.', 'line_num', ')', ')', 'print', '(', ""'Field names are:'"", ')', 'print', '(', ""', '"", '.', 'join', '(', 'field', 'for', 'field', 'in', 'fields', ')', ')']"
1484,"['write', 'panda', 'program', 'set', 'value', 'specific', 'cell', 'given', 'dataframe', 'using', 'index']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_of_birth'"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', '}', ',', 'index', '=', '[', ""'t1'"", ',', ""'t2'"", ',', ""'t3'"", ',', ""'t4'"", ',', ""'t5'"", ',', ""'t6'"", ']', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nSet school code \'s004\' to \'s005\':""', ')', 'df', '.', 'at', '[', ""'t6'"", ',', ""'school_code'"", ']', '=', ""'s005'"", 'print', '(', 'df', ')', 'print', '(', '""\\nSet date_of_birth of \'Alberto Franco\' to \'16/05/2002\':""', ')', 'df', '.', 'at', '[', ""'t1'"", ',', ""'date_of_birth'"", ']', '=', ""'16/05/2002'"", 'print', '(', 'df', ')']"
1485,"['write', 'python', 'program', 'check', 'whether', 'page', 'contains', 'title']","['from', 'urllib', '.', 'request', 'import', 'urlopen', 'from', 'bs4', 'import', 'BeautifulSoup', 'html', '=', 'urlopen', '(', ""'https://www.wikipedia.org/'"", ')', 'bs', '=', 'BeautifulSoup', '(', 'html', ',', '""html.parser""', ')', 'nameList', '=', 'bs', '.', 'findAll', '(', ""'a'"", ',', '{', ""'class'"", ':', ""'link-box'"", '}', ')', 'for', 'name', 'in', 'nameList', ':', 'print', '(', 'name', '.', 'get_text', '(', ')', ')']"
1486,"['write', 'panda', 'program', 'generate', 'sequence', 'fixedfrequency', 'date', 'time', 'span']","['import', 'pandas', 'as', 'pd', 'dtr', '=', 'pd', '.', 'date_range', '(', ""'2018-01-01'"", ',', 'periods', '=', '12', ',', 'freq', '=', ""'H'"", ')', 'print', '(', '""Hourly frequency:""', ')', 'print', '(', 'dtr', ')', 'dtr', '=', 'pd', '.', 'date_range', '(', ""'2018-01-01'"", ',', 'periods', '=', '12', ',', 'freq', '=', ""'min'"", ')', 'print', '(', '""\\nMinutely frequency:""', ')', 'print', '(', 'dtr', ')', 'dtr', '=', 'pd', '.', 'date_range', '(', ""'2018-01-01'"", ',', 'periods', '=', '12', ',', 'freq', '=', ""'S'"", ')', 'print', '(', '""\\nSecondly frequency:""', ')', 'print', '(', 'dtr', ')', 'dtr', '=', 'pd', '.', 'date_range', '(', ""'2018-01-01'"", ',', 'periods', '=', '12', ',', 'freq', '=', ""'2H'"", ')', 'print', '(', '""nMultiple Hourly frequency:""', ')', 'print', '(', 'dtr', ')', 'dtr', '=', 'pd', '.', 'date_range', '(', ""'2018-01-01'"", ',', 'periods', '=', '12', ',', 'freq', '=', ""'5min'"", ')', 'print', '(', '""\\nMultiple Minutely frequency:""', ')', 'print', '(', 'dtr', ')', 'dtr', '=', 'pd', '.', 'date_range', '(', ""'2018-01-01'"", ',', 'periods', '=', '12', ',', 'freq', '=', ""'BQ'"", ')', 'print', '(', '""\\nMultiple Secondly frequency:""', ')', 'print', '(', 'dtr', ')', 'dtr', '=', 'pd', '.', 'date_range', '(', ""'2018-01-01'"", ',', 'periods', '=', '12', ',', 'freq', '=', ""'w'"", ')', 'print', '(', '""\\nWeekly frequency:""', ')', 'print', '(', 'dtr', ')', 'dtr', '=', 'pd', '.', 'date_range', '(', ""'2018-01-01'"", ',', 'periods', '=', '12', ',', 'freq', '=', ""'2h20min'"", ')', 'print', '(', '""\\nCombine together day and intraday offsets-1:""', ')', 'print', '(', 'dtr', ')', 'dtr', '=', 'pd', '.', 'date_range', '(', ""'2018-01-01'"", ',', 'periods', '=', '12', ',', 'freq', '=', ""'1D10U'"", ')', 'print', '(', '""\\nCombine together day and intraday offsets-2:""', ')', 'print', '(', 'dtr', ')']"
1487,"['write', 'python', 'program', 'sum', 'count', 'collection']","['import', 'collections', 'num', '=', '[', '2', ',', '2', ',', '4', ',', '6', ',', '6', ',', '8', ',', '6', ',', '10', ',', '4', ']', 'print', '(', 'sum', '(', 'collections', '.', 'Counter', '(', 'num', ')', '.', 'values', '(', ')', ')', ')']"
1488,"['write', 'python', 'program', 'find', 'index', 'given', 'string', 'given', 'substring', 'start', 'substring', 'found', 'given', 'string', 'return', 'found']","['def', 'find_Index', '(', 'str1', ',', 'pos', ')', ':', 'if', 'len', '(', 'pos', ')', '>', 'len', '(', 'str1', ')', ':', 'return', ""'Not found'"", 'for', 'i', 'in', 'range', '(', 'len', '(', 'str1', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'pos', ')', ')', ':', 'if', 'str1', '[', 'i', '+', 'j', ']', '==', 'pos', '[', 'j', ']', 'and', 'j', '==', 'len', '(', 'pos', ')', '-', '1', ':', 'return', 'i', 'elif', 'str1', '[', 'i', '+', 'j', ']', '!=', 'pos', '[', 'j', ']', ':', 'break', 'return', ""'Not found'"", 'print', '(', 'find_Index', '(', '""Python Exercises""', ',', '""Ex""', ')', ')', 'print', '(', 'find_Index', '(', '""Python Exercises""', ',', '""yt""', ')', ')', 'print', '(', 'find_Index', '(', '""Python Exercises""', ',', '""PY""', ')', ')']"
1489,"['write', 'panda', 'program', 'import', 'three', 'datasheets', 'given', 'excel', 'data', 'employeexlsx', 'single', 'dataframe', 'export', 'result', 'new', 'excel', 'file']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df1', '=', 'pd', '.', 'read_excel', '(', ""'E:\\employee.xlsx'"", ',', 'sheet_name', '=', '0', ')', 'df2', '=', 'pd', '.', 'read_excel', '(', ""'E:\\employee.xlsx'"", ',', 'sheet_name', '=', '1', ')', 'df3', '=', 'pd', '.', 'read_excel', '(', ""'E:\\employee.xlsx'"", ',', 'sheet_name', '=', '2', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df1', ',', 'df2', ',', 'df3', ']', ')', 'df', '.', 'to_excel', '(', ""'e:\\output.xlsx'"", ',', 'index', '=', 'False', ')']"
1490,"['write', 'python', 'program', 'accept', 'name', 'given', 'subject', 'mark', 'input', 'number', 'subject', 'first', 'line', 'subject', 'namemarks', 'separated', 'space', 'next', 'line', 'print', 'subject', 'name', 'mark', 'order', 'first', 'occurrence']","['import', 'collections', ',', 're', 'n', '=', 'int', '(', 'input', '(', '""Number of subjects: ""', ')', ')', 'item_order', '=', 'collections', '.', 'OrderedDict', '(', ')', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'sub_marks_list', '=', 're', '.', 'split', '(', ""r'(\\d+)$'"", ',', 'input', '(', '""Input Subject name and marks: ""', ')', '.', 'strip', '(', ')', ')', 'subject_name', '=', 'sub_marks_list', '[', '0', ']', 'item_price', '=', 'int', '(', 'sub_marks_list', '[', '1', ']', ')', 'if', 'subject_name', 'not', 'in', 'item_order', ':', 'item_order', '[', 'subject_name', ']', '=', 'item_price', 'else', ':', 'item_order', '[', 'subject_name', ']', '=', 'item_order', '[', 'subject_name', ']', '+', 'item_price', 'for', 'i', 'in', 'item_order', ':', 'print', '(', 'i', '+', 'str', '(', 'item_order', '[', 'i', ']', ')', ')']"
1491,"['write', 'python', 'program', 'count', 'number', 'string', 'string', 'length', 'first', 'last', 'character', 'given', 'list', 'string']","['def', 'match_words', '(', 'words', ')', ':', 'ctr', '=', '0', 'for', 'word', 'in', 'words', ':', 'if', 'len', '(', 'word', ')', '>', '1', 'and', 'word', '[', '0', ']', '==', 'word', '[', '-', '1', ']', ':', 'ctr', '+=', '1', 'return', 'ctr', 'print', '(', 'match_words', '(', '[', ""'abc'"", ',', ""'xyz'"", ',', ""'aba'"", ',', ""'1221'"", ']', ')', ')']"
1492,"['write', 'panda', 'program', 'find', 'position', 'value', 'neighboured', 'smaller', 'value', 'side', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'nums', '=', 'pd', '.', 'Series', '(', '[', '1', ',', '8', ',', '7', ',', '5', ',', '6', ',', '5', ',', '3', ',', '4', ',', '7', ',', '1', ']', ')', 'print', '(', '""Original series:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nPositions of the values surrounded by smaller values on both sides:""', ')', 'temp', '=', 'np', '.', 'diff', '(', 'np', '.', 'sign', '(', 'np', '.', 'diff', '(', 'nums', ')', ')', ')', 'result', '=', 'np', '.', 'where', '(', 'temp', '==', '-', '2', ')', '[', '0', ']', '+', '1', 'print', '(', 'result', ')']"
1493,"['write', 'python', 'program', 'print', 'following', 'integer', 'right', 'specified', 'width']","['x', '=', '3', 'y', '=', '123', 'print', '(', '""\\nOriginal Number: ""', ',', 'x', ')', 'print', '(', '""Formatted Number(right padding, width 2): ""', '+', '""{:*< 3d}""', '.', 'format', '(', 'x', ')', ')', ';', 'print', '(', '""Original Number: ""', ',', 'y', ')', 'print', '(', '""Formatted Number(right padding, width 6): ""', '+', '""{:*< 7d}""', '.', 'format', '(', 'y', ')', ')', ';', 'print', '(', ')']"
1494,"['write', 'numpy', 'program', 'convert', 'array', 'float', 'type']","['import', 'numpy', 'as', 'np', 'import', 'numpy', 'as', 'np', 'a', '=', '[', '1', ',', '2', ',', '3', ',', '4', ']', 'print', '(', '""Original array""', ')', 'print', '(', 'a', ')', 'x', '=', 'np', '.', 'asfarray', '(', 'a', ')', 'print', '(', '""Array converted to a float type:""', ')', 'print', '(', 'x', ')']"
1495,"['write', 'python', 'program', 'count', 'pair', 'two', 'given', 'list', 'use', 'map', 'function']","['from', 'operator', 'import', 'eq', 'def', 'count_same_pair', '(', 'nums1', ',', 'nums2', ')', ':', 'result', '=', 'sum', '(', 'map', '(', 'eq', ',', 'nums1', ',', 'nums2', ')', ')', 'return', 'result', 'nums1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', 'nums2', '=', '[', '2', ',', '2', ',', '3', ',', '1', ',', '2', ',', '6', ',', '7', ',', '9', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nNumber of same pair of the said two given lists:""', ')', 'print', '(', 'count_same_pair', '(', 'nums1', ',', 'nums2', ')', ')']"
1496,"['write', 'python', 'program', 'find', 'unique', 'triplet', 'whose', 'three', 'element', 'give', 'sum', 'zero', 'array', 'n', 'integer']","['def', 'three_sum', '(', 'nums', ')', ':', 'result', '=', '[', ']', 'nums', '.', 'sort', '(', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'nums', ')', '-', '2', ')', ':', 'if', 'i', '>', '0', 'and', 'nums', '[', 'i', ']', '==', 'nums', '[', 'i', '-', '1', ']', ':', 'continue', 'l', ',', 'r', '=', 'i', '+', '1', ',', 'len', '(', 'nums', ')', '-', '1', 'while', 'l', '<', 'r', ':', 's', '=', 'nums', '[', 'i', ']', '+', 'nums', '[', 'l', ']', '+', 'nums', '[', 'r', ']', 'if', 's', '>', '0', ':', 'r', '-=', '1', 'elif', 's', '<', '0', ':', 'l', '+=', '1', 'else', ':', 'result', '.', 'append', '(', '(', 'nums', '[', 'i', ']', ',', 'nums', '[', 'l', ']', ',', 'nums', '[', 'r', ']', ')', ')', 'while', 'l', '<', 'r', 'and', 'nums', '[', 'l', ']', '==', 'nums', '[', 'l', '+', '1', ']', ':', 'l', '+=', '1', 'while', 'l', '<', 'r', 'and', 'nums', '[', 'r', ']', '==', 'nums', '[', 'r', '-', '1', ']', ':', 'r', '-=', '1', 'l', '+=', '1', 'r', '-=', '1', 'return', 'result', 'x', '=', '[', '1', ',', '-', '6', ',', '4', ',', '2', ',', '-', '1', ',', '2', ',', '0', ',', '-', '2', ',', '0', ']', 'print', '(', 'three_sum', '(', 'x', ')', ')']"
1497,"['write', 'python', 'program', 'write', 'without', 'writing', 'separate', 'line', 'row', 'read', 'csv', 'file', 'specified', 'delimiter', 'use', 'csvreader']","['import', 'csv', 'fw', '=', 'open', '(', '""test.csv""', ',', '""w""', ',', 'newline', '=', ""''"", ')', 'writer', '=', 'csv', '.', 'writer', '(', 'fw', ',', 'delimiter', '=', '"",""', ')', 'writer', '.', 'writerow', '(', '[', '""a""', ',', '""b""', ',', '""c""', ']', ')', 'writer', '.', 'writerow', '(', '[', '""d""', ',', '""e""', ',', '""f""', ']', ')', 'writer', '.', 'writerow', '(', '[', '""g""', ',', '""h""', ',', '""i""', ']', ')', 'fw', '.', 'close', '(', ')', 'fr', '=', 'open', '(', '""test.csv""', ',', '""r""', ')', 'csv', '=', 'csv', '.', 'reader', '(', 'fr', ',', 'delimiter', '=', '"",""', ')', 'for', 'row', 'in', 'csv', ':', 'print', '(', 'row', ')', 'fr', '.', 'close', '(', ')']"
1498,"['write', 'python', 'program', 'make', 'iterator', 'drop', 'element', 'iterable', 'long', 'element', 'negative', 'afterwards', 'return', 'every', 'element']","['import', 'itertools', 'as', 'it', 'def', 'drop_while', '(', 'nums', ')', ':', 'return', 'it', '.', 'takewhile', '(', 'lambda', 'x', ':', 'x', '<', '0', ',', 'nums', ')', 'nums', '=', '[', '-', '1', ',', '-', '2', ',', '-', '3', ',', '4', ',', '-', '10', ',', '2', ',', '0', ',', '5', ',', '12', ']', 'print', '(', '""Original list: ""', ',', 'nums', ')', 'result', '=', 'drop_while', '(', 'nums', ')', 'print', '(', '""Drop elements from the said list as long as the elements are negative\\n""', ',', 'list', '(', 'result', ')', ')', 'def', 'negative_num', '(', 'x', ')', ':', 'return', 'x', '<', '0', 'def', 'drop_while', '(', 'nums', ')', ':', 'return', 'it', '.', 'dropwhile', '(', 'negative_num', ',', 'nums', ')', 'nums', '=', '[', '-', '1', ',', '-', '2', ',', '-', '3', ',', '4', ',', '-', '10', ',', '2', ',', '0', ',', '5', ',', '12', ']', 'print', '(', '""Original list: ""', ',', 'nums', ')', 'result', '=', 'drop_while', '(', 'nums', ')', 'print', '(', '""Drop elements from the said list as long as the elements are negative\\n""', ',', 'list', '(', 'result', ')', ')']"
1499,"['write', 'panda', 'program', 'create', 'hitmap', 'information', 'distribution', 'missing', 'value', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'import', 'seaborn', 'as', 'sns', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', 'np', '.', 'nan', ',', '70002', ',', '70004', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', 'np', '.', 'nan', ',', '65.26', ',', '110.5', ',', '948.5', ',', 'np', '.', 'nan', ',', '5760', ',', '1983.43', ',', 'np', '.', 'nan', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_amt'"", ':', '[', '10.5', ',', '20.65', ',', 'np', '.', 'nan', ',', '11.5', ',', '98.5', ',', 'np', '.', 'nan', ',', '57', ',', '19.43', ',', 'np', '.', 'nan', ',', '25.45', ',', '75.29', ',', '35.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3002', ',', '3001', ',', '3001', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5003', ',', '5001', ',', 'np', '.', 'nan', ',', '5002', ',', '5001', ',', '5001', ',', 'np', '.', 'nan', ',', '5003', ',', '5002', ',', '5003', ',', 'np', '.', 'nan', ']', '}', ')', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '16', ',', '10', ')', ')', 'sns', '.', 'heatmap', '(', 'df', '.', 'isnull', '(', ')', ',', 'cbar', '=', 'False', ',', 'cmap', '=', '""YlGnBu""', ')', 'plt', '.', 'show', '(', ')']"
1500,"['write', 'panda', 'program', 'create', 'combination', 'two', 'dataframes', 'column', 'id', 'combination', 'appears', 'dataframes']","['import', 'pandas', 'as', 'pd', 'data1', '=', 'pd', '.', 'DataFrame', '(', '{', ""'key1'"", ':', '[', ""'K0'"", ',', ""'K0'"", ',', ""'K1'"", ',', ""'K2'"", ']', ',', ""'key2'"", ':', '[', ""'K0'"", ',', ""'K1'"", ',', ""'K0'"", ',', ""'K1'"", ']', ',', ""'P'"", ':', '[', ""'P0'"", ',', ""'P1'"", ',', ""'P2'"", ',', ""'P3'"", ']', ',', ""'Q'"", ':', '[', ""'Q0'"", ',', ""'Q1'"", ',', ""'Q2'"", ',', ""'Q3'"", ']', '}', ')', 'data2', '=', 'pd', '.', 'DataFrame', '(', '{', ""'key1'"", ':', '[', ""'K0'"", ',', ""'K1'"", ',', ""'K1'"", ',', ""'K2'"", ']', ',', ""'key2'"", ':', '[', ""'K0'"", ',', ""'K0'"", ',', ""'K0'"", ',', ""'K0'"", ']', ',', ""'R'"", ':', '[', ""'R0'"", ',', ""'R1'"", ',', ""'R2'"", ',', ""'R3'"", ']', ',', ""'S'"", ':', '[', ""'S0'"", ',', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ']', '}', ')', 'print', '(', '""Original DataFrames:""', ')', 'print', '(', 'data1', ')', 'print', '(', '""--------------------""', ')', 'print', '(', 'data2', ')', 'print', '(', '""\\nMerged Data (many-to-many join case):""', ')', 'result', '=', 'pd', '.', 'merge', '(', 'data1', ',', 'data2', ',', 'on', '=', ""'key1'"", ')', 'print', '(', 'result', ')']"
1501,"['write', 'python', 'program', 'create', 'new', 'arrow', 'object', 'representing', 'ceiling', 'timespan', 'arrow', 'object', 'given', 'timeframe', 'using', 'arrow', 'module', 'timeframe', 'datetime', 'property', 'like', 'day', 'hour', 'minute']","['import', 'arrow', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', ')', 'print', '(', '""Hour ceiling:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'ceil', '(', ""'hour'"", ')', ')', 'print', '(', '""\\nMinute ceiling:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'ceil', '(', ""'minute'"", ')', ')', 'print', '(', '""\\nSecond ceiling:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'ceil', '(', ""'second'"", ')', ')']"
1502,"['write', 'python', 'program', 'move', 'space', 'front', 'given', 'string', 'single', 'traversal']","['def', 'moveSpaces', '(', 'str1', ')', ':', 'no_spaces', '=', '[', 'char', 'for', 'char', 'in', 'str1', 'if', 'char', '!=', ""' '"", ']', 'space', '=', 'len', '(', 'str1', ')', '-', 'len', '(', 'no_spaces', ')', 'result', '=', ""' '"", '*', 'space', 'return', 'result', '+', ""''"", '.', 'join', '(', 'no_spaces', ')', 's1', '=', '""Python Exercises""', 'print', '(', '""Original String:\\n""', ',', 's1', ')', 'print', '(', '""\\nAfter moving all spaces to the front:""', ')', 'print', '(', 'moveSpaces', '(', 's1', ')', ')']"
1503,"['write', 'python', 'program', 'check', 'element', 'list', 'included', 'another', 'given', 'list']","['def', 'test_includes_all', '(', 'nums', ',', 'lsts', ')', ':', 'for', 'x', 'in', 'lsts', ':', 'if', 'x', 'not', 'in', 'nums', ':', 'return', 'False', 'return', 'True', 'print', '(', 'test_includes_all', '(', '[', '10', ',', '20', ',', '30', ',', '40', ',', '50', ',', '60', ']', ',', '[', '20', ',', '40', ']', ')', ')', 'print', '(', 'test_includes_all', '(', '[', '10', ',', '20', ',', '30', ',', '40', ',', '50', ',', '60', ']', ',', '[', '20', ',', '80', ']', ')', ')']"
1504,"['write', 'numpy', 'program', 'create', 'identity', 'matrix', 'ie', 'diagonal', 'element', 'rest']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'eye', '(', '3', ')', 'print', '(', 'x', ')']"
1505,"['write', 'python', 'program', 'create', 'grid', 'number']","['nums', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '3', ')', ':', 'nums', '.', 'append', '(', '[', ']', ')', 'for', 'j', 'in', 'range', '(', '1', ',', '4', ')', ':', 'nums', '[', 'i', ']', '.', 'append', '(', 'j', ')', 'print', '(', '""3X3 grid with numbers:""', ')', 'print', '(', 'nums', ')']"
1506,"['write', 'python', 'program', 'sum', 'length', 'name', 'given', 'list', 'name', 'removing', 'name', 'start', 'lowercase', 'letter', 'use', 'lambda', 'function']","['sample_names', '=', '[', ""'sally'"", ',', ""'Dylan'"", ',', ""'rebecca'"", ',', ""'Diana'"", ',', ""'Joanne'"", ',', ""'keith'"", ']', 'sample_names', '=', 'list', '(', 'filter', '(', 'lambda', 'el', ':', 'el', '[', '0', ']', '.', 'isupper', '(', ')', 'and', 'el', '[', '1', ':', ']', '.', 'islower', '(', ')', ',', 'sample_names', ')', ')', 'print', '(', '""Result:""', ')', 'print', '(', 'len', '(', ""''"", '.', 'join', '(', 'sample_names', ')', ')', ')']"
1507,"['write', 'python', 'program', 'extract', 'year', 'month', 'date', 'value', 'current', 'datetime', 'using', 'arrow', 'module']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Year:""', ')', 'print', '(', 'a', '.', 'year', ')', 'print', '(', '""\\nMonth:""', ')', 'print', '(', 'a', '.', 'month', ')', 'print', '(', '""\\nDate:""', ')', 'print', '(', 'a', '.', 'day', ')']"
1508,"['write', 'panda', 'program', 'create', 'histogram', 'plot', 'opening', 'closing', 'high', 'low', 'stock', 'price', 'alphabet', 'inc', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-9-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'df2', '=', 'df1', '[', '[', ""'Open'"", ',', ""'Close'"", ',', ""'High'"", ',', ""'Low'"", ']', ']', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '25', ',', '25', ')', ')', 'df2', '.', 'plot', '.', 'hist', '(', 'alpha', '=', '0.5', ')', 'plt', '.', 'suptitle', '(', ""'Opening/Closing/High/Low stock prices of Alphabet Inc.,\\n From 01-04-2020 to 30-09-2020'"", ',', 'fontsize', '=', '12', ',', 'color', '=', ""'blue'"", ')', 'plt', '.', 'show', '(', ')']"
1509,"['write', 'python', 'program', 'list', 'language', 'name', 'number', 'related', 'article', 'order', 'appear', 'wikipediaorg']","['import', 'requests', 'url', '=', ""'https://analytics.usa.gov/data/live/realtime.json'"", 'j', '=', 'requests', '.', 'get', '(', 'url', ')', '.', 'json', '(', ')', 'print', '(', '""Number of people visiting a U.S. government website-""', ')', 'print', '(', '""Active Users Right Now:""', ')', 'print', '(', 'j', '[', ""'data'"", ']', '[', '0', ']', '[', ""'active_visitors'"", ']', ')']"
1510,"['write', 'numpy', 'program', 'count', 'number', 'dimension', 'number', 'element', 'number', 'byte', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'print', '(', '""\\nOriginal arrays:""', ')', 'x', '=', 'np', '.', 'array', '(', '[', '[', '0', ',', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ',', '11', ']', ',', '[', '12', ',', '13', ',', '14', ',', '15', ',', '16', ',', '17', ',', '18', ',', '19', ',', '20', ',', '21', ',', '22', ',', '23', ']', ']', ')', 'print', '(', 'x', ')', 'print', '(', '""\\nNumber of dimensions:""', ')', 'print', '(', 'x', '.', 'ndim', ')', 'print', '(', '""Number of elements:""', ')', 'print', '(', 'x', '.', 'size', ')', 'print', '(', '""Number of bytes for each element in the said array:""', ')', 'print', '(', 'x', '.', 'itemsize', ')']"
1511,"['write', 'panda', 'program', 'find', 'business', 'quarterly', 'begin', 'end', 'date', 'specified', 'year']","['import', 'pandas', 'as', 'pd', 'q_start_dates', '=', 'pd', '.', 'date_range', '(', ""'2020-01-01'"", ',', ""'2020-12-31'"", ',', 'freq', '=', ""'BQS-JUN'"", ')', 'q_end_dates', '=', 'pd', '.', 'date_range', '(', ""'2020-01-01'"", ',', ""'2020-12-31'"", ',', 'freq', '=', ""'BQ-JUN'"", ')', 'print', '(', '""All the business quarterly begin dates of 2020:""', ')', 'print', '(', 'q_start_dates', '.', 'values', ')', 'print', '(', '""\\nAll the business quarterly end dates of 2020:""', ')', 'print', '(', 'q_end_dates', '.', 'values', ')']"
1512,"['write', 'python', 'program', 'replace', 'dictionary', 'value', 'average']","['def', 'sum_math_v_vi_average', '(', 'list_of_dicts', ')', ':', 'for', 'd', 'in', 'list_of_dicts', ':', 'n1', '=', 'd', '.', 'pop', '(', ""'V'"", ')', 'n2', '=', 'd', '.', 'pop', '(', ""'VI'"", ')', 'd', '[', ""'V+VI'"", ']', '=', '(', 'n1', '+', 'n2', ')', '/', '2', 'return', 'list_of_dicts', 'student_details', '=', '[', '{', ""'id'"", ':', '1', ',', ""'subject'"", ':', ""'math'"", ',', ""'V'"", ':', '70', ',', ""'VI'"", ':', '82', '}', ',', '{', ""'id'"", ':', '2', ',', ""'subject'"", ':', ""'math'"", ',', ""'V'"", ':', '73', ',', ""'VI'"", ':', '74', '}', ',', '{', ""'id'"", ':', '3', ',', ""'subject'"", ':', ""'math'"", ',', ""'V'"", ':', '75', ',', ""'VI'"", ':', '86', '}', ']', 'print', '(', 'sum_math_v_vi_average', '(', 'student_details', ')', ')']"
1513,"['write', 'python', 'program', 'convert', 'string', 'value', 'given', 'dictionary', 'integerfloat', 'datatypes']","['def', 'convert_to_int', '(', 'lst', ')', ':', 'result', '=', '[', 'dict', '(', '[', 'a', ',', 'int', '(', 'x', ')', ']', 'for', 'a', ',', 'x', 'in', 'b', '.', 'items', '(', ')', ')', 'for', 'b', 'in', 'lst', ']', 'return', 'result', 'def', 'convert_to_float', '(', 'lst', ')', ':', 'result', '=', '[', 'dict', '(', '[', 'a', ',', 'float', '(', 'x', ')', ']', 'for', 'a', ',', 'x', 'in', 'b', '.', 'items', '(', ')', ')', 'for', 'b', 'in', 'lst', ']', 'return', 'result', 'nums', '=', '[', '{', ""'x'"", ':', ""'10'"", ',', ""'y'"", ':', ""'20'"", ',', ""'z'"", ':', ""'30'"", '}', ',', '{', ""'p'"", ':', ""'40'"", ',', ""'q'"", ':', ""'50'"", ',', ""'r'"", ':', ""'60'"", '}', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nString values of a given dictionary, into integer types:""', ')', 'print', '(', 'convert_to_int', '(', 'nums', ')', ')', 'nums', '=', '[', '{', ""'x'"", ':', ""'10.12'"", ',', ""'y'"", ':', ""'20.23'"", ',', ""'z'"", ':', ""'30'"", '}', ',', '{', ""'p'"", ':', ""'40.00'"", ',', ""'q'"", ':', ""'50.19'"", ',', ""'r'"", ':', ""'60.99'"", '}', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nString values of a given dictionary, into float types:""', ')', 'print', '(', 'convert_to_float', '(', 'nums', ')', ')']"
1514,"['write', 'python', 'program', 'remove', 'specific', 'word', 'given', 'list']","['def', 'remove_words', '(', 'list1', ',', 'remove_words', ')', ':', 'for', 'word', 'in', 'list', '(', 'list1', ')', ':', 'if', 'word', 'in', 'remove_words', ':', 'list1', '.', 'remove', '(', 'word', ')', 'return', 'list1', 'colors', '=', '[', ""'red'"", ',', ""'green'"", ',', ""'blue'"", ',', ""'white'"", ',', ""'black'"", ',', ""'orange'"", ']', 'remove_colors', '=', '[', ""'white'"", ',', ""'orange'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'colors', ')', 'print', '(', '""\\nRemove words:""', ')', 'print', '(', 'remove_colors', ')', 'print', '(', '""\\nAfter removing the specified words from the said list:""', ')', 'print', '(', 'remove_words', '(', 'colors', ',', 'remove_colors', ')', ')']"
1515,"['write', 'numpy', 'program', 'test', 'equal', 'equal', 'greater', 'equal', 'greater', 'le', 'test', 'element', 'two', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x1', '=', 'np', '.', 'array', '(', '[', ""'Hello'"", ',', ""'PHP'"", ',', ""'JS'"", ',', ""'examples'"", ',', ""'html'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'x2', '=', 'np', '.', 'array', '(', '[', ""'Hello'"", ',', ""'php'"", ',', ""'Java'"", ',', ""'examples'"", ',', ""'html'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""\\nArray1:""', ')', 'print', '(', 'x1', ')', 'print', '(', '""Array2:""', ')', 'print', '(', 'x2', ')', 'print', '(', '""\\nEqual test:""', ')', 'r', '=', 'np', '.', 'char', '.', 'equal', '(', 'x1', ',', 'x2', ')', 'print', '(', 'r', ')', 'print', '(', '""\\nNot equal test:""', ')', 'r', '=', 'np', '.', 'char', '.', 'not_equal', '(', 'x1', ',', 'x2', ')', 'print', '(', 'r', ')', 'print', '(', '""\\nLess equal test:""', ')', 'r', '=', 'np', '.', 'char', '.', 'less_equal', '(', 'x1', ',', 'x2', ')', 'print', '(', 'r', ')', 'print', '(', '""\\nGreater equal test:""', ')', 'r', '=', 'np', '.', 'char', '.', 'greater_equal', '(', 'x1', ',', 'x2', ')', 'print', '(', 'r', ')', 'print', '(', '""\\nLess test:""', ')', 'r', '=', 'np', '.', 'char', '.', 'less', '(', 'x1', ',', 'x2', ')', 'print', '(', 'r', ')']"
1516,"['write', 'python', 'program', 'reverse', 'list', 'given', 'list', 'list']","['def', 'reverse_list_lists', '(', 'nums', ')', ':', 'for', 'l', 'in', 'nums', ':', 'l', '.', 'sort', '(', 'reverse', '=', 'True', ')', 'return', 'nums', 'nums', '=', '[', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', '[', '5', ',', '6', ',', '7', ',', '8', ']', ',', '[', '9', ',', '10', ',', '11', ',', '12', ']', ',', '[', '13', ',', '14', ',', '15', ',', '16', ']', ']', 'print', '(', '""Original list of lists:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nReverse each list in the said list of lists:""', ')', 'print', '(', 'reverse_list_lists', '(', 'nums', ')', ')']"
1517,"['write', 'panda', 'program', 'compute', 'autocorrelations', 'given', 'numeric', 'series']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'num_series', '=', 'pd', '.', 'Series', '(', 'np', '.', 'arange', '(', '15', ')', '+', 'np', '.', 'random', '.', 'normal', '(', '1', ',', '10', ',', '15', ')', ')', 'print', '(', '""Original series:""', ')', 'print', '(', 'num_series', ')', 'autocorrelations', '=', '[', 'num_series', '.', 'autocorr', '(', 'i', ')', '.', 'round', '(', '2', ')', 'for', 'i', 'in', 'range', '(', '11', ')', ']', 'print', '(', '""\\nAutocorrelations of the said series:""', ')', 'print', '(', 'autocorrelations', '[', '1', ':', ']', ')']"
1518,"['write', 'numpy', 'program', 'split', 'element', 'given', 'array', 'multiple', 'line']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', ""'Python\\Exercises, Practice, Solution'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""Original Array:""', ')', 'print', '(', 'x', ')', 'r', '=', 'np', '.', 'char', '.', 'splitlines', '(', 'x', ')', 'print', '(', 'r', ')']"
1519,"['write', 'python', 'program', 'find', 'text', 'first', 'tag', 'given', 'html', 'text']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_doc', '=', '""""""\r<html>\r<head>\r<meta http-equiv=""Content-Type"" content=""text/html;\rcharset=iso-8859-1"">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from w3resource.com</a></p>\r<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from \rw3resource.com</a></p>\r</body>\r</html>\r""""""', 'soup', '=', 'BeautifulSoup', '(', 'html_doc', ',', ""'html.parser'"", ')', 'print', '(', '""Text of the first <a> tag:""', ')', 'print', '(', 'soup', '.', 'find', '(', ""'a'"", ')', '.', 'text', ')']"
1520,"['write', 'python', 'program', 'combine', 'two', 'dictionary', 'adding', 'value', 'common', 'key']","['from', 'collections', 'import', 'Counter', 'd1', '=', '{', ""'a'"", ':', '100', ',', ""'b'"", ':', '200', ',', ""'c'"", ':', '300', '}', 'd2', '=', '{', ""'a'"", ':', '300', ',', ""'b'"", ':', '200', ',', ""'d'"", ':', '400', '}', 'd', '=', 'Counter', '(', 'd1', ')', '+', 'Counter', '(', 'd2', ')', 'print', '(', 'd', ')']"
1521,"['write', 'panda', 'program', 'import', 'excel', 'data', 'employeexlsx', 'panda', 'dataframe', 'sort', 'record', 'column']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\employee.xlsx'"", ')', 'result', '=', 'df', '.', 'sort_values', '(', ""'hire_date'"", ')', 'result']"
1522,"['write', 'numpy', 'program', 'create', 'one', 'dimensional', 'array', 'forty', 'pseudorandomly', 'generated', 'value', 'select', 'random', 'number', 'uniform', 'distribution']","['import', 'numpy', 'as', 'np', 'np', '.', 'random', '.', 'seed', '(', '10', ')', 'print', '(', 'np', '.', 'random', '.', 'rand', '(', '40', ')', ')']"
1523,"['write', 'numpy', 'program', 'convert', 'numpy', 'dtypes', 'native', 'python', 'type']","['import', 'numpy', 'as', 'np', 'print', '(', '""numpy.float32 to python float""', ')', 'x', '=', 'np', '.', 'float32', '(', '0', ')', 'print', '(', 'type', '(', 'x', ')', ')', 'pyval', '=', 'x', '.', 'item', '(', ')', 'print', '(', 'type', '(', 'pyval', ')', ')']"
1524,"['write', 'python', 'program', 'get', 'every', 'nth', 'element', 'given', 'list']","['def', 'every_nth', '(', 'nums', ',', 'nth', ')', ':', 'return', 'nums', '[', 'nth', '-', '1', ':', ':', 'nth', ']', 'print', '(', 'every_nth', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', ',', '1', ')', ')', 'print', '(', 'every_nth', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', ',', '2', ')', ')', 'print', '(', 'every_nth', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', ',', '5', ')', ')', 'print', '(', 'every_nth', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', ',', '6', ')', ')']"
1525,"['write', 'numpy', 'program', 'find', 'number', 'weekday', 'march']","['import', 'numpy', 'as', 'np', 'print', '(', '""Number of weekdays in March 2017:""', ')', 'print', '(', 'np', '.', 'busday_count', '(', ""'2017-03'"", ',', ""'2017-04'"", ')', ')']"
1526,"['write', 'python', 'program', 'sort', 'given', 'mixed', 'list', 'integer', 'string', 'number', 'must', 'sorted', 'string']","['def', 'sort_mixed_list', '(', 'mixed_list', ')', ':', 'int_part', '=', 'sorted', '(', '[', 'i', 'for', 'i', 'in', 'mixed_list', 'if', 'type', '(', 'i', ')', 'is', 'int', ']', ')', 'str_part', '=', 'sorted', '(', '[', 'i', 'for', 'i', 'in', 'mixed_list', 'if', 'type', '(', 'i', ')', 'is', 'str', ']', ')', 'return', 'int_part', '+', 'str_part', 'mixed_list', '=', '[', '19', ',', ""'red'"", ',', '12', ',', ""'green'"", ',', ""'blue'"", ',', '10', ',', ""'white'"", ',', ""'green'"", ',', '1', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'mixed_list', ')', 'print', '(', '""\\nSort the said  mixed list of integers and strings:""', ')', 'print', '(', 'sort_mixed_list', '(', 'mixed_list', ')', ')']"
1527,"['write', 'python', 'program', 'reverse', 'string']","['def', 'reverse_string', '(', 'str1', ')', ':', 'return', ""''"", '.', 'join', '(', 'reversed', '(', 'str1', ')', ')', 'print', '(', ')', 'print', '(', 'reverse_string', '(', '""abcdef""', ')', ')', 'print', '(', 'reverse_string', '(', '""Python Exercises.""', ')', ')', 'print', '(', ')']"
1528,"['write', 'python', 'program', 'insert', 'element', 'element', 'list']","['color', '=', '[', ""'Red'"", ',', ""'Green'"", ',', ""'Black'"", ']', 'print', '(', '""Original List: ""', ',', 'color', ')', 'color', '=', '[', 'v', 'for', 'elt', 'in', 'color', 'for', 'v', 'in', '(', ""'c'"", ',', 'elt', ')', ']', 'print', '(', '""Original List: ""', ',', 'color', ')']"
1529,"['write', 'numpy', 'program', 'get', 'row', 'number', 'given', 'array', 'least', 'one', 'item', 'larger', 'specified', 'value']","['import', 'numpy', 'as', 'np', 'num', '=', 'np', '.', 'arange', '(', '36', ')', 'arr1', '=', 'np', '.', 'reshape', '(', 'num', ',', '[', '4', ',', '9', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arr1', ')', 'result', '=', 'np', '.', 'where', '(', 'np', '.', 'any', '(', 'arr1', '>', '10', ',', 'axis', '=', '1', ')', ')', 'print', '(', '""\\nRow numbers where at least one item is larger than 10:""', ')', 'print', '(', 'result', ')']"
1530,"['write', 'numpy', 'program', 'get', 'index', 'sorted', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'student_id', '=', 'np', '.', 'array', '(', '[', '1023', ',', '5202', ',', '6230', ',', '1671', ',', '1682', ',', '5241', ',', '4532', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'student_id', ')', 'i', '=', 'np', '.', 'argsort', '(', 'student_id', ')', 'print', '(', '""Indices of the sorted elements of a given array:""', ')', 'print', '(', 'i', ')']"
1531,"['write', 'python', 'program', 'remove', 'string', 'given', 'list', 'tuples']","['def', 'test', '(', 'list1', ')', ':', 'result', '=', '[', 'tuple', '(', 'v', 'for', 'v', 'in', 'i', 'if', 'not', 'isinstance', '(', 'v', ',', 'str', ')', ')', 'for', 'i', 'in', 'list1', ']', 'return', 'list', '(', 'result', ')', 'marks', '=', '[', '(', '100', ',', ""'Math'"", ')', ',', '(', '80', ',', ""'Math'"", ')', ',', '(', '90', ',', ""'Math'"", ')', ',', '(', '88', ',', ""'Science'"", ',', '89', ')', ',', '(', '90', ',', ""'Science'"", ',', '92', ')', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'marks', ')', 'print', '(', '""\\nRemove all strings from the said list of tuples:""', ')', 'print', '(', 'test', '(', 'marks', ')', ')']"
1532,"['write', 'python', 'program', 'sort', 'counter', 'value']","['from', 'collections', 'import', 'Counter', 'x', '=', 'Counter', '(', '{', ""'Math'"", ':', '81', ',', ""'Physics'"", ':', '83', ',', ""'Chemistry'"", ':', '87', '}', ')', 'print', '(', 'x', '.', 'most_common', '(', ')', ')']"
1533,"['write', 'python', 'program', 'remove', 'parenthesis', 'area', 'string']","['import', 're', 'items', '=', '[', '""example (.com)""', ',', '""w3resource""', ',', '""github (.com)""', ',', '""stackoverflow (.com)""', ']', 'for', 'item', 'in', 'items', ':', 'print', '(', 're', '.', 'sub', '(', 'r"" ?\\([^)]+\\)""', ',', '""""', ',', 'item', ')', ')']"
1534,"['write', 'numpy', 'program', 'compute', 'median', 'flattened', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '12', ')', '.', 'reshape', '(', '(', '2', ',', '6', ')', ')', 'print', '(', '""\\nOriginal array:""', ')', 'print', '(', 'x', ')', 'r1', '=', 'np', '.', 'median', '(', 'x', ')', 'print', '(', '""\\nMedian of said array:""', ')', 'print', '(', 'r1', ')']"
1535,"['write', 'python', 'program', 'convert', 'given', 'bytearray', 'hexadecimal', 'string']","['def', 'bytearray_to_hexadecimal', '(', 'list_val', ')', ':', 'result', '=', ""''"", '.', 'join', '(', ""'{:02x}'"", '.', 'format', '(', 'x', ')', 'for', 'x', 'in', 'list_val', ')', 'return', '(', 'result', ')', 'list_val', '=', '[', '111', ',', '12', ',', '45', ',', '67', ',', '109', ']', 'print', '(', '""Original Bytearray :""', ')', 'print', '(', 'list_val', ')', 'print', '(', '""\\nHexadecimal string:""', ')', 'print', '(', 'bytearray_to_hexadecimal', '(', 'list_val', ')', ')']"
1536,"['write', 'python', 'program', 'calculate', 'maximum', 'minimum', 'sum', 'sublist', 'given', 'list', 'list']","['def', 'max_min_sublist', '(', 'lst', ')', ':', 'max_result', '=', '(', 'max', '(', 'lst', ',', 'key', '=', 'sum', ')', ')', 'min_result', '=', '(', 'min', '(', 'lst', ',', 'key', '=', 'sum', ')', ')', 'return', 'max_result', ',', 'min_result', 'nums', '=', '[', '[', '1', ',', '2', ',', '3', ',', '5', ']', ',', '[', '2', ',', '3', ',', '5', ',', '4', ']', ',', '[', '0', ',', '5', ',', '4', ',', '1', ']', ',', '[', '3', ',', '7', ',', '2', ',', '1', ']', ',', '[', '1', ',', '2', ',', '1', ',', '2', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'result', '=', 'max_min_sublist', '(', 'nums', ')', 'print', '(', '""\\nMaximum sum of sub list of the said list of lists:""', ')', 'print', '(', 'result', '[', '0', ']', ')', 'print', '(', '""\\nMinimum sum of sub list of the said list of lists:""', ')', 'print', '(', 'result', '[', '1', ']', ')']"
1537,"['write', 'python', 'program', 'sum', 'two', 'given', 'integer', 'however', 'sum', 'return']","['def', 'sum', '(', 'x', ',', 'y', ')', ':', 'sum', '=', 'x', '+', 'y', 'if', 'sum', 'in', 'range', '(', '15', ',', '20', ')', ':', 'return', '20', 'else', ':', 'return', 'sum', 'print', '(', 'sum', '(', '10', ',', '6', ')', ')', 'print', '(', 'sum', '(', '10', ',', '2', ')', ')', 'print', '(', 'sum', '(', '10', ',', '12', ')', ')']"
1538,"['write', 'python', 'program', 'convert', 'given', 'decimal', 'number', 'binary', 'list']","['def', 'decimal_to_binary_list', '(', 'n', ')', ':', 'result', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'list', '(', ""'{0:0b}'"", '.', 'format', '(', 'n', ')', ')', ']', 'return', 'result', 'n', '=', '8', 'print', '(', '""Original Number:""', ',', 'n', ')', 'print', '(', '""Decimal number (""', ',', 'n', ',', '"") to binary list:""', ')', 'print', '(', 'decimal_to_binary_list', '(', 'n', ')', ')', 'n', '=', '45', 'print', '(', '""\\nOriginal Number:""', ',', 'n', ')', 'print', '(', '""Decimal number (""', ',', 'n', ',', '"") to binary list:""', ')', 'print', '(', 'decimal_to_binary_list', '(', 'n', ')', ')', 'n', '=', '100', 'print', '(', '""\\nOriginal Number:""', ',', 'n', ')', 'print', '(', '""Decimal number (""', ',', 'n', ',', '"") to binary list:""', ')', 'print', '(', 'decimal_to_binary_list', '(', 'n', ')', ')']"
1539,"['write', 'panda', 'program', 'compare', 'element', 'two', 'panda', 'series']","['import', 'pandas', 'as', 'pd', 'ds1', '=', 'pd', '.', 'Series', '(', '[', '2', ',', '4', ',', '6', ',', '8', ',', '10', ']', ')', 'ds2', '=', 'pd', '.', 'Series', '(', '[', '1', ',', '3', ',', '5', ',', '7', ',', '10', ']', ')', 'print', '(', '""Series1:""', ')', 'print', '(', 'ds1', ')', 'print', '(', '""Series2:""', ')', 'print', '(', 'ds2', ')', 'print', '(', '""Compare the elements of the said Series:""', ')', 'print', '(', '""Equals:""', ')', 'print', '(', 'ds1', '==', 'ds2', ')', 'print', '(', '""Greater than:""', ')', 'print', '(', 'ds1', '>', 'ds2', ')', 'print', '(', '""Less than:""', ')', 'print', '(', 'ds1', '<', 'ds2', ')']"
1540,"['write', 'numpy', 'program', 'calculate', 'frobenius', 'norm', 'condition', 'number', 'given', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'arange', '(', '1', ',', '10', ')', '.', 'reshape', '(', '(', '3', ',', '3', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'a', ')', 'print', '(', '""Frobenius norm and the condition number:""', ')', 'print', '(', 'np', '.', 'linalg', '.', 'norm', '(', 'a', ',', ""'fro'"", ')', ')', 'print', '(', 'np', '.', 'linalg', '.', 'cond', '(', 'a', ',', ""'fro'"", ')', ')']"
1541,"['write', 'python', 'program', 'generate', 'possible', 'permutation', 'n', 'different', 'object']","['import', 'itertools', 'def', 'permutations_all', '(', 'l', ')', ':', 'for', 'values', 'in', 'itertools', '.', 'permutations', '(', 'l', ')', ':', 'print', '(', 'values', ')', 'permutations_all', '(', '[', '1', ']', ')', 'print', '(', '""\\n""', ')', 'permutations_all', '(', '[', '1', ',', '2', ']', ')', 'print', '(', '""\\n""', ')', 'permutations_all', '(', '[', '1', ',', '2', ',', '3', ']', ')']"
1542,"['write', 'python', 'program', 'create', 'localized', 'humanized', 'representation', 'relative', 'difference', 'time', 'using', 'arrow', 'module']","['import', 'arrow', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', ')', 'earlier', '=', 'arrow', '.', 'utcnow', '(', ')', '.', 'shift', '(', 'hours', '=', '-', '4', ')', 'print', '(', 'earlier', '.', 'humanize', '(', ')', ')', 'later', '=', 'earlier', '.', 'shift', '(', 'hours', '=', '3', ')', 'print', '(', 'later', '.', 'humanize', '(', 'earlier', ')', ')']"
1543,"['write', 'numpy', 'program', 'create', 'vector', 'value', 'change', 'sign', 'number', 'range']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '21', ')', 'print', '(', '""Original vector:""', ')', 'print', '(', 'x', ')', 'print', '(', '""After changing the sign of the numbers in the range from 9 to 15:""', ')', 'x', '[', '(', 'x', '>=', '9', ')', '&', '(', 'x', '<=', '15', ')', ']', '*=', '-', '1', 'print', '(', 'x', ')']"
1544,"['write', 'numpy', 'program', 'create', 'array', 'using', 'scientific', 'notation', 'number', 'set', 'precision', 'value', 'print', 'array']","['import', 'numpy', 'as', 'np', 'nums', '=', 'np', '.', 'array', '(', '[', '1.2e-7', ',', '1.5e-6', ',', '1.7e-5', ']', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""Set the precision value to 10:""', ')', 'np', '.', 'set_printoptions', '(', 'suppress', '=', 'True', ',', 'precision', '=', '10', ')', 'print', '(', 'nums', ')']"
1545,"['write', 'panda', 'program', 'manipulate', 'convert', 'date', 'time', 'timezone', 'information']","['import', 'pandas', 'as', 'pd', 'dtt', '=', 'pd', '.', 'date_range', '(', ""'2018-01-01'"", ',', 'periods', '=', '3', ',', 'freq', '=', ""'H'"", ')', 'dtt', '=', 'dtt', '.', 'tz_localize', '(', ""'UTC'"", ')', 'print', '(', 'dtt', ')', 'print', '(', '""\\nFrom UTC to America/Los_Angeles:""', ')', 'dtt', '=', 'dtt', '.', 'tz_convert', '(', ""'America/Los_Angeles'"", ')', 'print', '(', 'dtt', ')']"
1546,"['write', 'python', 'program', 'print', 'even', 'number', 'given', 'list']","['def', 'is_even_num', '(', 'l', ')', ':', 'enum', '=', '[', ']', 'for', 'n', 'in', 'l', ':', 'if', 'n', '%', '2', '==', '0', ':', 'enum', '.', 'append', '(', 'n', ')', 'return', 'enum', 'print', '(', 'is_even_num', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ']', ')', ')']"
1547,"['write', 'panda', 'program', 'split', 'following', 'dataframe', 'group', 'based', 'first', 'column', 'set', 'column', 'value', 'list', 'value']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'X'"", ':', '[', '10', ',', '10', ',', '10', ',', '20', ',', '30', ',', '30', ',', '10', ']', ',', ""'Y'"", ':', '[', '10', ',', '15', ',', '11', ',', '20', ',', '21', ',', '12', ',', '14', ']', ',', ""'Z'"", ':', '[', '22', ',', '20', ',', '18', ',', '20', ',', '13', ',', '10', ',', '0', ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'result', '=', 'df', '.', 'groupby', '(', ""'X'"", ')', '.', 'aggregate', '(', 'lambda', 'tdf', ':', 'tdf', '.', 'unique', '(', ')', '.', 'tolist', '(', ')', ')', 'print', '(', 'result', ')']"
1548,"['write', 'python', 'program', 'sort', 'one', 'list', 'based', 'another', 'list', 'containing', 'desired', 'index']","['def', 'sort_by_indexes', '(', 'lst', ',', 'indexes', ',', 'reverse', '=', 'False', ')', ':', 'return', '[', 'val', 'for', '(', '_', ',', 'val', ')', 'in', 'sorted', '(', 'zip', '(', 'indexes', ',', 'lst', ')', ',', 'key', '=', 'lambda', 'x', ':', 'x', '[', '0', ']', ',', 'reverse', '=', 'reverse', ')', ']', 'l1', '=', '[', ""'eggs'"", ',', ""'bread'"", ',', ""'oranges'"", ',', ""'jam'"", ',', ""'apples'"", ',', ""'milk'"", ']', 'l2', '=', '[', '3', ',', '2', ',', '6', ',', '4', ',', '1', ',', '5', ']', 'print', '(', 'sort_by_indexes', '(', 'l1', ',', 'l2', ')', ')', 'print', '(', 'sort_by_indexes', '(', 'l1', ',', 'l2', ',', 'True', ')', ')']"
1549,"['write', 'python', 'script', 'print', 'dictionary', 'key', 'number', 'included', 'value', 'square', 'key']","['d', '=', 'dict', '(', ')', 'for', 'x', 'in', 'range', '(', '1', ',', '16', ')', ':', 'd', '[', 'x', ']', '=', 'x', '**', '2', 'print', '(', 'd', ')']"
1550,"['write', 'python', 'program', 'check', 'given', 'value', 'method', 'userdefined', 'class', 'use', 'typesmethodtype']","['import', 'types', 'class', 'C', ':', 'def', 'x', '(', ')', ':', 'return', '1', 'def', 'y', '(', ')', ':', 'return', '1', 'def', 'b', '(', ')', ':', 'return', '2', 'print', '(', 'isinstance', '(', 'C', '(', ')', '.', 'x', ',', 'types', '.', 'MethodType', ')', ')', 'print', '(', 'isinstance', '(', 'C', '(', ')', '.', 'y', ',', 'types', '.', 'MethodType', ')', ')', 'print', '(', 'isinstance', '(', 'b', ',', 'types', '.', 'MethodType', ')', ')', 'print', '(', 'isinstance', '(', 'max', ',', 'types', '.', 'MethodType', ')', ')', 'print', '(', 'isinstance', '(', 'abs', ',', 'types', '.', 'MethodType', ')', ')']"
1551,"['write', 'python', 'program', 'generate', 'print', 'list', 'except', 'first', 'element', 'value', 'square', 'number', 'included']","['def', 'printValues', '(', ')', ':', 'l', '=', 'list', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '31', ')', ':', 'l', '.', 'append', '(', 'i', '**', '2', ')', 'print', '(', 'l', '[', '5', ':', ']', ')', 'printValues', '(', ')']"
1552,"['write', 'panda', 'program', 'import', 'excel', 'data', 'employeexlsx', 'panda', 'dataframe', 'find', 'list', 'employee', 'specified', 'year']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\employee.xlsx'"", ')', 'df2', '=', 'df', '.', 'set_index', '(', '[', ""'hire_date'"", ']', ')', 'result', '=', 'df2', '[', '""2005""', ']', 'result']"
1553,"['write', 'python', 'program', 'rotate', 'deque', 'object', 'specified', 'number', 'negative', 'time']","['import', 'collections', 'dq_object', '=', 'collections', '.', 'deque', '(', ')', 'dq_object', '.', 'append', '(', '2', ')', 'dq_object', '.', 'append', '(', '4', ')', 'dq_object', '.', 'append', '(', '6', ')', 'dq_object', '.', 'append', '(', '8', ')', 'dq_object', '.', 'append', '(', '10', ')', 'print', '(', '""Deque before rotation:""', ')', 'print', '(', 'dq_object', ')', 'dq_object', '.', 'rotate', '(', '-', '1', ')', 'print', '(', '""\\nDeque after 1 negative rotation:""', ')', 'print', '(', 'dq_object', ')', 'dq_object', '.', 'rotate', '(', '-', '2', ')', 'print', '(', '""\\nDeque after 2 negative rotations:""', ')', 'print', '(', 'dq_object', ')']"
1554,"['write', 'numpy', 'program', 'generate', 'inner', 'outer', 'cross', 'product', 'matrix', 'vector']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '4', ',', '0', ']', ',', 'float', ')', 'y', '=', 'np', '.', 'array', '(', '[', '2', ',', '2', ',', '1', ']', ',', 'float', ')', 'print', '(', '""Matrices and vectors.""', ')', 'print', '(', '""x:""', ')', 'print', '(', 'x', ')', 'print', '(', '""y:""', ')', 'print', '(', 'y', ')', 'print', '(', '""Inner product of x and y:""', ')', 'print', '(', 'np', '.', 'inner', '(', 'x', ',', 'y', ')', ')', 'print', '(', '""Outer product of x and y:""', ')', 'print', '(', 'np', '.', 'outer', '(', 'x', ',', 'y', ')', ')', 'print', '(', '""Cross product of x and y:""', ')', 'print', '(', 'np', '.', 'cross', '(', 'x', ',', 'y', ')', ')']"
1555,"['write', 'numpy', 'program', 'create', 'array', 'going', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '50', ')', 'print', '(', '""Array from 0 to 50:""', ')', 'print', '(', 'x', ')', 'x', '=', 'np', '.', 'arange', '(', '10', ',', '50', ')', 'print', '(', '""Array from 10 to 50:""', ')', 'print', '(', 'x', ')']"
1556,"['write', 'python', 'program', 'split', 'iterable', 'generate', 'iterables', 'specified', 'number', 'time']","['import', 'itertools', 'as', 'it', 'def', 'tee_data', '(', 'iter', ',', 'n', ')', ':', 'return', 'it', '.', 'tee', '(', 'iter', ',', 'n', ')', 'result', '=', 'tee_data', '(', '[', ""'A'"", ',', ""'B'"", ',', ""'C'"", ',', ""'D'"", ']', ',', '5', ')', 'print', '(', '""Generate iterables specified number of times:""', ')', 'for', 'i', 'in', 'result', ':', 'print', '(', 'list', '(', 'i', ')', ')', 'result', '=', 'tee_data', '(', '""Python itertools""', ',', '4', ')', 'print', '(', '""\\nGenerate iterables specified number of times:""', ')', 'for', 'i', 'in', 'result', ':', 'print', '(', 'list', '(', 'i', ')', ')']"
1557,"['write', 'numpy', 'program', 'sort', 'student', 'id', 'increasing', 'height', 'student', 'given', 'student', 'id', 'height', 'print', 'integer', 'index', 'describes', 'sort', 'order', 'multiple', 'column', 'sorted', 'data']","['import', 'numpy', 'as', 'np', 'student_id', '=', 'np', '.', 'array', '(', '[', '1023', ',', '5202', ',', '6230', ',', '1671', ',', '1682', ',', '5241', ',', '4532', ']', ')', 'student_height', '=', 'np', '.', 'array', '(', '[', '40.', ',', '42.', ',', '45.', ',', '41.', ',', '38.', ',', '40.', ',', '42.0', ']', ')', 'indices', '=', 'np', '.', 'lexsort', '(', '(', 'student_id', ',', 'student_height', ')', ')', 'print', '(', '""Sorted indices:""', ')', 'print', '(', 'indices', ')', 'print', '(', '""Sorted data:""', ')', 'for', 'n', 'in', 'indices', ':', 'print', '(', 'student_id', '[', 'n', ']', ',', 'student_height', '[', 'n', ']', ')']"
1558,"['write', 'python', 'program', 'get', 'smallest', 'number', 'list']","['def', 'smallest_num_in_list', '(', 'list', ')', ':', 'min', '=', 'list', '[', '0', ']', 'for', 'a', 'in', 'list', ':', 'if', 'a', '<', 'min', ':', 'min', '=', 'a', 'return', 'min', 'print', '(', 'smallest_num_in_list', '(', '[', '1', ',', '2', ',', '-', '8', ',', '0', ']', ')', ')']"
1559,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'cycle', 'sort']",[]
1560,"['write', 'numpy', 'program', 'extract', 'element', 'first', 'row', 'given', 'array']","['import', 'numpy', 'as', 'np', 'arra_data', '=', 'np', '.', 'arange', '(', '0', ',', '16', ')', '.', 'reshape', '(', '(', '4', ',', '4', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arra_data', ')', 'print', '(', '""\\nExtracted data: First row""', ')', 'print', '(', 'arra_data', '[', '0', ']', ')']"
1561,"['write', 'panda', 'program', 'create', 'histogram', 'visualize', 'daily', 'return', 'distribution', 'alphabet', 'inc', 'stock', 'price', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'import', 'seaborn', 'as', 'sns', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-9-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df1', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'df2', '=', 'df1', '[', '[', ""'Date'"", ',', ""'Adj Close'"", ']', ']', 'df3', '=', 'df2', '.', 'set_index', '(', ""'Date'"", ')', 'daily_changes', '=', 'df3', '.', 'pct_change', '(', 'periods', '=', '1', ')', 'sns', '.', 'distplot', '(', 'daily_changes', '[', ""'Adj Close'"", ']', '.', 'dropna', '(', ')', ',', 'bins', '=', '100', ',', 'color', '=', ""'purple'"", ')', 'plt', '.', 'suptitle', '(', ""'Daily % return of Alphabet Inc. stock price,\\n01-04-2020 to 30-09-2020'"", ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'grid', '(', 'True', ')', 'plt', '.', 'show', '(', ')']"
1562,"['write', 'python', 'program', 'find', 'tag', 'directly', 'beneath', 'tag', 'given', 'html', 'document']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_doc', '=', '""""""\r<html>\r<head>\r<meta http-equiv=""Content-Type"" content=""text/html;\rcharset=iso-8859-1"">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from\rw3resource.com</a></p>\r<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from \rw3resource.com</a></p>\r</body>\r</html>\r""""""', 'soup', '=', 'BeautifulSoup', '(', 'html_doc', ',', '""lxml""', ')', 'print', '(', '""\\nBeneath directly head tag:""', ')', 'print', '(', 'soup', '.', 'select', '(', '""head > title""', ')', ')', 'print', '(', ')', 'print', '(', '""\\nBeneath directly p tag:""', ')', 'print', '(', 'soup', '.', 'select', '(', '""p > a""', ')', ')']"
1563,"['write', 'python', 'program', 'generate', 'permutation', 'specified', 'element', 'drawn', 'specified', 'value']","['from', 'itertools', 'import', 'product', 'def', 'permutations_colors', '(', 'inp', ',', 'n', ')', ':', 'for', 'x', 'in', 'product', '(', 'inp', ',', 'repeat', '=', 'n', ')', ':', 'c', '=', ""''"", '.', 'join', '(', 'x', ')', 'print', '(', 'c', ',', 'end', '=', ""', '"", ')', 'str1', '=', '""Red""', 'print', '(', '""Original String: ""', ',', 'str1', ')', 'print', '(', '""Permutations of specified elements, drawn from specified values:""', ')', 'n', '=', '1', 'print', '(', '""\\nn = 1""', ')', 'permutations_colors', '(', 'str1', ',', 'n', ')', 'n', '=', '2', 'print', '(', '""\\nn = 2""', ')', 'permutations_colors', '(', 'str1', ',', 'n', ')', 'n', '=', '3', 'print', '(', '""\\nn = 3""', ')', 'permutations_colors', '(', 'str1', ',', 'n', ')', 'lst1', '=', '[', '""Red""', ',', '""Green""', ',', '""Black""', ']', 'print', '(', '""\\n\\nOriginal list: ""', ',', 'lst1', ')', 'print', '(', '""Permutations of specified elements, drawn from specified values:""', ')', 'n', '=', '1', 'print', '(', '""\\nn = 1""', ')', 'permutations_colors', '(', 'lst1', ',', 'n', ')', 'n', '=', '2', 'print', '(', '""\\nn = 2""', ')', 'permutations_colors', '(', 'lst1', ',', 'n', ')', 'n', '=', '3', 'print', '(', '""\\nn = 3""', ')', 'permutations_colors', '(', 'lst1', ',', 'n', ')']"
1564,"['write', 'python', 'program', 'remove', 'element', 'given', 'list', 'present', 'another', 'list', 'using', 'lambda']","['def', 'index_on_inner_list', '(', 'list1', ',', 'list2', ')', ':', 'result', '=', 'list', '(', 'filter', '(', 'lambda', 'x', ':', 'x', 'not', 'in', 'list2', ',', 'list1', ')', ')', 'return', 'result', 'list1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', 'list2', '=', '[', '2', ',', '4', ',', '6', ',', '8', ']', 'print', '(', '""Original lists:""', ')', 'print', '(', '""list1:""', ',', 'list1', ')', 'print', '(', '""list2:""', ',', 'list2', ')', 'print', '(', '""\\nRemove all elements from \'list1\' present in \'list2:""', ')', 'print', '(', 'index_on_inner_list', '(', 'list1', ',', 'list2', ')', ')']"
1565,"['write', 'numpy', 'program', 'shuffle', 'number', 'inclusive']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '10', ')', 'np', '.', 'random', '.', 'shuffle', '(', 'x', ')', 'print', '(', 'x', ')', 'print', '(', '""Same result using permutation():""', ')', 'print', '(', 'np', '.', 'random', '.', 'permutation', '(', '10', ')', ')']"
1566,"['write', 'panda', 'program', 'compute', 'difference', 'difference', 'consecutive', 'number', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'series1', '=', 'pd', '.', 'Series', '(', '[', '1', ',', '3', ',', '5', ',', '8', ',', '10', ',', '11', ',', '15', ']', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'series1', ')', 'print', '(', '""\\nDifference of differences between consecutive numbers of the said series:""', ')', 'print', '(', 'series1', '.', 'diff', '(', ')', '.', 'tolist', '(', ')', ')', 'print', '(', 'series1', '.', 'diff', '(', ')', '.', 'diff', '(', ')', '.', 'tolist', '(', ')', ')']"
1567,"['write', 'panda', 'program', 'extract', 'sentence', 'specific', 'word', 'present', 'given', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 're', 'as', 're', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'company_code'"", ':', '[', ""'Abcd'"", ',', ""'EFGF'"", ',', ""'zefsalf'"", ',', ""'sdfslew'"", ',', ""'zekfsdf'"", ']', ',', ""'date_of_sale'"", ':', '[', ""'12/05/2002'"", ',', ""'16/02/1999'"", ',', ""'05/09/1998'"", ',', ""'12/02/2022'"", ',', ""'15/09/1997'"", ']', ',', ""'address'"", ':', '[', ""'9910 Surrey Avenue'"", ',', ""'92 N. Bishop Avenue'"", ',', ""'9910 Golden Star Avenue'"", ',', ""'102 Dunbar St.'"", ',', ""'17 West Livingston Court'"", ']', '}', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'pick_only_key_sentence', '(', 'str1', ',', 'word', ')', ':', 'result', '=', 're', '.', 'findall', '(', ""r'([^.]*'"", '+', 'word', '+', ""'[^.]*)'"", ',', 'str1', ')', 'return', 'result', 'df', '[', ""'filter_sentence'"", ']', '=', 'df', '[', ""'address'"", ']', '.', 'apply', '(', 'lambda', 'x', ':', 'pick_only_key_sentence', '(', 'x', ',', ""'Avenue'"", ')', ')', 'print', '(', '""\\nText with the word \'Avenue\':""', ')', 'print', '(', 'df', ')']"
1568,"['write', 'python', 'program', 'get', 'size', 'permission', 'owner', 'device', 'created', 'last', 'modified', 'last', 'accessed', 'date', 'time', 'specified', 'path']","['import', 'os', 'import', 'sys', 'import', 'time', 'path', '=', ""'g:\\\\testpath\\\\'"", 'print', '(', ""'Path Name ({}):'"", '.', 'format', '(', 'path', ')', ')', 'print', '(', ""'Size:'"", ',', 'stat_info', '.', 'st_size', ')', 'print', '(', ""'Permissions:'"", ',', 'oct', '(', 'stat_info', '.', 'st_mode', ')', ')', 'print', '(', ""'Owner:'"", ',', 'stat_info', '.', 'st_uid', ')', 'print', '(', ""'Device:'"", ',', 'stat_info', '.', 'st_dev', ')', 'print', '(', ""'Created     :'"", ',', 'time', '.', 'ctime', '(', 'stat_info', '.', 'st_ctime', ')', ')', 'print', '(', ""'Last modified:'"", ',', 'time', '.', 'ctime', '(', 'stat_info', '.', 'st_mtime', ')', ')', 'print', '(', ""'Last accessed:'"", ',', 'time', '.', 'ctime', '(', 'stat_info', '.', 'st_atime', ')', ')']"
1569,"['write', 'numpy', 'program', 'test', 'whether', 'array', 'element', 'along', 'given', 'axis', 'evaluates', 'true']","['import', 'numpy', 'as', 'np', 'print', '(', 'np', '.', 'any', '(', '[', '[', 'False', ',', 'False', ']', ',', '[', 'False', ',', 'False', ']', ']', ')', ')', 'print', '(', 'np', '.', 'any', '(', '[', '[', 'True', ',', 'True', ']', ',', '[', 'True', ',', 'True', ']', ']', ')', ')', 'print', '(', 'np', '.', 'any', '(', '[', '10', ',', '20', ',', '0', ',', '-', '50', ']', ')', ')', 'print', '(', 'np', '.', 'any', '(', '[', '10', ',', '20', ',', '-', '50', ']', ')', ')']"
1570,"['write', 'numpy', 'program', 'convert', 'array', 'column', 'array']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '(', '10', ',', '20', ',', '30', ')', ')', 'b', '=', 'np', '.', 'array', '(', '(', '40', ',', '50', ',', '60', ')', ')', 'c', '=', 'np', '.', 'column_stack', '(', '(', 'a', ',', 'b', ')', ')', 'print', '(', 'c', ')']"
1571,"['write', 'numpy', 'program', 'convert', 'numpy', 'array', 'csv', 'file']","['import', 'numpy', 'data', '=', 'numpy', '.', 'asarray', '(', '[', '[', '10', ',', '20', ',', '30', ']', ',', '[', '40', ',', '50', ',', '60', ']', ',', '[', '70', ',', '80', ',', '90', ']', ']', ')', 'numpy', '.', 'savetxt', '(', '""test.csv""', ',', 'data', ',', 'delimiter', '=', '"",""', ')']"
1572,"['write', 'python', 'function', 'insert', 'string', 'middle', 'string']","['def', 'insert_sting_middle', '(', 'str', ',', 'word', ')', ':', 'return', 'str', '[', ':', '2', ']', '+', 'word', '+', 'str', '[', '2', ':', ']', 'print', '(', 'insert_sting_middle', '(', ""'[[]]'"", ',', ""'Python'"", ')', ')', 'print', '(', 'insert_sting_middle', '(', ""'{{}}'"", ',', ""'PHP'"", ')', ')', 'print', '(', 'insert_sting_middle', '(', ""'<<>>'"", ',', ""'HTML'"", ')', ')']"
1573,"['write', 'python', 'program', 'calculate', 'average', 'given', 'list', 'mapping', 'element', 'value', 'using', 'provided', 'function']","['def', 'average_by', '(', 'lst', ',', 'fn', '=', 'lambda', 'x', ':', 'x', ')', ':', 'return', 'sum', '(', 'map', '(', 'fn', ',', 'lst', ')', ',', '0.0', ')', '/', 'len', '(', 'lst', ')', 'print', '(', 'average_by', '(', '[', '{', ""'n'"", ':', '4', '}', ',', '{', ""'n'"", ':', '2', '}', ',', '{', ""'n'"", ':', '8', '}', ',', '{', ""'n'"", ':', '6', '}', ']', ',', 'lambda', 'x', ':', 'x', '[', ""'n'"", ']', ')', ')', 'print', '(', 'average_by', '(', '[', '{', ""'n'"", ':', '10', '}', ',', '{', ""'n'"", ':', '20', '}', ',', '{', ""'n'"", ':', '-', '30', '}', ',', '{', ""'n'"", ':', '60', '}', ']', ',', 'lambda', 'x', ':', 'x', '[', ""'n'"", ']', ')', ')']"
1574,"['write', 'panda', 'program', 'create', 'line', 'plot', 'opening', 'closing', 'stock', 'price', 'alphabet', 'inc', 'two', 'specific', 'date']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'df', '=', 'pd', '.', 'read_csv', '(', '""alphabet_stock_data.csv""', ')', 'start_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-4-1'"", ')', 'end_date', '=', 'pd', '.', 'to_datetime', '(', ""'2020-09-30'"", ')', 'df', '[', ""'Date'"", ']', '=', 'pd', '.', 'to_datetime', '(', 'df', '[', ""'Date'"", ']', ')', 'new_df', '=', '(', 'df', '[', ""'Date'"", ']', '>=', 'start_date', ')', '&', '(', 'df', '[', ""'Date'"", ']', '<=', 'end_date', ')', 'df2', '=', 'df', '.', 'loc', '[', 'new_df', ']', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '10', ',', '10', ')', ')', 'df2', '.', 'plot', '(', 'x', '=', ""'Date'"", ',', 'y', '=', '[', ""'Open'"", ',', ""'Close'"", ']', ')', ';', 'plt', '.', 'suptitle', '(', ""'Opening/Closing stock prices of Alphabet Inc.,\\n 01-04-2020 to 30-09-2020'"", ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'xlabel', '(', '""Date""', ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'ylabel', '(', '""$ price""', ',', 'fontsize', '=', '12', ',', 'color', '=', ""'black'"", ')', 'plt', '.', 'show', '(', ')']"
1575,"['write', 'panda', 'program', 'import', 'excel', 'data', 'dataframe', 'find', 'record', 'include', 'two', 'specific', 'msha', 'id']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\coalpublic2013.xlsx'"", ')', 'df', '[', 'df', '[', '""MSHA ID""', ']', '.', 'isin', '(', '[', '102976', ',', '103380', ']', ')', ']', '.', 'head', '(', ')']"
1576,"['write', 'python', 'function', 'take', 'number', 'parameter', 'check', 'number', 'prime']","['def', 'test_prime', '(', 'n', ')', ':', 'if', '(', 'n', '==', '1', ')', ':', 'return', 'False', 'elif', '(', 'n', '==', '2', ')', ':', 'return', 'True', ';', 'else', ':', 'for', 'x', 'in', 'range', '(', '2', ',', 'n', ')', ':', 'if', '(', 'n', '%', 'x', '==', '0', ')', ':', 'return', 'False', 'return', 'True', 'print', '(', 'test_prime', '(', '9', ')', ')']"
1577,"['write', 'python', 'program', 'print', 'dictionary', 'table', 'format']","['my_dict', '=', '{', ""'C1'"", ':', '[', '1', ',', '2', ',', '3', ']', ',', ""'C2'"", ':', '[', '5', ',', '6', ',', '7', ']', ',', ""'C3'"", ':', '[', '9', ',', '10', ',', '11', ']', '}', 'for', 'row', 'in', 'zip', '(', '*', '(', '[', 'key', ']', '+', '(', 'value', ')', 'for', 'key', ',', 'value', 'in', 'sorted', '(', 'my_dict', '.', 'items', '(', ')', ')', ')', ')', ':', 'print', '(', '*', 'row', ')']"
1578,"['write', 'python', 'code', 'send', 'request', 'web', 'page', 'print', 'information', 'header', 'also', 'parse', 'value', 'print', 'keyvalue', 'pair', 'holding', 'various', 'information']","['import', 'requests', 'r', '=', 'requests', '.', 'get', '(', ""'https://api.github.com/'"", ')', 'response', '=', 'r', '.', 'headers', 'print', '(', '""Headers information of the said response:""', ')', 'print', '(', 'response', ')', 'print', '(', '""\\nVarious Key-value pairs information of the said resource and request:""', ')', 'print', '(', '""Date: ""', ',', 'r', '.', 'headers', '[', ""'date'"", ']', ')', 'print', '(', '""server: ""', ',', 'r', '.', 'headers', '[', ""'server'"", ']', ')', 'print', '(', '""status: ""', ',', 'r', '.', 'headers', '[', ""'status'"", ']', ')', 'print', '(', '""cache-control: ""', ',', 'r', '.', 'headers', '[', ""'cache-control'"", ']', ')', 'print', '(', '""vary: ""', ',', 'r', '.', 'headers', '[', ""'vary'"", ']', ')', 'print', '(', '""x-github-media-type: ""', ',', 'r', '.', 'headers', '[', ""'x-github-media-type'"", ']', ')', 'print', '(', '""access-control-expose-headers: ""', ',', 'r', '.', 'headers', '[', ""'access-control-expose-headers'"", ']', ')', 'print', '(', '""strict-transport-security: ""', ',', 'r', '.', 'headers', '[', ""'strict-transport-security'"", ']', ')', 'print', '(', '""x-content-type-options: ""', ',', 'r', '.', 'headers', '[', ""'x-content-type-options'"", ']', ')', 'print', '(', '""x-xss-protection: ""', ',', 'r', '.', 'headers', '[', ""'x-xss-protection'"", ']', ')', 'print', '(', '""referrer-policy: ""', ',', 'r', '.', 'headers', '[', ""'referrer-policy'"", ']', ')', 'print', '(', '""content-security-policy: ""', ',', 'r', '.', 'headers', '[', ""'content-security-policy'"", ']', ')', 'print', '(', '""content-encoding: ""', ',', 'r', '.', 'headers', '[', ""'content-encoding'"", ']', ')', 'print', '(', '""X-Ratelimit-Remaining: ""', ',', 'r', '.', 'headers', '[', ""'X-Ratelimit-Remaining'"", ']', ')', 'print', '(', '""X-Ratelimit-Reset: ""', ',', 'r', '.', 'headers', '[', ""'X-Ratelimit-Reset'"", ']', ')', 'print', '(', '""X-Ratelimit-Used: ""', ',', 'r', '.', 'headers', '[', ""'X-Ratelimit-Used'"", ']', ')', 'print', '(', '""Accept-Ranges:""', ',', 'r', '.', 'headers', '[', ""'Accept-Ranges'"", ']', ')', 'print', '(', '""X-GitHub-Request-Id:""', ',', 'r', '.', 'headers', '[', ""'X-GitHub-Request-Id'"", ']', ')']"
1579,"['write', 'numpy', 'program', 'test', 'whether', 'specified', 'value', 'present', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '[', '1.12', ',', '2.0', ',', '3.45', ']', ',', '[', '2.33', ',', '5.12', ',', '6.0', ']', ']', ',', 'float', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '2', 'in', 'x', ')', 'print', '(', '0', 'in', 'x', ')', 'print', '(', '6', 'in', 'x', ')', 'print', '(', '2.3', 'in', 'x', ')', 'print', '(', '5.12', 'in', 'x', ')']"
1580,"['write', 'python', 'program', 'define', 'string', 'containing', 'special', 'character', 'various', 'form']","['print', '(', ')', 'print', '(', '""\\#{\'}${\\""}@/""', ')', 'print', '(', '""\\#{\'}${""', '\'""\'', '""}@/""', ')', 'print', '(', 'r""""""\\#{\'}${""}@/""""""', ')', 'print', '(', '\'\\#{\\\'}${""}@/\'', ')', 'print', '(', ""'\\#{'"", '""\'""', '\'}${""}@/\'', ')', 'print', '(', 'r\'\'\'\\#{\'}${""}@/\'\'\'', ')', 'print', '(', ')']"
1581,"['write', 'python', 'program', 'create', 'list', 'taking', 'alternate', 'element', 'given', 'list']","['def', 'alternate_elements', '(', 'list_data', ')', ':', 'result', '=', '[', ']', 'for', 'item', 'in', 'list_data', '[', ':', ':', '2', ']', ':', 'result', '.', 'append', '(', 'item', ')', 'return', 'result', 'colors', '=', '[', '""red""', ',', '""black""', ',', '""white""', ',', '""green""', ',', '""orange""', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'colors', ')', 'print', '(', '""List with alternate elements from the said list:""', ')', 'print', '(', 'alternate_elements', '(', 'colors', ')', ')', 'nums', '=', '[', '2', ',', '0', ',', '3', ',', '4', ',', '0', ',', '2', ',', '8', ',', '3', ',', '4', ',', '2', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""List with alternate elements from the said list:""', ')', 'print', '(', 'alternate_elements', '(', 'nums', ')', ')']"
1582,"['write', 'python', 'program', 'convert', 'given', 'list', 'tuples', 'list', 'string']","['def', 'tuples_to_list_str', '(', 'lst', ')', ':', 'result', '=', '[', '(', '""%s ""', '*', 'len', '(', 'el', ')', '%', 'el', ')', '.', 'strip', '(', ')', 'for', 'el', 'in', 'lst', ']', 'return', 'result', 'colors', '=', '[', '(', ""'red'"", ',', ""'green'"", ')', ',', '(', ""'black'"", ',', ""'white'"", ')', ',', '(', ""'orange'"", ',', ""'pink'"", ')', ']', 'print', '(', '""Original list of tuples:""', ')', 'print', '(', 'colors', ')', 'print', '(', '""\\nConvert the said list of tuples to a list of strings:""', ')', 'print', '(', 'tuples_to_list_str', '(', 'colors', ')', ')', 'names', '=', '[', '(', ""'Laiba'"", ',', ""'Delacruz'"", ')', ',', '(', ""'Mali'"", ',', ""'Stacey'"", ',', ""'Drummond'"", ')', ',', '(', ""'Raja'"", ',', ""'Welch'"", ')', ',', '(', ""'Saarah'"", ',', ""'Stone'"", ')', ']', 'print', '(', '""\\nOriginal list of tuples:""', ')', 'print', '(', 'names', ')', 'print', '(', '""\\nConvert the said list of tuples to a list of strings:""', ')', 'print', '(', 'tuples_to_list_str', '(', 'names', ')', ')']"
1583,"['write', 'python', 'program', 'make', 'two', 'given', 'string', 'lower', 'case', 'may', 'may', 'length', 'anagram', 'removing', 'character', 'string']","['def', 'make_map', '(', 's', ')', ':', 'temp_map', '=', '{', '}', 'for', 'char', 'in', 's', ':', 'if', 'char', 'not', 'in', 'temp_map', ':', 'temp_map', '[', 'char', ']', '=', '1', 'else', ':', 'temp_map', '[', 'char', ']', '+=', '1', 'return', 'temp_map', 'def', 'make_anagram', '(', 'str1', ',', 'str2', ')', ':', 'str1_map1', '=', 'make_map', '(', 'str1', ')', 'str2_map2', '=', 'make_map', '(', 'str2', ')', 'ctr', '=', '0', 'for', 'key', 'in', 'str2_map2', '.', 'keys', '(', ')', ':', 'if', 'key', 'not', 'in', 'str1_map1', ':', 'ctr', '+=', 'str2_map2', '[', 'key', ']', 'else', ':', 'ctr', '+=', 'max', '(', '0', ',', 'str2_map2', '[', 'key', ']', '-', 'str1_map1', '[', 'key', ']', ')', 'for', 'key', 'in', 'str1_map1', '.', 'keys', '(', ')', ':', 'if', 'key', 'not', 'in', 'str2_map2', ':', 'ctr', '+=', 'str1_map1', '[', 'key', ']', 'else', ':', 'ctr', '+=', 'max', '(', '0', ',', 'str1_map1', '[', 'key', ']', '-', 'str2_map2', '[', 'key', ']', ')', 'return', 'ctr', 'str1', '=', 'input', '(', '""Input string1: ""', ')', 'str2', '=', 'input', '(', '""Input string2: ""', ')', 'print', '(', 'make_anagram', '(', 'str1', ',', 'str2', ')', ')']"
1584,"['write', 'python', 'program', 'convert', 'json', 'encoded', 'data', 'python', 'object']","['import', 'json', 'jobj_dict', '=', '\'{""name"": ""David"", ""age"": 6, ""class"": ""I""}\'', 'jobj_list', '=', '\'[""Red"", ""Green"", ""Black""]\'', 'jobj_string', '=', '\'""Python Json""\'', 'jobj_int', '=', ""'1234'"", 'jobj_float', '=', ""'21.34'"", 'python_dict', '=', 'json', '.', 'loads', '(', 'jobj_dict', ')', 'python_list', '=', 'json', '.', 'loads', '(', 'jobj_list', ')', 'python_str', '=', 'json', '.', 'loads', '(', 'jobj_string', ')', 'python_int', '=', 'json', '.', 'loads', '(', 'jobj_int', ')', 'python_float', '=', 'json', '.', 'loads', '(', 'jobj_float', ')', 'print', '(', '""Python dictionary: ""', ',', 'python_dict', ')', 'print', '(', '""Python list: ""', ',', 'python_list', ')', 'print', '(', '""Python string: ""', ',', 'python_str', ')', 'print', '(', '""Python integer: ""', ',', 'python_int', ')', 'print', '(', '""Python float: ""', ',', 'python_float', ')']"
1585,"['write', 'python', 'program', 'extract', 'url', 'webpage', 'pythonorg', 'nested', 'within', 'li', 'tag']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup', 'url', '=', ""'https://www.python.org/'"", 'reqs', '=', 'requests', '.', 'get', '(', 'url', ')', 'soup', '=', 'BeautifulSoup', '(', 'reqs', '.', 'text', ',', ""'lxml'"", ')', 'urls', '=', '[', ']', 'for', 'h', 'in', 'soup', '.', 'find_all', '(', ""'li'"", ')', ':', 'a', '=', 'h', '.', 'find', '(', ""'a'"", ')', 'urls', '.', 'append', '(', 'a', '.', 'attrs', '[', ""'href'"", ']', ')', 'print', '(', 'urls', ')']"
1586,"['write', 'python', 'program', 'counting', 'sort']","['def', 'counting_sort', '(', 'array1', ',', 'max_val', ')', ':', 'm', '=', 'max_val', '+', '1', 'count', '=', '[', '0', ']', '*', 'm', 'for', 'a', 'in', 'array1', ':', 'count', '[', 'a', ']', '+=', '1', 'i', '=', '0', 'for', 'a', 'in', 'range', '(', 'm', ')', ':', 'for', 'c', 'in', 'range', '(', 'count', '[', 'a', ']', ')', ':', 'array1', '[', 'i', ']', '=', 'a', 'i', '+=', '1', 'return', 'array1', 'print', '(', 'counting_sort', '(', '[', '1', ',', '2', ',', '7', ',', '3', ',', '2', ',', '1', ',', '4', ',', '2', ',', '3', ',', '2', ',', '1', ']', ',', '7', ')', ')']"
1587,"['write', 'numpy', 'program', 'create', 'numpy', 'array', 'integer', 'generator']","['import', 'numpy', 'as', 'np', 'iterable', '=', '(', 'x', 'for', 'x', 'in', 'range', '(', '10', ')', ')', 'print', '(', 'np', '.', 'fromiter', '(', 'iterable', ',', 'np', '.', 'int', ')', ')']"
1588,"['write', 'python', 'program', 'create', 'iso', 'year', 'iso', 'week', 'number', 'iso', 'weekday', 'iso', 'formatted', 'representation', 'date', 'time']","['import', 'arrow', 'a', '=', 'arrow', '.', 'utcnow', '(', ')', 'print', '(', '""Current datetime:""', ')', 'print', '(', 'a', ')', 'print', '(', '""\\n3-tuple - ISO year, ISO week number, ISO weekday:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'isocalendar', '(', ')', ')', 'print', '(', '""\\nISO 8601 formatted representation of the date and time:""', ')', 'print', '(', 'arrow', '.', 'utcnow', '(', ')', '.', 'isoformat', '(', ')', ')']"
1589,"['write', 'python', 'program', 'get', 'frequency', 'element', 'given', 'list', 'list', 'use', 'collection', 'module']","['from', 'collections', 'import', 'Counter', 'from', 'itertools', 'import', 'chain', 'nums', '=', '[', '[', '1', ',', '2', ',', '3', ',', '2', ']', ',', '[', '4', ',', '5', ',', '6', ',', '2', ']', ',', '[', '7', ',', '1', ',', '9', ',', '5', ']', ',', ']', 'print', '(', '""Original list of lists:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nFrequency of the elements in the said list of lists:""', ')', 'result', '=', 'Counter', '(', 'chain', '.', 'from_iterable', '(', 'nums', ')', ')', 'print', '(', 'result', ')']"
1590,"['write', 'python', 'program', 'concatenate', 'n', 'string']","['list_of_colors', '=', '[', ""'Red'"", ',', ""'White'"", ',', ""'Black'"", ']', 'colors', '=', ""'-'"", '.', 'join', '(', 'list_of_colors', ')', 'print', '(', ')', 'print', '(', '""All Colors: ""', '+', 'colors', ')', 'print', '(', ')']"
1591,"['write', 'python', 'program', 'calculate', 'harmonic', 'sum']","['def', 'harmonic_sum', '(', 'n', ')', ':', 'if', 'n', '<', '2', ':', 'return', '1', 'else', ':', 'return', '1', '/', 'n', '+', '(', 'harmonic_sum', '(', 'n', '-', '1', ')', ')', 'print', '(', 'harmonic_sum', '(', '7', ')', ')', 'print', '(', 'harmonic_sum', '(', '4', ')', ')']"
1592,"['write', 'python', 'program', 'create', 'given', 'flat', 'list', 'key', 'flat', 'dictionary']","['def', 'keys_only', '(', 'students', ')', ':', 'return', 'list', '(', 'students', '.', 'keys', '(', ')', ')', 'students', '=', '{', ""'Laura'"", ':', '10', ',', ""'Spencer'"", ':', '11', ',', ""'Bridget'"", ':', '9', ',', ""'Howard '"", ':', '10', ',', '}', 'print', '(', '""Original directory elements:""', ')', 'print', '(', 'students', ')', 'print', '(', '""\\nFlat list of all the keys of the said dictionary:""', ')', 'print', '(', 'keys_only', '(', 'students', ')', ')']"
1593,"['write', 'numpy', 'program', 'create', 'array', 'shape', 'convert', 'array', 'element', 'smaller', 'chunk']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '12', ')', '.', 'reshape', '(', '3', ',', '4', ')', 'print', '(', '""Original array elements:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Above array in small chuncks:""', ')', 'for', 'a', 'in', 'np', '.', 'nditer', '(', 'x', ',', 'flags', '=', '[', ""'external_loop'"", ']', ',', 'order', '=', ""'F'"", ')', ':', 'print', '(', 'a', ')']"
1594,"['write', 'python', 'program', 'test', 'whether', 'given', 'path', 'exists', 'path', 'exist', 'find', 'filename', 'directory', 'portion', 'said', 'path']","['import', 'os', 'print', '(', '""Test a path exists or not:""', ')', 'path', '=', ""r'g:\\\\testpath\\\\a.txt'"", 'print', '(', 'os', '.', 'path', '.', 'exists', '(', 'path', ')', ')', 'path', '=', ""r'g:\\\\testpath\\\\p.txt'"", 'print', '(', 'os', '.', 'path', '.', 'exists', '(', 'path', ')', ')', 'print', '(', '""\\nFile name of the path:""', ')', 'print', '(', 'os', '.', 'path', '.', 'basename', '(', 'path', ')', ')', 'print', '(', '""\\nDir name of the path:""', ')', 'print', '(', 'os', '.', 'path', '.', 'dirname', '(', 'path', ')', ')']"
1595,"['write', 'python', 'program', 'retrieve', 'current', 'working', 'directory', 'change', 'dir', 'moving', 'one']","['import', 'os', 'print', '(', ""'Current dir:'"", ',', 'os', '.', 'getcwd', '(', ')', ')', 'print', '(', ""'\\nChange the dir (moving up one):'"", ',', 'os', '.', 'pardir', ')', 'os', '.', 'chdir', '(', 'os', '.', 'pardir', ')', 'print', '(', ""'Current dir:'"", ',', 'os', '.', 'getcwd', '(', ')', ')', 'print', '(', ""'\\nChange the dir (moving up one):'"", ',', 'os', '.', 'pardir', ')', 'os', '.', 'chdir', '(', 'os', '.', 'pardir', ')', 'print', '(', ""'Current dir:'"", ',', 'os', '.', 'getcwd', '(', ')', ')']"
1596,"['write', 'panda', 'program', 'create', 'time', 'series', 'using', 'three', 'month', 'frequency']","['import', 'pandas', 'as', 'pd', 'time_series', '=', 'pd', '.', 'date_range', '(', ""'1/1/2021'"", ',', 'periods', '=', '36', ',', 'freq', '=', ""'3M'"", ')', 'print', '(', '""Time series using three months frequency:""', ')', 'print', '(', 'time_series', ')']"
1597,"['write', 'panda', 'program', 'create', 'comparison', 'top', 'year', 'ufo', 'sighted', 'v', 'hour', 'day']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'most_sightings_years', '=', 'df', '[', ""'Date_time'"", ']', '.', 'dt', '.', 'year', '.', 'value_counts', '(', ')', '.', 'head', '(', '10', ')', 'def', 'is_top_years', '(', 'year', ')', ':', 'if', 'year', 'in', 'most_sightings_years', '.', 'index', ':', 'return', 'year', 'hour_v_year', '=', 'df', '.', 'pivot_table', '(', 'columns', '=', 'df', '[', ""'Date_time'"", ']', '.', 'dt', '.', 'hour', ',', 'index', '=', 'df', '[', ""'Date_time'"", ']', '.', 'dt', '.', 'year', '.', 'apply', '(', 'is_top_years', ')', ',', 'aggfunc', '=', ""'count'"", ',', 'values', '=', ""'city'"", ')', 'hour_v_year', '.', 'columns', '=', 'hour_v_year', '.', 'columns', '.', 'astype', '(', 'int', ')', 'hour_v_year', '.', 'columns', '=', 'hour_v_year', '.', 'columns', '.', 'astype', '(', 'str', ')', '+', '"":00""', 'hour_v_year', '.', 'index', '=', 'hour_v_year', '.', 'index', '.', 'astype', '(', 'int', ')', 'print', '(', '""\\nComparison of the top 10 years in which the UFO was sighted vs the hours of the day:""', ')', 'print', '(', 'hour_v_year', '.', 'head', '(', '10', ')', ')']"
1598,"['write', 'numpy', 'program', 'create', 'array', 'using', 'iterate']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'arange', '(', '10', ',', '22', ')', '.', 'reshape', '(', '(', '3', ',', '4', ')', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'a', ')', 'print', '(', '""Each element of the array is:""', ')', 'for', 'x', 'in', 'np', '.', 'nditer', '(', 'a', ')', ':', 'print', '(', 'x', ',', 'end', '=', '"" ""', ')']"
1599,"['write', 'numpy', 'program', 'calculate', 'average', 'value', 'two', 'given', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'array1', '=', '[', '[', '0', ',', '1', ']', ',', '[', '2', ',', '3', ']', ']', 'array2', '=', '[', '[', '4', ',', '5', ']', ',', '[', '0', ',', '3', ']', ']', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'array1', ')', 'print', '(', 'array2', ')', 'print', '(', '""Average values of two said numpy arrays:""', ')', 'result', '=', '(', 'np', '.', 'array', '(', 'array1', ')', '+', 'np', '.', 'array', '(', 'array2', ')', ')', '/', '2', 'print', '(', 'result', ')']"
1600,"['write', 'numpy', 'program', 'search', 'index', 'given', 'array', 'another', 'given', 'array']","['import', 'numpy', 'as', 'np', 'np_array', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ',', '6', ']', ',', '[', '7', ',', '8', ',', '9', ']', ',', '[', '10', ',', '11', ',', '12', ']', ']', ')', 'test_array', '=', 'np', '.', 'array', '(', '[', '4', ',', '5', ',', '6', ']', ')', 'print', '(', '""Original Numpy array:""', ')', 'print', '(', 'np_array', ')', 'print', '(', '""Searched array:""', ')', 'print', '(', 'test_array', ')', 'print', '(', '""Index of the searched array in the original array:""', ')', 'print', '(', 'np', '.', 'where', '(', '(', 'np_array', '==', 'test_array', ')', '.', 'all', '(', '1', ')', ')', '[', '0', ']', ')']"
1601,"['write', 'python', 'program', 'get', 'frequency', 'element', 'given', 'list', 'list']","['def', 'count_elements_lists', '(', 'nums', ')', ':', 'nums', '=', '[', 'item', 'for', 'sublist', 'in', 'nums', 'for', 'item', 'in', 'sublist', ']', 'dic_data', '=', '{', '}', 'for', 'num', 'in', 'nums', ':', 'if', 'num', 'in', 'dic_data', '.', 'keys', '(', ')', ':', 'dic_data', '[', 'num', ']', '+=', '1', 'else', ':', 'key', '=', 'num', 'value', '=', '1', 'dic_data', '[', 'key', ']', '=', 'value', 'return', 'dic_data', 'nums', '=', '[', '[', '1', ',', '2', ',', '3', ',', '2', ']', ',', '[', '4', ',', '5', ',', '6', ',', '2', ']', ',', '[', '7', ',', '8', ',', '9', ',', '5', ']', ',', ']', 'print', '(', '""Original list of lists:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nFrequency of the elements in the said list of lists:""', ')', 'print', '(', 'count_elements_lists', '(', 'nums', ')', ')']"
1602,"['write', 'python', 'program', 'perform', 'counter', 'arithmetic', 'set', 'operation', 'aggregating', 'result']","['import', 'collections', 'c1', '=', 'collections', '.', 'Counter', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ')', 'c2', '=', 'collections', '.', 'Counter', '(', '[', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', ')', 'print', '(', ""'C1:'"", ',', 'c1', ')', 'print', '(', ""'C2:'"", ',', 'c2', ')', 'print', '(', ""'\\nCombined counts:'"", ')', 'print', '(', 'c1', '+', 'c2', ')', 'print', '(', ""'\\nSubtraction:'"", ')', 'print', '(', 'c1', '-', 'c2', ')', 'print', '(', ""'\\nIntersection (taking positive minimums):'"", ')', 'print', '(', 'c1', '&', 'c2', ')', 'print', '(', ""'\\nUnion (taking maximums):'"", ')', 'print', '(', 'c1', '|', 'c2', ')']"
1603,"['write', 'python', 'program', 'create', 'group', 'similar', 'item', 'given', 'list']","['import', 'itertools', 'as', 'it', 'def', 'group_similar_items', '(', 'seq', ')', ':', 'result', '=', '[', 'list', '(', 'el', ')', 'for', '_', ',', 'el', 'in', 'it', '.', 'groupby', '(', 'seq', ',', 'lambda', 'x', ':', 'x', '.', 'split', '(', ""'_'"", ')', '[', '0', ']', ')', ']', 'return', 'result', 'colors', '=', '[', ""'red_1'"", ',', ""'red_2'"", ',', ""'green_1'"", ',', ""'green_2'"", ',', ""'green_3'"", ',', ""'orange_1'"", ',', ""'orange_2'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'colors', ')', 'print', '(', '""\\nGroup similar items of the said list:""', ')', 'print', '(', 'group_similar_items', '(', 'colors', ')', ')', 'colors', '=', '[', ""'red_1'"", ',', ""'green-1'"", ',', ""'green_2'"", ',', ""'green_3'"", ',', ""'orange-1'"", ',', ""'orange_2'"", ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'colors', ')', 'print', '(', '""\\nGroup similar items of the said list:""', ')', 'print', '(', 'group_similar_items', '(', 'colors', ')', ')']"
1604,"['write', 'python', 'program', 'count', 'display', 'vowel', 'given', 'text']","['def', 'vowel', '(', 'text', ')', ':', 'vowels', '=', '""aeiuoAEIOU""', 'print', '(', 'len', '(', '[', 'letter', 'for', 'letter', 'in', 'text', 'if', 'letter', 'in', 'vowels', ']', ')', ')', 'print', '(', '[', 'letter', 'for', 'letter', 'in', 'text', 'if', 'letter', 'in', 'vowels', ']', ')', 'vowel', '(', ""'w3resource'"", ')', ';']"
1605,"['write', 'python', 'program', 'calculate', 'surface', 'volume', 'area', 'cylinder']","['pi', '=', '22', '/', '7', 'height', '=', 'float', '(', 'input', '(', ""'Height of cylinder: '"", ')', ')', 'radian', '=', 'float', '(', 'input', '(', ""'Radius of cylinder: '"", ')', ')', 'volume', '=', 'pi', '*', 'radian', '*', 'radian', '*', 'height', 'sur_area', '=', '(', '(', '2', '*', 'pi', '*', 'radian', ')', '*', 'height', ')', '+', '(', '(', 'pi', '*', 'radian', '**', '2', ')', '*', '2', ')', 'print', '(', '""Volume is: ""', ',', 'volume', ')', 'print', '(', '""Surface Area is: ""', ',', 'sur_area', ')']"
1606,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'total', 'sale', 'amount', 'region', 'wise', 'manager', 'wise']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\SaleData.xlsx'"", ')', 'print', '(', 'pd', '.', 'pivot_table', '(', 'df', ',', 'index', '=', '[', '""Region""', ',', '""Manager""', ']', ',', 'values', '=', '[', '""Sale_amt""', ']', ',', 'aggfunc', '=', 'np', '.', 'sum', ')', ')']"
1607,"['write', 'python', 'program', 'sort', 'list', 'element', 'using', 'gnome', 'sort']","['def', 'gnome_sort', '(', 'nums', ')', ':', 'if', 'len', '(', 'nums', ')', '<=', '1', ':', 'return', 'nums', 'i', '=', '1', 'while', 'i', '<', 'len', '(', 'nums', ')', ':', 'if', 'nums', '[', 'i', '-', '1', ']', '<=', 'nums', '[', 'i', ']', ':', 'i', '+=', '1', 'else', ':', 'nums', '[', 'i', '-', '1', ']', ',', 'nums', '[', 'i', ']', '=', 'nums', '[', 'i', ']', ',', 'nums', '[', 'i', '-', '1', ']', 'i', '-=', '1', 'if', '(', 'i', '==', '0', ')', ':', 'i', '=', '1', 'user_input', '=', 'input', '(', '""Input numbers separated by a comma:\\n""', ')', '.', 'strip', '(', ')', 'nums', '=', '[', 'int', '(', 'item', ')', 'for', 'item', 'in', 'user_input', '.', 'split', '(', ""','"", ')', ']', 'gnome_sort', '(', 'nums', ')', 'print', '(', 'nums', ')']"
1608,"['write', 'panda', 'program', 'split', 'given', 'dataframe', 'group', 'list', 'key', 'groupby', 'object']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'school_code'"", ':', '[', ""'s001'"", ',', ""'s002'"", ',', ""'s003'"", ',', ""'s001'"", ',', ""'s002'"", ',', ""'s004'"", ']', ',', ""'class'"", ':', '[', ""'V'"", ',', ""'V'"", ',', ""'VI'"", ',', ""'VI'"", ',', ""'V'"", ',', ""'VI'"", ']', ',', ""'name'"", ':', '[', ""'Alberto Franco'"", ',', ""'Gino Mcneill'"", ',', ""'Ryan Parkes'"", ',', ""'Eesha Hinton'"", ',', ""'Gino Mcneill'"", ',', ""'David Parkes'"", ']', ',', ""'date_Of_Birth '"", ':', '[', ""'15/05/2002'"", ',', ""'17/05/2002'"", ',', ""'16/02/1999'"", ',', ""'25/09/1998'"", ',', ""'11/05/2002'"", ',', ""'15/09/1997'"", ']', ',', ""'age'"", ':', '[', '12', ',', '12', ',', '13', ',', '13', ',', '14', ',', '12', ']', ',', ""'height'"", ':', '[', '173', ',', '192', ',', '186', ',', '167', ',', '151', ',', '159', ']', ',', ""'weight'"", ':', '[', '35', ',', '32', ',', '33', ',', '30', ',', '31', ',', '32', ']', ',', ""'address'"", ':', '[', ""'street1'"", ',', ""'street2'"", ',', ""'street3'"", ',', ""'street1'"", ',', ""'street2'"", ',', ""'street4'"", ']', '}', ',', 'index', '=', '[', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ',', ""'S4'"", ',', ""'S5'"", ',', ""'S6'"", ']', ')', 'print', '(', '""Original DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nSplit the data on school_code:""', ')', ';', 'gp', '=', 'df', '.', 'groupby', '(', ""'school_code'"", ')', 'print', '(', '""\\nList of all the keys:""', ')', 'print', '(', 'gp', '.', 'groups', '.', 'keys', '(', ')', ')']"
1609,"['write', 'panda', 'program', 'join', 'two', 'dataframes', 'using', 'common', 'column', 'dataframes']","['import', 'pandas', 'as', 'pd', 'student_data1', '=', 'pd', '.', 'DataFrame', '(', '{', ""'student_id'"", ':', '[', ""'S1'"", ',', ""'S2'"", ',', ""'S3'"", ',', ""'S4'"", ',', ""'S5'"", ']', ',', ""'name'"", ':', '[', ""'Danniella Fenton'"", ',', ""'Ryder Storey'"", ',', ""'Bryce Jensen'"", ',', ""'Ed Bernal'"", ',', ""'Kwame Morin'"", ']', ',', ""'marks'"", ':', '[', '200', ',', '210', ',', '190', ',', '222', ',', '199', ']', '}', ')', 'student_data2', '=', 'pd', '.', 'DataFrame', '(', '{', ""'student_id'"", ':', '[', ""'S4'"", ',', ""'S5'"", ',', ""'S6'"", ',', ""'S7'"", ',', ""'S8'"", ']', ',', ""'name'"", ':', '[', ""'Scarlette Fisher'"", ',', ""'Carla Williamson'"", ',', ""'Dante Morse'"", ',', ""'Kaiser William'"", ',', ""'Madeeha Preston'"", ']', ',', ""'marks'"", ':', '[', '201', ',', '200', ',', '198', ',', '219', ',', '201', ']', '}', ')', 'print', '(', '""Original DataFrames:""', ')', 'print', '(', 'student_data1', ')', 'print', '(', 'student_data2', ')', 'merged_data', '=', 'pd', '.', 'merge', '(', 'student_data1', ',', 'student_data2', ',', 'on', '=', ""'student_id'"", ',', 'how', '=', ""'inner'"", ')', 'print', '(', '""Merged data (inner join):""', ')', 'print', '(', 'merged_data', ')']"
1610,"['write', 'numpy', 'program', 'count', 'given', 'word', 'row', 'given', 'array', 'string', 'value']","['import', 'numpy', 'as', 'np', 'str1', '=', 'np', '.', 'array', '(', '[', '[', ""'Python'"", ',', ""'NumPy'"", ',', ""'Exercises'"", ']', ',', '[', ""'Python'"", ',', ""'Pandas'"", ',', ""'Exercises'"", ']', ',', '[', ""'Python'"", ',', ""'Machine learning'"", ',', ""'Python'"", ']', ']', ')', 'print', '(', '""Original array of string values:""', ')', 'print', '(', 'str1', ')', 'print', '(', '""\\nCount \'Python\' row wise in the above array of string values:""', ')', 'print', '(', 'np', '.', 'char', '.', 'count', '(', 'str1', ',', ""'Python'"", ')', ')']"
1611,"['write', 'numpy', 'program', 'create', 'array', 'shape', 'type', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '4', ',', 'dtype', '=', 'np', '.', 'int64', ')', 'y', '=', 'np', '.', 'full_like', '(', 'x', ',', '10', ')', 'print', '(', 'y', ')']"
1612,"['write', 'numpy', 'program', 'find', 'store', 'nonzero', 'unique', 'row', 'array', 'comparing', 'row', 'row', 'given', 'matrix']","['import', 'numpy', 'as', 'np', 'arra', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '1', ',', '0', ']', ',', '[', '0', ',', '0', ',', '0', ']', ',', '[', '0', ',', '2', ',', '3', ']', ',', '[', '0', ',', '0', ',', '0', ']', ',', '[', '0', ',', '-', '1', ',', '1', ']', ',', '[', '0', ',', '0', ',', '0', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'arra', ')', 'temp', '=', '{', '(', '0', ',', '0', ',', '0', ')', '}', 'result', '=', '[', ']', 'for', 'idx', ',', 'row', 'in', 'enumerate', '(', 'map', '(', 'tuple', ',', 'arra', ')', ')', ':', 'if', 'row', 'not', 'in', 'temp', ':', 'result', '.', 'append', '(', 'idx', ')', 'print', '(', '""\\nNon-zero unique rows:""', ')', 'print', '(', 'arra', '[', 'result', ']', ')']"
1613,"['write', 'python', 'program', 'print', 'list', 'spaceseparated', 'element']","['num', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', 'print', '(', '*', 'num', ')']"
1614,"['write', 'python', 'program', 'get', 'top', 'three', 'item', 'shop']","['from', 'heapq', 'import', 'nlargest', 'from', 'operator', 'import', 'itemgetter', 'items', '=', '{', ""'item1'"", ':', '45.50', ',', ""'item2'"", ':', '35', ',', ""'item3'"", ':', '41.30', ',', ""'item4'"", ':', '55', ',', ""'item5'"", ':', '24', '}', 'for', 'name', ',', 'value', 'in', 'nlargest', '(', '3', ',', 'items', '.', 'items', '(', ')', ',', 'key', '=', 'itemgetter', '(', '1', ')', ')', ':', 'print', '(', 'name', ',', 'value', ')']"
1615,"['write', 'python', 'program', 'insert', 'element', 'specified', 'position', 'given', 'list']","['def', 'insert_spec_position', '(', 'x', ',', 'n_list', ',', 'pos', ')', ':', 'return', 'n_list', '[', ':', 'pos', '-', '1', ']', '+', '[', 'x', ']', '+', 'n_list', '[', 'pos', '-', '1', ':', ']', 'n_list', '=', '[', '1', ',', '1', ',', '2', ',', '3', ',', '4', ',', '4', ',', '5', ',', '1', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'n_list', ')', 'kth_position', '=', '3', 'x', '=', '12', 'result', '=', 'insert_spec_position', '(', 'x', ',', 'n_list', ',', 'kth_position', ')', 'print', '(', '""\\nAfter inserting an element at kth position in the said list:""', ')', 'print', '(', 'result', ')']"
1616,"['write', 'python', 'program', 'check', 'given', 'function', 'return', 'true', 'every', 'element', 'list']","['def', 'every', '(', 'lst', ',', 'fn', '=', 'lambda', 'x', ':', 'x', ')', ':', 'return', 'all', '(', 'map', '(', 'fn', ',', 'lst', ')', ')', 'print', '(', 'every', '(', '[', '4', ',', '2', ',', '3', ']', ',', 'lambda', 'x', ':', 'x', '>', '1', ')', ')', 'print', '(', 'every', '(', '[', '4', ',', '2', ',', '3', ']', ',', 'lambda', 'x', ':', 'x', '<', '1', ')', ')', 'print', '(', 'every', '(', '[', '4', ',', '2', ',', '3', ']', ',', 'lambda', 'x', ':', 'x', '==', '1', ')', ')']"
1617,"['write', 'panda', 'program', 'calculate', 'frequency', 'count', 'unique', 'value', 'given', 'series']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'num_series', '=', 'pd', '.', 'Series', '(', 'np', '.', 'take', '(', 'list', '(', ""'0123456789'"", ')', ',', 'np', '.', 'random', '.', 'randint', '(', '10', ',', 'size', '=', '40', ')', ')', ')', 'print', '(', '""Original Series:""', ')', 'print', '(', 'num_series', ')', 'print', '(', '""Frequency of each unique value of the said series.""', ')', 'result', '=', 'num_series', '.', 'value_counts', '(', ')', 'print', '(', 'result', ')']"
1618,"['write', 'numpy', 'program', 'sort', 'pair', 'first', 'name', 'last', 'name', 'return', 'index', 'first', 'last', 'name', 'first', 'name']","['import', 'numpy', 'as', 'np', 'first_names', '=', '(', ""'Margery'"", ',', ""'Betsey'"", ',', ""'Shelley'"", ',', ""'Lanell'"", ',', ""'Genesis'"", ')', 'last_names', '=', '(', ""'Woolum'"", ',', ""'Battle'"", ',', ""'Plotner'"", ',', ""'Brien'"", ',', ""'Stahl'"", ')', 'x', '=', 'np', '.', 'lexsort', '(', '(', 'first_names', ',', 'last_names', ')', ')', 'print', '(', 'x', ')']"
1619,"['write', 'panda', 'program', 'split', 'following', 'datasets', 'group', 'customer', 'id', 'calculate', 'number', 'customer', 'starting', 'c', 'list', 'product', 'difference', 'maximum', 'purchase', 'amount', 'minimum', 'purchase', 'amount']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', '70009', ',', '70002', ',', '70004', ',', '70007', ',', '70005', ',', '70008', ',', '70010', ',', '70003', ',', '70012', ',', '70011', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'05-10-2012'"", ',', ""'09-10-2012'"", ',', ""'05-10-2012'"", ',', ""'08-17-2012'"", ',', ""'10-09-2012'"", ',', ""'07-27-2012'"", ',', ""'10-09-2012'"", ',', ""'10-10-2012'"", ',', ""'10-10-2012'"", ',', ""'06-17-2012'"", ',', ""'07-08-2012'"", ',', ""'04-25-2012'"", ']', ',', ""'customer_id'"", ':', '[', ""'C3001'"", ',', ""'C3001'"", ',', ""'D3005'"", ',', ""'D3001'"", ',', ""'C3005'"", ',', ""'D3001'"", ',', ""'C3005'"", ',', ""'D3001'"", ',', ""'D3005'"", ',', ""'C3001'"", ',', ""'D3005'"", ',', ""'D3005'"", ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5005', ',', '5001', ',', '5003', ',', '5002', ',', '5001', ',', '5001', ',', '5006', ',', '5003', ',', '5002', ',', '5007', ',', '5001', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'def', 'customer_id_C', '(', 'x', ')', ':', 'return', '(', 'x', '.', 'str', '[', '0', ']', '==', ""'C'"", ')', '.', 'sum', '(', ')', 'result', '=', 'df', '.', 'groupby', '(', '[', ""'salesman_id'"", ']', ')', '.', 'agg', '(', 'customer_id_start_C', '=', '(', ""'customer_id'"", ',', 'customer_id_C', ')', ',', 'customer_id_list', '=', '(', ""'customer_id'"", ',', 'lambda', 'x', ':', ""', '"", '.', 'join', '(', 'x', ')', ')', ',', 'purchase_amt_gap', '=', '(', ""'purch_amt'"", ',', 'lambda', 'x', ':', 'x', '.', 'max', '(', ')', '-', 'x', '.', 'min', '(', ')', ')', ')', 'print', '(', '""\\nNumber of customers  starting with ‘C’, the list of all products and the difference of maximum purchase amount and minimum purchase amount:""', ')', 'print', '(', 'result', ')']"
1620,"['write', 'python', 'program', 'read', 'given', 'csv', 'file', 'dictionary']","['import', 'csv', 'data', '=', 'csv', '.', 'DictReader', '(', 'open', '(', '""departments.csv""', ')', ')', 'print', '(', '""CSV file as a dictionary:\\n""', ')', 'for', 'row', 'in', 'data', ':', 'print', '(', 'row', ')']"
1621,"['write', 'panda', 'program', 'create', 'series', 'periodindex', 'represents', 'calendar', 'month', 'period', 'also', 'print', 'value', 'period']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pi', '=', 'pd', '.', 'Series', '(', 'np', '.', 'random', '.', 'randn', '(', '36', ')', ',', 'pd', '.', 'period_range', '(', ""'1/1/2029'"", ',', ""'12/31/2031'"", ',', 'freq', '=', ""'M'"", ')', ')', 'print', '(', '""PeriodIndex which represents all the calendar month periods in 2029 and 2030:""', ')', 'print', '(', 'pi', ')', 'print', '(', '""\\nValues for all periods in 2030:""', ')', 'print', '(', 'pi', '[', ""'2030'"", ']', ')']"
1622,"['write', 'python', 'program', 'sort', 'given', 'list', 'stringsnumbers', 'numerically', 'using', 'lambda']","['def', 'sort_numeric_strings', '(', 'nums_str', ')', ':', 'result', '=', 'sorted', '(', 'nums_str', ',', 'key', '=', 'lambda', 'el', ':', 'int', '(', 'el', ')', ')', 'return', 'result', 'nums_str', '=', '[', ""'4'"", ',', ""'12'"", ',', ""'45'"", ',', ""'7'"", ',', ""'0'"", ',', ""'100'"", ',', ""'200'"", ',', ""'-12'"", ',', ""'-500'"", ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums_str', ')', 'print', '(', '""\\nSort the said list of strings(numbers) numerically:""', ')', 'print', '(', 'sort_numeric_strings', '(', 'nums_str', ')', ')']"
1623,"['write', 'python', 'program', 'count', 'number', 'list', 'given', 'list', 'list']","['def', 'count_list', '(', 'input_list', ')', ':', 'return', 'len', '(', 'input_list', ')', 'list1', '=', '[', '[', '1', ',', '3', ']', ',', '[', '5', ',', '7', ']', ',', '[', '9', ',', '11', ']', ',', '[', '13', ',', '15', ',', '17', ']', ']', 'list2', '=', '[', '[', '2', ',', '4', ']', ',', '[', '[', '6', ',', '8', ']', ',', '[', '4', ',', '5', ',', '8', ']', ']', ',', '[', '10', ',', '12', ',', '14', ']', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'list1', ')', 'print', '(', '""\\nNumber of lists in said list of lists:""', ')', 'print', '(', 'count_list', '(', 'list1', ')', ')', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'list2', ')', 'print', '(', '""\\nNumber of lists in said list of lists:""', ')', 'print', '(', 'count_list', '(', 'list2', ')', ')']"
1624,"['write', 'python', 'program', 'create', 'datetime', 'object', 'converted', 'specified', 'timezone', 'using', 'arrow', 'module']","['import', 'arrow', 'utc', '=', 'arrow', '.', 'utcnow', '(', ')', 'pacific', '=', 'arrow', '.', 'now', '(', ""'US/Pacific'"", ')', 'nyc', '=', 'arrow', '.', 'now', '(', ""'America/Chicago'"", ')', '.', 'tzinfo', 'print', '(', 'pacific', '.', 'astimezone', '(', 'nyc', ')', ')']"
1625,"['write', 'python', 'program', 'sort', 'sublist', 'string', 'given', 'list', 'list']","['def', 'sort_sublists', '(', 'input_list', ')', ':', 'result', '=', 'list', '(', 'map', '(', 'sorted', ',', 'input_list', ')', ')', 'return', 'result', 'color1', '=', '[', '[', '""green""', ',', '""orange""', ']', ',', '[', '""black""', ',', '""white""', ']', ',', '[', '""white""', ',', '""black""', ',', '""orange""', ']', ']', 'print', '(', '""\\nOriginal list:""', ')', 'print', '(', 'color1', ')', 'print', '(', '""\\nAfter sorting each sublist of the said list of lists:""', ')', 'print', '(', 'sort_sublists', '(', 'color1', ')', ')']"
1626,"['write', 'panda', 'program', 'create', 'pivot', 'table', 'find', 'region', 'wise', 'item', 'wise', 'unit', 'sold']","['import', 'numpy', 'as', 'np', 'import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\SaleData.xlsx'"", ')', 'print', '(', 'pd', '.', 'pivot_table', '(', 'df', ',', 'index', '=', '[', '""Region""', ',', '""Item""', ']', ',', 'values', '=', '""Units""', ',', 'aggfunc', '=', 'np', '.', 'sum', ')', ')']"
1627,"['write', 'python', 'program', 'group', 'element', 'list', 'based', 'given', 'function', 'return', 'count', 'element', 'group']","['from', 'collections', 'import', 'defaultdict', 'def', 'count_by', '(', 'lst', ',', 'fn', '=', 'lambda', 'x', ':', 'x', ')', ':', 'count', '=', 'defaultdict', '(', 'int', ')', 'for', 'val', 'in', 'map', '(', 'fn', ',', 'lst', ')', ':', 'count', '[', 'val', ']', '+=', '1', 'return', 'dict', '(', 'count', ')', 'from', 'math', 'import', 'floor', 'print', '(', 'count_by', '(', '[', '6.1', ',', '4.2', ',', '6.3', ']', ',', 'floor', ')', ')', 'print', '(', 'count_by', '(', '[', ""'one'"", ',', ""'two'"", ',', ""'three'"", ']', ',', 'len', ')', ')']"
1628,"['write', 'python', 'program', 'find', 'tag', 'beneath', 'tag', 'given', 'html', 'document']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_doc', '=', '""""""\r<html>\r<head>\r<meta http-equiv=""Content-Type"" content=""text/html;\rcharset=iso-8859-1"">\r<title>An example of HTML page</title>\r</head>\r<body>\r<h2>This is an example HTML page</h2>\r<p>\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc at nisi velit,\raliquet iaculis est. Curabitur porttitor nisi vel lacus euismod egestas. In hac\rhabitasse platea dictumst. In sagittis magna eu odio interdum mollis. Phasellus\rsagittis pulvinar facilisis. Donec vel odio volutpat tortor volutpat commodo.\rDonec vehicula vulputate sem, vel iaculis urna molestie eget. Sed pellentesque\radipiscing tortor, at condimentum elit elementum sed. Mauris dignissim\relementum nunc, non elementum felis condimentum eu. In in turpis quis erat\rimperdiet vulputate. Pellentesque mauris turpis, dignissim sed iaculis eu,\reuismod eget ipsum. Vivamus mollis adipiscing viverra. Morbi at sem eget nisl\reuismod porta.</p>\r<p><a href=""https://www.w3resource.com/html/HTML-tutorials.php"">Learn HTML from\rw3resource.com</a></p>\r<p><a href=""https://www.w3resource.com/css/CSS-tutorials.php"">Learn CSS from \rw3resource.com</a></p>\r</body>\r</html>\r""""""', 'soup', '=', 'BeautifulSoup', '(', 'html_doc', ',', '""lxml""', ')', 'print', '(', '""\\na tag(s) Beneath body tag:""', ')', 'print', '(', 'soup', '.', 'select', '(', '""body a""', ')', ')', 'print', '(', '""\\nBeneath html head:""', ')', 'print', '(', 'soup', '.', 'select', '(', '""html head title""', ')', ')']"
1629,"['write', 'python', 'program', 'sort', 'given', 'mixed', 'list', 'integer', 'string', 'using', 'lambda', 'number', 'must', 'sorted', 'string']","['def', 'sort_mixed_list', '(', 'mixed_list', ')', ':', 'mixed_list', '.', 'sort', '(', 'key', '=', 'lambda', 'e', ':', '(', 'isinstance', '(', 'e', ',', 'str', ')', ',', 'e', ')', ')', 'return', 'mixed_list', 'mixed_list', '=', '[', '19', ',', ""'red'"", ',', '12', ',', ""'green'"", ',', ""'blue'"", ',', '10', ',', ""'white'"", ',', ""'green'"", ',', '1', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'mixed_list', ')', 'print', '(', '""\\nSort the said  mixed list of integers and strings:""', ')', 'print', '(', 'sort_mixed_list', '(', 'mixed_list', ')', ')']"
1630,"['write', 'python', 'program', 'decode', 'runlength', 'encoded', 'given', 'list']","['def', 'decode', '(', 'alist', ')', ':', 'def', 'aux', '(', 'g', ')', ':', 'if', 'isinstance', '(', 'g', ',', 'list', ')', ':', 'return', '[', '(', 'g', '[', '1', ']', ',', 'range', '(', 'g', '[', '0', ']', ')', ')', ']', 'else', ':', 'return', '[', '(', 'g', ',', '[', '0', ']', ')', ']', 'return', '[', 'x', 'for', 'g', 'in', 'alist', 'for', 'x', ',', 'R', 'in', 'aux', '(', 'g', ')', 'for', 'i', 'in', 'R', ']', 'n_list', '=', '[', '[', '2', ',', '1', ']', ',', '2', ',', '3', ',', '[', '2', ',', '4', ']', ',', '5', ',', '1', ']', 'print', '(', '""Original encoded list:""', ')', 'print', '(', 'n_list', ')', 'print', '(', '""\\nDecode a run-length encoded said list:""', ')', 'print', '(', 'decode', '(', 'n_list', ')', ')']"
1631,"['write', 'panda', 'program', 'convert', 'given', 'datetime', 'timestamp']","['import', 'pandas', 'as', 'pd', 'import', 'datetime', 'as', 'dt', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'DataFrame', '(', 'index', '=', 'pd', '.', 'DatetimeIndex', '(', 'start', '=', 'dt', '.', 'datetime', '(', '2019', ',', '1', ',', '1', ',', '0', ',', '0', ',', '1', ')', ',', 'end', '=', 'dt', '.', 'datetime', '(', '2019', ',', '1', ',', '1', ',', '10', ',', '0', ',', '1', ')', ',', 'freq', '=', ""'H'"", ')', ')', '.', 'reset_index', '(', ')', '.', 'rename', '(', 'columns', '=', '{', ""'index'"", ':', ""'datetime'"", '}', ')', 'print', '(', '""Sample datetime data:""', ')', 'print', '(', 'df', '.', 'head', '(', '10', ')', ')', 'df', '[', ""'ts'"", ']', '=', 'df', '.', 'datetime', '.', 'values', '.', 'astype', '(', 'np', '.', 'int64', ')', '//', '10', '**', '9', 'print', '(', '""\\nConvert datetime to timestamp:""', ')', 'print', '(', 'df', ')']"
1632,"['write', 'numpy', 'program', 'compute', 'mean', 'standard', 'deviation', 'variance', 'given', 'array', 'along', 'second', 'axis']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '6', ')', 'print', '(', '""\\nOriginal array:""', ')', 'print', '(', 'x', ')', 'r1', '=', 'np', '.', 'mean', '(', 'x', ')', 'r2', '=', 'np', '.', 'average', '(', 'x', ')', 'assert', 'np', '.', 'allclose', '(', 'r1', ',', 'r2', ')', 'print', '(', '""\\nMean: ""', ',', 'r1', ')', 'r1', '=', 'np', '.', 'std', '(', 'x', ')', 'r2', '=', 'np', '.', 'sqrt', '(', 'np', '.', 'mean', '(', '(', 'x', '-', 'np', '.', 'mean', '(', 'x', ')', ')', '**', '2', ')', ')', 'assert', 'np', '.', 'allclose', '(', 'r1', ',', 'r2', ')', 'print', '(', '""\\nstd: ""', ',', '1', ')', 'r1', '=', 'np', '.', 'var', '(', 'x', ')', 'r2', '=', 'np', '.', 'mean', '(', '(', 'x', '-', 'np', '.', 'mean', '(', 'x', ')', ')', '**', '2', ')', 'assert', 'np', '.', 'allclose', '(', 'r1', ',', 'r2', ')', 'print', '(', '""\\nvariance: ""', ',', 'r1', ')']"
1633,"['write', 'panda', 'program', 'drop', 'row', 'least', 'one', 'element', 'missing', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', 'np', '.', 'nan', ',', '70002', ',', '70004', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3002', ',', '3001', ',', '3001', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5003', ',', '5001', ',', 'np', '.', 'nan', ',', '5002', ',', '5001', ',', '5001', ',', 'np', '.', 'nan', ',', '5003', ',', '5002', ',', '5003', ',', 'np', '.', 'nan', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""\\nDrop the rows where at least one element is missing:""', ')', 'result', '=', 'df', '.', 'dropna', '(', ')', 'print', '(', 'result', ')']"
1634,"['write', 'numpy', 'program', 'find', 'position', 'index', 'specified', 'value', 'greater', 'existing', 'value', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'n', '=', '4', 'nums', '=', 'np', '.', 'arange', '(', '-', '6', ',', '6', ')', 'print', '(', '""\\nOriginal array:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nPosition of the index:""', ')', 'print', '(', 'np', '.', 'argmax', '(', 'nums', '>', 'n', '/', '2', ')', ')']"
1635,"['write', 'python', 'program', 'get', 'list', 'element', 'exist', 'list', 'applying', 'provided', 'function', 'list', 'element']","['def', 'intersection_by', '(', 'a', ',', 'b', ',', 'fn', ')', ':', '_b', '=', 'set', '(', 'map', '(', 'fn', ',', 'b', ')', ')', 'return', '[', 'item', 'for', 'item', 'in', 'a', 'if', 'fn', '(', 'item', ')', 'in', '_b', ']', 'from', 'math', 'import', 'floor', 'print', '(', 'intersection_by', '(', '[', '2.1', ',', '1.2', ']', ',', '[', '2.3', ',', '3.4', ']', ',', 'floor', ')', ')']"
1636,"['write', 'python', 'program', 'create', 'datetime', 'integer', 'float', 'string', 'timestamps', 'using', 'arrow', 'module']","['import', 'arrow', 'i', '=', 'arrow', '.', 'get', '(', '1857900545', ')', 'print', '(', '""Date from integers: ""', ')', 'print', '(', 'i', ')', 'f', '=', 'arrow', '.', 'get', '(', '1857900545.234323', ')', 'print', '(', '""\\nDate from floats: ""', ')', 'print', '(', 'f', ')', 's', '=', 'arrow', '.', 'get', '(', ""'1857900545'"", ')', 'print', '(', '""\\nDate from Strings: ""', ')', 'print', '(', 's', ')']"
1637,"['write', 'python', 'program', 'insert', 'item', 'front', 'given', 'doubly', 'linked', 'list']","['class', 'Node', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ',', 'next', '=', 'None', ',', 'prev', '=', 'None', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'next', 'self', '.', 'prev', '=', 'prev', 'class', 'doubly_linked_list', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'tail', '=', 'None', 'self', '.', 'count', '=', '0', 'def', 'append_item', '(', 'self', ',', 'data', ')', ':', 'new_item', '=', 'Node', '(', 'data', ',', 'None', ',', 'None', ')', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_item', 'self', '.', 'tail', '=', 'self', '.', 'head', 'else', ':', 'new_item', '.', 'prev', '=', 'self', '.', 'tail', 'self', '.', 'tail', '.', 'next', '=', 'new_item', 'self', '.', 'tail', '=', 'new_item', 'self', '.', 'count', '+=', '1', 'def', 'iter', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'item_val', '=', 'current', '.', 'data', 'current', '=', 'current', '.', 'next', 'yield', 'item_val', 'def', 'print_foward', '(', 'self', ')', ':', 'for', 'node', 'in', 'self', '.', 'iter', '(', ')', ':', 'print', '(', 'node', ')', 'def', 'insert_start', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'head', 'is', 'not', 'None', ':', 'new_node', '=', 'Node', '(', 'data', ',', 'None', ',', 'None', ')', 'new_node', '.', 'next', '=', 'self', '.', 'head', 'self', '.', 'head', '.', 'prev', '=', 'new_node', 'self', '.', 'head', '=', 'new_node', 'self', '.', 'count', '+=', '1', 'items', '=', 'doubly_linked_list', '(', ')', 'items', '.', 'append_item', '(', ""'PHP'"", ')', 'items', '.', 'append_item', '(', ""'Python'"", ')', 'items', '.', 'append_item', '(', ""'C#'"", ')', 'items', '.', 'append_item', '(', ""'C++'"", ')', 'items', '.', 'append_item', '(', ""'Java'"", ')', 'items', '.', 'append_item', '(', ""'SQL'"", ')', 'print', '(', '""Original list:""', ')', 'items', '.', 'print_foward', '(', ')', 'print', '(', '""\\nAppend item in front of the list:""', ')', 'items', '.', 'insert_start', '(', '""Perl""', ')', 'items', '.', 'print_foward', '(', ')']"
1638,"['write', 'python', 'program', 'select', 'odd', 'item', 'list']","['x', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ']', 'print', '(', 'x', '[', ':', ':', '2', ']', ')']"
1639,"['write', 'numpy', 'program', 'create', 'array', 'represents', 'rank', 'item', 'given', 'array']","['import', 'numpy', 'as', 'numpy', 'array', '=', 'numpy', '.', 'array', '(', '[', '24', ',', '27', ',', '30', ',', '29', ',', '18', ',', '14', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'array', ')', 'argsort_array', '=', 'array', '.', 'argsort', '(', ')', 'ranks_array', '=', 'numpy', '.', 'empty_like', '(', 'argsort_array', ')', 'ranks_array', '[', 'argsort_array', ']', '=', 'numpy', '.', 'arange', '(', 'len', '(', 'array', ')', ')', 'print', '(', '""\\nRank of each item of the said array:""', ')', 'print', '(', 'ranks_array', ')']"
1640,"['write', 'panda', 'program', 'split', 'dataset', 'group', 'two', 'column', 'count', 'row']","['import', 'pandas', 'as', 'pd', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'orders_data', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', '70009', ',', '70002', ',', '70004', ',', '70007', ',', '70005', ',', '70008', ',', '70010', ',', '70003', ',', '70012', ',', '70011', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', '270.65', ',', '65.26', ',', '110.5', ',', '948.5', ',', '2400.6', ',', '5760', ',', '1983.43', ',', '2480.4', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', ""'2012-10-05'"", ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3005', ',', '3001', ',', '3002', ',', '3009', ',', '3005', ',', '3007', ',', '3002', ',', '3004', ',', '3009', ',', '3008', ',', '3003', ',', '3002', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5005', ',', '5001', ',', '5003', ',', '5002', ',', '5001', ',', '5001', ',', '5006', ',', '5003', ',', '5002', ',', '5007', ',', '5001', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'orders_data', ')', 'print', '(', '""\\nGroup by two columns and count by each row:""', ')', 'result', '=', 'orders_data', '.', 'groupby', '(', '[', ""'salesman_id'"", ',', ""'customer_id'"", ']', ')', '.', 'size', '(', ')', '.', 'reset_index', '(', ')', '.', 'groupby', '(', '[', ""'salesman_id'"", ',', ""'customer_id'"", ']', ')', '[', '[', '0', ']', ']', '.', 'max', '(', ')', 'print', '(', 'result', ')']"
1641,"['write', 'numpy', 'program', 'encode', 'element', 'given', 'array', 'decode']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', ""'python exercises'"", ',', ""'PHP'"", ',', ""'java'"", ',', ""'C++'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""Original Array:""', ')', 'print', '(', 'x', ')', 'encoded_char', '=', 'np', '.', 'char', '.', 'encode', '(', 'x', ',', ""'cp500'"", ')', 'decoded_char', '=', 'np', '.', 'char', '.', 'decode', '(', 'encoded_char', ',', ""'cp500'"", ')', 'print', '(', '""\\nencoded =""', ',', 'encoded_char', ')', 'print', '(', '""decoded =""', ',', 'decoded_char', ')']"
1642,"['write', 'python', 'program', 'find', 'parent', 'process', 'id', 'real', 'user', 'id', 'current', 'process', 'change', 'real', 'user', 'id']","['import', 'os', 'print', '(', '""Parent’s process id:""', ',', 'os', '.', 'getppid', '(', ')', ')', 'uid', '=', 'os', '.', 'getuid', '(', ')', 'print', '(', '""\\nUser ID of the current process:""', ',', 'uid', ')', 'uid', '=', '1400', 'os', '.', 'setuid', '(', 'uid', ')', 'print', '(', '""\\nUser ID changed""', ')', 'print', '(', '""User ID of the current process:""', ',', 'os', '.', 'getuid', '(', ')', ')']"
1643,"['write', 'python', 'program', 'valid', 'ip', 'address']","['import', 'socket', 'addr', '=', ""'127.0.0.2561'"", 'try', ':', 'socket', '.', 'inet_aton', '(', 'addr', ')', 'print', '(', '""Valid IP""', ')', 'except', 'socket', '.', 'error', ':', 'print', '(', '""Invalid IP""', ')']"
1644,"['write', 'python', 'program', 'split', 'list', 'every', 'nth', 'element']","['C', '=', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", ',', ""'e'"", ',', ""'f'"", ',', ""'g'"", ',', ""'h'"", ',', ""'i'"", ',', ""'j'"", ',', ""'k'"", ',', ""'l'"", ',', ""'m'"", ',', ""'n'"", ']', 'def', 'list_slice', '(', 'S', ',', 'step', ')', ':', 'return', '[', 'S', '[', 'i', ':', ':', 'step', ']', 'for', 'i', 'in', 'range', '(', 'step', ')', ']', 'print', '(', 'list_slice', '(', 'C', ',', '3', ')', ')']"
1645,"['write', 'python', 'program', 'add', 'two', 'given', 'list', 'different', 'length', 'start', 'left', 'using', 'itertools', 'module']","['from', 'itertools', 'import', 'zip_longest', 'def', 'elementswise_left_join', '(', 'l1', ',', 'l2', ')', ':', 'result', '=', '[', 'a', '+', 'b', 'for', 'a', ',', 'b', 'in', 'zip_longest', '(', 'l1', ',', 'l2', ',', 'fillvalue', '=', '0', ')', ']', '[', ':', ':', '1', ']', 'return', 'result', 'nums1', '=', '[', '2', ',', '4', ',', '7', ',', '0', ',', '5', ',', '8', ']', 'nums2', '=', '[', '3', ',', '3', ',', '-', '1', ',', '7', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nAdd said two lists from left:""', ')', 'print', '(', 'elementswise_left_join', '(', 'nums1', ',', 'nums2', ')', ')', 'nums3', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', 'nums4', '=', '[', '2', ',', '4', ',', '-', '3', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums3', ')', 'print', '(', 'nums4', ')', 'print', '(', '""\\nAdd said two lists from left:""', ')', 'print', '(', 'elementswise_left_join', '(', 'nums3', ',', 'nums4', ')', ')']"
1646,"['write', 'python', 'program', 'write', 'list', 'file']","['color', '=', '[', ""'Red'"", ',', ""'Green'"", ',', ""'White'"", ',', ""'Black'"", ',', ""'Pink'"", ',', ""'Yellow'"", ']', 'with', 'open', '(', ""'abc.txt'"", ',', '""w""', ')', 'as', 'myfile', ':', 'for', 'c', 'in', 'color', ':', 'myfile', '.', 'write', '(', '""%s\\n""', '%', 'c', ')', 'content', '=', 'open', '(', ""'abc.txt'"", ')', 'print', '(', 'content', '.', 'read', '(', ')', ')']"
1647,"['write', 'python', 'program', 'find', 'item', 'maximum', 'occurrence', 'given', 'list']","['def', 'max_occurrences', '(', 'nums', ')', ':', 'max_val', '=', '0', 'result', '=', 'nums', '[', '0', ']', 'for', 'i', 'in', 'nums', ':', 'occu', '=', 'nums', '.', 'count', '(', 'i', ')', 'if', 'occu', '>', 'max_val', ':', 'max_val', '=', 'occu', 'result', '=', 'i', 'return', 'result', 'nums', '=', '[', '2', ',', '3', ',', '8', ',', '4', ',', '7', ',', '9', ',', '8', ',', '2', ',', '6', ',', '5', ',', '1', ',', '6', ',', '1', ',', '2', ',', '3', ',', '4', ',', '6', ',', '9', ',', '1', ',', '2', ']', 'print', '(', '""Original list:""', ')', 'print', '(', 'nums', ')', 'print', '(', '""\\nItem with maximum occurrences of the said list:""', ')', 'print', '(', 'max_occurrences', '(', 'nums', ')', ')']"
1648,"['write', 'numpy', 'program', 'compute', 'covariance', 'matrix', 'two', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '0', ',', '1', ',', '2', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '2', ',', '1', ',', '0', ']', ')', 'print', '(', '""\\nOriginal array1:""', ')', 'print', '(', 'x', ')', 'print', '(', '""\\nOriginal array1:""', ')', 'print', '(', 'y', ')', 'print', '(', '""\\nCovariance matrix of the said arrays:\\n""', ',', 'np', '.', 'cov', '(', 'x', ',', 'y', ')', ')']"
1649,"['write', 'panda', 'program', 'import', 'excel', 'data', 'panda', 'dataframe', 'display', 'last', 'ten', 'row']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\coalpublic2013.xlsx'"", ')', 'df', '.', 'tail', '(', 'n', '=', '10', ')']"
1650,"['write', 'numpy', 'program', 'save', 'numpy', 'array', 'text', 'file']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'arange', '(', '1.0', ',', '2.0', ',', '36.2', ')', 'np', '.', 'savetxt', '(', ""'file.out'"", ',', 'a', ',', 'delimiter', '=', ""','"", ')']"
1651,"['write', 'panda', 'program', 'import', 'excel', 'data', 'employeexlsx', 'panda', 'dataframe', 'convert', 'data', 'use', 'index']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'read_excel', '(', ""'E:\\employee.xlsx'"", ')', 'result', '=', 'df', '.', 'set_index', '(', '[', ""'hire_date'"", ']', ')', 'result']"
1652,"['write', 'python', 'program', 'create', 'datetime', 'given', 'timezoneaware', 'datetime', 'using', 'arrow', 'module']","['import', 'arrow', 'from', 'datetime', 'import', 'datetime', 'from', 'dateutil', 'import', 'tz', 'print', '(', '""\\nCreate a date from a given date and a given time zone:""', ')', 'd1', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2018', ',', '7', ',', '5', ')', ',', ""'US/Pacific'"", ')', 'print', '(', 'd1', ')', 'print', '(', '""\\nCreate a date from a given date and a time zone object from a string representation:""', ')', 'd2', '=', 'arrow', '.', 'get', '(', 'datetime', '(', '2017', ',', '7', ',', '5', ')', ',', 'tz', '.', 'gettz', '(', ""'America/Chicago'"", ')', ')', 'print', '(', 'd2', ')', 'd3', '=', 'arrow', '.', 'get', '(', 'datetime', '.', 'now', '(', 'tz', '.', 'gettz', '(', ""'US/Pacific'"", ')', ')', ')', 'print', '(', '""\\nCreate a date using current datetime and a specified time zone:""', ')', 'print', '(', 'd3', ')']"
1653,"['write', 'numpy', 'program', 'extract', 'row', 'compute', 'student', 'weight', 'given', 'array', 'student', 'information', 'specific', 'column', 'start', 'given', 'character']","['import', 'numpy', 'as', 'np', 'np', '.', 'set_printoptions', '(', 'linewidth', '=', '100', ')', 'student', '=', 'np', '.', 'array', '(', '[', '[', ""'01'"", ',', ""'V'"", ',', ""'Debby Pramod'"", ',', '30.21', ']', ',', '[', ""'02'"", ',', ""'V'"", ',', ""'Artemiy Ellie'"", ',', '29.32', ']', ',', '[', ""'03'"", ',', ""'V'"", ',', ""'Baptist Kamal'"", ',', '31.00', ']', ',', '[', ""'04'"", ',', ""'V'"", ',', ""'Lavanya Davide'"", ',', '30.22', ']', ',', '[', ""'05'"", ',', ""'V'"", ',', ""'Fulton Antwan'"", ',', '30.21', ']', ',', '[', ""'06'"", ',', ""'V'"", ',', ""'Euanthe Sandeep'"", ',', '31.00', ']', ',', '[', ""'07'"", ',', ""'V'"", ',', ""'Endzela Sanda'"", ',', '32.00', ']', ',', '[', ""'08'"", ',', ""'V'"", ',', ""'Victoire Waman'"", ',', '29.21', ']', ',', '[', ""'09'"", ',', ""'V'"", ',', ""'Briar Nur'"", ',', '30.00', ']', ',', '[', ""'10'"", ',', ""'V'"", ',', ""'Rose Lykos'"", ',', '32.00', ']', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'student', ')', 'char', '=', ""'E'"", 'result', '=', 'student', '[', 'np', '.', 'char', '.', 'startswith', '(', 'student', '[', ':', ',', '2', ']', ',', 'char', ')', ']', 'print', '(', '""\\nTotal weight, where student name starting with""', ',', 'char', ')', 'print', '(', 'np', '.', 'round', '(', 'result', '[', ':', ',', '3', ']', '.', 'astype', '(', 'float', ')', '.', 'sum', '(', ')', ',', '2', ')', ')', 'char', '=', ""'D'"", 'result', '=', 'student', '[', 'np', '.', 'char', '.', 'startswith', '(', 'student', '[', ':', ',', '2', ']', ',', 'char', ')', ']', 'print', '(', '""\\nTotal weight, where student name starting with""', ',', 'char', ')', 'print', '(', 'np', '.', 'round', '(', 'result', '[', ':', ',', '3', ']', '.', 'astype', '(', 'float', ')', '.', 'sum', '(', ')', ',', '2', ')', ')']"
1654,"['write', 'numpy', 'program', 'find', 'memory', 'size', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'n', '=', 'np', '.', 'zeros', '(', '(', '4', ',', '4', ')', ')', 'print', '(', '""%d bytes""', '%', '(', 'n', '.', 'size', '*', 'n', '.', 'itemsize', ')', ')']"
1655,"['write', 'python', 'program', 'check', 'whether', 'instance', 'complex']","['import', 'json', 'def', 'encode_complex', '(', 'object', ')', ':', 'if', 'isinstance', '(', 'object', ',', 'complex', ')', ':', 'return', '[', 'object', '.', 'real', ',', 'object', '.', 'imag', ']', 'raise', 'TypeError', '(', 'repr', '(', 'object', ')', '+', '"" is not JSON serialized""', ')', 'complex_obj', '=', 'json', '.', 'dumps', '(', '2', '+', '3j', ',', 'default', '=', 'encode_complex', ')', 'print', '(', 'complex_obj', ')']"
1656,"['write', 'python', 'program', 'print', 'number', 'specified', 'list', 'removing', 'even', 'number']","['num', '=', '[', '7', ',', '8', ',', '120', ',', '25', ',', '44', ',', '20', ',', '27', ']', 'num', '=', '[', 'x', 'for', 'x', 'in', 'num', 'if', 'x', '%', '2', '!=', '0', ']', 'print', '(', 'num', ')']"
1657,"['write', 'python', 'program', 'insert', 'tag', 'string', 'immediately', 'specified', 'tag', 'string']","['from', 'bs4', 'import', 'BeautifulSoup', 'soup', '=', 'BeautifulSoup', '(', '""<b>w3resource.com</b>""', ',', '""lxml""', ')', 'print', '(', '""Original Markup:""', ')', 'print', '(', 'soup', '.', 'b', ')', 'tag', '=', 'soup', '.', 'new_tag', '(', '""i""', ')', 'tag', '.', 'string', '=', '""Python""', 'print', '(', '""\\nNew Markup, before inserting the text:""', ')', 'soup', '.', 'b', '.', 'string', '.', 'insert_before', '(', 'tag', ')', 'print', '(', 'soup', '.', 'b', ')']"
1658,"['write', 'python', 'program', 'convert', 'array', 'ordinary', 'list', 'item']","['from', 'array', 'import', '*', 'array_num', '=', 'array', '(', ""'i'"", ',', '[', '1', ',', '3', ',', '5', ',', '3', ',', '7', ',', '1', ',', '9', ',', '3', ']', ')', 'print', '(', '""Original array: ""', '+', 'str', '(', 'array_num', ')', ')', 'num_list', '=', 'array_num', '.', 'tolist', '(', ')', 'print', '(', '""Convert the said array to an ordinary list with the same items:""', ')', 'print', '(', 'num_list', ')']"
1659,"['write', 'python', 'function', 'check', 'whether', 'string', 'pangram']","['import', 'string', ',', 'sys', 'def', 'ispangram', '(', 'str1', ',', 'alphabet', '=', 'string', '.', 'ascii_lowercase', ')', ':', 'alphaset', '=', 'set', '(', 'alphabet', ')', 'return', 'alphaset', '<=', 'set', '(', 'str1', '.', 'lower', '(', ')', ')', 'print', '(', 'ispangram', '(', ""'The quick brown fox jumps over the lazy dog'"", ')', ')']"
1660,"['write', 'python', 'program', 'create', 'new', 'deque', 'three', 'item', 'iterate', 'deques', 'element']","['from', 'collections', 'import', 'deque', 'dq', '=', 'deque', '(', ""'aeiou'"", ')', 'for', 'element', 'in', 'dq', ':', 'print', '(', 'element', ')']"
1661,"['write', 'numpy', 'program', 'convert', 'pil', 'image', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'import', 'PIL', 'img_data', '=', 'PIL', '.', 'Image', '.', 'open', '(', ""'w3resource-logo.png'"", ')', 'img_arr', '=', 'np', '.', 'array', '(', 'img_data', ')', 'print', '(', 'img_arr', ')']"
1662,"['write', 'panda', 'program', 'create', 'timewheel', 'hour', 'v', 'year', 'comparison', 'top', 'year', 'ufo', 'sighted']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'import', 'matplotlib', 'as', 'mpl', 'import', 'matplotlib', '.', 'cm', 'as', 'cm', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'most_sightings_years', '=', 'df', '[', ""'Date_time'"", ']', '.', 'dt', '.', 'year', '.', 'value_counts', '(', ')', '.', 'head', '(', '10', ')', 'def', 'is_top_years', '(', 'year', ')', ':', 'if', 'year', 'in', 'most_sightings_years', '.', 'index', ':', 'return', 'year', 'month_vs_year', '=', 'df', '.', 'pivot_table', '(', 'columns', '=', 'df', '[', ""'Date_time'"", ']', '.', 'dt', '.', 'month', ',', 'index', '=', 'df', '[', ""'Date_time'"", ']', '.', 'dt', '.', 'year', '.', 'apply', '(', 'is_top_years', ')', ',', 'aggfunc', '=', ""'count'"", ',', 'values', '=', ""'city'"", ')', 'month_vs_year', '.', 'index', '=', 'month_vs_year', '.', 'index', '.', 'astype', '(', 'int', ')', 'month_vs_year', '.', 'columns', '=', 'month_vs_year', '.', 'columns', '.', 'astype', '(', 'int', ')', 'print', '(', '""\\nComparison of the top 10 years in which the UFO was sighted vs each month:""', ')', 'def', 'pie_heatmap', '(', 'table', ',', 'cmap', '=', ""'coolwarm_r'"", ',', 'vmin', '=', 'None', ',', 'vmax', '=', 'None', ',', 'inner_r', '=', '0.25', ',', 'pie_args', '=', '{', '}', ')', ':', 'n', ',', 'm', '=', 'table', '.', 'shape', 'vmin', '=', 'table', '.', 'min', '(', ')', '.', 'min', '(', ')', 'if', 'vmin', 'is', 'None', 'else', 'vmin', 'vmax', '=', 'table', '.', 'max', '(', ')', '.', 'max', '(', ')', 'if', 'vmax', 'is', 'None', 'else', 'vmax', 'centre_circle', '=', 'plt', '.', 'Circle', '(', '(', '0', ',', '0', ')', ',', 'inner_r', ',', 'edgecolor', '=', ""'black'"", ',', 'facecolor', '=', ""'white'"", ',', 'fill', '=', 'True', ',', 'linewidth', '=', '0.25', ')', 'plt', '.', 'gcf', '(', ')', '.', 'gca', '(', ')', '.', 'add_artist', '(', 'centre_circle', ')', 'norm', '=', 'mpl', '.', 'colors', '.', 'Normalize', '(', 'vmin', '=', 'vmin', ',', 'vmax', '=', 'vmax', ')', 'cmapper', '=', 'cm', '.', 'ScalarMappable', '(', 'norm', '=', 'norm', ',', 'cmap', '=', 'cmap', ')', 'for', 'i', ',', '(', 'row_name', ',', 'row', ')', 'in', 'enumerate', '(', 'table', '.', 'iterrows', '(', ')', ')', ':', 'labels', '=', 'None', 'if', 'i', '>', '0', 'else', 'table', '.', 'columns', 'wedges', '=', 'plt', '.', 'pie', '(', '[', '1', ']', '*', 'm', ',', 'radius', '=', 'inner_r', '+', 'float', '(', 'n', '-', 'i', ')', '/', 'n', ',', 'colors', '=', '[', 'cmapper', '.', 'to_rgba', '(', 'x', ')', 'for', 'x', 'in', 'row', '.', 'values', ']', ',', 'labels', '=', 'labels', ',', 'startangle', '=', '90', ',', 'counterclock', '=', 'False', ',', 'wedgeprops', '=', '{', ""'linewidth'"", ':', '-', '1', '}', ',', '**', 'pie_args', ')', 'plt', '.', 'setp', '(', 'wedges', '[', '0', ']', ',', 'edgecolor', '=', ""'grey'"", ',', 'linewidth', '=', '1.5', ')', 'wedges', '=', 'plt', '.', 'pie', '(', '[', '1', ']', ',', 'radius', '=', 'inner_r', '+', 'float', '(', 'n', '-', 'i', '-', '1', ')', '/', 'n', ',', 'colors', '=', '[', ""'w'"", ']', ',', 'labels', '=', '[', 'row_name', ']', ',', 'startangle', '=', '-', '90', ',', 'wedgeprops', '=', '{', ""'linewidth'"", ':', '0', '}', ')', 'plt', '.', 'setp', '(', 'wedges', '[', '0', ']', ',', 'edgecolor', '=', ""'grey'"", ',', 'linewidth', '=', '1.5', ')', 'plt', '.', 'figure', '(', 'figsize', '=', '(', '8', ',', '8', ')', ')', 'plt', '.', 'title', '(', '""Timewheel of Hour Vs Year""', ',', 'y', '=', '1.08', ',', 'fontsize', '=', '30', ')', 'pie_heatmap', '(', 'month_vs_year', ',', 'vmin', '=', '-', '20', ',', 'vmax', '=', '80', ',', 'inner_r', '=', '0.2', ')']"
1663,"['write', 'numpy', 'program', 'check', 'whether', 'two', 'array', 'equal', 'element', 'wise']","['import', 'numpy', 'as', 'np', 'nums1', '=', 'np', '.', 'array', '(', '[', '0.5', ',', '1.5', ',', '0.2', ']', ')', 'nums2', '=', 'np', '.', 'array', '(', '[', '0.4999999999', ',', '1.500000000', ',', '0.2', ']', ')', 'np', '.', 'set_printoptions', '(', 'precision', '=', '15', ')', 'print', '(', '""Original arrays:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nTest said two arrays are equal (element wise) or not:?""', ')', 'print', '(', 'nums1', '==', 'nums2', ')', 'nums1', '=', 'np', '.', 'array', '(', '[', '0.5', ',', '1.5', ',', '0.23', ']', ')', 'nums2', '=', 'np', '.', 'array', '(', '[', '0.4999999999', ',', '1.5000000001', ',', '0.23', ']', ')', 'print', '(', '""\\nOriginal arrays:""', ')', 'np', '.', 'set_printoptions', '(', 'precision', '=', '15', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nTest said two arrays are equal (element wise) or not:?""', ')', 'print', '(', 'np', '.', 'equal', '(', 'nums1', ',', 'nums2', ')', ')']"
1664,"['write', 'python', 'program', 'add', 'two', 'given', 'list', 'different', 'length', 'start', 'right']","['def', 'elementswise_right_join', '(', 'l1', ',', 'l2', ')', ':', 'f_len', '=', 'len', '(', 'l1', ')', '-', '(', 'len', '(', 'l2', ')', '-', '1', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'l1', ')', ',', '0', ',', '-', '1', ')', ':', 'if', 'i', '-', 'f_len', '<', '0', ':', 'break', 'else', ':', 'l1', '[', 'i', '-', '1', ']', '=', 'l1', '[', 'i', '-', '1', ']', '+', 'l2', '[', 'i', '-', 'f_len', ']', 'return', 'l1', 'nums1', '=', '[', '2', ',', '4', ',', '7', ',', '0', ',', '5', ',', '8', ']', 'nums2', '=', '[', '3', ',', '3', ',', '-', '1', ',', '7', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nAdd said two lists from left:""', ')', 'print', '(', 'elementswise_right_join', '(', 'nums1', ',', 'nums2', ')', ')', 'nums3', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', 'nums4', '=', '[', '2', ',', '4', ',', '-', '3', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums3', ')', 'print', '(', 'nums4', ')', 'print', '(', '""\\nAdd said two lists from left:""', ')', 'print', '(', 'elementswise_right_join', '(', 'nums3', ',', 'nums4', ')', ')']"
1665,"['write', 'python', 'program', 'find', 'sorted', 'sequence', 'set', 'permutation', 'given', 'input']","['from', 'itertools', 'import', 'permutations', 'from', 'more_itertools', 'import', 'windowed', 'def', 'is_seq_sorted', '(', 'lst', ')', ':', 'print', '(', 'lst', ')', 'return', 'all', '(', 'x', '<=', 'y', 'for', 'x', ',', 'y', 'in', 'windowed', '(', 'lst', ',', '2', ')', ')', 'def', 'permutation_sort', '(', 'lst', ')', ':', 'return', 'next', '(', 'permutation_seq', 'for', 'permutation_seq', 'in', 'permutations', '(', 'lst', ')', 'if', 'is_seq_sorted', '(', 'permutation_seq', ')', ')', 'print', '(', '""All the sequences:""', ')', 'print', '(', '""\\nSorted sequence: ""', ',', 'permutation_sort', '(', '[', '12', ',', '10', ',', '9', ']', ')', ')', 'print', '(', '""\\n\\nAll the sequences:""', ')', 'print', '(', '""\\nSorted sequence: ""', ',', 'permutation_sort', '(', '[', '2', ',', '3', ',', '1', ',', '0', ']', ')', ')']"
1666,"['write', 'panda', 'program', 'calculate', 'sighting', 'day', 'unidentified', 'flying', 'object', 'ufo', 'current', 'date']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', ""r'ufo.csv'"", ')', 'df', '[', ""'Date_time'"", ']', '=', 'df', '[', ""'Date_time'"", ']', '.', 'astype', '(', ""'datetime64[ns]'"", ')', 'now', '=', 'pd', '.', 'to_datetime', '(', ""'today'"", ')', 'print', '(', '""Original Dataframe:""', ')', 'print', '(', 'df', '.', 'head', '(', ')', ')', 'print', '(', '""\\nCurrent date:""', ')', 'print', '(', 'now', ')']"
1667,"['write', 'python', 'program', 'add', 'two', 'given', 'list', 'different', 'length', 'start', 'right', 'using', 'itertools', 'module']","['from', 'itertools', 'import', 'zip_longest', 'def', 'elementswise_right_join', '(', 'l1', ',', 'l2', ')', ':', 'result', '=', '[', 'a', '+', 'b', 'for', 'a', ',', 'b', 'in', 'zip_longest', '(', 'reversed', '(', 'l1', ')', ',', 'reversed', '(', 'l2', ')', ',', 'fillvalue', '=', '0', ')', ']', '[', ':', ':', '-', '1', ']', 'return', 'result', 'nums1', '=', '[', '2', ',', '4', ',', '7', ',', '0', ',', '5', ',', '8', ']', 'nums2', '=', '[', '3', ',', '3', ',', '-', '1', ',', '7', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums1', ')', 'print', '(', 'nums2', ')', 'print', '(', '""\\nAdd said two lists from right:""', ')', 'print', '(', 'elementswise_right_join', '(', 'nums1', ',', 'nums2', ')', ')', 'nums3', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', 'nums4', '=', '[', '2', ',', '4', ',', '-', '3', ']', 'print', '(', '""\\nOriginal lists:""', ')', 'print', '(', 'nums3', ')', 'print', '(', 'nums4', ')', 'print', '(', '""\\nAdd said two lists from right:""', ')', 'print', '(', 'elementswise_right_join', '(', 'nums3', ',', 'nums4', ')', ')']"
1668,"['write', 'panda', 'program', 'replace', 'nan', 'median', 'mean', 'specified', 'column', 'given', 'dataframe']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'pd', '.', 'set_option', '(', ""'display.max_rows'"", ',', 'None', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'ord_no'"", ':', '[', '70001', ',', 'np', '.', 'nan', ',', '70002', ',', '70004', ',', 'np', '.', 'nan', ',', '70005', ',', 'np', '.', 'nan', ',', '70010', ',', '70003', ',', '70012', ',', 'np', '.', 'nan', ',', '70013', ']', ',', ""'purch_amt'"", ':', '[', '150.5', ',', 'np', '.', 'nan', ',', '65.26', ',', '110.5', ',', '948.5', ',', 'np', '.', 'nan', ',', '5760', ',', '1983.43', ',', 'np', '.', 'nan', ',', '250.45', ',', '75.29', ',', '3045.6', ']', ',', ""'sale_amt'"", ':', '[', '10.5', ',', '20.65', ',', 'np', '.', 'nan', ',', '11.5', ',', '98.5', ',', 'np', '.', 'nan', ',', '57', ',', '19.43', ',', 'np', '.', 'nan', ',', '25.45', ',', '75.29', ',', '35.6', ']', ',', ""'ord_date'"", ':', '[', ""'2012-10-05'"", ',', ""'2012-09-10'"", ',', 'np', '.', 'nan', ',', ""'2012-08-17'"", ',', ""'2012-09-10'"", ',', ""'2012-07-27'"", ',', ""'2012-09-10'"", ',', ""'2012-10-10'"", ',', ""'2012-10-10'"", ',', ""'2012-06-27'"", ',', ""'2012-08-17'"", ',', ""'2012-04-25'"", ']', ',', ""'customer_id'"", ':', '[', '3002', ',', '3001', ',', '3001', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ',', '3004', ',', '3003', ',', '3002', ',', '3001', ',', '3001', ']', ',', ""'salesman_id'"", ':', '[', '5002', ',', '5003', ',', '5001', ',', 'np', '.', 'nan', ',', '5002', ',', '5001', ',', '5001', ',', 'np', '.', 'nan', ',', '5003', ',', '5002', ',', '5003', ',', 'np', '.', 'nan', ']', '}', ')', 'print', '(', '""Original Orders DataFrame:""', ')', 'print', '(', 'df', ')', 'print', '(', '""Using median in purch_amt to replace NaN:""', ')', 'df', '[', ""'purch_amt'"", ']', '.', 'fillna', '(', 'df', '[', ""'purch_amt'"", ']', '.', 'median', '(', ')', ',', 'inplace', '=', 'True', ')', 'print', '(', 'df', ')', 'print', '(', '""Using mean to replace NaN:""', ')', 'df', '[', ""'sale_amt'"", ']', '.', 'fillna', '(', 'int', '(', 'df', '[', ""'sale_amt'"", ']', '.', 'mean', '(', ')', ')', ',', 'inplace', '=', 'True', ')', 'print', '(', 'df', ')']"
1669,"['write', 'python', 'program', 'change', 'tag', 'content', 'replace', 'given', 'string']","['from', 'bs4', 'import', 'BeautifulSoup', 'html_doc', '=', '\'<a href=""http://example.com/"">HTML<i>example.com</i></a>\'', 'soup', '=', 'BeautifulSoup', '(', 'html_doc', ',', '""lxml""', ')', 'tag', '=', 'soup', '.', 'a', 'print', '(', '""\\nOriginal Markup:""', ')', 'print', '(', 'tag', ')', 'print', '(', '""\\nOriginal Markup with new text:""', ')', 'tag', '.', 'string', '=', '""CSS""', 'print', '(', 'tag', ')']"
1670,"['write', 'python', 'program', 'get', 'symmetric', 'difference', 'two', 'list', 'applying', 'provided', 'function', 'list', 'element']","['def', 'symmetric_difference_by', '(', 'a', ',', 'b', ',', 'fn', ')', ':', '(', '_a', ',', '_b', ')', '=', '(', 'set', '(', 'map', '(', 'fn', ',', 'a', ')', ')', ',', 'set', '(', 'map', '(', 'fn', ',', 'b', ')', ')', ')', 'return', '[', 'item', 'for', 'item', 'in', 'a', 'if', 'fn', '(', 'item', ')', 'not', 'in', '_b', ']', '+', '[', 'item', 'for', 'item', 'in', 'b', 'if', 'fn', '(', 'item', ')', 'not', 'in', '_a', ']', 'from', 'math', 'import', 'floor', 'print', '(', 'symmetric_difference_by', '(', '[', '2.1', ',', '1.2', ']', ',', '[', '2.3', ',', '3.4', ']', ',', 'floor', ')', ')']"
1671,"['write', 'numpy', 'program', 'collapse', 'array', 'one', 'dimension', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'eye', '(', '3', ')', 'print', '(', '""3-D array:""', ')', 'print', '(', 'x', ')', 'f', '=', 'np', '.', 'ravel', '(', 'x', ',', 'order', '=', ""'F'"", ')', 'print', '(', '""One dimension array:""', ')', 'print', '(', 'f', ')']"
1672,"['write', 'python', 'script', 'generate', 'print', 'dictionary', 'contains', 'number', 'n', 'form', 'x', 'xx']","['n', '=', 'int', '(', 'input', '(', '""Input a number ""', ')', ')', 'd', '=', 'dict', '(', ')', 'for', 'x', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'd', '[', 'x', ']', '=', 'x', '*', 'x', 'print', '(', 'd', ')']"
1673,"['write', 'panda', 'program', 'find', 'record', 'consumption', 'beverage', 'per', 'person', 'average', 'beverage', 'type', 'beer', 'world', 'alcohol', 'consumption', 'dataset']","['import', 'pandas', 'as', 'pd', 'w_a_con', '=', 'pd', '.', 'read_csv', '(', ""'world_alcohol.csv'"", ')', 'print', '(', '""World alcohol consumption sample data:""', ')', 'print', '(', 'w_a_con', '.', 'head', '(', ')', ')', 'print', '(', '""\\nThe world alcohol consumption details: average consumption of \\nbeverages per person >=5 and Beverage Types is Beer:""', ')', 'print', '(', 'w_a_con', '[', '(', 'w_a_con', '[', ""'Display Value'"", ']', '>=', '5', ')', '&', '(', 'w_a_con', '[', ""'Beverage Types'"", ']', '==', ""'Beer'"", ')', ']', '.', 'head', '(', '10', ')', ')']"
1674,"['write', 'python', 'program', 'list', 'tag', 'webpage', 'pythonorg']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup', 'url', '=', ""'https://www.python.org/'"", 'reqs', '=', 'requests', '.', 'get', '(', 'url', ')', 'soup', '=', 'BeautifulSoup', '(', 'reqs', '.', 'text', ',', ""'lxml'"", ')', 'print', '(', '""List of all the h1, h2, h3 :""', ')', 'for', 'heading', 'in', 'soup', '.', 'find_all', '(', '[', '""h1""', ',', '""h2""', ',', '""h3""', ']', ')', ':', 'print', '(', 'heading', '.', 'name', '+', ""' '"", '+', 'heading', '.', 'text', '.', 'strip', '(', ')', ')']"
1675,"['write', 'python', 'program', 'print', 'given', 'doubly', 'linked', 'list', 'reverse', 'order']","['class', 'Node', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ',', 'next', '=', 'None', ',', 'prev', '=', 'None', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'next', 'self', '.', 'prev', '=', 'prev', 'class', 'doubly_linked_list', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'tail', '=', 'None', 'self', '.', 'count', '=', '0', 'def', 'append_item', '(', 'self', ',', 'data', ')', ':', 'new_item', '=', 'Node', '(', 'data', ',', 'None', ',', 'None', ')', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_item', 'self', '.', 'tail', '=', 'self', '.', 'head', 'else', ':', 'new_item', '.', 'prev', '=', 'self', '.', 'tail', 'self', '.', 'tail', '.', 'next', '=', 'new_item', 'self', '.', 'tail', '=', 'new_item', 'self', '.', 'count', '+=', '1', 'def', 'iter', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'item_val', '=', 'current', '.', 'data', 'current', '=', 'current', '.', 'next', 'yield', 'item_val', 'def', 'print_foward', '(', 'self', ')', ':', 'for', 'node', 'in', 'self', '.', 'iter', '(', ')', ':', 'print', '(', 'node', ')', 'def', 'reverse', '(', 'self', ')', ':', '"""""" Reverse linked list. """"""', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'temp', '=', 'current', '.', 'next', 'current', '.', 'next', '=', 'current', '.', 'prev', 'current', '.', 'prev', '=', 'temp', 'current', '=', 'current', '.', 'prev', 'temp', '=', 'self', '.', 'head', 'self', '.', 'head', '=', 'self', '.', 'tail', 'self', '.', 'tail', '=', 'temp', 'items', '=', 'doubly_linked_list', '(', ')', 'items', '.', 'append_item', '(', ""'PHP'"", ')', 'items', '.', 'append_item', '(', ""'Python'"", ')', 'items', '.', 'append_item', '(', ""'C#'"", ')', 'items', '.', 'append_item', '(', ""'C++'"", ')', 'items', '.', 'append_item', '(', ""'Java'"", ')', 'items', '.', 'append_item', '(', ""'SQL'"", ')', 'print', '(', '""Reverse list ""', ')', 'items', '.', 'reverse', '(', ')', 'items', '.', 'print_foward', '(', ')']"
1676,"['write', 'numpy', 'program', 'replace', 'php', 'python', 'element', 'given', 'array']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', ""'PHP Exercises, Practice, Solution'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""\\nOriginal Array:""', ')', 'print', '(', 'x', ')', 'r', '=', 'np', '.', 'char', '.', 'replace', '(', 'x', ',', '""PHP""', ',', '""Python""', ')', 'print', '(', '""\\nNew array:""', ')', 'print', '(', 'r', ')']"
1677,"['write', 'python', 'program', 'create', 'multiple', 'list']","['obj', '=', '{', '}', 'for', 'i', 'in', 'range', '(', '1', ',', '21', ')', ':', 'obj', '[', 'str', '(', 'i', ')', ']', '=', '[', ']', 'print', '(', 'obj', ')']"
1678,"['write', 'python', 'program', 'remove', 'duplicate', 'word', 'given', 'list', 'string']","['def', 'unique_list', '(', 'l', ')', ':', 'temp', '=', '[', ']', 'for', 'x', 'in', 'l', ':', 'if', 'x', 'not', 'in', 'temp', ':', 'temp', '.', 'append', '(', 'x', ')', 'return', 'temp', 'text_str', '=', '[', '""Python""', ',', '""Exercises""', ',', '""Practice""', ',', '""Solution""', ',', '""Exercises""', ']', 'print', '(', '""Original String:""', ')', 'print', '(', 'text_str', ')', 'print', '(', '""\\nAfter removing duplicate words from the said list of strings:""', ')', 'print', '(', 'unique_list', '(', 'text_str', ')', ')']"
1679,"['write', 'python', 'program', 'split', 'variable', 'length', 'string', 'variable']","['var_list', '=', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ']', 'x', ',', 'y', ',', 'z', '=', '(', 'var_list', '+', '[', 'None', ']', '*', '3', ')', '[', ':', '3', ']', 'print', '(', 'x', ',', 'y', ',', 'z', ')', 'var_list', '=', '[', '100', ',', '20.25', ']', 'x', ',', 'y', '=', '(', 'var_list', '+', '[', 'None', ']', '*', '2', ')', '[', ':', '2', ']', 'print', '(', 'x', ',', 'y', ')']"
1680,['br'],"['row_num', '=', 'int', '(', 'input', '(', '""Input number of rows: ""', ')', ')', 'col_num', '=', 'int', '(', 'input', '(', '""Input number of columns: ""', ')', ')', 'multi_list', '=', '[', '[', '0', 'for', 'col', 'in', 'range', '(', 'col_num', ')', ']', 'for', 'row', 'in', 'range', '(', 'row_num', ')', ']', 'for', 'row', 'in', 'range', '(', 'row_num', ')', ':', 'for', 'col', 'in', 'range', '(', 'col_num', ')', ':', 'multi_list', '[', 'row', ']', '[', 'col', ']', '=', 'row', '*', 'col', 'print', '(', 'multi_list', ')']"
1681,"['difference', 'list', 'comprehension', 'lambda', 'python']","['lst', '=', '[', 'x', '**', '2', 'for', 'x', 'in', 'range', '(', '1', ',', '11', ')', 'if', 'x', '%', '2', '==', '1', ']', 'print', '(', 'lst', ')']"
1682,"['write', 'python', 'program', 'convert', 'snake', 'case', 'pascal', 'case']","['test_str', '=', ""'geeksforgeeks_is_best'"", 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'res', '=', 'test_str', '.', 'replace', '(', '""_""', ',', '"" ""', ')', '.', 'title', '(', ')', '.', 'replace', '(', '"" ""', ',', '""""', ')', 'print', '(', '""The String after changing case : ""', '+', 'str', '(', 'res', ')', ')']"
1683,"['check', 'whether', 'numpy', 'array', 'contains', 'specified', 'row', 'python']","['import', 'numpy', 'arr', '=', 'numpy', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ',', '[', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', ',', '[', '11', ',', '12', ',', '13', ',', '14', ',', '15', ']', ',', '[', '16', ',', '17', ',', '18', ',', '19', ',', '20', ']', ']', ')', 'print', '(', 'arr', ')', 'print', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', 'in', 'arr', '.', 'tolist', '(', ')', ')', 'print', '(', '[', '16', ',', '17', ',', '20', ',', '19', ',', '18', ']', 'in', 'arr', '.', 'tolist', '(', ')', ')', 'print', '(', '[', '3', ',', '2', ',', '5', ',', '-', '4', ',', '5', ']', 'in', 'arr', '.', 'tolist', '(', ')', ')', 'print', '(', '[', '11', ',', '12', ',', '13', ',', '14', ',', '15', ']', 'in', 'arr', '.', 'tolist', '(', ')', ')']"
1684,"['write', 'python', 'program', 'convert', 'set', 'tuple', 'tuple', 'set']","['s', '=', '{', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", ',', ""'e'"", '}', 'print', '(', 'type', '(', 's', ')', ',', '"" ""', ',', 's', ')', 't', '=', 'tuple', '(', 's', ')', 'print', '(', 'type', '(', 't', ')', ',', '"" ""', ',', 't', ')']"
1685,"['write', 'python', 'datetime', 'integer', 'timestamp']","['from', 'datetime', 'import', 'datetime', 'curr_dt', '=', 'datetime', '.', 'now', '(', ')', 'print', '(', '""Current datetime: ""', ',', 'curr_dt', ')', 'timestamp', '=', 'int', '(', 'round', '(', 'curr_dt', '.', 'timestamp', '(', ')', ')', ')', 'print', '(', '""Integer timestamp of current datetime: ""', ',', 'timestamp', ')']"
1686,"['different', 'way', 'iterate', 'row', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', '{', ""'Name'"", ':', '[', ""'Ankit'"", ',', ""'Amit'"", ',', ""'Aishwarya'"", ',', ""'Priyanka'"", ']', ',', ""'Age'"", ':', '[', '21', ',', '19', ',', '20', ',', '18', ']', ',', ""'Stream'"", ':', '[', ""'Math'"", ',', ""'Commerce'"", ',', ""'Arts'"", ',', ""'Biology'"", ']', ',', ""'Percentage'"", ':', '[', '88', ',', '92', ',', '95', ',', '70', ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', ',', 'columns', '=', '[', ""'Name'"", ',', ""'Age'"", ',', ""'Stream'"", ',', ""'Percentage'"", ']', ')', 'print', '(', '""Given Dataframe :\\n""', ',', 'df', ')', 'print', '(', '""\\nIterating over rows using index attribute :\\n""', ')', 'for', 'ind', 'in', 'df', '.', 'index', ':', 'print', '(', 'df', '[', ""'Name'"", ']', '[', 'ind', ']', ',', 'df', '[', ""'Stream'"", ']', '[', 'ind', ']', ')']"
1687,"['write', 'python', 'program', 'sort', 'nested', 'key', 'value']","['test_dict', '=', '{', ""'Nikhil'"", ':', '{', ""'English'"", ':', '5', ',', ""'Maths'"", ':', '2', ',', ""'Science'"", ':', '14', '}', ',', ""'Akash'"", ':', '{', ""'English'"", ':', '15', ',', ""'Maths'"", ':', '7', ',', ""'Science'"", ':', '2', '}', ',', ""'Akshat'"", ':', '{', ""'English'"", ':', '5', ',', ""'Maths'"", ':', '50', ',', ""'Science'"", ':', '20', '}', '}', 'print', '(', '""The original dictionary : ""', '+', 'str', '(', 'test_dict', ')', ')', 'res', '=', '{', 'key', ':', 'dict', '(', 'sorted', '(', 'val', '.', 'items', '(', ')', ',', 'key', '=', 'lambda', 'ele', ':', 'ele', '[', '1', ']', ')', ')', 'for', 'key', ',', 'val', 'in', 'test_dict', '.', 'items', '(', ')', '}', 'print', '(', '""The sorted dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
1688,"['download', 'google', 'image', 'using', 'python', 'selenium']","['from', 'selenium', 'import', 'webdriver', 'from', 'selenium', '.', 'webdriver', '.', 'common', '.', 'keys', 'import', 'Keys', 'import', 'time', 'query', '=', '""dogs""', 'driver', '=', 'webdriver', '.', 'Chrome', '(', ""'Enter-Location-Of-Your-Webdriver'"", ')', 'driver', '.', 'maximize_window', '(', ')', 'driver', '.', 'get', '(', ""'https://images.google.com/'"", ')', 'box', '=', 'driver', '.', 'find_element_by_xpath', '(', '\'//*[@id=""sbtc""]/div/div[2]/input\'', ')', 'box', '.', 'send_keys', '(', 'query', ')', 'box', '.', 'send_keys', '(', 'Keys', '.', 'ENTER', ')', 'def', 'scroll_to_bottom', '(', ')', ':', 'last_height', '=', 'driver', '.', 'execute_script', '(', ""'\\\n\xa0\xa0\xa0\xa0return document.body.scrollHeight'"", ')', 'while', 'True', ':', 'driver', '.', 'execute_script', '(', ""'\\\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0window.scrollTo(0,document.body.scrollHeight)'"", ')', 'time', '.', 'sleep', '(', '3', ')', 'new_height', '=', 'driver', '.', 'execute_script', '(', ""'\\\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return document.body.scrollHeight'"", ')', 'try', ':', 'driver', '.', 'find_element_by_css_selector', '(', '"".YstHxe input""', ')', '.', 'click', '(', ')', 'time', '.', 'sleep', '(', '3', ')', 'except', ':', 'pass', 'if', 'new_height', '==', 'last_height', ':', 'break', 'last_height', '=', 'new_height', 'scroll_to_bottom', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '50', ')', ':', 'try', ':', 'img', '=', 'driver', '.', 'find_element_by_xpath', '(', '\'//*[@id=""islrg""]/div[1]/div[\'', '+', 'str', '(', 'i', ')', '+', ""']/a[1]/div[1]/img'"", ')', 'img', '.', 'screenshot', '(', ""'Download-Location'"", '+', 'query', '+', ""' ('"", '+', 'str', '(', 'i', ')', '+', ""').png'"", ')', 'time', '.', 'sleep', '(', '0.2', ')', 'except', ':', 'continue', 'driver', '.', 'close', '(', ')']"
1689,"['compare', 'two', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'an_array', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', ')', 'another_array', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', ')', 'comparison', '=', 'an_array', '==', 'another_array', 'equal_arrays', '=', 'comparison', '.', 'all', '(', ')', 'print', '(', 'equal_arrays', ')']"
1690,"['write', 'python', 'program', 'avoid', 'last', 'occurrence', 'delimitter']","['test_list', '=', '[', '4', ',', '7', ',', '8', ',', '3', ',', '2', ',', '1', ',', '9', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'delim', '=', '""$""', 'res', '=', ""''"", 'for', 'ele', 'in', 'test_list', ':', 'res', '+=', 'str', '(', 'ele', ')', '+', '""$""', 'res', '=', 'res', '[', ':', 'len', '(', 'res', ')', '-', '1', ']', 'print', '(', '""The joined string : ""', '+', 'str', '(', 'res', ')', ')']"
1691,"['get', 'unique', 'value', 'column', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', '{', ""'A'"", ':', '[', ""'A1'"", ',', ""'A2'"", ',', ""'A3'"", ',', ""'A4'"", ',', ""'A5'"", ']', ',', ""'B'"", ':', '[', ""'B1'"", ',', ""'B2'"", ',', ""'B3'"", ',', ""'B4'"", ',', ""'B4'"", ']', ',', ""'C'"", ':', '[', ""'C1'"", ',', ""'C2'"", ',', ""'C3'"", ',', ""'C3'"", ',', ""'C3'"", ']', ',', ""'D'"", ':', '[', ""'D1'"", ',', ""'D2'"", ',', ""'D2'"", ',', ""'D2'"", ',', ""'D2'"", ']', ',', ""'E'"", ':', '[', ""'E1'"", ',', ""'E1'"", ',', ""'E1'"", ',', ""'E1'"", ',', ""'E1'"", ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', ')', 'df', '.', 'B', '.', 'unique', '(', ')']"
1692,"['gui', 'generate', 'store', 'password', 'sqlite', 'using', 'python']","['import', 'random', 'import', 'webbrowser', 'from', 'tkinter', 'import', '*', 'from', 'tkinter', 'import', 'ttk', 'from', 'tkinter', 'import', 'messagebox', 'import', 'back', 'import', 'csv', 'from', 'ttkbootstrap', 'import', '*', 'class', 'window', ':', 'digits', '=', '[', ""'0'"", ',', ""'1'"", ',', ""'2'"", ',', ""'3'"", ',', ""'4'"", ',', ""'5'"", ',', ""'6'"", ',', ""'7'"", ',', ""'8'"", ',', ""'9'"", ']', 'lc', '=', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", ',', ""'e'"", ',', ""'f'"", ',', ""'g'"", ',', ""'h'"", ',', ""'i'"", ',', ""'j'"", ',', ""'k'"", ',', ""'m'"", ',', ""'n'"", ',', ""'o'"", ',', ""'p'"", ',', ""'q'"", ',', ""'r'"", ',', ""'s'"", ',', ""'t'"", ',', ""'u'"", ',', ""'v'"", ',', ""'w'"", ',', ""'x'"", ',', ""'y'"", ',', ""'z'"", ']', 'uc', '=', '[', ""'A'"", ',', ""'B'"", ',', ""'C'"", ',', ""'D'"", ',', ""'E'"", ',', ""'F'"", ',', ""'G'"", ',', ""'H'"", ',', ""'I'"", ',', ""'J'"", ',', ""'K'"", ',', ""'M'"", ',', ""'N'"", ',', ""'O'"", ',', ""'p'"", ',', ""'Q'"", ',', ""'R'"", ',', ""'S'"", ',', ""'T'"", ',', ""'U'"", ',', ""'V'"", ',', ""'W'"", ',', ""'X'"", ',', ""'Y'"", ',', ""'Z'"", ']', 'sym', '=', '[', ""'@'"", ',', ""'#'"", ',', ""'$'"", ',', ""'%'"", ',', ""'='"", ',', ""':'"", ',', ""'?'"", ',', ""'.'"", ',', ""'/'"", ',', ""'|'"", ',', ""'~'"", ',', ""'>'"", ',', ""'*'"", ',', ""'<'"", ']', 'def', '__init__', '(', 'self', ',', 'root', ',', 'geo', ',', 'title', ')', '->', 'None', ':', 'self', '.', 'root', '=', 'root', 'self', '.', 'root', '.', 'title', '(', 'title', ')', 'self', '.', 'root', '.', 'geometry', '(', 'geo', ')', 'self', '.', 'root', '.', 'resizable', '(', 'width', '=', 'False', ',', 'height', '=', 'False', ')', 'Label', '(', 'self', '.', 'root', ',', 'text', '=', ""'Your Password'"", ')', '.', 'grid', '(', 'row', '=', '0', ',', 'column', '=', '0', ',', 'padx', '=', '10', ',', 'pady', '=', '10', ')', 'Label', '(', 'self', '.', 'root', ',', 'text', '=', ""'Corresponding User_id'"", ')', '.', 'grid', '(', 'row', '=', '1', ',', 'column', '=', '0', ',', 'padx', '=', '10', ',', 'pady', '=', '10', ')', 'Label', '(', 'self', '.', 'root', ',', 'text', '=', ""'Of'"", ')', '.', 'grid', '(', 'row', '=', '2', ',', 'column', '=', '0', ',', 'padx', '=', '10', ',', 'pady', '=', '10', ')', 'self', '.', 'pa', '=', 'StringVar', '(', ')', 'self', '.', 'user_id', '=', 'StringVar', '(', ')', 'self', '.', 'site', '=', 'StringVar', '(', ')', 'ttk', '.', 'Entry', '(', 'self', '.', 'root', ',', 'width', '=', '30', ',', 'textvariable', '=', 'self', '.', 'pa', ')', '.', 'grid', '(', 'row', '=', '0', ',', 'column', '=', '1', ',', 'padx', '=', '10', ',', 'pady', '=', '10', ')', 'ttk', '.', 'Entry', '(', 'self', '.', 'root', ',', 'width', '=', '30', ',', 'textvariable', '=', 'self', '.', 'user_id', ')', '.', 'grid', '(', 'row', '=', '1', ',', 'column', '=', '1', ',', 'padx', '=', '10', ',', 'pady', '=', '10', ')', 'ttk', '.', 'Entry', '(', 'self', '.', 'root', ',', 'width', '=', '30', ',', 'textvariable', '=', 'self', '.', 'site', ')', '.', 'grid', '(', 'row', '=', '2', ',', 'column', '=', '1', ',', 'padx', '=', '10', ',', 'pady', '=', '10', ')', 'self', '.', 'length', '=', 'StringVar', '(', ')', 'e', '=', 'ttk', '.', 'Combobox', '(', 'self', '.', 'root', ',', 'values', '=', '[', ""'4'"", ',', ""'8'"", ',', ""'12'"", ',', ""'16'"", ',', ""'20'"", ',', ""'24'"", ']', ',', 'textvariable', '=', 'self', '.', 'length', ')', 'e', '.', 'grid', '(', 'row', '=', '0', ',', 'column', '=', '2', ')', 'e', '[', ""'state'"", ']', '=', ""'readonly'"", 'self', '.', 'length', '.', 'set', '(', ""'Set password length'"", ')', 'ttk', '.', 'Button', '(', 'self', '.', 'root', ',', 'text', '=', ""'Generate'"", ',', 'padding', '=', '5', ',', 'style', '=', ""'success.Outline.TButton'"", ',', 'width', '=', '20', ',', 'command', '=', 'self', '.', 'generate', ')', '.', 'grid', '(', 'row', '=', '1', ',', 'column', '=', '2', ')', 'ttk', '.', 'Button', '(', 'self', '.', 'root', ',', 'text', '=', ""'Save to Database'"", ',', 'style', '=', ""'success.TButton'"", ',', 'width', '=', '20', ',', 'padding', '=', '5', ',', 'command', '=', 'self', '.', 'save', ')', '.', 'grid', '(', 'row', '=', '3', ',', 'column', '=', '2', ')', 'ttk', '.', 'Button', '(', 'self', '.', 'root', ',', 'text', '=', ""'Delete'"", ',', 'width', '=', '20', ',', 'style', '=', ""'danger.TButton'"", ',', 'padding', '=', '5', ',', 'command', '=', 'self', '.', 'erase', ')', '.', 'grid', '(', 'row', '=', '2', ',', 'column', '=', '2', ')', 'ttk', '.', 'Button', '(', 'self', '.', 'root', ',', 'text', '=', ""'Show All'"", ',', 'width', '=', '20', ',', 'padding', '=', '5', ',', 'command', '=', 'self', '.', 'view', ')', '.', 'grid', '(', 'row', '=', '3', ',', 'column', '=', '0', ')', 'ttk', '.', 'Button', '(', 'self', '.', 'root', ',', 'text', '=', ""'Update'"", ',', 'width', '=', '20', ',', 'padding', '=', '5', ',', 'command', '=', 'self', '.', 'update', ')', '.', 'grid', '(', 'row', '=', '3', ',', 'column', '=', '1', ')', 'self', '.', 'tree', '=', 'ttk', '.', 'Treeview', '(', 'self', '.', 'root', ',', 'height', '=', '5', ')', 'self', '.', 'tree', '[', ""'columns'"", ']', '=', '(', ""'site'"", ',', ""'user'"", ',', ""'pas'"", ')', 'self', '.', 'tree', '.', 'column', '(', ""'#0'"", ',', 'width', '=', '0', ',', 'stretch', '=', 'NO', ')', 'self', '.', 'tree', '.', 'column', '(', ""'site'"", ',', 'width', '=', '160', ',', 'anchor', '=', 'W', ')', 'self', '.', 'tree', '.', 'column', '(', ""'user'"", ',', 'width', '=', '140', ',', 'anchor', '=', 'W', ')', 'self', '.', 'tree', '.', 'column', '(', ""'pas'"", ',', 'width', '=', '180', ',', 'anchor', '=', 'W', ')', 'self', '.', 'tree', '.', 'heading', '(', ""'#0'"", ',', 'text', '=', ""''"", ')', 'self', '.', 'tree', '.', 'heading', '(', ""'site'"", ',', 'text', '=', ""'Site name'"", ')', 'self', '.', 'tree', '.', 'heading', '(', ""'user'"", ',', 'text', '=', ""'User Id'"", ')', 'self', '.', 'tree', '.', 'heading', '(', ""'pas'"", ',', 'text', '=', ""'Password'"", ')', 'self', '.', 'tree', '.', 'grid', '(', 'row', '=', '4', ',', 'column', '=', '0', ',', 'columnspan', '=', '3', ',', 'pady', '=', '10', ')', 'self', '.', 'tree', '.', 'bind', '(', '""<ButtonRelease-1>""', ',', 'self', '.', 'catch', ')', 'self', '.', 'menu', '=', 'Menu', '(', 'self', '.', 'root', ',', 'tearoff', '=', 'False', ')', 'self', '.', 'menu', '.', 'add_command', '(', 'label', '=', ""'Refresh'"", ',', 'command', '=', 'self', '.', 'refresh', ')', 'self', '.', 'menu', '.', 'add_command', '(', 'label', '=', ""'Insert'"", ',', 'command', '=', 'self', '.', 'save', ')', 'self', '.', 'menu', '.', 'add_command', '(', 'label', '=', ""'Update'"", ',', 'command', '=', 'self', '.', 'update', ')', 'self', '.', 'menu', '.', 'add_separator', '(', ')', 'self', '.', 'menu', '.', 'add_command', '(', 'label', '=', ""'Show All'"", ',', 'command', '=', 'self', '.', 'view', ')', 'self', '.', 'menu', '.', 'add_command', '(', 'label', '=', ""'Clear Fields'"", ',', 'command', '=', 'self', '.', 'clear', ')', 'self', '.', 'menu', '.', 'add_command', '(', 'label', '=', ""'Clear Table'"", ',', 'command', '=', 'self', '.', 'table', ')', 'self', '.', 'menu', '.', 'add_command', '(', 'label', '=', ""'Export'"", ',', 'command', '=', 'self', '.', 'export', ')', 'self', '.', 'menu', '.', 'add_separator', '(', ')', 'self', '.', 'menu', '.', 'add_command', '(', 'label', '=', ""'Delete'"", ',', 'command', '=', 'self', '.', 'erase', ')', 'self', '.', 'menu', '.', 'add_command', '(', 'label', '=', ""'Help'"", ',', 'command', '=', 'self', '.', 'help', ')', 'self', '.', 'menu', '.', 'add_separator', '(', ')', 'self', '.', 'menu', '.', 'add_command', '(', 'label', '=', ""'Exit'"", ',', 'command', '=', 'self', '.', 'root', '.', 'quit', ')', 'self', '.', 'root', '.', 'bind', '(', '""<Button-3>""', ',', 'self', '.', 'poppin', ')', 'def', 'help', '(', 'self', ')', ':', 'webbrowser', '.', 'open', '(', ""'help.txt'"", ')', 'def', 'refresh', '(', 'self', ')', ':', 'self', '.', 'table', '(', ')', 'self', '.', 'view', '(', ')', 'def', 'table', '(', 'self', ')', ':', 'for', 'r', 'in', 'self', '.', 'tree', '.', 'get_children', '(', ')', ':', 'self', '.', 'tree', '.', 'delete', '(', 'r', ')', 'def', 'clear', '(', 'self', ')', ':', 'self', '.', 'pa', '.', 'set', '(', ""''"", ')', 'self', '.', 'user_id', '.', 'set', '(', ""''"", ')', 'self', '.', 'site', '.', 'set', '(', ""''"", ')', 'def', 'poppin', '(', 'self', ',', 'e', ')', ':', 'self', '.', 'menu', '.', 'tk_popup', '(', 'e', '.', 'x_root', ',', 'e', '.', 'y_root', ')', 'def', 'catch', '(', 'self', ',', 'event', ')', ':', 'self', '.', 'pa', '.', 'set', '(', ""''"", ')', 'self', '.', 'user_id', '.', 'set', '(', ""''"", ')', 'self', '.', 'site', '.', 'set', '(', ""''"", ')', 'selected', '=', 'self', '.', 'tree', '.', 'focus', '(', ')', 'value', '=', 'self', '.', 'tree', '.', 'item', '(', 'selected', ',', ""'value'"", ')', 'self', '.', 'site', '.', 'set', '(', 'value', '[', '0', ']', ')', 'self', '.', 'user_id', '.', 'set', '(', 'value', '[', '1', ']', ')', 'self', '.', 'pa', '.', 'set', '(', 'value', '[', '2', ']', ')', 'def', 'update', '(', 'self', ')', ':', 'selected', '=', 'self', '.', 'tree', '.', 'focus', '(', ')', 'value', '=', 'self', '.', 'tree', '.', 'item', '(', 'selected', ',', ""'value'"", ')', 'back', '.', 'edit', '(', 'self', '.', 'site', '.', 'get', '(', ')', ',', 'self', '.', 'user_id', '.', 'get', '(', ')', ',', 'self', '.', 'pa', '.', 'get', '(', ')', ')', 'self', '.', 'refresh', '(', ')', 'def', 'view', '(', 'self', ')', ':', 'if', 'back', '.', 'check', '(', ')', 'is', 'False', ':', 'messagebox', '.', 'showerror', '(', ""'Attention Amigo!'"", ',', ""'Database is EMPTY!'"", ')', 'else', ':', 'for', 'row', 'in', 'back', '.', 'show', '(', ')', ':', 'self', '.', 'tree', '.', 'insert', '(', 'parent', '=', ""''"", ',', 'text', '=', ""''"", ',', 'index', '=', ""'end'"", ',', 'values', '=', '(', 'row', '[', '0', ']', ',', 'row', '[', '1', ']', ',', 'row', '[', '2', ']', ')', ')', 'def', 'erase', '(', 'self', ')', ':', 'selected', '=', 'self', '.', 'tree', '.', 'focus', '(', ')', 'value', '=', 'self', '.', 'tree', '.', 'item', '(', 'selected', ',', ""'value'"", ')', 'back', '.', 'Del', '(', 'value', '[', '2', ']', ')', 'self', '.', 'refresh', '(', ')', 'def', 'save', '(', 'self', ')', ':', 'back', '.', 'enter', '(', 'self', '.', 'site', '.', 'get', '(', ')', ',', 'self', '.', 'user_id', '.', 'get', '(', ')', ',', 'self', '.', 'pa', '.', 'get', '(', ')', ')', 'self', '.', 'tree', '.', 'insert', '(', 'parent', '=', ""''"", ',', 'index', '=', ""'end'"", ',', 'text', '=', ""''"", ',', 'values', '=', '(', 'self', '.', 'site', '.', 'get', '(', ')', ',', 'self', '.', 'user_id', '.', 'get', '(', ')', ',', 'self', '.', 'pa', '.', 'get', '(', ')', ')', ')', 'def', 'generate', '(', 'self', ')', ':', 'if', 'self', '.', 'length', '.', 'get', '(', ')', '==', ""'Set password length'"", ':', 'messagebox', '.', 'showerror', '(', ""'Attention!'"", ',', '""You forgot to SELECT""', ')', 'else', ':', 'a', '=', ""''"", 'for', 'x', 'in', 'range', '(', 'int', '(', 'int', '(', 'self', '.', 'length', '.', 'get', '(', ')', ')', '/', '4', ')', ')', ':', 'a0', '=', 'random', '.', 'choice', '(', 'self', '.', 'uc', ')', 'a1', '=', 'random', '.', 'choice', '(', 'self', '.', 'lc', ')', 'a2', '=', 'random', '.', 'choice', '(', 'self', '.', 'sym', ')', 'a3', '=', 'random', '.', 'choice', '(', 'self', '.', 'digits', ')', 'a', '=', 'a0', '+', 'a1', '+', 'a2', '+', 'a3', '+', 'a', 'self', '.', 'pa', '.', 'set', '(', 'a', ')', 'def', 'export', '(', 'self', ')', ':', 'pop', '=', 'Toplevel', '(', 'self', '.', 'root', ')', 'pop', '.', 'geometry', '(', ""'300x100'"", ')', 'self', '.', 'v', '=', 'StringVar', '(', ')', 'Label', '(', 'pop', ',', 'text', '=', ""'Save File Name as'"", ')', '.', 'pack', '(', ')', 'ttk', '.', 'Entry', '(', 'pop', ',', 'textvariable', '=', 'self', '.', 'v', ')', '.', 'pack', '(', ')', 'ttk', '.', 'Button', '(', 'pop', ',', 'text', '=', ""'Save'"", ',', 'width', '=', '18', ',', 'command', '=', 'lambda', ':', 'exp', '(', 'self', '.', 'v', '.', 'get', '(', ')', ')', ')', '.', 'pack', '(', 'pady', '=', '5', ')', 'def', 'exp', '(', 'x', ')', ':', 'with', 'open', '(', 'x', '+', ""'.csv'"", ',', ""'w'"", ',', 'newline', '=', ""''"", ')', 'as', 'f', ':', 'chompa', '=', 'csv', '.', 'writer', '(', 'f', ',', 'dialect', '=', ""'excel'"", ')', 'for', 'r', 'in', 'back', '.', 'show', '(', ')', ':', 'chompa', '.', 'writerow', '(', 'r', ')', 'messagebox', '.', 'showinfo', '(', '""File Saved""', ',', '""Saved as ""', '+', 'x', '+', '"".csv""', ')', 'if', '__name__', '==', ""'__main__'"", ':', 'win', '=', 'Style', '(', 'theme', '=', ""'darkly'"", ')', '.', 'master', 'name', '=', ""'Password Generator'"", 'dimension', '=', ""'565x320'"", 'app', '=', 'window', '(', 'win', ',', 'dimension', ',', 'name', ')', 'win', '.', 'mainloop', '(', ')']"
1693,"['write', 'python', 'program', 'concatenate', 'tuples', 'nested', 'tuples']","['test_tup1', '=', '(', '3', ',', '4', ')', ',', 'test_tup2', '=', '(', '5', ',', '6', ')', ',', 'print', '(', '""The original tuple 1 : ""', '+', 'str', '(', 'test_tup1', ')', ')', 'print', '(', '""The original tuple 2 : ""', '+', 'str', '(', 'test_tup2', ')', ')', 'res', '=', 'test_tup1', '+', 'test_tup2', 'print', '(', '""Tuples after Concatenating : ""', '+', 'str', '(', 'res', ')', ')']"
1694,"['change', 'background', 'color', 'tkinter', 'optionmenu', 'widget', 'python']","['from', 'tkinter', 'import', '*', 'app', '=', 'Tk', '(', ')', 'app', '.', 'title', '(', '""Vinayak App""', ')', 'l1', '=', 'Label', '(', 'app', ',', 'text', '=', '""Choose the the week day here""', ')', 'l1', '.', 'grid', '(', ')', 'text1', '=', 'StringVar', '(', ')', 'text1', '.', 'set', '(', '""Choose here""', ')', 'w', '=', 'OptionMenu', '(', 'app', ',', 'text1', ',', '""Sunday""', ',', '""Monday""', ',', '""Tuesday""', ',', '""Wednesday""', ',', '""Thursday""', ',', '""Friday""', ',', '""Saturday""', ')', 'w', '.', 'config', '(', 'bg', '=', '""GREEN""', ',', 'fg', '=', '""WHITE""', ')', 'w', '[', '""menu""', ']', '.', 'config', '(', 'bg', '=', '""RED""', ')', 'w', '.', 'grid', '(', 'pady', '=', '20', ')', 'app', '.', 'mainloop', '(', ')']"
1695,"['write', 'python', 'program', 'find', 'common', 'element', 'three', 'list', 'using', 'set']","['def', 'IntersecOfSets', '(', 'arr1', ',', 'arr2', ',', 'arr3', ')', ':', 's1', '=', 'set', '(', 'arr1', ')', 's2', '=', 'set', '(', 'arr2', ')', 's3', '=', 'set', '(', 'arr3', ')', 'set1', '=', 's1', '.', 'intersection', '(', 's2', ')', 'result_set', '=', 'set1', '.', 'intersection', '(', 's3', ')', 'final_list', '=', 'list', '(', 'result_set', ')', 'print', '(', 'final_list', ')', 'if', '__name__', '==', ""'__main__'"", ':', 'arr1', '=', '[', '1', ',', '5', ',', '10', ',', '20', ',', '40', ',', '80', ',', '100', ']', 'arr2', '=', '[', '6', ',', '7', ',', '20', ',', '80', ',', '100', ']', 'arr3', '=', '[', '3', ',', '4', ',', '15', ',', '20', ',', '30', ',', '70', ',', '80', ',', '120', ']', 'IntersecOfSets', '(', 'arr1', ',', 'arr2', ',', 'arr3', ')']"
1696,"['write', 'python', 'program', 'dictionary', 'maximum', 'count', 'pair']","['test_list', '=', '[', '{', '""gfg""', ':', '2', ',', '""best""', ':', '4', '}', ',', '{', '""gfg""', ':', '2', ',', '""is""', ':', '3', ',', '""best""', ':', '4', '}', ',', '{', '""gfg""', ':', '2', '}', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '{', '}', 'max_len', '=', '0', 'for', 'ele', 'in', 'test_list', ':', 'if', 'len', '(', 'ele', ')', '>', 'max_len', ':', 'res', '=', 'ele', 'max_len', '=', 'len', '(', 'ele', ')', 'print', '(', '""Maximum keys Dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
1697,"['write', 'python', 'program', 'print', 'inverted', 'heart', 'pattern']","['size', '=', '15', 'for', 'a', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'for', 'b', 'in', 'range', '(', 'a', ',', 'size', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'b', 'in', 'range', '(', '1', ',', '(', 'a', '*', '2', ')', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'print', '(', '""""', ')', 'for', 'a', 'in', 'range', '(', 'size', ',', 'int', '(', 'size', '/', '2', ')', '-', '1', ',', '-', '2', ')', ':', 'for', 'b', 'in', 'range', '(', '1', ',', 'size', '-', 'a', ',', '2', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'b', 'in', 'range', '(', '1', ',', 'a', '+', '1', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'for', 'b', 'in', 'range', '(', '1', ',', '(', 'size', '-', 'a', ')', '+', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'b', 'in', 'range', '(', '1', ',', 'a', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'print', '(', '""""', ')']"
1698,"['kth', 'nonrepeating', 'character', 'python', 'using', 'list', 'comprehension', 'ordereddict']","['from', 'collections', 'import', 'OrderedDict', 'def', 'kthRepeating', '(', 'input', ',', 'k', ')', ':', 'dict', '=', 'OrderedDict', '.', 'fromkeys', '(', 'input', ',', '0', ')', 'for', 'ch', 'in', 'input', ':', 'dict', '[', 'ch', ']', '+=', '1', 'nonRepeatDict', '=', '[', 'key', 'for', '(', 'key', ',', 'value', ')', 'in', 'dict', '.', 'items', '(', ')', 'if', 'value', '==', '1', ']', 'if', 'len', '(', 'nonRepeatDict', ')', '<', 'k', ':', 'return', ""'Less than k non-repeating characters in input.'"", 'else', ':', 'return', 'nonRepeatDict', '[', 'k', '-', '1', ']', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', '""geeksforgeeks""', 'k', '=', '3', 'print', '(', 'kthRepeating', '(', 'input', ',', 'k', ')', ')']"
1699,"['write', 'python', 'set', 'difference', 'find', 'lost', 'element', 'duplicated', 'array']","['def', 'lostElement', '(', 'A', ',', 'B', ')', ':', 'A', '=', 'set', '(', 'A', ')', 'B', '=', 'set', '(', 'B', ')', 'if', 'len', '(', 'A', ')', '>', 'len', '(', 'B', ')', ':', 'print', '(', 'list', '(', 'A', '-', 'B', ')', ')', 'else', ':', 'print', '(', 'list', '(', 'B', '-', 'A', ')', ')', 'if', '__name__', '==', '""__main__""', ':', 'A', '=', '[', '1', ',', '4', ',', '5', ',', '7', ',', '9', ']', 'B', '=', '[', '4', ',', '5', ',', '7', ',', '9', ']', 'lostElement', '(', 'A', ',', 'B', ')']"
1700,"['split', 'string', 'column', 'using', 'regex', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'import', 're', 'movie_data', '=', '[', '""Name: The_Godfather Year: 1972 Rating: 9.2""', ',', '""Name: Bird_Box Year: 2018 Rating: 6.8""', ',', '""Name: Fight_Club Year: 1999 Rating: 8.8""', ']', 'movies', '=', '{', '""Name""', ':', '[', ']', ',', '""Year""', ':', '[', ']', ',', '""Rating""', ':', '[', ']', '}', 'for', 'item', 'in', 'movie_data', ':', 'name_field', '=', 're', '.', 'search', '(', '""Name: .*""', ',', 'item', ')', 'if', 'name_field', 'is', 'not', 'None', ':', 'name', '=', 're', '.', 'search', '(', ""'\\w*\\s\\w*'"", ',', 'name_field', '.', 'group', '(', ')', ')', 'else', ':', 'name', '=', 'None', 'movies', '[', '""Name""', ']', '.', 'append', '(', 'name', '.', 'group', '(', ')', ')', 'year_field', '=', 're', '.', 'search', '(', '""Year: .*""', ',', 'item', ')', 'if', 'year_field', 'is', 'not', 'None', ':', 'year', '=', 're', '.', 'search', '(', ""'\\s\\d\\d\\d\\d'"", ',', 'year_field', '.', 'group', '(', ')', ')', 'else', ':', 'year', '=', 'None', 'movies', '[', '""Year""', ']', '.', 'append', '(', 'year', '.', 'group', '(', ')', '.', 'strip', '(', ')', ')', 'rating_field', '=', 're', '.', 'search', '(', '""Rating: .*""', ',', 'item', ')', 'if', 'rating_field', 'is', 'not', 'None', ':', 'rating', '=', 're', '.', 'search', '(', ""'\\s\\d.\\d'"", ',', 'rating_field', '.', 'group', '(', ')', ')', 'else', ':', 'rating', '-', 'None', 'movies', '[', '""Rating""', ']', '.', 'append', '(', 'rating', '.', 'group', '(', ')', '.', 'strip', '(', ')', ')', 'df', '=', 'pd', '.', 'DataFrame', '(', 'movies', ')', 'print', '(', 'df', ')']"
1701,"['program', 'check', 'string', 'contains', 'special', 'character', 'python']","['//', 'C', '+', '+', 'program', 'to', 'check', 'if', 'a', 'string', '//', 'contains', 'any', 'special', 'character', '//', 'import', 'required', 'packages', 'using', 'namespace', 'std', ';', '//', 'Function', 'checks', 'if', 'the', 'string', '//', 'contains', 'any', 'special', 'character', 'void', 'run', '(', 'string', 'str', ')', '{', '//', 'Make', 'own', 'character', 'set', 'regex', 'regx', '(', '""[@_!#$%^&*()<>?/|}{~:]""', ')', ';', '//', 'Pass', 'the', 'string', 'in', 'regex_search', '//', 'method', 'if', '(', 'regex_search', '(', 'str', ',', 'regx', ')', '==', '0', ')', 'cout', '<<', '""String is accepted""', ';', 'else', 'cout', '<<', '""String is not accepted.""', ';', '}', '//', 'Driver', 'Code', 'int', 'main', '(', ')', '{', '//', 'Enter', 'the', 'string', 'string', 'str', '=', '""Geeks$For$Geeks""', ';', '//', 'Calling', 'run', 'function', 'run', '(', 'str', ')', ';', 'return', '0', ';', '}', '//', 'This', 'code', 'is', 'contributed', 'by', 'Yash_R']"
1702,"['write', 'python', 'program', 'tuple', 'xor', 'operation']","['test_tup1', '=', '(', '10', ',', '4', ',', '6', ',', '9', ')', 'test_tup2', '=', '(', '5', ',', '2', ',', '3', ',', '3', ')', 'print', '(', '""The original tuple 1 : ""', '+', 'str', '(', 'test_tup1', ')', ')', 'print', '(', '""The original tuple 2 : ""', '+', 'str', '(', 'test_tup2', ')', ')', 'res', '=', 'tuple', '(', 'ele1', '^', 'ele2', 'for', 'ele1', ',', 'ele2', 'in', 'zip', '(', 'test_tup1', ',', 'test_tup2', ')', ')', 'print', '(', '""The XOR tuple : ""', '+', 'str', '(', 'res', ')', ')']"
1703,"['calculate', 'mean', 'across', 'dimension', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'arr', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ',', '6', ']', ',', '[', '7', ',', '8', ',', '9', ']', ']', ')', 'row_mean', '=', 'np', '.', 'mean', '(', 'arr', ',', 'axis', '=', '1', ')', 'row1_mean', '=', 'row_mean', '[', '0', ']', 'print', '(', '""Mean of Row 1 is""', ',', 'row1_mean', ')', 'row2_mean', '=', 'row_mean', '[', '1', ']', 'print', '(', '""Mean of Row 2 is""', ',', 'row2_mean', ')', 'row3_mean', '=', 'row_mean', '[', '2', ']', 'print', '(', '""Mean of Row 3 is""', ',', 'row3_mean', ')', 'column_mean', '=', 'np', '.', 'mean', '(', 'arr', ',', 'axis', '=', '0', ')', 'column1_mean', '=', 'column_mean', '[', '0', ']', 'print', '(', '""Mean of column 1 is""', ',', 'column1_mean', ')', 'column2_mean', '=', 'column_mean', '[', '1', ']', 'print', '(', '""Mean of column 2 is""', ',', 'column2_mean', ')', 'column3_mean', '=', 'column_mean', '[', '2', ']', 'print', '(', '""Mean of column 3 is""', ',', 'column3_mean', ')']"
1704,"['build', 'web', 'scraping', 'bot', 'python']","['import', 'time', 'from', 'selenium', 'import', 'webdriver', 'from', 'datetime', 'import', 'datetime']"
1705,"['sorting', 'row', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', '{', ""'name'"", ':', '[', ""'Simon'"", ',', ""'Marsh'"", ',', ""'Gaurav'"", ',', ""'Alex'"", ',', ""'Selena'"", ']', ',', ""'Maths'"", ':', '[', '8', ',', '5', ',', '6', ',', '9', ',', '7', ']', ',', ""'Science'"", ':', '[', '7', ',', '9', ',', '5', ',', '4', ',', '7', ']', ',', ""'English'"", ':', '[', '7', ',', '4', ',', '7', ',', '6', ',', '8', ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', ')', 'a', '=', 'df', '.', 'sort_values', '(', 'by', '=', ""'Science'"", ',', 'ascending', '=', '0', ')', 'print', '(', '""Sorting rows by Science:\\n \\n""', ',', 'a', ')']"
1706,"['get', 'index', 'sorted', 'array', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'array', '=', 'np', '.', 'array', '(', '[', '10', ',', '52', ',', '62', ',', '16', ',', '16', ',', '54', ',', '453', ']', ')', 'print', '(', 'array', ')', 'indices', '=', 'np', '.', 'argsort', '(', 'array', ')', 'print', '(', 'indices', ')']"
1707,"['write', 'python', 'program', 'get', 'file', 'id', 'window', 'file']","['from', 'os', 'import', 'popen', 'file', '=', 'r""C:\\Users\\Grandmaster\\Desktop\\testing.py""', 'output', '=', 'popen', '(', 'fr""fsutil file queryfileid {file}""', ')', '.', 'read', '(', ')', 'print', '(', 'output', ')']"
1708,"['write', 'python', 'program', 'convert', 'matrix', 'dictionary']","['test_list', '=', '[', '[', '5', ',', '6', ',', '7', ']', ',', '[', '8', ',', '3', ',', '2', ']', ',', '[', '8', ',', '2', ',', '1', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '{', 'idx', '+', '1', ':', 'test_list', '[', 'idx', ']', 'for', 'idx', 'in', 'range', '(', 'len', '(', 'test_list', ')', ')', '}', 'print', '(', '""The constructed dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
1709,"['write', 'python', 'program', 'convert', 'set', 'dictionary']","['ini_set', '=', '{', '1', ',', '2', ',', '3', ',', '4', ',', '5', '}', 'print', '(', '""initial string""', ',', 'ini_set', ')', 'print', '(', 'type', '(', 'ini_set', ')', ')', 'res', '=', 'dict', '.', 'fromkeys', '(', 'ini_set', ',', '0', ')', 'print', '(', '""final list""', ',', 'res', ')', 'print', '(', 'type', '(', 'res', ')', ')']"
1710,"['write', 'python', 'program', 'pair', 'element', 'rear', 'element', 'matrix', 'row']","['test_list', '=', '[', '[', '4', ',', '5', ',', '6', ']', ',', '[', '2', ',', '4', ',', '5', ']', ',', '[', '6', ',', '7', ',', '5', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', ']', 'for', 'sub', 'in', 'test_list', ':', 'res', '.', 'append', '(', '[', '[', 'ele', ',', 'sub', '[', '-', '1', ']', ']', 'for', 'ele', 'in', 'sub', '[', ':', '-', '1', ']', ']', ')', 'print', '(', '""The list after pairing is : ""', '+', 'str', '(', 'res', ')', ')']"
1711,"['write', 'python', 'program', 'uppercase', 'half', 'string']","['test_str', '=', ""'geeksforgeeks'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'hlf_idx', '=', 'len', '(', 'test_str', ')', '//', '2', 'res', '=', ""''"", 'for', 'idx', 'in', 'range', '(', 'len', '(', 'test_str', ')', ')', ':', 'if', 'idx', '>=', 'hlf_idx', ':', 'res', '+=', 'test_str', '[', 'idx', ']', '.', 'upper', '(', ')', 'else', ':', 'res', '+=', 'test_str', '[', 'idx', ']', 'print', '(', '""The resultant string : ""', '+', 'str', '(', 'res', ')', ')']"
1712,"['reshape', 'panda', 'dataframe', 'using', 'stackunstack', 'melt', 'method', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', '""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv""', ')', 'print', '(', 'df', '.', 'head', '(', ')', ')']"
1713,"['write', 'python', 'program', 'remove', 'key', 'value', 'greater', 'k', 'including', 'mixed', 'value']","['test_dict', '=', '{', ""'Gfg'"", ':', '3', ',', ""'is'"", ':', '7', ',', ""'best'"", ':', '10', ',', ""'for'"", ':', '6', ',', ""'geeks'"", ':', ""'CS'"", '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'K', '=', '6', 'res', '=', '{', '}', 'for', 'key', 'in', 'test_dict', ':', 'if', 'not', '(', 'isinstance', '(', 'test_dict', '[', 'key', ']', ',', 'int', ')', 'and', 'test_dict', '[', 'key', ']', '>', 'K', ')', ':', 'res', '[', 'key', ']', '=', 'test_dict', '[', 'key', ']', 'print', '(', '""The constructed dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
1714,"['write', 'python', 'program', 'replace', 'duplicate', 'occurrence', 'string']","['test_str', '=', ""'Gfg is best . Gfg also has Classes now. \\\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Classes help understand better . '"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'repl_dict', '=', '{', ""'Gfg'"", ':', ""'It'"", ',', ""'Classes'"", ':', ""'They'"", '}', 'test_list', '=', 'test_str', '.', 'split', '(', ""' '"", ')', 'res', '=', 'set', '(', ')', 'for', 'idx', ',', 'ele', 'in', 'enumerate', '(', 'test_list', ')', ':', 'if', 'ele', 'in', 'repl_dict', ':', 'if', 'ele', 'in', 'res', ':', 'test_list', '[', 'idx', ']', '=', 'repl_dict', '[', 'ele', ']', 'else', ':', 'res', '.', 'add', '(', 'ele', ')', 'res', '=', ""' '"", '.', 'join', '(', 'test_list', ')', 'print', '(', '""The string after replacing : ""', '+', 'str', '(', 'res', ')', ')']"
1715,"['write', 'python', 'program', 'find', 'combination', 'list', 'given', 'condition']","['test_list', '=', '[', '""geekforgeeks""', ',', '[', '5', ',', '4', ',', '3', ',', '4', ']', ',', '""is""', ',', '[', '""best""', ',', '""good""', ',', '""better""', ',', '""average""', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '4', 'res', '=', '[', ']', 'cnt', '=', '0', 'while', 'cnt', '<=', 'K', '-', '1', ':', 'temp', '=', '[', ']', 'for', 'idx', 'in', 'test_list', ':', 'if', 'not', 'isinstance', '(', 'idx', ',', 'list', ')', ':', 'temp', '.', 'append', '(', 'idx', ')', 'else', ':', 'temp', '.', 'append', '(', 'idx', '[', 'cnt', ']', ')', 'cnt', '+=', '1', 'res', '.', 'append', '(', 'temp', ')', 'print', '(', '""All index Combinations : ""', '+', 'str', '(', 'res', ')', ')']"
1716,"['numpyinner', 'python']","['import', 'numpy', 'as', 'geek', 'product', '=', 'geek', '.', 'inner', '(', '5', ',', '4', ')', 'print', '(', '""inner Product of scalar values : ""', ',', 'product', ')', 'vector_a', '=', '2', '+', '3j', 'vector_b', '=', '4', '+', '5j', 'product', '=', 'geek', '.', 'inner', '(', 'vector_a', ',', 'vector_b', ')', 'print', '(', '""inner Product : ""', ',', 'product', ')']"
1717,"['set', 'tab', 'size', 'text', 'widget', 'tkinter', 'python']","['from', 'tkinter', 'import', '*', 'root', '=', 'Tk', '(', ')', 'root', '.', 'geometry', '(', '""400x400""', ')', 'root', '.', 'mainloop', '(', ')']"
1718,"['write', 'python', 'program', 'comb', 'sort']","['def', 'getNextGap', '(', 'gap', ')', ':', 'gap', '=', '(', 'gap', '*', '10', ')', '/', '13', 'if', 'gap', '<', '1', ':', 'return', '1', 'return', 'gap', 'def', 'combSort', '(', 'arr', ')', ':', 'n', '=', 'len', '(', 'arr', ')', 'gap', '=', 'n', 'swapped', '=', 'True', 'while', 'gap', '!=', '1', 'or', 'swapped', '==', '1', ':', 'gap', '=', 'getNextGap', '(', 'gap', ')', 'swapped', '=', 'False', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', '-', 'gap', ')', ':', 'if', 'arr', '[', 'i', ']', '>', 'arr', '[', 'i', '+', 'gap', ']', ':', 'arr', '[', 'i', ']', ',', 'arr', '[', 'i', '+', 'gap', ']', '=', 'arr', '[', 'i', '+', 'gap', ']', ',', 'arr', '[', 'i', ']', 'swapped', '=', 'True', 'arr', '=', '[', '8', ',', '4', ',', '1', ',', '3', ',', '-', '44', ',', '23', ',', '-', '6', ',', '28', ',', '0', ']', 'combSort', '(', 'arr', ')', 'print', '(', '""Sorted array:""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'arr', ')', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ')', ',']"
1719,"['mapping', 'external', 'value', 'dataframe', 'value', 'panda', 'python']","['import', 'pandas', 'as', 'pd', 'initial_data', '=', '{', ""'First_name'"", ':', '[', ""'Ram'"", ',', ""'Mohan'"", ',', ""'Tina'"", ',', ""'Jeetu'"", ',', ""'Meera'"", ']', ',', ""'Last_name'"", ':', '[', ""'Kumar'"", ',', ""'Sharma'"", ',', ""'Ali'"", ',', ""'Gandhi'"", ',', ""'Kumari'"", ']', ',', ""'Age'"", ':', '[', '42', ',', '52', ',', '36', ',', '21', ',', '23', ']', ',', ""'City'"", ':', '[', ""'Mumbai'"", ',', ""'Noida'"", ',', ""'Pune'"", ',', ""'Delhi'"", ',', ""'Bihar'"", ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'initial_data', ',', 'columns', '=', '[', ""'First_name'"", ',', ""'Last_name'"", ',', ""'Age'"", ',', ""'City'"", ']', ')', 'new_data', '=', '{', '""Ram""', ':', '""B.Com""', ',', '""Mohan""', ':', '""IAS""', ',', '""Tina""', ':', '""LLB""', ',', '""Jeetu""', ':', '""B.Tech""', ',', '""Meera""', ':', '""MBBS""', '}', 'df', '[', '""Qualification""', ']', '=', 'df', '[', '""First_name""', ']', '.', 'map', '(', 'new_data', ')', 'print', '(', 'df', ')']"
1720,"['write', 'python', 'program', 'filter', 'dictionary', 'value', 'heterogeneous', 'dictionary']","['test_dict', '=', '{', ""'Gfg'"", ':', '4', ',', ""'is'"", ':', '2', ',', ""'best'"", ':', '3', ',', ""'for'"", ':', ""'geeks'"", '}', 'print', '(', '""The original dictionary : ""', '+', 'str', '(', 'test_dict', ')', ')', 'K', '=', '3', 'res', '=', '{', 'key', ':', 'val', 'for', 'key', ',', 'val', 'in', 'test_dict', '.', 'items', '(', ')', 'if', 'type', '(', 'val', ')', '!=', 'int', 'or', 'val', '>', 'K', '}', 'print', '(', '""Values greater than K : ""', '+', 'str', '(', 'res', ')', ')']"
1721,"['write', 'python', 'program', 'split', 'string', 'prefix', 'occurrence']","['test_list', '=', '[', '""geeksforgeeks""', ',', '""best""', ',', '""geeks""', ',', '""and""', ',', '""geeks""', ',', '""love""', ',', '""CS""', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'pref', '=', '""geek""', 'res', '=', '[', ']', 'for', 'val', 'in', 'test_list', ':', 'if', 'val', '.', 'startswith', '(', 'pref', ')', ':', 'res', '.', 'append', '(', '[', 'val', ']', ')', 'else', ':', 'res', '[', '-', '1', ']', '.', 'append', '(', 'val', ')', 'print', '(', '""Prefix Split List : ""', '+', 'str', '(', 'res', ')', ')']"
1722,"['write', 'python', 'program', 'group', 'date', 'k', 'range']","['from', 'itertools', 'import', 'groupby', 'from', 'datetime', 'import', 'datetime', 'test_list', '=', '[', 'datetime', '(', '2020', ',', '1', ',', '4', ')', ',', 'datetime', '(', '2019', ',', '12', ',', '30', ')', ',', 'datetime', '(', '2020', ',', '1', ',', '7', ')', ',', 'datetime', '(', '2019', ',', '12', ',', '27', ')', ',', 'datetime', '(', '2020', ',', '1', ',', '20', ')', ',', 'datetime', '(', '2020', ',', '1', ',', '10', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '7', 'min_date', '=', 'min', '(', 'test_list', ')', 'def', 'group_util', '(', 'date', ')', ':', 'return', '(', 'date', '-', 'min_date', ')', '.', 'days', '//', 'K', 'test_list', '.', 'sort', '(', ')', 'temp', '=', '[', ']', 'for', 'key', ',', 'val', 'in', 'groupby', '(', 'test_list', ',', 'key', '=', 'lambda', 'date', ':', 'group_util', '(', 'date', ')', ')', ':', 'temp', '.', 'append', '(', '(', 'key', ',', 'list', '(', 'val', ')', ')', ')', 'res', '=', '[', ']', 'for', 'sub', 'in', 'temp', ':', 'intr', '=', '[', ']', 'for', 'ele', 'in', 'sub', '[', '1', ']', ':', 'intr', '.', 'append', '(', 'ele', '.', 'strftime', '(', '""%Y/%m/%d""', ')', ')', 'res', '.', 'append', '(', '(', 'sub', '[', '0', ']', ',', 'intr', ')', ')', 'print', '(', '""Grouped Digits : ""', '+', 'str', '(', 'res', ')', ')']"
1723,"['write', 'python', 'program', 'combination', 'sum', 'tuples', 'tuple', 'list']","['from', 'itertools', 'import', 'combinations', 'test_list', '=', '[', '(', '2', ',', '4', ')', ',', '(', '6', ',', '7', ')', ',', '(', '5', ',', '1', ')', ',', '(', '6', ',', '10', ')', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', '(', 'b1', '+', 'a1', ',', 'b2', '+', 'a2', ')', 'for', '(', 'a1', ',', 'a2', ')', ',', '(', 'b1', ',', 'b2', ')', 'in', 'combinations', '(', 'test_list', ',', '2', ')', ']', 'print', '(', '""The Summation combinations are : ""', '+', 'str', '(', 'res', ')', ')']"
1724,"['plot', 'line', 'graph', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'x', '=', 'np', '.', 'arrange', '(', '1', ',', '11', ')', 'y', '=', 'x', '*', 'x', 'plt', '.', 'title', '(', '""Line graph""', ')', 'plt', '.', 'xlabel', '(', '""X axis""', ')', 'plt', '.', 'ylabel', '(', '""Y axis""', ')', 'plt', '.', 'plot', '(', 'x', ',', 'y', ',', 'color', '=', '""red""', ')', 'plt', '.', 'show', '(', ')']"
1725,"['write', 'python', 'program', 'count', 'number', 'matching', 'character', 'pair', 'string']","['def', 'count', '(', 'str1', ',', 'str2', ')', ':', 'c', ',', 'j', '=', '0', ',', '0', 'for', 'i', 'in', 'str1', ':', 'if', 'str2', '.', 'find', '(', 'i', ')', '>=', '0', 'and', 'j', '==', 'str1', '.', 'find', '(', 'i', ')', ':', 'c', '+=', '1', 'j', '+=', '1', 'print', '(', ""'No. of matching characters are : '"", ',', 'c', ')', 'def', 'main', '(', ')', ':', 'str1', '=', ""'aabcddekll12@'"", 'str2', '=', ""'bb2211@55k'"", 'count', '(', 'str1', ',', 'str2', ')', 'if', '__name__', '==', '""__main__""', ':', 'main', '(', ')']"
1726,"['write', 'python', 'program', 'extract', 'digit', 'tuple', 'list']","['from', 'itertools', 'import', 'chain', 'test_list', '=', '[', '(', '15', ',', '3', ')', ',', '(', '3', ',', '9', ')', ',', '(', '1', ',', '10', ')', ',', '(', '99', ',', '2', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'temp', '=', 'map', '(', 'lambda', 'ele', ':', 'str', '(', 'ele', ')', ',', 'chain', '.', 'from_iterable', '(', 'test_list', ')', ')', 'res', '=', 'set', '(', ')', 'for', 'sub', 'in', 'temp', ':', 'for', 'ele', 'in', 'sub', ':', 'res', '.', 'add', '(', 'ele', ')', 'print', '(', '""The extracted digits : ""', '+', 'str', '(', 'res', ')', ')']"
1727,"['write', 'python', 'program', 'count', 'tuples', 'occurrence', 'list', 'tuples']","['import', 'collections', 'Output', '=', 'collections', '.', 'defaultdict', '(', 'int', ')', 'Input', '=', '[', '[', '(', ""'hi'"", ',', ""'bye'"", ')', ']', ',', '[', '(', ""'Geeks'"", ',', ""'forGeeks'"", ')', ']', ',', '[', '(', ""'a'"", ',', ""'b'"", ')', ']', ',', '[', '(', ""'hi'"", ',', ""'bye'"", ')', ']', ',', '[', '(', ""'a'"", ',', ""'b'"", ')', ']', ']', 'for', 'elem', 'in', 'Input', ':', 'Output', '[', 'elem', '[', '0', ']', ']', '+=', '1', 'print', '(', 'Output', ')']"
1728,"['change', 'data', 'type', 'given', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'arr', '=', 'np', '.', 'array', '(', '[', '10', ',', '20', ',', '30', ',', '40', ',', '50', ']', ')', 'print', '(', 'arr', ')']"
1729,"['write', 'python', 'program', 'sort', 'tuples', 'maximum', 'element']","['def', 'get_max', '(', 'sub', ')', ':', 'return', 'max', '(', 'sub', ')', 'test_list', '=', '[', '(', '4', ',', '5', ',', '5', ',', '7', ')', ',', '(', '1', ',', '3', ',', '7', ',', '4', ')', ',', '(', '19', ',', '4', ',', '5', ',', '3', ')', ',', '(', '1', ',', '2', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'test_list', '.', 'sort', '(', 'key', '=', 'get_max', ',', 'reverse', '=', 'True', ')', 'print', '(', '""Sorted Tuples : ""', '+', 'str', '(', 'test_list', ')', ')']"
1730,"['binary', 'search', 'bisect', 'python']","['from', 'bisect', 'import', 'bisect_left', 'def', 'BinarySearch', '(', 'a', ',', 'x', ')', ':', 'i', '=', 'bisect_left', '(', 'a', ',', 'x', ')', 'if', 'i', '!=', 'len', '(', 'a', ')', 'and', 'a', '[', 'i', ']', '==', 'x', ':', 'return', 'i', 'else', ':', 'return', '-', '1', 'a', '=', '[', '1', ',', '2', ',', '4', ',', '4', ',', '8', ']', 'x', '=', 'int', '(', '4', ')', 'res', '=', 'BinarySearch', '(', 'a', ',', 'x', ')', 'if', 'res', '==', '-', '1', ':', 'print', '(', 'x', ',', '""is absent""', ')', 'else', ':', 'print', '(', '""First occurrence of""', ',', 'x', ',', '""is present at""', ',', 'res', ')']"
1731,"['student', 'management', 'system', 'python']","['class', 'Student', ':', 'def', '__init__', '(', 'self', ',', 'name', ',', 'rollno', ',', 'm1', ',', 'm2', ')', ':', 'self', '.', 'name', '=', 'name', 'self', '.', 'rollno', '=', 'rollno', 'self', '.', 'm1', '=', 'm1', 'self', '.', 'm2', '=', 'm2', 'def', 'accept', '(', 'self', ',', 'Name', ',', 'Rollno', ',', 'marks1', ',', 'marks2', ')', ':', 'ob', '=', 'Student', '(', 'Name', ',', 'Rollno', ',', 'marks1', ',', 'marks2', ')', 'ls', '.', 'append', '(', 'ob', ')', 'def', 'display', '(', 'self', ',', 'ob', ')', ':', 'print', '(', '""Name\xa0\xa0 : ""', ',', 'ob', '.', 'name', ')', 'print', '(', '""RollNo : ""', ',', 'ob', '.', 'rollno', ')', 'print', '(', '""Marks1 : ""', ',', 'ob', '.', 'm1', ')', 'print', '(', '""Marks2 : ""', ',', 'ob', '.', 'm2', ')', 'print', '(', '""\\n""', ')', 'def', 'search', '(', 'self', ',', 'rn', ')', ':', 'for', 'i', 'in', 'range', '(', 'ls', '.', '__len__', '(', ')', ')', ':', 'if', '(', 'ls', '[', 'i', ']', '.', 'rollno', '==', 'rn', ')', ':', 'return', 'i', 'def', 'delete', '(', 'self', ',', 'rn', ')', ':', 'i', '=', 'obj', '.', 'search', '(', 'rn', ')', 'del', 'ls', '[', 'i', ']', 'def', 'update', '(', 'self', ',', 'rn', ',', 'No', ')', ':', 'i', '=', 'obj', '.', 'search', '(', 'rn', ')', 'roll', '=', 'No', 'ls', '[', 'i', ']', '.', 'rollno', '=', 'roll', ';', 'ls', '=', '[', ']', 'obj', '=', 'Student', '(', ""''"", ',', '0', ',', '0', ',', '0', ')', 'print', '(', '""\\nOperations used, ""', ')', 'print', '(', '""\\n1.Accept Student details\\n2.Display Student Details\\n""', '/', '/', '""3.Search Details of a Student\\n4.Delete Details of Student""', '/', '/', '""\\n5.Update Student Details\\n6.Exit""', ')', 'obj', '.', 'accept', '(', '""A""', ',', '1', ',', '100', ',', '100', ')', 'obj', '.', 'accept', '(', '""B""', ',', '2', ',', '90', ',', '90', ')', 'obj', '.', 'accept', '(', '""C""', ',', '3', ',', '80', ',', '80', ')', 'print', '(', '""\\n""', ')', 'print', '(', '""\\nList of Students\\n""', ')', 'for', 'i', 'in', 'range', '(', 'ls', '.', '__len__', '(', ')', ')', ':', 'obj', '.', 'display', '(', 'ls', '[', 'i', ']', ')', 'print', '(', '""\\n Student Found, ""', ')', 's', '=', 'obj', '.', 'search', '(', '2', ')', 'obj', '.', 'display', '(', 'ls', '[', 's', ']', ')', 'obj', '.', 'delete', '(', '2', ')', 'print', '(', 'ls', '.', '__len__', '(', ')', ')', 'print', '(', '""List after deletion""', ')', 'for', 'i', 'in', 'range', '(', 'ls', '.', '__len__', '(', ')', ')', ':', 'obj', '.', 'display', '(', 'ls', '[', 'i', ']', ')', 'obj', '.', 'update', '(', '3', ',', '2', ')', 'print', '(', 'ls', '.', '__len__', '(', ')', ')', 'print', '(', '""List after updation""', ')', 'for', 'i', 'in', 'range', '(', 'ls', '.', '__len__', '(', ')', ')', ':', 'obj', '.', 'display', '(', 'ls', '[', 'i', ']', ')', 'print', '(', '""Thank You !""', ')']"
1732,"['priority', 'queue', 'using', 'queue', 'heapdict', 'module', 'python']","['from', 'queue', 'import', 'PriorityQueue', 'q', '=', 'PriorityQueue', '(', ')', 'q', '.', 'put', '(', '(', '2', ',', ""'g'"", ')', ')', 'q', '.', 'put', '(', '(', '3', ',', ""'e'"", ')', ')', 'q', '.', 'put', '(', '(', '4', ',', ""'k'"", ')', ')', 'q', '.', 'put', '(', '(', '5', ',', ""'s'"", ')', ')', 'q', '.', 'put', '(', '(', '1', ',', ""'e'"", ')', ')', 'print', '(', 'q', '.', 'get', '(', ')', ')', 'print', '(', 'q', '.', 'get', '(', ')', ')', 'print', '(', ""'Items in queue :'"", ',', 'q', '.', 'qsize', '(', ')', ')', 'print', '(', ""'Is queue empty :'"", ',', 'q', '.', 'empty', '(', ')', ')', 'print', '(', ""'Is queue full :'"", ',', 'q', '.', 'full', '(', ')', ')']"
1733,"['convert', 'python', 'dictionary', 'json']","['import', 'json', 'dictionary', '=', '{', '""id""', ':', '""04""', ',', '""name""', ':', '""sunil""', ',', '""department""', ':', '""HR""', '}', 'json_object', '=', 'json', '.', 'dumps', '(', 'dictionary', ',', 'indent', '=', '4', ')', 'print', '(', 'json_object', ')']"
1734,"['write', 'python', 'program', 'find', 'index', 'overlapping', 'substring']","['import', 're', 'def', 'CntSubstr', '(', 'pattern', ',', 'string', ')', ':', 'a', '=', '[', 'm', '.', 'start', '(', ')', 'for', 'm', 'in', 're', '.', 'finditer', '(', 'pattern', ',', 'string', ')', ']', 'return', 'a', 'string', '=', ""'geeksforgeeksforgeeks'"", 'pattern', '=', ""'geeksforgeeks'"", 'print', '(', 'CntSubstr', '(', 'pattern', ',', 'string', ')', ')']"
1735,"['find', 'frequent', 'value', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '1', ',', '2', ',', '1', ',', '1', ',', '1', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'x', ')', 'print', '(', '""Most frequent value in the above array:""', ')', 'print', '(', 'np', '.', 'bincount', '(', 'x', ')', '.', 'argmax', '(', ')', ')']"
1736,"['add', 'border', 'color', 'button', 'tkinter', 'python']","['import', 'tkinter', 'as', 'tk', 'root', '=', 'tk', '.', 'Tk', '(', ')', 'root', '.', 'geometry', '(', ""'250x150'"", ')', 'root', '.', 'title', '(', '""Button Border""', ')', 'l', '=', 'tk', '.', 'Label', '(', 'root', ',', 'text', '=', '""Enter your Roll No. :""', ',', 'font', '=', '(', '(', '""Times New Roman""', ')', ',', '15', ')', ')', 'l', '.', 'pack', '(', ')', 'tk', '.', 'Entry', '(', 'root', ')', '.', 'pack', '(', ')', 'tk', '.', 'Label', '(', 'root', ',', 'text', '=', '"" ""', ')', '.', 'pack', '(', ')', 'button_border', '=', 'tk', '.', 'Frame', '(', 'root', ',', 'highlightbackground', '=', '""black""', ',', 'highlightthickness', '=', '2', ',', 'bd', '=', '0', ')', 'bttn', '=', 'tk', '.', 'Button', '(', 'button_border', ',', 'text', '=', ""'Submit'"", ',', 'fg', '=', ""'black'"", ',', 'bg', '=', ""'yellow'"", ',', 'font', '=', '(', '(', '""Times New Roman""', ')', ',', '15', ')', ')', 'bttn', '.', 'pack', '(', ')', 'button_border', '.', 'pack', '(', ')', 'root', '.', 'mainloop', '(', ')']"
1737,"['write', 'python', 'program', 'convert', 'keyvalue', 'list', 'dictionary', 'list', 'list']","['test_dict', '=', '{', ""'gfg'"", ':', '[', '1', ',', '3', ',', '4', ']', ',', ""'is'"", ':', '[', '7', ',', '6', ']', ',', ""'best'"", ':', '[', '4', ',', '5', ']', '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'res', '=', '[', ']', 'for', 'key', ',', 'val', 'in', 'test_dict', '.', 'items', '(', ')', ':', 'res', '.', 'append', '(', '[', 'key', ']', '+', 'val', ')', 'print', '(', '""The converted list is : ""', '+', 'str', '(', 'res', ')', ')']"
1738,"['move', 'file', 'directory', 'python']","['import', 'shutil', 'source', '=', '""D:\\Pycharm projects\\gfg\\Test\\B""', 'destination', '=', '""D:\\Pycharm projects\\gfg\\Test\\A""', 'dest', '=', 'shutil', '.', 'move', '(', 'source', ',', 'destination', ')']"
1739,"['get', 'file', 'creation', 'modification', 'date', 'time', 'python']","['import', 'os', 'import', 'time', 'path', '=', 'r""C:\\Program Files (x86)\\Google\\pivpT.png""', 'ti_c', '=', 'os', '.', 'path', '.', 'getctime', '(', 'path', ')', 'ti_m', '=', 'os', '.', 'path', '.', 'getmtime', '(', 'path', ')', 'c_ti', '=', 'time', '.', 'ctime', '(', 'ti_c', ')', 'm_ti', '=', 'time', '.', 'ctime', '(', 'ti_m', ')', 'print', '(', 'f', 'The', 'file', 'located', 'at', 'the', 'path', '{', 'path', '}', 'was', 'created', 'at', '{', 'c_ti', '}', 'and', 'was', 'last', 'modified', 'at', '{', 'm_ti', '}', ')']"
1740,"['write', 'python', 'program', 'convert', 'unix', 'timestamp', 'string', 'readable', 'date']","['import', 'datetime', 'print', '(', 'datetime', '.', 'datetime', '.', 'fromtimestamp', '(', 'int', '(', '""1294113662""', ')', ')', '.', 'strftime', '(', ""'%Y-%m-%d %H:%M:%S'"", ')', ')']"
1741,"['write', 'python', 'program', 'key', 'associated', 'value', 'dictionary']","['from', 'collections', 'import', 'defaultdict', 'test_dict', '=', '{', ""'gfg'"", ':', '[', '1', ',', '2', ',', '3', ']', ',', ""'is'"", ':', '[', '1', ',', '4', ']', ',', ""'best'"", ':', '[', '4', ',', '2', ']', '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'res', '=', 'defaultdict', '(', 'list', ')', 'for', 'key', ',', 'val', 'in', 'test_dict', '.', 'items', '(', ')', ':', 'for', 'ele', 'in', 'val', ':', 'res', '[', 'ele', ']', '.', 'append', '(', 'key', ')', 'print', '(', '""The values associated dictionary : ""', '+', 'str', '(', 'dict', '(', 'res', ')', ')', ')']"
1742,"['controlling', 'web', 'browser', 'python']","['from', 'selenium', 'import', 'webdriver', 'import', 'time', 'if', '__name__', '==', ""'__main__'"", ':', 'email', '=', ""'example@example.com'"", 'password', '=', ""'password'"", 'options', '=', 'webdriver', '.', 'ChromeOptions', '(', ')', 'options', '.', 'add_argument', '(', '""--start-maximized""', ')', 'options', '.', 'add_argument', '(', ""'--log-level=3'"", ')', 'driver', '=', 'webdriver', '.', 'Chrome', '(', 'executable_path', '=', '""C:/chromedriver/chromedriver.exe""', ',', 'chrome_options', '=', 'options', ')', 'driver', '.', 'set_window_size', '(', '1920', ',', '1080', ')', 'driver', '.', 'get', '(', ""'https://auth.geeksforgeeks.org/'"", ')', 'time', '.', 'sleep', '(', '5', ')', 'driver', '.', 'find_element_by_name', '(', ""'user'"", ')', '.', 'send_keys', '(', 'email', ')', 'driver', '.', 'find_element_by_name', '(', ""'pass'"", ')', '.', 'send_keys', '(', 'password', ')', 'driver', '.', 'find_element_by_css_selector', '(', ""'button.btn.btn-green.signin-button'"", ')', '.', 'click', '(', ')', 'time', '.', 'sleep', '(', '5', ')', 'container', '=', 'driver', '.', 'find_elements_by_css_selector', '(', ""'div.mdl-cell.mdl-cell--9-col.mdl-cell--12-col-phone.textBold'"", ')', 'name', '=', 'container', '[', '0', ']', '.', 'text', 'try', ':', 'institution', '=', 'container', '[', '1', ']', '.', 'find_element_by_css_selector', '(', ""'a'"", ')', '.', 'text', 'except', ':', 'institution', '=', 'container', '[', '1', ']', '.', 'text', 'email_id', '=', 'container', '[', '2', ']', '.', 'text', 'print', '(', '""Basic Info""', ')', 'print', '(', '{', '""Name""', ':', 'name', ',', '""Institution""', ':', 'institution', ',', '""Email ID""', ':', 'email', '}', ')', 'driver', '.', 'find_elements_by_css_selector', '(', ""'a.mdl-navigation__link'"", ')', '[', '1', ']', '.', 'click', '(', ')', 'time', '.', 'sleep', '(', '5', ')', 'container', '=', 'driver', '.', 'find_element_by_css_selector', '(', ""'div.mdl-cell.mdl-cell--7-col.mdl-cell--12-col-phone.\\\n\xa0\xa0\xa0\xa0\xa0\xa0whiteBgColor.mdl-shadow--2dp.userMainDiv'"", ')', 'grids', '=', 'container', '.', 'find_elements_by_css_selector', '(', ""'div.mdl-grid'"", ')', 'res', '=', 'set', '(', ')', 'for', 'grid', 'in', 'grids', ':', 'res', '.', 'add', '(', 'grid', '.', 'text', '.', 'replace', '(', ""'\\n'"", ',', ""':'"", ')', ')', 'print', '(', '""Practice Info""', ')', 'print', '(', 'res', ')', 'driver', '.', 'close', '(', ')', 'driver', '.', 'quit', '(', ')']"
1743,"['write', 'python', 'program', 'pair', 'combination', 'tuples']","['test_tuple1', '=', '(', '4', ',', '5', ')', 'test_tuple2', '=', '(', '7', ',', '8', ')', 'print', '(', '""The original tuple 1 : ""', '+', 'str', '(', 'test_tuple1', ')', ')', 'print', '(', '""The original tuple 2 : ""', '+', 'str', '(', 'test_tuple2', ')', ')', 'res', '=', '[', '(', 'a', ',', 'b', ')', 'for', 'a', 'in', 'test_tuple1', 'for', 'b', 'in', 'test_tuple2', ']', 'res', '=', 'res', '+', '[', '(', 'a', ',', 'b', ')', 'for', 'a', 'in', 'test_tuple2', 'for', 'b', 'in', 'test_tuple1', ']', 'print', '(', '""The filtered tuple : ""', '+', 'str', '(', 'res', ')', ')']"
1744,"['write', 'python', 'program', 'avoid', 'space', 'string', 'length']","['test_str', '=', ""'geeksforgeeks 33 is\xa0\xa0 best'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'res', '=', 'sum', '(', 'not', 'chr', '.', 'isspace', '(', ')', 'for', 'chr', 'in', 'test_str', ')', 'print', '(', '""The Characters Frequency avoiding spaces : ""', '+', 'str', '(', 'res', ')', ')']"
1745,"['create', 'empty', 'class', 'python']","['class', 'Geeks', ':']"
1746,"['write', 'python', 'program', 'generate', 'k', 'random', 'date', 'two', 'date']","['from', 'datetime', 'import', 'date', ',', 'timedelta', 'from', 'random', 'import', 'choices', 'test_date1', ',', 'test_date2', '=', 'date', '(', '2015', ',', '6', ',', '3', ')', ',', 'date', '(', '2015', ',', '7', ',', '1', ')', 'print', '(', '""The original range : ""', '+', 'str', '(', 'test_date1', ')', '+', '"" ""', '+', 'str', '(', 'test_date2', ')', ')', 'K', '=', '7', 'res_dates', '=', '[', 'test_date1', ']', 'while', 'test_date1', '!=', 'test_date2', ':', 'test_date1', '+=', 'timedelta', '(', 'days', '=', '1', ')', 'res_dates', '.', 'append', '(', 'test_date1', ')', 'res', '=', 'choices', '(', 'res_dates', ',', 'k', '=', 'K', ')', 'print', '(', '""K random dates in range : ""', '+', 'str', '(', 'res', ')', ')']"
1747,"['write', 'python', 'program', 'convert', 'list', 'list', 'dictionary']","['test_list', '=', '[', '""Gfg""', ',', '3', ',', '""is""', ',', '8', ',', '""Best""', ',', '10', ',', '""for""', ',', '18', ',', '""Geeks""', ',', '33', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'key_list', '=', '[', '""name""', ',', '""number""', ']', 'n', '=', 'len', '(', 'test_list', ')', 'res', '=', '[', ']', 'for', 'idx', 'in', 'range', '(', '0', ',', 'n', ',', '2', ')', ':', 'res', '.', 'append', '(', '{', 'key_list', '[', '0', ']', ':', 'test_list', '[', 'idx', ']', ',', 'key_list', '[', '1', ']', ':', 'test_list', '[', 'idx', '+', '1', ']', '}', ')', 'print', '(', '""The constructed dictionary list : ""', '+', 'str', '(', 'res', ')', ')']"
1748,"['building', 'undirected', 'graph', 'finding', 'shortest', 'path', 'using', 'dictionary', 'python']","['from', 'collections', 'import', 'defaultdict', 'def', 'build_graph', '(', ')', ':', 'edges', '=', '[', '[', '""A""', ',', '""B""', ']', ',', '[', '""A""', ',', '""E""', ']', ',', '[', '""A""', ',', '""C""', ']', ',', '[', '""B""', ',', '""D""', ']', ',', '[', '""B""', ',', '""E""', ']', ',', '[', '""C""', ',', '""F""', ']', ',', '[', '""C""', ',', '""G""', ']', ',', '[', '""D""', ',', '""E""', ']', ']', 'graph', '=', 'defaultdict', '(', 'list', ')', 'for', 'edge', 'in', 'edges', ':', 'a', ',', 'b', '=', 'edge', '[', '0', ']', ',', 'edge', '[', '1', ']', 'graph', '[', 'a', ']', '.', 'append', '(', 'b', ')', 'graph', '[', 'b', ']', '.', 'append', '(', 'a', ')', 'return', 'graph', 'if', '__name__', '==', '""__main__""', ':', 'graph', '=', 'build_graph', '(', ')', 'print', '(', 'graph', ')']"
1749,"['write', 'python', 'program', 'prefix', 'frequency', 'string', 'list']","['test_list', '=', '[', ""'gfgisbest'"", ',', ""'geeks'"", ',', ""'gfgfreak'"", ',', ""'gfgCS'"", ',', ""'Gcourses'"", ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'test_sub', '=', ""'gfg'"", 'res', '=', '0', 'for', 'ele', 'in', 'test_list', ':', 'if', 'ele', '.', 'startswith', '(', 'test_sub', ')', ':', 'res', '=', 'res', '+', '1', 'print', '(', '""Strings count with matching frequency : ""', '+', 'str', '(', 'res', ')', ')']"
1750,"['write', 'python', 'program', 'update', 'element', 'tuple', 'list']","['test_list', '=', '[', '(', '1', ',', '3', ',', '4', ')', ',', '(', '2', ',', '4', ',', '6', ')', ',', '(', '3', ',', '8', ',', '1', ')', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'add_ele', '=', '4', 'res', '=', '[', 'tuple', '(', 'j', '+', 'add_ele', 'for', 'j', 'in', 'sub', ')', 'for', 'sub', 'in', 'test_list', ']', 'print', '(', '""List after bulk update : ""', '+', 'str', '(', 'res', ')', ')']"
1751,"['scrape', 'multiple', 'page', 'website', 'using', 'python']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup', 'as', 'bs', 'URL', '=', ""'https://www.geeksforgeeks.org/page/1/'"", 'req', '=', 'requests', '.', 'get', '(', 'URL', ')', 'soup', '=', 'bs', '(', 'req', '.', 'text', ',', ""'html.parser'"", ')', 'titles', '=', 'soup', '.', 'find_all', '(', ""'div'"", ',', 'attrs', '=', '{', ""'class'"", ',', ""'head'"", '}', ')', 'print', '(', 'titles', '[', '4', ']', '.', 'text', ')']"
1752,"['test', 'given', 'page', 'found', 'server', 'using', 'python']","['from', 'urllib', '.', 'request', 'import', 'urlopen', 'from', 'urllib', '.', 'error', 'import', '*', 'try', ':', 'html', '=', 'urlopen', '(', '""https://www.geeksforgeeks.org/""', ')', 'except', 'HTTPError', 'as', 'e', ':', 'print', '(', '""HTTP error""', ',', 'e', ')', 'except', 'URLError', 'as', 'e', ':', 'print', '(', '""Opps ! Page not found!""', ',', 'e', ')', 'else', ':', 'print', '(', ""'Yeah !\xa0 found '"", ')']"
1753,"['write', 'python', 'program', 'convert', 'list', 'list', 'tuple', 'tuples']","['test_list', '=', '[', '[', ""'Gfg'"", ',', ""'is'"", ',', ""'Best'"", ']', ',', '[', ""'Gfg'"", ',', ""'is'"", ',', ""'love'"", ']', ',', '[', ""'Gfg'"", ',', ""'is'"", ',', ""'for'"", ',', ""'Geeks'"", ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', 'tuple', '(', 'tuple', '(', 'sub', ')', 'for', 'sub', 'in', 'test_list', ')', 'print', '(', '""The converted data : ""', '+', 'str', '(', 'res', ')', ')']"
1754,"['write', 'python', 'program', 'numpy', 'dstack', 'method']","['import', 'numpy', 'as', 'np', 'gfg1', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ']', ')', 'gfg2', '=', 'np', '.', 'array', '(', '[', '4', ',', '5', ',', '6', ']', ')', 'print', '(', 'np', '.', 'dstack', '(', '(', 'gfg1', ',', 'gfg2', ')', ')', ')']"
1755,"['compute', 'covariance', 'matrix', 'two', 'given', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'array1', '=', 'np', '.', 'array', '(', '[', '0', ',', '1', ',', '1', ']', ')', 'array2', '=', 'np', '.', 'array', '(', '[', '2', ',', '2', ',', '1', ']', ')', 'print', '(', 'array1', ')', 'print', '(', 'array2', ')', 'print', '(', '""\\nCovariance matrix of the said arrays:\\n""', ',', 'np', '.', 'cov', '(', 'array1', ',', 'array2', ')', ')']"
1756,"['extract', 'punctuation', 'specified', 'column', 'dataframe', 'using', 'regex', 'python']","['import', 'pandas', 'as', 'pd', 'import', 're', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Name'"", ':', '[', ""'Akash'"", ',', ""'Ashish'"", ',', ""'Ayush'"", ',', ""'Diksha'"", ',', ""'Radhika'"", ']', ',', ""'Comments'"", ':', '[', ""'Hey! Akash how r u'"", ',', ""'Why are you asking this to me?'"", ',', ""'Today, what we are going to do.'"", ',', ""'No plans for today why?'"", ',', ""'Wedding plans, what are you saying?'"", ']', '}', ',', 'columns', '=', '[', ""'Name'"", ',', ""'Comments'"", ']', ')', 'df']"
1757,"['add', 'timestamp', 'excel', 'file', 'python']","['import', 'datetime', 'from', 'openpyxl', 'import', 'Workbook', 'import', 'time', 'if', '__name__', '==', ""'__main__'"", ':', 'wb', '=', 'Workbook', '(', ')', 'ws', '=', 'wb', '.', 'active', 'ws', '.', 'cell', '(', 'row', '=', '1', ',', 'column', '=', '1', ')', '.', 'value', '=', '""Current Date and Time""', 'ws', '.', 'cell', '(', 'row', '=', '2', ',', 'column', '=', '1', ')', '.', 'value', '=', 'datetime', '.', 'datetime', '.', 'now', '(', ')', '.', 'strftime', '(', ""'%Y-%m-%d %H:%M:%S'"", ')', 'time', '.', 'sleep', '(', '2', ')', 'ws', '.', 'cell', '(', 'row', '=', '3', ',', 'column', '=', '1', ')', '.', 'value', '=', 'datetime', '.', 'datetime', '.', 'now', '(', ')', '.', 'strftime', '(', ""'%Y-%m-%d %H:%M:%S'"", ')', 'time', '.', 'sleep', '(', '2', ')', 'ws', '.', 'cell', '(', 'row', '=', '4', ',', 'column', '=', '1', ')', '.', 'value', '=', 'datetime', '.', 'datetime', '.', 'now', '(', ')', '.', 'strftime', '(', ""'%Y-%m-%d %H:%M:%S'"", ')', 'wb', '.', 'save', '(', ""'gfg.xlsx'"", ')', 'wb', '.', 'close', '(', ')']"
1758,"['defining', 'python', 'function', 'runtime']","['from', 'types', 'import', 'FunctionType', 'f_code', '=', 'compile', '(', '\'def gfg(): return ""GEEKSFORGEEKS""\'', ',', '""<string>""', ',', '""exec""', ')', 'f_func', '=', 'FunctionType', '(', 'f_code', '.', 'co_consts', '[', '0', ']', ',', 'globals', '(', ')', ',', '""gfg""', ')', 'print', '(', 'f_func', '(', ')', ')']"
1759,"['find', 'index', 'element', 'equal', 'zero', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'n_array', '=', 'np', '.', 'array', '(', '[', '1', ',', '0', ',', '2', ',', '0', ',', '3', ',', '0', ',', '0', ',', '5', ',', '6', ',', '7', ',', '5', ',', '0', ',', '8', ']', ')', 'print', '(', '""Original array:""', ')', 'print', '(', 'n_array', ')', 'print', '(', '""\\nIndices of elements equal to zero of the \\\ngiven 1-D array:""', ')', 'res', '=', 'np', '.', 'where', '(', 'n_array', '==', '0', ')', '[', '0', ']', 'print', '(', 'res', ')']"
1760,"['getting', 'csv', 'file', 'directory', 'using', 'python']","['import', 'glob', 'import', 'pandas', 'as', 'pd', 'path', '=', '""csvfoldergfg""', 'files', '=', 'glob', '.', 'glob', '(', 'path', '+', '""/*.csv""', ')', 'data_frame', '=', 'pd', '.', 'DataFrame', '(', ')', 'content', '=', '[', ']', 'for', 'filename', 'in', 'files', ':', 'df', '=', 'pd', '.', 'read_csv', '(', 'filename', ',', 'index_col', '=', 'None', ')', 'content', '.', 'append', '(', 'df', ')', 'data_frame', '=', 'pd', '.', 'concat', '(', 'content', ')', 'print', '(', 'data_frame', ')']"
1761,"['numpywhere', 'python']","['import', 'numpy', 'as', 'np', 'np', '.', 'where', '(', '[', '[', 'True', ',', 'False', ']', ',', '[', 'True', ',', 'True', ']', ']', ',', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', ',', '[', '[', '5', ',', '6', ']', ',', '[', '7', ',', '8', ']', ']', ')']"
1762,"['write', 'python', 'program', 'multiple', 'index', 'replace', 'string']","['test_str', '=', ""'geeksforgeeks is best'"", 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'test_list', '=', '[', '2', ',', '4', ',', '7', ',', '10', ']', 'repl_char', '=', ""'*'"", 'temp', '=', 'list', '(', 'test_str', ')', 'for', 'idx', 'in', 'test_list', ':', 'temp', '[', 'idx', ']', '=', 'repl_char', 'res', '=', ""''"", '.', 'join', '(', 'temp', ')', 'print', '(', '""The String after performing replace : ""', '+', 'str', '(', 'res', ')', ')']"
1763,"['automate', 'youtube', 'python']","['from', 'selenium', 'import', 'webdriver', 'from', 'selenium', '.', 'webdriver', '.', 'support', '.', 'ui', 'import', 'WebDriverWait', 'from', 'selenium', '.', 'webdriver', '.', 'support', 'import', 'expected_conditions', 'from', 'selenium', '.', 'webdriver', '.', 'common', '.', 'by', 'import', 'By', 'from', 'selenium', '.', 'webdriver', '.', 'common', '.', 'keys', 'import', 'Keys', 'import', 'speech_recognition', 'as', 'sr', 'import', 'pyttsx3', 'import', 'time', 'def', 'automateYoutube', '(', 'searchtext', ')', ':', 'path', '=', '""C:\\\\Users\\\\hp\\\\Downloads\\\\chromedriver""', 'url', '=', '""https://www.youtube.com/""', 'driver', '=', 'webdriver', '.', 'Chrome', '(', 'path', ')', 'driver', '.', 'get', '(', 'url', ')', 'driver', '.', 'find_element_by_name', '(', '""search_query""', ')', '.', 'send_keys', '(', 'searchtext', ')', 'driver', '.', 'find_element_by_css_selector', '(', '""#search-icon-legacy.ytd-searchbox""', ')', '.', 'click', '(', ')', 'WebDriverWait', '(', 'driver', ',', '0', ')', '.', 'until', '(', 'expected_conditions', '.', 'title_contains', '(', 'MyText', ')', ')', 'WebDriverWait', '(', 'driver', ',', '30', ')', '.', 'until', '(', 'expected_conditions', '.', 'element_to_be_clickable', '(', '(', 'By', '.', 'ID', ',', '""img""', ')', ')', ')', '.', 'click', '(', ')', 'speak', '=', 'sr', '.', 'Recognizer', '(', ')', 'try', ':', 'with', 'sr', '.', 'Microphone', '(', ')', 'as', 'speaky', ':', 'speak', '.', 'adjust_for_ambient_noise', '(', 'speaky', ',', 'duration', '=', '0.2', ')', 'print', '(', '""listening...""', ')', 'searchquery', '=', 'speak', '.', 'listen', '(', 'speaky', ')', 'MyText', '=', 'speak', '.', 'recognize_google', '(', 'searchquery', ')', 'MyText', '=', 'MyText', '.', 'lower', '(', ')', 'except', 'sr', '.', 'RequestError', 'as', 'e', ':', 'print', '(', '""Could not request results; {0}""', '.', 'format', '(', 'e', ')', ')', 'except', 'sr', '.', 'UnknownValueError', ':', 'print', '(', '""unknown error occured""', ')', 'automateYoutube', '(', 'MyText', ')']"
1764,"['write', 'python', 'program', 'intersection', 'tuple', 'record', 'data']","['test_list1', '=', '[', '(', ""'gfg'"", ',', '1', ')', ',', '(', ""'is'"", ',', '2', ')', ',', '(', ""'best'"", ',', '3', ')', ']', 'test_list2', '=', '[', '(', ""'i'"", ',', '3', ')', ',', '(', ""'love'"", ',', '4', ')', ',', '(', ""'gfg'"", ',', '1', ')', ']', 'print', '(', '""The original list 1 is : ""', '+', 'str', '(', 'test_list1', ')', ')', 'print', '(', '""The original list 2 is : ""', '+', 'str', '(', 'test_list2', ')', ')', 'res', '=', '[', 'ele1', 'for', 'ele1', 'in', 'test_list1', 'for', 'ele2', 'in', 'test_list2', 'if', 'ele1', '==', 'ele2', ']', 'print', '(', '""The Intersection of data records is : ""', '+', 'str', '(', 'res', ')', ')']"
1765,"['create', 'panda', 'column', 'using', 'loop', 'python']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'raw_Data', '=', '{', ""'Voter_name'"", ':', '[', ""'Geek1'"", ',', ""'Geek2'"", ',', ""'Geek3'"", ',', ""'Geek4'"", ',', ""'Geek5'"", ',', ""'Geek6'"", ',', ""'Geek7'"", ',', ""'Geek8'"", ']', ',', ""'Voter_age'"", ':', '[', '15', ',', '23', ',', '25', ',', '9', ',', '67', ',', '54', ',', '42', ',', 'np', '.', 'NaN', ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'raw_Data', ',', 'columns', '=', '[', ""'Voter_name'"", ',', ""'Voter_age'"", ']', ')', 'eligible', '=', '[', ']', 'for', 'age', 'in', 'df', '[', ""'Voter_age'"", ']', ':', 'if', 'age', '>=', '18', ':', 'eligible', '.', 'append', '(', ""'Yes'"", ')', 'elif', 'age', '<', '18', ':', 'eligible', '.', 'append', '(', '""No""', ')', 'else', ':', 'eligible', '.', 'append', '(', '""Not Sure""', ')', 'df', '[', ""'Voter'"", ']', '=', 'eligible', 'print', '(', 'df', ')']"
1766,"['create', 'panda', 'dataframe', 'list', 'dicts', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', '[', '{', ""'Geeks'"", ':', ""'dataframe'"", ',', ""'For'"", ':', ""'using'"", ',', ""'geeks'"", ':', ""'list'"", '}', ',', '{', ""'Geeks'"", ':', '10', ',', ""'For'"", ':', '20', ',', ""'geeks'"", ':', '30', '}', ']', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', ')', 'df']"
1767,"['keep', 'old', 'content', 'writing', 'file', 'python']","['file', '=', 'open', '(', '""gfg input file.txt""', ',', '""a""', ')', 'content', '=', '""\\n\\n# This Content is added through the program #""', 'file', '.', 'write', '(', 'content', ')', 'file', '.', 'close', '(', ')']"
1768,"['convert', 'string', 'set', 'python']","['string', '=', '""geeks""', 'print', '(', '""Initially""', ')', 'print', '(', '""The datatype of string : ""', '+', 'str', '(', 'type', '(', 'string', ')', ')', ')', 'print', '(', '""Contents of string : ""', '+', 'string', ')', 'string', '=', 'set', '(', 'string', ')', 'print', '(', '""\\nAfter the conversion""', ')', 'print', '(', '""The datatype of string : ""', '+', 'str', '(', 'type', '(', 'string', ')', ')', ')', 'print', '(', '""Contents of string : ""', ',', 'string', ')']"
1769,"['create', 'numpy', 'array', 'filled', 'zero', 'python']","['import', 'numpy', 'as', 'geek', 'a', '=', 'geek', '.', 'zeros', '(', '3', ',', 'dtype', '=', 'int', ')', 'print', '(', '""Matrix a : \\n""', ',', 'a', ')', 'b', '=', 'geek', '.', 'zeros', '(', '[', '3', ',', '3', ']', ',', 'dtype', '=', 'int', ')', 'print', '(', '""\\nMatrix b : \\n""', ',', 'b', ')']"
1770,"['write', 'python', 'program', 'replace', 'word', 'dictionary']","['test_str', '=', ""'geekforgeeks best for geeks'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'lookp_dict', '=', '{', '""best""', ':', '""good and better""', ',', '""geeks""', ':', '""all CS aspirants""', '}', 'temp', '=', 'test_str', '.', 'split', '(', ')', 'res', '=', '[', ']', 'for', 'wrd', 'in', 'temp', ':', 'res', '.', 'append', '(', 'lookp_dict', '.', 'get', '(', 'wrd', ',', 'wrd', ')', ')', 'res', '=', ""' '"", '.', 'join', '(', 'res', ')', 'print', '(', '""Replaced Strings : ""', '+', 'str', '(', 'res', ')', ')']"
1771,"['write', 'python', 'program', 'print', 'negative', 'number', 'list']","['list1', '=', '[', '11', ',', '-', '21', ',', '0', ',', '45', ',', '66', ',', '-', '93', ']', 'for', 'num', 'in', 'list1', ':', 'if', 'num', '<', '0', ':', 'print', '(', 'num', ',', 'end', '=', '"" ""', ')']"
1772,"['write', 'python', 'program', 'find', 'duplicate', 'character', 'string']","['from', 'collections', 'import', 'Counter', 'def', 'find_dup_char', '(', 'input', ')', ':', 'WC', '=', 'Counter', '(', 'input', ')', 'j', '=', '-', '1', 'for', 'i', 'in', 'WC', '.', 'values', '(', ')', ':', 'j', '=', 'j', '+', '1', 'if', '(', 'i', '>', '1', ')', ':', 'print', 'WC', '.', 'keys', '(', ')', '[', 'j', ']', ',', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', ""'geeksforgeeks'"", 'find_dup_char', '(', 'input', ')']"
1773,"['write', 'python', 'program', 'record', 'value', 'k', 'index']","['test_list', '=', '[', '(', '3', ',', '1', ',', '5', ')', ',', '(', '1', ',', '3', ',', '6', ')', ',', '(', '2', ',', '5', ',', '7', ')', ',', '(', '5', ',', '2', ',', '8', ')', ',', '(', '6', ',', '3', ',', '0', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'ele', '=', '3', 'K', '=', '1', 'res', '=', '[', ']', 'for', 'x', ',', 'y', ',', 'z', 'in', 'test_list', ':', 'if', 'y', '==', 'ele', ':', 'res', '.', 'append', '(', '(', 'x', ',', 'y', ',', 'z', ')', ')', 'print', '(', '""The tuples of element at Kth position : ""', '+', 'str', '(', 'res', ')', ')']"
1774,"['write', 'python', 'program', 'convert', 'tuple', 'list', 'adding', 'given', 'string', 'every', 'element']","['test_tup', '=', '(', '5', ',', '6', ',', '7', ',', '4', ',', '9', ')', 'print', '(', '""The original tuple is : ""', ',', 'test_tup', ')', 'K', '=', '""Gfg""', 'res', '=', '[', 'ele', 'for', 'sub', 'in', 'test_tup', 'for', 'ele', 'in', '(', 'sub', ',', 'K', ')', ']', 'print', '(', '""Converted Tuple with K : ""', ',', 'res', ')']"
1775,"['numpy', 'matrix', 'operation', 'randn', 'function', 'python']","['import', 'numpy', 'as', 'geek', 'import', 'numpy', '.', 'matlib', 'out_mat', '=', 'geek', '.', 'matlib', '.', 'randn', '(', '(', '3', ',', '4', ')', ')', 'print', '(', '""Output matrix : ""', ',', 'out_mat', ')']"
1776,"['scroll', 'follower', 'popup', 'instagram', 'python']","['import', 'selenium', 'print', '(', 'selenium', '.', '__version__', ')']"
1777,"['write', 'python', 'program', 'tuple', 'list', 'intersection', 'order', 'irrespective']","['test_list1', '=', '[', '(', '3', ',', '4', ')', ',', '(', '5', ',', '6', ')', ',', '(', '9', ',', '10', ')', ',', '(', '4', ',', '5', ')', ']', 'test_list2', '=', '[', '(', '5', ',', '4', ')', ',', '(', '3', ',', '4', ')', ',', '(', '6', ',', '5', ')', ',', '(', '9', ',', '11', ')', ']', 'print', '(', '""The original list 1 is : ""', '+', 'str', '(', 'test_list1', ')', ')', 'print', '(', '""The original list 2 is : ""', '+', 'str', '(', 'test_list2', ')', ')', 'res', '=', 'set', '(', '[', 'tuple', '(', 'sorted', '(', 'ele', ')', ')', 'for', 'ele', 'in', 'test_list1', ']', ')', '&', 'set', '(', '[', 'tuple', '(', 'sorted', '(', 'ele', ')', ')', 'for', 'ele', 'in', 'test_list2', ']', ')', 'print', '(', '""List after intersection : ""', '+', 'str', '(', 'res', ')', ')']"
1778,"['write', 'python', 'library', 'linked', 'list']","['import', 'collections', 'linked_lst', '=', 'collections', '.', 'deque', '(', ')', 'linked_lst', '.', 'append', '(', ""'first'"", ')', 'linked_lst', '.', 'append', '(', ""'second'"", ')', 'linked_lst', '.', 'append', '(', ""'third'"", ')', 'print', '(', '""elements in the linked_list:""', ')', 'print', '(', 'linked_lst', ')', 'linked_lst', '.', 'insert', '(', '1', ',', ""'fourth'"", ')', 'print', '(', '""elements in the linked_list:""', ')', 'print', '(', 'linked_lst', ')', 'linked_lst', '.', 'pop', '(', ')', 'print', '(', '""elements in the linked_list:""', ')', 'print', '(', 'linked_lst', ')', 'linked_lst', '.', 'remove', '(', ""'fourth'"", ')', 'print', '(', '""elements in the linked_list:""', ')', 'print', '(', 'linked_lst', ')']"
1779,"['write', 'python', 'program', 'convert', 'base', 'decimal', 'using', 'int', 'method']","['def', 'any_base_to_decimal', '(', 'number', ',', 'base', ')', ':', 'temp', '=', 'int', '(', 'number', ',', 'base', ')', 'print', '(', 'temp', ')', 'if', '__name__', '==', ""'__main__'"", ':', 'hexadecimal_number', '=', ""'1A'"", 'base', '=', '16', 'any_base_to_decimal', '(', 'hexadecimal_number', ',', 'base', ')']"
1780,"['create', 'filename', 'containing', 'date', 'time', 'python']","['from', 'datetime', 'import', 'datetime', 'current_datetime', '=', 'datetime', '.', 'now', '(', ')', 'print', '(', '""Current date & time : ""', ',', 'current_datetime', ')', 'str_current_datetime', '=', 'str', '(', 'current_datetime', ')', 'file_name', '=', 'str_current_datetime', '+', '"".txt""', 'file', '=', 'open', '(', 'file_name', ',', ""'w'"", ')', 'print', '(', '""File created : ""', ',', 'file', '.', 'name', ')', 'file', '.', 'close', '(', ')']"
1781,"['write', 'python', 'program', 'replace', 'nan', 'value', 'average', 'column']","['import', 'numpy', 'as', 'np', 'ini_array', '=', 'np', '.', 'array', '(', '[', '[', '1.3', ',', '2.5', ',', '3.6', ',', 'np', '.', 'nan', ']', ',', '[', '2.6', ',', '3.3', ',', 'np', '.', 'nan', ',', '5.5', ']', ',', '[', '2.1', ',', '3.2', ',', '5.4', ',', '6.5', ']', ']', ')', 'print', '(', '""initial array""', ',', 'ini_array', ')', 'col_mean', '=', 'np', '.', 'nanmean', '(', 'ini_array', ',', 'axis', '=', '0', ')', 'print', '(', '""columns mean""', ',', 'str', '(', 'col_mean', ')', ')', 'inds', '=', 'np', '.', 'where', '(', 'np', '.', 'isnan', '(', 'ini_array', ')', ')', 'ini_array', '[', 'inds', ']', '=', 'np', '.', 'take', '(', 'col_mean', ',', 'inds', '[', '1', ']', ')', 'print', '(', '""final array""', ',', 'ini_array', ')']"
1782,"['write', 'python', 'program', 'string', 'till', 'substring']","['test_string', '=', '""GeeksforGeeks is best for geeks""', 'spl_word', '=', ""'best'"", 'print', '(', '""The original string : ""', '+', 'str', '(', 'test_string', ')', ')', 'print', '(', '""The split string : ""', '+', 'str', '(', 'spl_word', ')', ')', 'res', '=', 'test_string', '.', 'partition', '(', 'spl_word', ')', '[', '0', ']', 'print', '(', '""String before the substring occurrence : ""', '+', 'res', ')']"
1783,"['find', 'number', 'occurrence', 'sequence', 'numpy', 'array', 'python']","['import', 'numpy', 'arr', '=', 'numpy', '.', 'array', '(', '[', '[', '2', ',', '8', ',', '9', ',', '4', ']', ',', '[', '9', ',', '4', ',', '9', ',', '4', ']', ',', '[', '4', ',', '5', ',', '9', ',', '7', ']', ',', '[', '2', ',', '9', ',', '4', ',', '3', ']', ']', ')', 'output', '=', 'repr', '(', 'arr', ')', '.', 'count', '(', '""9, 4""', ')', 'print', '(', 'output', ')']"
1784,"['write', 'python', 'program', 'remove', 'substring', 'list', 'string']","['test_str', '=', '""gfg is best for all geeks""', 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'sub_list', '=', '[', '""best""', ',', '""all""', ']', 'for', 'sub', 'in', 'sub_list', ':', 'test_str', '=', 'test_str', '.', 'replace', '(', ""' '"", '+', 'sub', '+', ""' '"", ',', ""' '"", ')', 'print', '(', '""The string after substring removal : ""', '+', 'test_str', ')']"
1785,"['numpyrandomgeometric', 'python']","['import', 'numpy', 'as', 'np', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'gfg', '=', 'np', '.', 'random', '.', 'geometric', '(', '0.65', ',', '1000', ')', 'count', ',', 'bins', ',', 'ignored', '=', 'plt', '.', 'hist', '(', 'gfg', ',', '40', ',', 'density', '=', 'True', ')', 'plt', '.', 'show', '(', ')']"
1786,['python'],"['import', 'numpy', 'as', 'geek', 'gfg', '=', 'geek', '.', 'array', '(', '(', '0', ',', '0', ',', '0', ',', '0', ',', '1', ',', '5', ',', '7', ',', '0', ',', '6', ',', '2', ',', '9', ',', '0', ',', '10', ',', '0', ',', '0', ')', ')', 'res', '=', 'geek', '.', 'trim_zeros', '(', 'gfg', ')', 'print', '(', 'res', ')']"
1787,"['write', 'python', 'program', 'numpy', 'matrixtake']","['import', 'numpy', 'as', 'np', 'gfg', '=', 'np', '.', 'matrix', '(', ""'[4, 1, 12, 3, 4, 6, 7]'"", ')', 'geek', '=', 'gfg', '.', 'take', '(', '2', ')', 'print', '(', 'geek', ')']"
1788,"['clean', 'pythonic', 'way', 'multiple', 'constructor', 'python']","['class', 'example', ':', 'def', '__init__', '(', 'self', ')', ':', 'print', '(', '""One""', ')', 'def', '__init__', '(', 'self', ')', ':', 'print', '(', '""Two""', ')', 'def', '__init__', '(', 'self', ')', ':', 'print', '(', '""Three""', ')', 'e', '=', 'example', '(', ')']"
1789,"['implementation', 'xor', 'linked', 'list', 'python']","['import', 'ctypes', 'class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'value', ')', ':', 'self', '.', 'value', '=', 'value', 'self', '.', 'npx', '=', '0', 'class', 'XorLinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'tail', '=', 'None', 'self', '.', '__nodes', '=', '[', ']', 'def', 'InsertAtStart', '(', 'self', ',', 'value', ')', ':', 'node', '=', 'Node', '(', 'value', ')', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'node', 'self', '.', 'tail', '=', 'node', 'else', ':', 'self', '.', 'head', '.', 'npx', '=', 'id', '(', 'node', ')', '^', 'self', '.', 'head', '.', 'npx', 'node', '.', 'npx', '=', 'id', '(', 'self', '.', 'head', ')', 'self', '.', 'head', '=', 'node', 'self', '.', '__nodes', '.', 'append', '(', 'node', ')', 'def', 'InsertAtEnd', '(', 'self', ',', 'value', ')', ':', 'node', '=', 'Node', '(', 'value', ')', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'node', 'self', '.', 'tail', '=', 'node', 'else', ':', 'self', '.', 'tail', '.', 'npx', '=', 'id', '(', 'node', ')', '^', 'self', '.', 'tail', '.', 'npx', 'node', '.', 'npx', '=', 'id', '(', 'self', '.', 'tail', ')', 'self', '.', 'tail', '=', 'node', 'self', '.', '__nodes', '.', 'append', '(', 'node', ')', 'def', 'DeleteAtStart', '(', 'self', ')', ':', 'if', 'self', '.', 'isEmpty', '(', ')', ':', 'return', '""List is empty !""', 'elif', 'self', '.', 'head', '==', 'self', '.', 'tail', ':', 'self', '.', 'head', '=', 'self', '.', 'tail', '=', 'None', 'elif', '(', '0', '^', 'self', '.', 'head', '.', 'npx', ')', '==', 'id', '(', 'self', '.', 'tail', ')', ':', 'self', '.', 'head', '=', 'self', '.', 'tail', 'self', '.', 'head', '.', 'npx', '=', 'self', '.', 'tail', '.', 'npx', '=', '0', 'else', ':', 'res', '=', 'self', '.', 'head', '.', 'value', 'x', '=', 'self', '.', '__type_cast', '(', '0', '^', 'self', '.', 'head', '.', 'npx', ')', 'y', '=', '(', 'id', '(', 'self', '.', 'head', ')', '^', 'x', '.', 'npx', ')', 'self', '.', 'head', '=', 'x', 'self', '.', 'head', '.', 'npx', '=', '0', '^', 'y', 'return', 'res', 'def', 'DeleteAtEnd', '(', 'self', ')', ':', 'if', 'self', '.', 'isEmpty', '(', ')', ':', 'return', '""List is empty !""', 'elif', 'self', '.', 'head', '==', 'self', '.', 'tail', ':', 'self', '.', 'head', '=', 'self', '.', 'tail', '=', 'None', 'elif', 'self', '.', '__type_cast', '(', '0', '^', 'self', '.', 'head', '.', 'npx', ')', '==', '(', 'self', '.', 'tail', ')', ':', 'self', '.', 'tail', '=', 'self', '.', 'head', 'self', '.', 'head', '.', 'npx', '=', 'self', '.', 'tail', '.', 'npx', '=', '0', 'else', ':', 'prev_id', '=', '0', 'node', '=', 'self', '.', 'head', 'next_id', '=', '1', 'while', 'next_id', ':', 'next_id', '=', 'prev_id', '^', 'node', '.', 'npx', 'if', 'next_id', ':', 'prev_id', '=', 'id', '(', 'node', ')', 'node', '=', 'self', '.', '__type_cast', '(', 'next_id', ')', 'res', '=', 'node', '.', 'value', 'x', '=', 'self', '.', '__type_cast', '(', 'prev_id', ')', '.', 'npx', '^', 'id', '(', 'node', ')', 'y', '=', 'self', '.', '__type_cast', '(', 'prev_id', ')', 'y', '.', 'npx', '=', 'x', '^', '0', 'self', '.', 'tail', '=', 'y', 'return', 'res', 'def', 'Print', '(', 'self', ')', ':', '""""""We are printing values rather than returning it bacause\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for returning we have to append all values in a list\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0and it takes extra memory to save all values in a list.""""""', 'if', 'self', '.', 'head', '!=', 'None', ':', 'prev_id', '=', '0', 'node', '=', 'self', '.', 'head', 'next_id', '=', '1', 'print', '(', 'node', '.', 'value', ',', 'end', '=', ""' '"", ')', 'while', 'next_id', ':', 'next_id', '=', 'prev_id', '^', 'node', '.', 'npx', 'if', 'next_id', ':', 'prev_id', '=', 'id', '(', 'node', ')', 'node', '=', 'self', '.', '__type_cast', '(', 'next_id', ')', 'print', '(', 'node', '.', 'value', ',', 'end', '=', ""' '"", ')', 'else', ':', 'return', 'else', ':', 'print', '(', '""List is empty !""', ')', 'def', 'ReversePrint', '(', 'self', ')', ':', '""""""We are printing values rather than returning it bacause\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for returning we have to append all values in a list\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0and it takes extra memory to save all values in a list.""""""', 'if', 'self', '.', 'head', '!=', 'None', ':', 'prev_id', '=', '0', 'node', '=', 'self', '.', 'tail', 'next_id', '=', '1', 'print', '(', 'node', '.', 'value', ',', 'end', '=', ""' '"", ')', 'while', 'next_id', ':', 'next_id', '=', 'prev_id', '^', 'node', '.', 'npx', 'if', 'next_id', ':', 'prev_id', '=', 'id', '(', 'node', ')', 'node', '=', 'self', '.', '__type_cast', '(', 'next_id', ')', 'print', '(', 'node', '.', 'value', ',', 'end', '=', ""' '"", ')', 'else', ':', 'return', 'else', ':', 'print', '(', '""List is empty !""', ')', 'def', 'Length', '(', 'self', ')', ':', 'if', 'not', 'self', '.', 'isEmpty', '(', ')', ':', 'prev_id', '=', '0', 'node', '=', 'self', '.', 'head', 'next_id', '=', '1', 'count', '=', '1', 'while', 'next_id', ':', 'next_id', '=', 'prev_id', '^', 'node', '.', 'npx', 'if', 'next_id', ':', 'prev_id', '=', 'id', '(', 'node', ')', 'node', '=', 'self', '.', '__type_cast', '(', 'next_id', ')', 'count', '+=', '1', 'else', ':', 'return', 'count', 'else', ':', 'return', '0', 'def', 'PrintByIndex', '(', 'self', ',', 'index', ')', ':', 'prev_id', '=', '0', 'node', '=', 'self', '.', 'head', 'for', 'i', 'in', 'range', '(', 'index', ')', ':', 'next_id', '=', 'prev_id', '^', 'node', '.', 'npx', 'if', 'next_id', ':', 'prev_id', '=', 'id', '(', 'node', ')', 'node', '=', 'self', '.', '__type_cast', '(', 'next_id', ')', 'else', ':', 'return', '""Value dosn\'t found index out of range.""', 'return', 'node', '.', 'value', 'def', 'isEmpty', '(', 'self', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'True', 'return', 'False', 'def', '__type_cast', '(', 'self', ',', 'id', ')', ':', 'return', 'ctypes', '.', 'cast', '(', 'id', ',', 'ctypes', '.', 'py_object', ')', '.', 'value', 'obj', '=', 'XorLinkedList', '(', ')', 'obj', '.', 'InsertAtEnd', '(', '2', ')', 'obj', '.', 'InsertAtEnd', '(', '3', ')', 'obj', '.', 'InsertAtEnd', '(', '4', ')', 'obj', '.', 'InsertAtStart', '(', '0', ')', 'obj', '.', 'InsertAtStart', '(', '6', ')', 'obj', '.', 'InsertAtEnd', '(', '55', ')', 'print', '(', '""\\nLength:""', ',', 'obj', '.', 'Length', '(', ')', ')', 'print', '(', '""\\nTraverse linked list:""', ')', 'obj', '.', 'Print', '(', ')', 'print', '(', '""\\nTraverse in reverse order:""', ')', 'obj', '.', 'ReversePrint', '(', ')', 'print', '(', ""'\\nNodes:'"", ')', 'for', 'i', 'in', 'range', '(', 'obj', '.', 'Length', '(', ')', ')', ':', 'print', '(', '""Data value at index""', ',', 'i', ',', ""'is'"", ',', 'obj', '.', 'PrintByIndex', '(', 'i', ')', ')', 'print', '(', '""\\nDelete Last Node: ""', ',', 'obj', '.', 'DeleteAtEnd', '(', ')', ')', 'print', '(', '""\\nDelete First Node: ""', ',', 'obj', '.', 'DeleteAtStart', '(', ')', ')', 'print', '(', '""\\nUpdated length:""', ',', 'obj', '.', 'Length', '(', ')', ')', 'print', '(', ""'\\nNodes:'"", ')', 'for', 'i', 'in', 'range', '(', 'obj', '.', 'Length', '(', ')', ')', ':', 'print', '(', '""Data value at index""', ',', 'i', ',', ""'is'"", ',', 'obj', '.', 'PrintByIndex', '(', 'i', ')', ')', 'print', '(', '""\\nTraverse linked list:""', ')', 'obj', '.', 'Print', '(', ')', 'print', '(', '""\\nTraverse in reverse order:""', ')', 'obj', '.', 'ReversePrint', '(', ')']"
1790,"['write', 'python', 'program', 'check', 'url', 'string']","['import', 're', 'def', 'Find', '(', 'string', ')', ':', 'regex', '=', 'r""(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\'\\"".,<>?«»“”‘’]))""', 'url', '=', 're', '.', 'findall', '(', 'regex', ',', 'string', ')', 'return', '[', 'x', '[', '0', ']', 'for', 'x', 'in', 'url', ']', 'string', '=', ""'My Profile: https://auth.geeksforgeeks.org/user/Chinmoy%20Lenka/articles in the portal of http://www.geeksforgeeks.org/'"", 'print', '(', '""Urls: ""', ',', 'Find', '(', 'string', ')', ')']"
1791,"['calculate', 'determinant', 'matrix', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'n_array', '=', 'np', '.', 'array', '(', '[', '[', '50', ',', '29', ']', ',', '[', '30', ',', '44', ']', ']', ')', 'print', '(', '""Numpy Matrix is:""', ')', 'print', '(', 'n_array', ')', 'det', '=', 'np', '.', 'linalg', '.', 'det', '(', 'n_array', ')', 'print', '(', '""\\nDeterminant of given 2X2 matrix:""', ')', 'print', '(', 'int', '(', 'det', ')', ')']"
1792,"['replace', 'value', 'panda', 'dataframe', 'using', 'regex', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'City'"", ':', '[', ""'New York'"", ',', ""'Parague'"", ',', ""'New Delhi'"", ',', ""'Venice'"", ',', ""'new Orleans'"", ']', ',', ""'Event'"", ':', '[', ""'Music'"", ',', ""'Poetry'"", ',', ""'Theatre'"", ',', ""'Comedy'"", ',', ""'Tech_Summit'"", ']', ',', ""'Cost'"", ':', '[', '10000', ',', '5000', ',', '15000', ',', '2000', ',', '12000', ']', '}', ')', 'index_', '=', '[', 'pd', '.', 'Period', '(', ""'02-2018'"", ')', ',', 'pd', '.', 'Period', '(', ""'04-2018'"", ')', ',', 'pd', '.', 'Period', '(', ""'06-2018'"", ')', ',', 'pd', '.', 'Period', '(', ""'10-2018'"", ')', ',', 'pd', '.', 'Period', '(', ""'12-2018'"", ')', ']', 'df', '.', 'index', '=', 'index_', 'print', '(', 'df', ')']"
1793,"['write', 'python', 'program', 'factor', 'frequency', 'dictionary']","['test_list', '=', '[', '2', ',', '4', ',', '6', ',', '8', ',', '3', ',', '9', ',', '12', ',', '15', ',', '16', ',', '18', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', 'dict', '(', ')', 'for', 'idx', 'in', 'range', '(', '1', ',', 'max', '(', 'test_list', ')', ')', ':', 'res', '[', 'idx', ']', '=', '0', 'for', 'key', 'in', 'test_list', ':', 'if', 'key', '%', 'idx', '==', '0', ':', 'res', '[', 'idx', ']', '+=', '1', 'print', '(', '""The constructed dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
1794,"['write', 'python', 'program', 'convert', 'integer', 'matrix', 'string', 'matrix']","['test_list', '=', '[', '[', '4', ',', '5', ',', '7', ']', ',', '[', '10', ',', '8', ',', '3', ']', ',', '[', '19', ',', '4', ',', '6', ']', ',', '[', '9', ',', '3', ',', '6', ']', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', '[', 'str', '(', 'ele', ')', 'for', 'ele', 'in', 'sub', ']', 'for', 'sub', 'in', 'test_list', ']', 'print', '(', '""The data type converted Matrix : ""', '+', 'str', '(', 'res', ')', ')']"
1795,"['write', 'python', 'program', 'find', 'smallest', 'number', 'list']","['list1', '=', '[', '10', ',', '20', ',', '4', ',', '45', ',', '99', ']', 'list1', '.', 'sort', '(', ')', 'print', '(', '""Smallest element is:""', ',', '*', 'list1', '[', ':', '1', ']', ')']"
1796,"['change', 'tkinter', 'lableframe', 'border', 'color', 'python']","['import', 'tkinter', 'as', 'tk', 'import', 'tkinter', '.', 'ttk', 'as', 'ttk']"
1797,"['write', 'python', 'program', 'filter', 'list', 'string', 'whose', 'index', 'second', 'list', 'contaons', 'given', 'substring']","['test_list1', '=', '[', '""Gfg""', ',', '""is""', ',', '""not""', ',', '""best""', ',', '""and""', ',', '""not""', ',', '""for""', ',', '""CS""', ']', 'test_list2', '=', '[', '""Its ok""', ',', '""all ok""', ',', '""wrong""', ',', '""looks ok""', ',', '""ok""', ',', '""wrong""', ',', '""ok""', ',', '""thats ok""', ']', 'print', '(', '""The original list 1 is : ""', '+', 'str', '(', 'test_list1', ')', ')', 'print', '(', '""The original list 2 is : ""', '+', 'str', '(', 'test_list2', ')', ')', 'sub_str', '=', '""ok""', 'res', '=', '[', ']', 'for', 'ele1', ',', 'ele2', 'in', 'zip', '(', 'test_list1', ',', 'test_list2', ')', ':', 'if', 'sub_str', 'in', 'ele2', ':', 'res', '.', 'append', '(', 'ele1', ')', 'print', '(', '""The extracted list : ""', '+', 'str', '(', 'res', ')', ')']"
1798,"['write', 'python', 'program', 'count', 'positive', 'negative', 'number', 'list']","['list1', '=', '[', '10', ',', '-', '21', ',', '4', ',', '-', '45', ',', '66', ',', '-', '93', ',', '1', ']', 'pos_count', ',', 'neg_count', '=', '0', ',', '0', 'for', 'num', 'in', 'list1', ':', 'if', 'num', '>=', '0', ':', 'pos_count', '+=', '1', 'else', ':', 'neg_count', '+=', '1', 'print', '(', '""Positive numbers in the list: ""', ',', 'pos_count', ')', 'print', '(', '""Negative numbers in the list: ""', ',', 'neg_count', ')']"
1799,"['count', 'unique', 'value', 'inside', 'list', 'python']","['input_list', '=', '[', '1', ',', '2', ',', '2', ',', '5', ',', '8', ',', '4', ',', '4', ',', '8', ']', 'l1', '=', '[', ']', 'count', '=', '0', 'for', 'item', 'in', 'input_list', ':', 'if', 'item', 'not', 'in', 'l1', ':', 'count', '+=', '1', 'l1', '.', 'append', '(', 'item', ')', 'print', '(', '""No of unique items are:""', ',', 'count', ')']"
1800,"['find', 'length', 'string', 'element', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'arr', '=', 'np', '.', 'array', '(', '[', ""'New York'"", ',', ""'Lisbon'"", ',', ""'Beijing'"", ',', ""'Quebec'"", ']', ')', 'print', '(', 'arr', ')']"
1801,"['write', 'python', 'dictionary', 'key', 'multiple', 'input']","['import', 'random', 'as', 'rn', 'dict', '=', '{', '}', 'x', ',', 'y', ',', 'z', '=', '10', ',', '20', ',', '30', 'dict', '[', 'x', ',', 'y', ',', 'z', ']', '=', 'x', '+', 'y', '-', 'z', ';', 'x', ',', 'y', ',', 'z', '=', '5', ',', '2', ',', '4', 'dict', '[', 'x', ',', 'y', ',', 'z', ']', '=', 'x', '+', 'y', '-', 'z', ';', 'print', '(', 'dict', ')']"
1802,"['choose', 'element', 'list', 'different', 'probability', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'num_list', '=', '[', '10', ',', '20', ',', '30', ',', '40', ',', '50', ']', 'number', '=', 'np', '.', 'random', '.', 'choice', '(', 'num_list', ')', 'print', '(', 'number', ')']"
1803,"['write', 'python', 'program', 'word', 'frequency', 'string', 'shorthand']","['test_str', '=', ""'Gfg is best . Geeks are good and Geeks like Gfg'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'res', '=', '{', 'key', ':', 'test_str', '.', 'count', '(', 'key', ')', 'for', 'key', 'in', 'test_str', '.', 'split', '(', ')', '}', 'print', '(', '""The words frequency : ""', '+', 'str', '(', 'res', ')', ')']"
1804,"['write', 'python', 'program', 'count', 'frequency', 'matrix', 'row', 'length']","['test_list', '=', '[', '[', '6', ',', '3', ',', '1', ']', ',', '[', '8', ',', '9', ']', ',', '[', '2', ']', ',', '[', '10', ',', '12', ',', '7', ']', ',', '[', '4', ',', '11', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', 'dict', '(', ')', 'for', 'sub', 'in', 'test_list', ':', 'if', 'len', '(', 'sub', ')', 'not', 'in', 'res', ':', 'res', '[', 'len', '(', 'sub', ')', ']', '=', '1', 'else', ':', 'res', '[', 'len', '(', 'sub', ')', ']', '+=', '1', 'print', '(', '""Row length frequencies : ""', '+', 'str', '(', 'res', ')', ')']"
1805,"['find', 'average', 'unknown', 'number', 'input', 'python']","['def', 'avgfun', '(', '*', 'n', ')', ':', 'sums', '=', '0', 'for', 't', 'in', 'n', ':', 'sums', '=', 'sums', '+', 't', 'avg', '=', 'sums', '/', 'len', '(', 'n', ')', 'return', 'avg', 'result1', '=', 'avgfun', '(', '1', ',', '2', ',', '3', ')', 'result2', '=', 'avgfun', '(', '2', ',', '6', ',', '4', ',', '8', ')', 'print', '(', 'round', '(', 'result1', ',', '2', ')', ')', 'print', '(', 'round', '(', 'result2', ',', '2', ')', ')']"
1806,"['get', 'row', 'number', 'numpy', 'array', 'element', 'larger', 'x', 'python']","['import', 'numpy', 'arr', '=', 'numpy', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ',', '[', '10', ',', '-', '3', ',', '30', ',', '4', ',', '5', ']', ',', '[', '3', ',', '2', ',', '5', ',', '-', '4', ',', '5', ']', ',', '[', '9', ',', '7', ',', '3', ',', '6', ',', '5', ']', ']', ')', 'X', '=', '6', 'print', '(', '""Given Array:\\n""', ',', 'arr', ')', 'output', '=', 'numpy', '.', 'where', '(', 'numpy', '.', 'any', '(', 'arr', '>', 'X', ',', 'axis', '=', '1', ')', ')', 'print', '(', '""Result:\\n""', ',', 'output', ')']"
1807,"['write', 'python', 'program', 'get', 'subset', 'given', 'size', 'set']","['import', 'itertools', 'def', 'findsubsets', '(', 's', ',', 'n', ')', ':', 'return', 'list', '(', 'itertools', '.', 'combinations', '(', 's', ',', 'n', ')', ')', 's', '=', '{', '1', ',', '2', ',', '3', '}', 'n', '=', '2', 'print', '(', 'findsubsets', '(', 's', ',', 'n', ')', ')']"
1808,"['write', 'python', 'program', 'find', 'uncommon', 'word', 'two', 'string']","['def', 'UncommonWords', '(', 'A', ',', 'B', ')', ':', 'count', '=', '{', '}', 'for', 'word', 'in', 'A', '.', 'split', '(', ')', ':', 'count', '[', 'word', ']', '=', 'count', '.', 'get', '(', 'word', ',', '0', ')', '+', '1', 'for', 'word', 'in', 'B', '.', 'split', '(', ')', ':', 'count', '[', 'word', ']', '=', 'count', '.', 'get', '(', 'word', ',', '0', ')', '+', '1', 'return', '[', 'word', 'for', 'word', 'in', 'count', 'if', 'count', '[', 'word', ']', '==', '1', ']', 'A', '=', '""Geeks for Geeks""', 'B', '=', '""Learning from Geeks for Geeks""', 'print', '(', 'UncommonWords', '(', 'A', ',', 'B', ')', ')']"
1809,"['creating', 'panda', 'dataframe', 'using', 'list', 'tuples', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', '[', '(', ""'Peter'"", ',', '18', ',', '7', ')', ',', '(', ""'Riff'"", ',', '15', ',', '6', ')', ',', '(', ""'John'"", ',', '17', ',', '8', ')', ',', '(', ""'Michel'"", ',', '18', ',', '7', ')', ',', '(', ""'Sheli'"", ',', '17', ',', '5', ')', ']', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', ',', 'columns', '=', '[', ""'Name'"", ',', ""'Age'"", ',', ""'Score'"", ']', ')', 'print', '(', 'df', ')']"
1810,"['get', 'floor', 'ceiling', 'truncated', 'value', 'element', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '1.2', ']', ')', 'a', '=', 'np', '.', 'floor', '(', 'a', ')', 'print', '(', 'a', ')']"
1811,"['iterate', 'file', 'directory', 'using', 'python']","['import', 'os', 'directory', '=', ""'files'"", 'for', 'filename', 'in', 'os', '.', 'listdir', '(', 'directory', ')', ':', 'f', '=', 'os', '.', 'path', '.', 'join', '(', 'directory', ',', 'filename', ')', 'if', 'os', '.', 'path', '.', 'isfile', '(', 'f', ')', ':', 'print', '(', 'f', ')']"
1812,"['write', 'python', 'program', 'elementwise', 'tuples']","['test_tup1', '=', '(', '10', ',', '4', ',', '6', ',', '9', ')', 'test_tup2', '=', '(', '5', ',', '2', ',', '3', ',', '3', ')', 'print', '(', '""The original tuple 1 : ""', '+', 'str', '(', 'test_tup1', ')', ')', 'print', '(', '""The original tuple 2 : ""', '+', 'str', '(', 'test_tup2', ')', ')', 'res', '=', 'tuple', '(', 'ele1', '&', 'ele2', 'for', 'ele1', ',', 'ele2', 'in', 'zip', '(', 'test_tup1', ',', 'test_tup2', ')', ')', 'print', '(', '""The AND tuple : ""', '+', 'str', '(', 'res', ')', ')']"
1813,"['write', 'python', 'program', 'remove', 'tuples', 'list', 'every', 'element', 'none']","['test_list', '=', '[', '(', 'None', ',', '2', ')', ',', '(', 'None', ',', 'None', ')', ',', '(', '3', ',', '4', ')', ',', '(', '12', ',', '3', ')', ',', '(', 'None', ',', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', 'sub', 'for', 'sub', 'in', 'test_list', 'if', 'not', 'all', '(', 'ele', '==', 'None', 'for', 'ele', 'in', 'sub', ')', ']', 'print', '(', '""Removed None Tuples : ""', '+', 'str', '(', 'res', ')', ')']"
1814,"['convert', 'nested', 'json', 'csv', 'python']","['import', 'json', 'def', 'read_json', '(', 'filename', ':', 'str', ')', '->', 'dict', ':', 'try', ':', 'with', 'open', '(', 'filename', ',', '""r""', ')', 'as', 'f', ':', 'data', '=', 'json', '.', 'loads', '(', 'f', '.', 'read', '(', ')', ')', 'except', ':', 'raise', 'Exception', '(', 'f""Reading {filename} file encountered an error""', ')', 'return', 'data', 'def', 'normalize_json', '(', 'data', ':', 'dict', ')', '->', 'dict', ':', 'new_data', '=', 'dict', '(', ')', 'for', 'key', ',', 'value', 'in', 'data', '.', 'items', '(', ')', ':', 'if', 'not', 'isinstance', '(', 'value', ',', 'dict', ')', ':', 'new_data', '[', 'key', ']', '=', 'value', 'else', ':', 'for', 'k', ',', 'v', 'in', 'value', '.', 'items', '(', ')', ':', 'new_data', '[', 'key', '+', '""_""', '+', 'k', ']', '=', 'v', 'return', 'new_data', 'def', 'generate_csv_data', '(', 'data', ':', 'dict', ')', '->', 'str', ':', 'csv_columns', '=', 'data', '.', 'keys', '(', ')', 'csv_data', '=', '"",""', '.', 'join', '(', 'csv_columns', ')', '+', '""\\n""', 'new_row', '=', 'list', '(', ')', 'for', 'col', 'in', 'csv_columns', ':', 'new_row', '.', 'append', '(', 'str', '(', 'data', '[', 'col', ']', ')', ')', 'csv_data', '+=', '"",""', '.', 'join', '(', 'new_row', ')', '+', '""\\n""', 'return', 'csv_data', 'def', 'write_to_file', '(', 'data', ':', 'str', ',', 'filepath', ':', 'str', ')', '->', 'bool', ':', 'try', ':', 'with', 'open', '(', 'filepath', ',', '""w+""', ')', 'as', 'f', ':', 'f', '.', 'write', '(', 'data', ')', 'except', ':', 'raise', 'Exception', '(', 'f""Saving data to {filepath} encountered an error""', ')', 'def', 'main', '(', ')', ':', 'data', '=', 'read_json', '(', 'filename', '=', '""article.json""', ')', 'new_data', '=', 'normalize_json', '(', 'data', '=', 'data', ')', 'print', '(', '""New dict:""', ',', 'new_data', ')', 'csv_data', '=', 'generate_csv_data', '(', 'data', '=', 'new_data', ')', 'write_to_file', '(', 'data', '=', 'csv_data', ',', 'filepath', '=', '""data.csv""', ')', 'if', '__name__', '==', ""'__main__'"", ':', 'main', '(', ')']"
1815,"['numpysqueeze', 'python']","['import', 'numpy', 'as', 'geek', 'in_arr', '=', 'geek', '.', 'array', '(', '[', '[', '[', '2', ',', '2', ',', '2', ']', ',', '[', '2', ',', '2', ',', '2', ']', ']', ']', ')', 'print', '(', '""Input array : ""', ',', 'in_arr', ')', 'print', '(', '""Shape of input array : ""', ',', 'in_arr', '.', 'shape', ')', 'out_arr', '=', 'geek', '.', 'squeeze', '(', 'in_arr', ')', 'print', '(', '""output squeezed array : ""', ',', 'out_arr', ')', 'print', '(', '""Shape of output array : ""', ',', 'out_arr', '.', 'shape', ')']"
1816,"['write', 'python', 'program', 'program', 'accept', 'string', 'contains', 'vowel']","['def', 'check', '(', 'string', ')', ':', 'string', '=', 'string', '.', 'lower', '(', ')', 'vowels', '=', 'set', '(', '""aeiou""', ')', 's', '=', 'set', '(', '{', '}', ')', 'for', 'char', 'in', 'string', ':', 'if', 'char', 'in', 'vowels', ':', 's', '.', 'add', '(', 'char', ')', 'else', ':', 'pass', 'if', 'len', '(', 's', ')', '==', 'len', '(', 'vowels', ')', ':', 'print', '(', '""Accepted""', ')', 'else', ':', 'print', '(', '""Not Accepted""', ')', 'if', '__name__', '==', '""__main__""', ':', 'string', '=', '""SEEquoiaL""', 'check', '(', 'string', ')']"
1817,"['write', 'python', 'program', 'extract', 'unique', 'value', 'dictionary', 'value']","['test_dict', '=', '{', ""'gfg'"", ':', '[', '5', ',', '6', ',', '7', ',', '8', ']', ',', ""'is'"", ':', '[', '10', ',', '11', ',', '7', ',', '5', ']', ',', ""'best'"", ':', '[', '6', ',', '12', ',', '10', ',', '8', ']', ',', ""'for'"", ':', '[', '1', ',', '2', ',', '5', ']', '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'res', '=', 'list', '(', 'sorted', '(', '{', 'ele', 'for', 'val', 'in', 'test_dict', '.', 'values', '(', ')', 'for', 'ele', 'in', 'val', '}', ')', ')', 'print', '(', '""The unique values list is : ""', '+', 'str', '(', 'res', ')', ')']"
1818,"['write', 'python', 'program', 'find', 'tuples', 'positive', 'element', 'list', 'tuples']","['test_list', '=', '[', '(', '4', ',', '5', ',', '9', ')', ',', '(', '-', '3', ',', '2', ',', '3', ')', ',', '(', '-', '3', ',', '5', ',', '6', ')', ',', '(', '4', ',', '6', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', 'sub', 'for', 'sub', 'in', 'test_list', 'if', 'all', '(', 'ele', '>=', '0', 'for', 'ele', 'in', 'sub', ')', ']', 'print', '(', '""Positive elements Tuples : ""', '+', 'str', '(', 'res', ')', ')']"
1819,"['replace', 'numpy', 'array', 'element', 'doesnt', 'satisfy', 'given', 'condition', 'python']","['import', 'numpy', 'as', 'np', 'n_arr', '=', 'np', '.', 'array', '(', '[', '75.42436315', ',', '42.48558583', ',', '60.32924763', ']', ')', 'print', '(', '""Given array:""', ')', 'print', '(', 'n_arr', ')', 'print', '(', '""\\nReplace all elements of array which are greater than 50. to 15.50""', ')', 'n_arr', '[', 'n_arr', '>', '50.', ']', '=', '15.50', 'print', '(', '""New array :\\n""', ')', 'print', '(', 'n_arr', ')']"
1820,"['write', 'python', 'program', 'replace', 'specific', 'line', 'file']","['with', 'open', '(', ""'example.txt'"", ',', ""'r'"", ',', 'encoding', '=', ""'utf-8'"", ')', 'as', 'file', ':', 'data', '=', 'file', '.', 'readlines', '(', ')', 'print', '(', 'data', ')', 'data', '[', '1', ']', '=', '""Here is my modified Line 2\\n""', 'with', 'open', '(', ""'example.txt'"", ',', ""'w'"", ',', 'encoding', '=', ""'utf-8'"", ')', 'as', 'file', ':', 'file', '.', 'writelines', '(', 'data', ')']"
1821,"['write', 'python', 'program', 'least', 'frequent', 'character', 'string']","['test_str', '=', '""GeeksforGeeks""', 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'all_freq', '=', '{', '}', 'for', 'i', 'in', 'test_str', ':', 'if', 'i', 'in', 'all_freq', ':', 'all_freq', '[', 'i', ']', '+=', '1', 'else', ':', 'all_freq', '[', 'i', ']', '=', '1', 'res', '=', 'min', '(', 'all_freq', ',', 'key', '=', 'all_freq', '.', 'get', ')', 'print', '(', '""The minimum of all characters in GeeksforGeeks is : ""', '+', 'str', '(', 'res', ')', ')']"
1822,"['write', 'python', 'program', 'print', 'positive', 'number', 'list']","['list1', '=', '[', '11', ',', '-', '21', ',', '0', ',', '45', ',', '66', ',', '-', '93', ']', 'for', 'num', 'in', 'list1', ':', 'if', 'num', '>=', '0', ':', 'print', '(', 'num', ',', 'end', '=', '"" ""', ')']"
1823,"['convert', 'csv', 'file', 'pdf', 'file', 'using', 'python']","['import', 'pandas', 'as', 'pd', 'import', 'pdfkit', 'csv', '=', ""'MyCSV.csv'"", 'html_file', '=', 'csv_file', '[', ':', '-', '3', ']', '+', ""'html'"", 'df', '=', 'pd', '.', 'read_csv', '(', 'csv_file', ',', 'sep', '=', ""','"", ')', 'df', '.', 'to_html', '(', 'html_file', ')', 'path_wkhtmltopdf', '=', ""r'D:\\Softwares\\wkhtmltopdf\\bin\\wkhtmltopdf.exe'"", 'config', '=', 'pdfkit', '.', 'configuration', '(', 'wkhtmltopdf', '=', 'path_wkhtmltopdf', ')', 'pdfkit', '.', 'from_url', '(', '""MyCSV.html""', ',', '""FinalOutput.pdf""', ',', 'configuration', '=', 'config', ')']"
1824,"['write', 'python', 'program', 'search', 'string', 'text', 'file']","['string1', '=', ""'coding'"", 'file1', '=', 'open', '(', '""geeks.txt""', ',', '""r""', ')', 'flag', '=', '0', 'index', '=', '0', 'for', 'line', 'in', 'file1', ':', 'index', '+', '=', '1', 'if', 'string1', 'in', 'line', ':', 'flag', '=', '1', 'break', 'if', 'flag', '==', '0', ':', 'print', '(', ""'String'"", ',', 'string1', ',', ""'Not Found'"", ')', 'else', ':', 'print', '(', ""'String'"", ',', 'string1', ',', ""'Found In Line'"", ',', 'index', ')', 'file1', '.', 'close', '(', ')']"
1825,"['write', 'python', 'program', 'swap', 'two', 'element', 'list']","['def', 'swapPositions', '(', 'list', ',', 'pos1', ',', 'pos2', ')', ':', 'list', '[', 'pos1', ']', ',', 'list', '[', 'pos2', ']', '=', 'list', '[', 'pos2', ']', ',', 'list', '[', 'pos1', ']', 'return', 'list', 'List', '=', '[', '23', ',', '65', ',', '19', ',', '90', ']', 'pos1', ',', 'pos2', '=', '1', ',', '3', 'print', '(', 'swapPositions', '(', 'List', ',', 'pos1', '-', '1', ',', 'pos2', '-', '1', ')', ')']"
1826,"['write', 'python', 'program', 'shellsort']","['def', 'shellSort', '(', 'arr', ')', ':', 'n', '=', 'len', '(', 'arr', ')', 'gap', '=', 'n', '/', '2', 'while', 'gap', '>', '0', ':', 'for', 'i', 'in', 'range', '(', 'gap', ',', 'n', ')', ':', 'temp', '=', 'arr', '[', 'i', ']', 'j', '=', 'i', 'while', 'j', '>=', 'gap', 'and', 'arr', '[', 'j', '-', 'gap', ']', '>', 'temp', ':', 'arr', '[', 'j', ']', '=', 'arr', '[', 'j', '-', 'gap', ']', 'j', '-=', 'gap', 'arr', '[', 'j', ']', '=', 'temp', 'gap', '/=', '2', 'arr', '=', '[', '12', ',', '34', ',', '54', ',', '2', ',', '3', ']', 'n', '=', 'len', '(', 'arr', ')', 'print', '(', '""Array before sorting:""', ')', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ')', ',', 'shellSort', '(', 'arr', ')', 'print', '(', '""\\nArray after sorting:""', ')', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ')', ',']"
1827,"['write', 'python', 'program', 'convert', 'tuple', 'float', 'value']","['test_tup', '=', '(', '4', ',', '56', ')', 'print', '(', '""The original tuple : ""', '+', 'str', '(', 'test_tup', ')', ')', 'res', '=', 'float', '(', ""'.'"", '.', 'join', '(', 'str', '(', 'ele', ')', 'for', 'ele', 'in', 'test_tup', ')', ')', 'print', '(', '""The float after conversion from tuple is : ""', '+', 'str', '(', 'res', ')', ')']"
1828,"['write', 'python', 'program', 'remove', 'empty', 'tuples', 'list']","['def', 'Remove', '(', 'tuples', ')', ':', 'tuples', '=', '[', 't', 'for', 't', 'in', 'tuples', 'if', 't', ']', 'return', 'tuples', 'tuples', '=', '[', '(', ')', ',', '(', ""'ram'"", ',', ""'15'"", ',', ""'8'"", ')', ',', '(', ')', ',', '(', ""'laxman'"", ',', ""'sita'"", ')', ',', '(', ""'krishna'"", ',', ""'akbar'"", ',', ""'45'"", ')', ',', '(', ""''"", ',', ""''"", ')', ',', '(', ')', ']', 'print', '(', 'Remove', '(', 'tuples', ')', ')']"
1829,"['write', 'python', 'program', 'assign', 'frequency', 'tuples']","['from', 'collections', 'import', 'Counter', 'test_list', '=', '[', '(', '6', ',', '5', ',', '8', ')', ',', '(', '2', ',', '7', ')', ',', '(', '6', ',', '5', ',', '8', ')', ',', '(', '6', ',', '5', ',', '8', ')', ',', '(', '9', ',', ')', ',', '(', '2', ',', '7', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', '(', '*', 'key', ',', 'val', ')', 'for', 'key', ',', 'val', 'in', 'Counter', '(', 'test_list', ')', '.', 'items', '(', ')', ']', 'print', '(', '""Frequency Tuple list : ""', '+', 'str', '(', 'res', ')', ')']"
1830,"['maximum', 'two', 'number', 'python']","['def', 'maximum', '(', 'a', ',', 'b', ')', ':', 'if', 'a', '>=', 'b', ':', 'return', 'a', 'else', ':', 'return', 'b', 'a', '=', '2', 'b', '=', '4', 'print', '(', 'maximum', '(', 'a', ',', 'b', ')', ')']"
1831,"['simple', 'diamond', 'pattern', 'python']","['size', '=', '8', 'spaces', '=', 'size', 'for', 'i', 'in', 'range', '(', 'size', '//', '2', '+', '2', ')', ':', 'for', 'j', 'in', 'range', '(', 'size', ')', ':', 'if', 'j', '<', 'i', '-', '1', ':', 'print', '(', ""' '"", ',', 'end', '=', '"" ""', ')', 'elif', 'j', '>', 'spaces', ':', 'print', '(', ""' '"", ',', 'end', '=', '"" ""', ')', 'elif', '(', 'i', '==', '0', 'and', 'j', '==', '0', ')', '|', '(', 'i', '==', '0', 'and', 'j', '==', 'size', '-', '1', ')', ':', 'print', '(', ""' '"", ',', 'end', '=', '"" ""', ')', 'else', ':', 'print', '(', ""'*'"", ',', 'end', '=', '"" ""', ')', 'spaces', '-=', '1', 'print', '(', ')']"
1832,"['write', 'python', 'program', 'maximum', 'frequency', 'character', 'string']","['test_str', '=', '""GeeksforGeeks""', 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'all_freq', '=', '{', '}', 'for', 'i', 'in', 'test_str', ':', 'if', 'i', 'in', 'all_freq', ':', 'all_freq', '[', 'i', ']', '+=', '1', 'else', ':', 'all_freq', '[', 'i', ']', '=', '1', 'res', '=', 'max', '(', 'all_freq', ',', 'key', '=', 'all_freq', '.', 'get', ')', 'print', '(', '""The maximum of all characters in GeeksforGeeks is : ""', '+', 'str', '(', 'res', ')', ')']"
1833,"['write', 'python', 'program', 'check', 'list', 'contains', 'three', 'consecutive', 'common', 'number', 'python']","['arr', '=', '[', '4', ',', '5', ',', '5', ',', '5', ',', '3', ',', '8', ']', 'size', '=', 'len', '(', 'arr', ')', 'for', 'i', 'in', 'range', '(', 'size', '-', '2', ')', ':', 'if', 'arr', '[', 'i', ']', '==', 'arr', '[', 'i', '+', '1', ']', 'and', 'arr', '[', 'i', '+', '1', ']', '==', 'arr', '[', 'i', '+', '2', ']', ':', 'print', '(', 'arr', '[', 'i', ']', ')']"
1834,"['visualize', 'data', 'csv', 'file', 'python']","['import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'import', 'csv', 'x', '=', '[', ']', 'y', '=', '[', ']', 'with', 'open', '(', ""'biostats.csv'"", ',', ""'r'"", ')', 'as', 'csvfile', ':', 'plots', '=', 'csv', '.', 'reader', '(', 'csvfile', ',', 'delimiter', '=', ""','"", ')', 'for', 'row', 'in', 'plots', ':', 'x', '.', 'append', '(', 'row', '[', '0', ']', ')', 'y', '.', 'append', '(', 'int', '(', 'row', '[', '2', ']', ')', ')', 'plt', '.', 'bar', '(', 'x', ',', 'y', ',', 'color', '=', ""'g'"", ',', 'width', '=', '0.72', ',', 'label', '=', '""Age""', ')', 'plt', '.', 'xlabel', '(', ""'Names'"", ')', 'plt', '.', 'ylabel', '(', ""'Ages'"", ')', 'plt', '.', 'title', '(', ""'Ages of different persons'"", ')', 'plt', '.', 'legend', '(', ')', 'plt', '.', 'show', '(', ')']"
1835,"['write', 'python', 'dictionary', 'find', 'mirror', 'character', 'string']","['def', 'mirrorChars', '(', 'input', ',', 'k', ')', ':', 'original', '=', ""'abcdefghijklmnopqrstuvwxyz'"", 'reverse', '=', ""'zyxwvutsrqponmlkjihgfedcba'"", 'dictChars', '=', 'dict', '(', 'zip', '(', 'original', ',', 'reverse', ')', ')', 'prefix', '=', 'input', '[', '0', ':', 'k', '-', '1', ']', 'suffix', '=', 'input', '[', 'k', '-', '1', ':', ']', 'mirror', '=', ""''"", 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'suffix', ')', ')', ':', 'mirror', '=', 'mirror', '+', 'dictChars', '[', 'suffix', '[', 'i', ']', ']', 'print', '(', 'prefix', '+', 'mirror', ')', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', ""'paradox'"", 'k', '=', '3', 'mirrorChars', '(', 'input', ',', 'k', ')']"
1836,"['write', 'python', 'program', 'find', 'middle', 'linked', 'list', 'using', 'one', 'traversal']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'def', 'push', '(', 'self', ',', 'new_data', ')', ':', 'new_node', '=', 'Node', '(', 'new_data', ')', 'new_node', '.', 'next', '=', 'self', '.', 'head', 'self', '.', 'head', '=', 'new_node', 'def', 'printMiddle', '(', 'self', ')', ':', 'slow_ptr', '=', 'self', '.', 'head', 'fast_ptr', '=', 'self', '.', 'head', 'if', 'self', '.', 'head', 'is', 'not', 'None', ':', 'while', '(', 'fast_ptr', 'is', 'not', 'None', 'and', 'fast_ptr', '.', 'next', 'is', 'not', 'None', ')', ':', 'fast_ptr', '=', 'fast_ptr', '.', 'next', '.', 'next', 'slow_ptr', '=', 'slow_ptr', '.', 'next', 'print', '(', '""The middle element is: ""', ',', 'slow_ptr', '.', 'data', ')', 'list1', '=', 'LinkedList', '(', ')', 'list1', '.', 'push', '(', '5', ')', 'list1', '.', 'push', '(', '4', ')', 'list1', '.', 'push', '(', '2', ')', 'list1', '.', 'push', '(', '3', ')', 'list1', '.', 'push', '(', '1', ')', 'list1', '.', 'printMiddle', '(', ')']"
1837,"['check', 'string', 'start', 'substring', 'using', 'regex', 'python']","['import', 're', 'def', 'find', '(', 'string', ',', 'sample', ')', ':', 'if', '(', 'sample', 'in', 'string', ')', ':', 'y', '=', '""^""', '+', 'sample', 'x', '=', 're', '.', 'search', '(', 'y', ',', 'string', ')', 'if', 'x', ':', 'print', '(', '""string starts with the given substring""', ')', 'else', ':', 'print', '(', '""string doesn\'t start with the given substring""', ')', 'else', ':', 'print', '(', '""entered string isn\'t a substring""', ')', 'string', '=', '""geeks for geeks makes learning fun""', 'sample', '=', '""geeks""', 'find', '(', 'string', ',', 'sample', ')', 'sample', '=', '""makes""', 'find', '(', 'string', ',', 'sample', ')']"
1838,"['write', 'python', 'program', 'replace', 'index', 'element', 'element', 'list']","['test_list1', '=', '[', ""'Gfg'"", ',', ""'is'"", ',', ""'best'"", ']', 'test_list2', '=', '[', '0', ',', '1', ',', '2', ',', '1', ',', '0', ',', '0', ',', '0', ',', '2', ',', '1', ',', '1', ',', '2', ',', '0', ']', 'print', '(', '""The original list 1 is : ""', '+', 'str', '(', 'test_list1', ')', ')', 'print', '(', '""The original list 2 is : ""', '+', 'str', '(', 'test_list2', ')', ')', 'res', '=', '[', 'test_list1', '[', 'idx', ']', 'for', 'idx', 'in', 'test_list2', ']', 'print', '(', '""The lists after index elements replacements is : ""', '+', 'str', '(', 'res', ')', ')']"
1839,"['dumping', 'queue', 'list', 'array', 'python']","['from', 'collections', 'import', 'deque', 'q', '=', 'deque', '(', ')', 'q', '.', 'append', '(', ""'a'"", ')', 'q', '.', 'append', '(', ""'b'"", ')', 'q', '.', 'append', '(', ""'c'"", ')', 'print', '(', '""Initial queue""', ')', 'print', '(', 'q', ',', '""\\n""', ')', 'print', '(', 'type', '(', 'q', ')', ')']"
1840,"['write', 'python', 'program', 'exceptional', 'split', 'string']","['test_str', '=', '""gfg, is, (best, for), geeks""', 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'temp', '=', ""''"", 'res', '=', '[', ']', 'check', '=', '0', 'for', 'ele', 'in', 'test_str', ':', 'if', 'ele', '==', ""'('"", ':', 'check', '+=', '1', 'elif', 'ele', '==', ""')'"", ':', 'check', '-=', '1', 'if', 'ele', '==', ""', '"", 'and', 'check', '==', '0', ':', 'if', 'temp', '.', 'strip', '(', ')', ':', 'res', '.', 'append', '(', 'temp', ')', 'temp', '=', ""''"", 'else', ':', 'temp', '+=', 'ele', 'if', 'temp', '.', 'strip', '(', ')', ':', 'res', '.', 'append', '(', 'temp', ')', 'print', '(', '""The string after exceptional split : ""', '+', 'str', '(', 'res', ')', ')']"
1841,"['write', 'python', 'lambda', 'function']","['string', '=', ""'GeeksforGeeks'"", 'print', '(', 'lambda', 'string', ':', 'string', ')']"
1842,"['getting', 'unique', 'value', 'column', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'gapminder_csv_url', '=', ""'http://bit.ly/2cLzoxH'"", 'record', '=', 'pd', '.', 'read_csv', '(', 'gapminder_csv_url', ')', 'record', '.', 'head', '(', ')']"
1843,"['write', 'python', 'program', 'find', 'duplicate', 'character', 'string']","['from', 'collections', 'import', 'Counter', 'def', 'find_dup_char', '(', 'input', ')', ':', 'WC', '=', 'Counter', '(', 'input', ')', 'j', '=', '-', '1', 'for', 'i', 'in', 'WC', '.', 'values', '(', ')', ':', 'j', '=', 'j', '+', '1', 'if', '(', 'i', '>', '1', ')', ':', 'print', 'WC', '.', 'keys', '(', ')', '[', 'j', ']', ',', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', ""'geeksforgeeks'"", 'find_dup_char', '(', 'input', ')']"
1844,"['get', 'nlargest', 'value', 'array', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'arr', '=', 'np', '.', 'array', '(', '[', '2', ',', '0', ',', '1', ',', '5', ',', '4', ',', '1', ',', '9', ']', ')', 'print', '(', '""Given array:""', ',', 'arr', ')', 'sorted_index_array', '=', 'np', '.', 'argsort', '(', 'arr', ')', 'sorted_array', '=', 'arr', '[', 'sorted_index_array', ']', 'print', '(', '""Sorted array:""', ',', 'sorted_array', ')', 'n', '=', '1', 'rslt', '=', 'sorted_array', '[', '-', 'n', ':', ']', 'print', '(', '""{} largest value:""', '.', 'format', '(', 'n', ')', ',', 'rslt', '[', '0', ']', ')']"
1845,"['scrape', 'imdb', 'movie', 'rating', 'detail', 'using', 'python']","['from', 'bs4', 'import', 'BeautifulSoup', 'import', 'requests', 'import', 're']"
1846,"['write', 'python', 'program', 'merging', 'two', 'dictionary']","['def', 'Merge', '(', 'dict1', ',', 'dict2', ')', ':', 'return', '(', 'dict2', '.', 'update', '(', 'dict1', ')', ')', 'dict1', '=', '{', ""'a'"", ':', '10', ',', ""'b'"", ':', '8', '}', 'dict2', '=', '{', ""'d'"", ':', '6', ',', ""'c'"", ':', '4', '}', 'print', '(', 'Merge', '(', 'dict1', ',', 'dict2', ')', ')', 'print', '(', 'dict2', ')']"
1847,"['write', 'python', 'selenium', 'find', 'element', 'text']","['<', 'DOCTYPE', 'html', '>', '<', 'html', '>', '<', 'body', '>', '<', 'button', 'type', '=', 'button', '>', 'Geeks', 'For', 'Geeks', '<', '/', 'button', '>', '<', '/', 'body', '>', '<', 'html', '>']"
1848,"['write', 'python', 'program', 'key', 'maximum', 'unique', 'value']","['test_dict', '=', '{', '""Gfg""', ':', '[', '5', ',', '7', ',', '5', ',', '4', ',', '5', ']', ',', '""is""', ':', '[', '6', ',', '7', ',', '4', ',', '3', ',', '3', ']', ',', '""Best""', ':', '[', '9', ',', '9', ',', '6', ',', '5', ',', '5', ']', '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'max_val', '=', '0', 'max_key', '=', 'None', 'for', 'sub', 'in', 'test_dict', ':', 'if', 'len', '(', 'set', '(', 'test_dict', '[', 'sub', ']', ')', ')', '>', 'max_val', ':', 'max_val', '=', 'len', '(', 'set', '(', 'test_dict', '[', 'sub', ']', ')', ')', 'max_key', '=', 'sub', 'print', '(', '""Key with maximum unique values : ""', '+', 'str', '(', 'max_key', ')', ')']"
1849,"['convert', 'covariance', 'matrix', 'correlation', 'matrix', 'using', 'python']","['import', 'numpy', 'as', 'np', 'import', 'pandas', 'as', 'pd', 'dataset', '=', 'pd', '.', 'read_csv', '(', '""iris.csv""', ')', 'dataset', '.', 'head', '(', ')']"
1850,"['remove', 'row', 'numpy', 'array', 'contains', 'nonnumeric', 'value', 'python']","['import', 'numpy', 'as', 'np', 'n_arr', '=', 'np', '.', 'array', '(', '[', '[', '10.5', ',', '22.5', ',', '3.8', ']', ',', '[', '41', ',', 'np', '.', 'nan', ',', 'np', '.', 'nan', ']', ']', ')', 'print', '(', '""Given array:""', ')', 'print', '(', 'n_arr', ')', 'print', '(', '""\\nRemove all rows containing non-numeric elements""', ')', 'print', '(', 'n_arr', '[', '~', 'np', '.', 'isnan', '(', 'n_arr', ')', '.', 'any', '(', 'axis', '=', '1', ')', ']', ')']"
1851,"['create', 'filename', 'containing', 'date', 'time', 'python']","['from', 'datetime', 'import', 'datetime', 'current_datetime', '=', 'datetime', '.', 'now', '(', ')', 'print', '(', '""Current date & time : ""', ',', 'current_datetime', ')', 'str_current_datetime', '=', 'str', '(', 'current_datetime', ')', 'file_name', '=', 'str_current_datetime', '+', '"".txt""', 'file', '=', 'open', '(', 'file_name', ',', ""'w'"", ')', 'print', '(', '""File created : ""', ',', 'file', '.', 'name', ')', 'file', '.', 'close', '(', ')']"
1852,"['write', 'python', 'program', 'intersection', 'two', 'list']","['def', 'intersection', '(', 'lst1', ',', 'lst2', ')', ':', 'lst3', '=', '[', 'value', 'for', 'value', 'in', 'lst1', 'if', 'value', 'in', 'lst2', ']', 'return', 'lst3', 'lst1', '=', '[', '4', ',', '9', ',', '1', ',', '17', ',', '11', ',', '26', ',', '28', ',', '54', ',', '69', ']', 'lst2', '=', '[', '9', ',', '9', ',', '74', ',', '21', ',', '45', ',', '11', ',', '63', ',', '28', ',', '26', ']', 'print', '(', 'intersection', '(', 'lst1', ',', 'lst2', ')', ')']"
1853,"['write', 'python', 'program', 'convert', 'matrix', 'custom', 'tuple', 'matrix']","['test_list', '=', '[', '[', '4', ',', '5', ',', '6', ']', ',', '[', '6', ',', '7', ',', '3', ']', ',', '[', '1', ',', '3', ',', '4', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'add_list', '=', '[', ""'Gfg'"", ',', ""'is'"", ',', ""'best'"", ']', 'res', '=', '[', ']', 'for', 'idx', ',', 'ele', 'in', 'zip', '(', 'add_list', ',', 'test_list', ')', ':', 'for', 'e', 'in', 'ele', ':', 'res', '.', 'append', '(', '(', 'idx', ',', 'e', ')', ')', 'print', '(', '""Matrix after conversion : ""', '+', 'str', '(', 'res', ')', ')']"
1854,"['convert', 'python', 'datetimedatetime', 'excel', 'serial', 'date', 'number']","['import', 'datetime', 'current_datetime', '=', 'datetime', '.', 'datetime', '.', 'now', '(', ')', 'print', '(', 'current_datetime', '.', 'strftime', '(', ""'%x %X'"", ')', ')']"
1855,"['round', 'element', 'numpy', 'array', 'nearest', 'integer', 'python']","['import', 'numpy', 'as', 'n', 'y', '=', 'n', '.', 'array', '(', '[', '0.2', ',', '0.3', ',', '0.4', ',', '0.5', ',', '0.6', ',', '0.7', ']', ')', 'print', '(', '""Original array:""', ',', 'end', '=', '"" ""', ')', 'print', '(', 'y', ')', 'y', '=', 'n', '.', 'rint', '(', 'y', ')', 'print', '(', '""After rounding off:""', ',', 'end', '=', '"" ""', ')', 'print', '(', 'y', ')']"
1856,"['numpy', 'string', 'operation', 'find', 'function', 'python']","['import', 'numpy', 'as', 'geek', 'in_arr', '=', 'geek', '.', 'array', '(', '[', ""'aAaAaA'"", ',', ""'baA'"", ',', ""'abBABba'"", ']', ')', 'print', '(', '""Input array : ""', ',', 'in_arr', ')', 'out_arr', '=', 'geek', '.', 'char', '.', 'find', '(', 'in_arr', ',', 'sub', '=', ""'A'"", ')', 'print', '(', '""Output array: ""', ',', 'out_arr', ')']"
1857,"['numpy', 'string', 'operation', 'join', 'function', 'python']","['import', 'numpy', 'as', 'geek', 'in_arr', '=', 'geek', '.', 'array', '(', '[', ""'Python'"", ',', ""'Numpy'"", ',', ""'Pandas'"", ']', ')', 'print', '(', '""Input original array : ""', ',', 'in_arr', ')', 'sep', '=', 'geek', '.', 'array', '(', '[', ""'-'"", ',', ""'+'"", ',', ""'*'"", ']', ')', 'out_arr', '=', 'geek', '.', 'core', '.', 'defchararray', '.', 'join', '(', 'sep', ',', 'in_arr', ')', 'print', '(', '""Output joined array: ""', ',', 'out_arr', ')']"
1858,"['numpynegative', 'python']","['import', 'numpy', 'as', 'geek', 'in_num', '=', '10', 'print', '(', '""Input\xa0 number : ""', ',', 'in_num', ')', 'out_num', '=', 'geek', '.', 'negative', '(', 'in_num', ')', 'print', '(', '""negative of input number : ""', ',', 'out_num', ')']"
1859,"['flatten', 'matrix', 'python', 'using', 'numpy']","['import', 'numpy', 'as', 'np', 'gfg', '=', 'np', '.', 'array', '(', '[', '[', '2', ',', '3', ']', ',', '[', '4', ',', '5', ']', ']', ')', 'flat_gfg', '=', 'gfg', '.', 'flatten', '(', ')', 'print', '(', 'flat_gfg', ')']"
1860,"['write', 'python', 'program', 'binary', 'search', 'recursive', 'iterative']","['def', 'binary_search', '(', 'arr', ',', 'low', ',', 'high', ',', 'x', ')', ':', 'if', 'high', '>=', 'low', ':', 'mid', '=', '(', 'high', '+', 'low', ')', '//', '2', 'if', 'arr', '[', 'mid', ']', '==', 'x', ':', 'return', 'mid', 'elif', 'arr', '[', 'mid', ']', '>', 'x', ':', 'return', 'binary_search', '(', 'arr', ',', 'low', ',', 'mid', '-', '1', ',', 'x', ')', 'else', ':', 'return', 'binary_search', '(', 'arr', ',', 'mid', '+', '1', ',', 'high', ',', 'x', ')', 'else', ':', 'return', '-', '1', 'arr', '=', '[', '2', ',', '3', ',', '4', ',', '10', ',', '40', ']', 'x', '=', '10', 'result', '=', 'binary_search', '(', 'arr', ',', '0', ',', 'len', '(', 'arr', ')', '-', '1', ',', 'x', ')', 'if', 'result', '!=', '-', '1', ':', 'print', '(', '""Element is present at index""', ',', 'str', '(', 'result', ')', ')', 'else', ':', 'print', '(', '""Element is not present in array""', ')']"
1861,"['scraping', 'reddit', 'python', 'beautifulsoup']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup']"
1862,"['write', 'python', 'program', 'get', 'unique', 'combination', 'two', 'list']","['import', 'itertools', 'from', 'itertools', 'import', 'permutations', 'list_1', '=', '[', '""a""', ',', '""b""', ',', '""c""', ',', '""d""', ']', 'list_2', '=', '[', '1', ',', '4', ',', '9', ']', 'unique_combinations', '=', '[', ']', 'permut', '=', 'itertools', '.', 'permutations', '(', 'list_1', ',', 'len', '(', 'list_2', ')', ')', 'for', 'comb', 'in', 'permut', ':', 'zipped', '=', 'zip', '(', 'comb', ',', 'list_2', ')', 'unique_combinations', '.', 'append', '(', 'list', '(', 'zipped', ')', ')', 'print', '(', 'unique_combinations', ')']"
1863,"['create', 'list', 'row', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Date'"", ':', '[', ""'10/2/2011'"", ',', ""'11/2/2011'"", ',', ""'12/2/2011'"", ',', ""'13/2/11'"", ']', ',', ""'Event'"", ':', '[', ""'Music'"", ',', ""'Poetry'"", ',', ""'Theatre'"", ',', ""'Comedy'"", ']', ',', ""'Cost'"", ':', '[', '10000', ',', '5000', ',', '15000', ',', '2000', ']', '}', ')', 'print', '(', 'df', ')']"
1864,"['write', 'python', 'program', 'word', 'location', 'string']","['import', 're', 'test_str', '=', ""'geeksforgeeks is best for geeks'"", 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'wrd', '=', ""'best'"", 'test_str', '=', 'test_str', '.', 'split', '(', ')', 'res', '=', '-', '1', 'for', 'idx', 'in', 'test_str', ':', 'if', 'len', '(', 're', '.', 'findall', '(', 'wrd', ',', 'idx', ')', ')', '>', '0', ':', 'res', '=', 'test_str', '.', 'index', '(', 'idx', ')', '+', '1', 'print', '(', '""The location of word is : ""', '+', 'str', '(', 'res', ')', ')']"
1865,"['count', 'number', 'instance', 'class', 'python']","['class', 'geeks', ':', 'counter', '=', '0', 'def', '__init__', '(', 'self', ')', ':', 'geeks', '.', 'counter', '+=', '1', 'g1', '=', 'geeks', '(', ')', 'g2', '=', 'geeks', '(', ')', 'g3', '=', 'geeks', '(', ')', 'print', '(', 'geeks', '.', 'counter', ')']"
1866,"['write', 'python', 'program', 'check', 'whether', 'string', 'symmetrical', 'palindrome']","['def', 'palindrome', '(', 'a', ')', ':', 'mid', '=', '(', 'len', '(', 'a', ')', '-', '1', ')', '//', '2', 'start', '=', '0', 'last', '=', 'len', '(', 'a', ')', '-', '1', 'flag', '=', '0', 'while', '(', 'start', '<=', 'mid', ')', ':', 'if', '(', 'a', '[', 'start', ']', '==', 'a', '[', 'last', ']', ')', ':', 'start', '+=', '1', 'last', '-=', '1', 'else', ':', 'flag', '=', '1', 'break', ';', 'if', 'flag', '==', '0', ':', 'print', '(', '""The entered string is palindrome""', ')', 'else', ':', 'print', '(', '""The entered string is not palindrome""', ')', 'def', 'symmetry', '(', 'a', ')', ':', 'n', '=', 'len', '(', 'a', ')', 'flag', '=', '0', 'if', 'n', '%', '2', ':', 'mid', '=', 'n', '//', '2', '+', '1', 'else', ':', 'mid', '=', 'n', '//', '2', 'start1', '=', '0', 'start2', '=', 'mid', 'while', '(', 'start1', '<', 'mid', 'and', 'start2', '<', 'n', ')', ':', 'if', '(', 'a', '[', 'start1', ']', '==', 'a', '[', 'start2', ']', ')', ':', 'start1', '=', 'start1', '+', '1', 'start2', '=', 'start2', '+', '1', 'else', ':', 'flag', '=', '1', 'break', 'if', 'flag', '==', '0', ':', 'print', '(', '""The entered string is symmetrical""', ')', 'else', ':', 'print', '(', '""The entered string is not symmetrical""', ')', 'string', '=', ""'amaama'"", 'palindrome', '(', 'string', ')', 'symmetry', '(', 'string', ')']"
1867,"['lru', 'cache', 'python', 'using', 'ordereddict']","['from', 'collections', 'import', 'OrderedDict', 'class', 'LRUCache', ':', 'def', '__init__', '(', 'self', ',', 'capacity', ':', 'int', ')', ':', 'self', '.', 'cache', '=', 'OrderedDict', '(', ')', 'self', '.', 'capacity', '=', 'capacity', 'def', 'get', '(', 'self', ',', 'key', ':', 'int', ')', '->', 'int', ':', 'if', 'key', 'not', 'in', 'self', '.', 'cache', ':', 'return', '-', '1', 'else', ':', 'self', '.', 'cache', '.', 'move_to_end', '(', 'key', ')', 'return', 'self', '.', 'cache', '[', 'key', ']', 'def', 'put', '(', 'self', ',', 'key', ':', 'int', ',', 'value', ':', 'int', ')', '->', 'None', ':', 'self', '.', 'cache', '[', 'key', ']', '=', 'value', 'self', '.', 'cache', '.', 'move_to_end', '(', 'key', ')', 'if', 'len', '(', 'self', '.', 'cache', ')', '>', 'self', '.', 'capacity', ':', 'self', '.', 'cache', '.', 'popitem', '(', 'last', '=', 'False', ')', 'cache', '=', 'LRUCache', '(', '2', ')', 'cache', '.', 'put', '(', '1', ',', '1', ')', 'print', '(', 'cache', '.', 'cache', ')', 'cache', '.', 'put', '(', '2', ',', '2', ')', 'print', '(', 'cache', '.', 'cache', ')', 'cache', '.', 'get', '(', '1', ')', 'print', '(', 'cache', '.', 'cache', ')', 'cache', '.', 'put', '(', '3', ',', '3', ')', 'print', '(', 'cache', '.', 'cache', ')', 'cache', '.', 'get', '(', '2', ')', 'print', '(', 'cache', '.', 'cache', ')', 'cache', '.', 'put', '(', '4', ',', '4', ')', 'print', '(', 'cache', '.', 'cache', ')', 'cache', '.', 'get', '(', '1', ')', 'print', '(', 'cache', '.', 'cache', ')', 'cache', '.', 'get', '(', '3', ')', 'print', '(', 'cache', '.', 'cache', ')', 'cache', '.', 'get', '(', '4', ')', 'print', '(', 'cache', '.', 'cache', ')']"
1868,"['write', 'python', 'program', 'find', 'minimum', 'number', 'rotation', 'obtain', 'actual', 'string']","['def', 'findRotations', '(', 'str1', ',', 'str2', ')', ':', 'x', '=', '0', 'y', '=', '0', 'm', '=', 'str1', 'while', 'True', ':', 'm', '=', 'm', '[', 'len', '(', 'm', ')', '-', '1', ']', '+', 'm', '[', ':', 'len', '(', 'm', ')', '-', '1', ']', 'if', '(', 'm', '==', 'str2', ')', ':', 'x', '+=', '1', 'break', 'else', ':', 'x', '+=', '1', 'if', 'x', '>', 'len', '(', 'str2', ')', ':', 'break', 'while', 'True', ':', 'str1', '=', 'str1', '[', '1', ':', 'len', '(', 'str1', ')', ']', '+', 'str1', '[', '0', ']', 'if', '(', 'str1', '==', 'str2', ')', ':', 'y', '+=', '1', 'break', 'else', ':', 'y', '+=', '1', 'if', 'y', '>', 'len', '(', 'str2', ')', ':', 'break', 'if', 'x', '<', 'len', '(', 'str2', ')', ':', 'print', '(', 'min', '(', 'x', ',', 'y', ')', ')', 'else', ':', 'print', '(', '""given strings are not of same kind""', ')', 'findRotations', '(', ""'sgeek'"", ',', ""'geeks'"", ')']"
1869,"['write', 'python', 'program', 'way', 'remove', 'multiple', 'empty', 'space', 'string', 'list']","['test_list', '=', '[', ""'gfg'"", ',', ""'\xa0\xa0 '"", ',', ""' '"", ',', ""'is'"", ',', ""'\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 '"", ',', ""'best'"", ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', ']', 'for', 'ele', 'in', 'test_list', ':', 'if', 'ele', '.', 'strip', '(', ')', ':', 'res', '.', 'append', '(', 'ele', ')', 'print', '(', '""List after filtering non-empty strings : ""', '+', 'str', '(', 'res', ')', ')']"
1870,"['change', 'dictionary', 'class', 'python']","['class', 'Dict2Class', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ',', 'my_dict', ')', ':', 'for', 'key', 'in', 'my_dict', ':', 'setattr', '(', 'self', ',', 'key', ',', 'my_dict', '[', 'key', ']', ')', 'if', '__name__', '==', '""__main__""', ':', 'my_dict', '=', '{', '""Name""', ':', '""Geeks""', ',', '""Rank""', ':', '""1223""', ',', '""Subject""', ':', '""Python""', '}', 'result', '=', 'Dict2Class', '(', 'my_dict', ')', 'print', '(', '""After Converting Dictionary to Class : ""', ')', 'print', '(', 'result', '.', 'Name', ',', 'result', '.', 'Rank', ',', 'result', '.', 'Subject', ')', 'print', '(', 'type', '(', 'result', ')', ')']"
1871,"['change', 'border', 'color', 'tkinter', 'widget', 'python']","['from', 'tkinter', 'import', '*', 'window', '=', 'Tk', '(', ')', 'window', '.', 'title', '(', ""'GFG'"", ')', 'border_color', '=', 'Frame', '(', 'window', ',', 'background', '=', '""red""', ')', 'label', '=', 'Label', '(', 'border_color', ',', 'text', '=', '""This is a Label widget""', ',', 'bd', '=', '0', ')', 'label', '.', 'pack', '(', 'padx', '=', '1', ',', 'pady', '=', '1', ')', 'border_color', '.', 'pack', '(', 'padx', '=', '40', ',', 'pady', '=', '40', ')', 'window', '.', 'mainloop', '(', ')']"
1872,"['write', 'python', 'program', 'remove', 'substring', 'string']","['test_str', '=', ""'geeksforgeeks is best for geeks'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'sub_str', '=', '""best""', 'res', '=', 'test_str', '[', ':', 'test_str', '.', 'index', '(', 'sub_str', ')', '+', 'len', '(', 'sub_str', ')', ']', 'print', '(', '""The string after removal : ""', '+', 'str', '(', 'res', ')', ')']"
1873,"['create', 'address', 'book', 'write', 'python', 'program', 'using', 'tkinter']","['from', 'tkinter', 'import', '*', 'root', '=', 'Tk', '(', ')', 'root', '.', 'geometry', '(', ""'400x500'"", ')', 'Name', '=', 'StringVar', '(', ')', 'Number', '=', 'StringVar', '(', ')', 'frame', '=', 'Frame', '(', ')', 'frame', '.', 'pack', '(', 'pady', '=', '10', ')', 'frame1', '=', 'Frame', '(', ')', 'frame1', '.', 'pack', '(', ')', 'frame2', '=', 'Frame', '(', ')', 'frame2', '.', 'pack', '(', 'pady', '=', '10', ')', 'Label', '(', 'frame', ',', 'text', '=', ""'Name'"", ',', 'font', '=', ""'arial 12 bold'"", ')', '.', 'pack', '(', 'side', '=', 'LEFT', ')', 'Entry', '(', 'frame', ',', 'textvariable', '=', 'Name', ',', 'width', '=', '50', ')', '.', 'pack', '(', ')', 'Label', '(', 'frame1', ',', 'text', '=', ""'Phone No.'"", ',', 'font', '=', ""'arial 12 bold'"", ')', '.', 'pack', '(', 'side', '=', 'LEFT', ')', 'Entry', '(', 'frame1', ',', 'textvariable', '=', 'Number', ',', 'width', '=', '50', ')', '.', 'pack', '(', ')', 'Label', '(', 'frame2', ',', 'text', '=', ""'Address'"", ',', 'font', '=', ""'arial 12 bold'"", ')', '.', 'pack', '(', 'side', '=', 'LEFT', ')', 'address', '=', 'Text', '(', 'frame2', ',', 'width', '=', '37', ',', 'height', '=', '10', ')', 'address', '.', 'pack', '(', ')', 'Button', '(', 'root', ',', 'text', '=', '""Add""', ',', 'font', '=', '""arial 12 bold""', ')', '.', 'place', '(', 'x', '=', '100', ',', 'y', '=', '270', ')', 'Button', '(', 'root', ',', 'text', '=', '""View""', ',', 'font', '=', '""arial 12 bold""', ')', '.', 'place', '(', 'x', '=', '100', ',', 'y', '=', '310', ')', 'Button', '(', 'root', ',', 'text', '=', '""Delete""', ',', 'font', '=', '""arial 12 bold""', ')', '.', 'place', '(', 'x', '=', '100', ',', 'y', '=', '350', ')', 'Button', '(', 'root', ',', 'text', '=', '""Reset""', ',', 'font', '=', '""arial 12 bold""', ')', '.', 'place', '(', 'x', '=', '100', ',', 'y', '=', '390', ')', 'scroll_bar', '=', 'Scrollbar', '(', 'root', ',', 'orient', '=', 'VERTICAL', ')', 'select', '=', 'Listbox', '(', 'root', ',', 'yscrollcommand', '=', 'scroll_bar', '.', 'set', ',', 'height', '=', '12', ')', 'scroll_bar', '.', 'config', '(', 'command', '=', 'select', '.', 'yview', ')', 'scroll_bar', '.', 'pack', '(', 'side', '=', 'RIGHT', ',', 'fill', '=', 'Y', ')', 'select', '.', 'place', '(', 'x', '=', '200', ',', 'y', '=', '260', ')', 'root', '.', 'mainloop', '(', ')']"
1874,"['write', 'python', 'program', 'remove', 'consecutive', 'k', 'element', 'record']","['test_list', '=', '[', '(', '4', ',', '5', ',', '6', ',', '3', ')', ',', '(', '5', ',', '6', ',', '6', ',', '9', ')', ',', '(', '1', ',', '3', ',', '5', ',', '6', ')', ',', '(', '6', ',', '6', ',', '7', ',', '8', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '6', 'res', '=', '[', 'idx', 'for', 'idx', 'in', 'test_list', 'if', '(', 'K', ',', 'K', ')', 'not', 'in', 'zip', '(', 'idx', ',', 'idx', '[', '1', ':', ']', ')', ']', 'print', '(', '""The records after removal : ""', '+', 'str', '(', 'res', ')', ')']"
1875,"['find', 'size', 'set', 'python']","['import', 'sys', 'Set1', '=', '{', '""A""', ',', '1', ',', '""B""', ',', '2', ',', '""C""', ',', '3', '}', 'Set2', '=', '{', '""Geek1""', ',', '""Raju""', ',', '""Geek2""', ',', '""Nikhil""', ',', '""Geek3""', ',', '""Deepanshu""', '}', 'Set3', '=', '{', '(', '1', ',', '""Lion""', ')', ',', '(', '2', ',', '""Tiger""', ')', ',', '(', '3', ',', '""Fox""', ')', '}', 'print', '(', '""Size of Set1: ""', '+', 'str', '(', 'sys', '.', 'getsizeof', '(', 'Set1', ')', ')', '+', '""bytes""', ')', 'print', '(', '""Size of Set2: ""', '+', 'str', '(', 'sys', '.', 'getsizeof', '(', 'Set2', ')', ')', '+', '""bytes""', ')', 'print', '(', '""Size of Set3: ""', '+', 'str', '(', 'sys', '.', 'getsizeof', '(', 'Set3', ')', ')', '+', '""bytes""', ')']"
1876,"['adding', 'subtracting', 'matrix', 'python']","['import', 'numpy', 'as', 'np', 'A', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', ')', 'B', '=', 'np', '.', 'array', '(', '[', '[', '4', ',', '5', ']', ',', '[', '6', ',', '7', ']', ']', ')', 'print', '(', '""Printing elements of first matrix""', ')', 'print', '(', 'A', ')', 'print', '(', '""Printing elements of second matrix""', ')', 'print', '(', 'B', ')', 'print', '(', '""Addition of two matrix""', ')', 'print', '(', 'np', '.', 'add', '(', 'A', ',', 'B', ')', ')']"
1877,"['set', 'update', 'python', 'union', 'n', 'array']","['def', 'combineAll', '(', 'input', ')', ':', 'result', '=', 'set', '(', 'input', '[', '0', ']', ')', 'for', 'array', 'in', 'input', '[', '1', ':', ']', ':', 'result', '.', 'update', '(', 'array', ')', 'return', 'list', '(', 'result', ')', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', '[', '[', '1', ',', '2', ',', '2', ',', '4', ',', '3', ',', '6', ']', ',', '[', '5', ',', '1', ',', '3', ',', '4', ']', ',', '[', '9', ',', '5', ',', '7', ',', '1', ']', ',', '[', '2', ',', '4', ',', '1', ',', '3', ']', ']', 'print', '(', 'combineAll', '(', 'input', ')', ')']"
1878,"['compute', 'pearson', 'productmoment', 'correlation', 'coefficient', 'two', 'given', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'array1', '=', 'np', '.', 'array', '(', '[', '0', ',', '1', ',', '2', ']', ')', 'array2', '=', 'np', '.', 'array', '(', '[', '3', ',', '4', ',', '5', ']', ')', 'rslt', '=', 'np', '.', 'corrcoef', '(', 'array1', ',', 'array2', ')', 'print', '(', 'rslt', ')']"
1879,"['write', 'python', 'program', 'remove', 'duplicate', 'word', 'given', 'sentence']","['from', 'collections', 'import', 'Counter', 'def', 'remov_duplicates', '(', 'input', ')', ':', 'input', '=', 'input', '.', 'split', '(', '"" ""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'input', ')', ')', ':', 'input', '[', 'i', ']', '=', '""""', '.', 'join', '(', 'input', '[', 'i', ']', ')', 'UniqW', '=', 'Counter', '(', 'input', ')', 's', '=', '"" ""', '.', 'join', '(', 'UniqW', '.', 'keys', '(', ')', ')', 'print', '(', 's', ')', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', ""'Python is great and Java is also great'"", 'remov_duplicates', '(', 'input', ')']"
1880,"['ranking', 'row', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'movies', '=', '{', ""'Name'"", ':', '[', ""'The Godfather'"", ',', ""'Bird Box'"", ',', ""'Fight Club'"", ']', ',', ""'Year'"", ':', '[', ""'1972'"", ',', ""'2018'"", ',', ""'1999'"", ']', ',', ""'Rating'"", ':', '[', ""'9.2'"", ',', ""'6.8'"", ',', ""'8.8'"", ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'movies', ')', 'print', '(', 'df', ')']"
1881,"['write', 'python', 'program', 'convert', 'keyvalues', 'list', 'flat', 'dictionary']","['from', 'itertools', 'import', 'product', 'test_dict', '=', '{', ""'month'"", ':', '[', '1', ',', '2', ',', '3', ']', ',', ""'name'"", ':', '[', ""'Jan'"", ',', ""'Feb'"", ',', ""'March'"", ']', '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'res', '=', 'dict', '(', 'zip', '(', 'test_dict', '[', ""'month'"", ']', ',', 'test_dict', '[', ""'name'"", ']', ')', ')', 'print', '(', '""Flattened dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
1882,"['write', 'python', 'program', 'convert', 'tuple', 'matrix', 'tuple', 'list']","['test_list', '=', '[', '[', '(', '4', ',', '5', ')', ',', '(', '7', ',', '8', ')', ']', ',', '[', '(', '10', ',', '13', ')', ',', '(', '18', ',', '17', ')', ']', ',', '[', '(', '0', ',', '4', ')', ',', '(', '10', ',', '1', ')', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'temp', '=', '[', 'ele', 'for', 'sub', 'in', 'test_list', 'for', 'ele', 'in', 'sub', ']', 'res', '=', 'list', '(', 'zip', '(', '*', 'temp', ')', ')', 'print', '(', '""The converted tuple list : ""', '+', 'str', '(', 'res', ')', ')']"
1883,"['write', 'python', 'program', 'inversion', 'nested', 'dictionary']","['def', 'extract_path', '(', 'test_dict', ',', 'path_way', ')', ':', 'if', 'not', 'test_dict', ':', 'return', '[', 'path_way', ']', 'temp', '=', '[', ']', 'for', 'key', 'in', 'test_dict', ':', 'temp', '.', 'extend', '(', 'extract_path', '(', 'test_dict', '[', 'key', ']', ',', 'path_way', '+', '[', 'key', ']', ')', ')', 'return', 'temp', 'def', 'hlper_fnc', '(', 'test_dict', ')', ':', 'all_paths', '=', 'extract_path', '(', 'test_dict', ',', '[', ']', ')', 'res', '=', '{', '}', 'for', 'path', 'in', 'all_paths', ':', 'front', '=', 'res', 'for', 'ele', 'in', 'path', '[', ':', ':', '-', '1', ']', ':', 'if', 'ele', 'not', 'in', 'front', ':', 'front', '[', 'ele', ']', '=', '{', '}', 'front', '=', 'front', '[', 'ele', ']', 'return', 'res', 'test_dict', '=', '{', '""a""', ':', '{', '""b""', ':', '{', '""c""', ':', '{', '}', '}', '}', ',', '""d""', ':', '{', '""e""', ':', '{', '}', '}', ',', '""f""', ':', '{', '""g""', ':', '{', '""h""', ':', '{', '}', '}', '}', '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'res', '=', 'hlper_fnc', '(', 'test_dict', ')', 'print', '(', '""The inverted dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
1884,"['write', 'python', 'program', 'change', 'column', 'name', 'row', 'index', 'panda', 'dataframe']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', '""Name""', ':', '[', ""'Tom'"", ',', ""'Nick'"", ',', ""'John'"", ',', ""'Peter'"", ']', ',', '""Age""', ':', '[', '15', ',', '26', ',', '17', ',', '28', ']', '}', ')', 'df']"
1885,"['get', 'size', 'folder', 'using', 'python']","['import', 'os', 'size', '=', '0', 'Folderpath', '=', ""'C:/Users/Geetansh Sahni/Documents/R'"", 'for', 'path', ',', 'dirs', ',', 'files', 'in', 'os', '.', 'walk', '(', 'Folderpath', ')', ':', 'for', 'f', 'in', 'files', ':', 'fp', '=', 'os', '.', 'path', '.', 'join', '(', 'path', ',', 'f', ')', 'size', '+=', 'os', '.', 'path', '.', 'getsize', '(', 'fp', ')', 'print', '(', '""Folder size: ""', '+', 'str', '(', 'size', ')', ')']"
1886,"['intersection', 'two', 'array', 'python', 'lambda', 'expression', 'filter', 'function']","['def', 'interSection', '(', 'arr1', ',', 'arr2', ')', ':', 'result', '=', 'list', '(', 'filter', '(', 'lambda', 'x', ':', 'x', 'in', 'arr1', ',', 'arr2', ')', ')', 'print', '(', '""Intersection : ""', ',', 'result', ')', 'if', '__name__', '==', '""__main__""', ':', 'arr1', '=', '[', '1', ',', '3', ',', '4', ',', '5', ',', '7', ']', 'arr2', '=', '[', '2', ',', '3', ',', '5', ',', '6', ']', 'interSection', '(', 'arr1', ',', 'arr2', ')']"
1887,"['write', 'python', 'program', 'convert', 'set', 'list']","['my_set', '=', '{', ""'Geeks'"", ',', ""'for'"", ',', ""'geeks'"", '}', 's', '=', 'list', '(', 'my_set', ')', 'print', '(', 's', ')']"
1888,"['write', 'python', 'program', 'creating', 'panda', 'dataframe', 'column', 'based', 'given', 'condition']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Date'"", ':', '[', ""'11/8/2011'"", ',', ""'11/9/2011'"", ',', ""'11/10/2011'"", ',', ""'11/11/2011'"", ',', ""'11/12/2011'"", ']', ',', ""'Event'"", ':', '[', ""'Music'"", ',', ""'Poetry'"", ',', ""'Music'"", ',', ""'Music'"", ',', ""'Poetry'"", ']', '}', ')', 'print', '(', 'df', ')']"
1889,"['insert', 'space', 'character', 'element', 'given', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '""geeks""', ',', '""for""', ',', '""geeks""', ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""Printing the Original Array:""', ')', 'print', '(', 'x', ')', 'r', '=', 'np', '.', 'char', '.', 'join', '(', '"" ""', ',', 'x', ')', 'print', '(', '""Printing the array after inserting space\\\nbetween the elements""', ')', 'print', '(', 'r', ')']"
1890,"['write', 'python', 'program', 'test', 'substring', 'order']","['test_str', '=', ""'geeksforgeeks'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'K', '=', ""'seek'"", 'temp', '=', 'lambda', 'sub', ':', ""''"", '.', 'join', '(', 'chr', 'for', 'chr', 'in', 'sub', 'if', 'chr', 'in', 'set', '(', 'K', ')', ')', 'res', '=', 'K', 'in', 'temp', '(', 'test_str', ')', 'print', '(', '""Is substring in order : ""', '+', 'str', '(', 'res', ')', ')']"
1891,"['string', 'slicing', 'python', 'check', 'string', 'become', 'empty', 'recursive', 'deletion']","['def', 'checkEmpty', '(', 'input', ',', 'pattern', ')', ':', 'if', 'len', '(', 'input', ')', '==', '0', 'and', 'len', '(', 'pattern', ')', '==', '0', ':', 'return', ""'true'"", 'if', 'len', '(', 'pattern', ')', '==', '0', ':', 'return', ""'true'"", 'while', '(', 'len', '(', 'input', ')', '!=', '0', ')', ':', 'index', '=', 'input', '.', 'find', '(', 'pattern', ')', 'if', '(', 'index', '==', '(', '-', '1', ')', ')', ':', 'return', ""'false'"", 'input', '=', 'input', '[', '0', ':', 'index', ']', '+', 'input', '[', 'index', '+', 'len', '(', 'pattern', ')', ':', ']', 'return', ""'true'"", 'if', '__name__', '==', '""__main__""', ':', 'input', '=', ""'GEEGEEKSKS'"", 'pattern', '=', ""'GEEKS'"", 'print', '(', 'checkEmpty', '(', 'input', ',', 'pattern', ')', ')']"
1892,"['write', 'python', 'program', 'get', 'unique', 'element', 'nested', 'tuple']","['test_list', '=', '[', '(', '3', ',', '4', ',', '5', ')', ',', '(', '4', ',', '5', ',', '7', ')', ',', '(', '1', ',', '4', ')', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', ']', 'temp', '=', 'set', '(', ')', 'for', 'inner', 'in', 'test_list', ':', 'for', 'ele', 'in', 'inner', ':', 'if', 'not', 'ele', 'in', 'temp', ':', 'temp', '.', 'add', '(', 'ele', ')', 'res', '.', 'append', '(', 'ele', ')', 'print', '(', '""Unique elements in nested tuples are : ""', '+', 'str', '(', 'res', ')', ')']"
1893,"['count', 'frequency', 'unique', 'value', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'ini_array', '=', 'np', '.', 'array', '(', '[', '10', ',', '20', ',', '5', ',', '10', ',', '8', ',', '20', ',', '8', ',', '9', ']', ')', 'unique', ',', 'frequency', '=', 'np', '.', 'unique', '(', 'ini_array', ',', 'return_counts', '=', 'True', ')', 'print', '(', '""Unique Values:""', ',', 'unique', ')', 'print', '(', '""Frequency Values:""', ',', 'frequency', ')']"
1894,"['calculate', 'elementwise', 'absolute', 'value', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'array', '=', 'np', '.', 'array', '(', '[', '1', ',', '-', '2', ',', '3', ']', ')', 'print', '(', '""Given array:\\n""', ',', 'array', ')', 'rslt', '=', 'np', '.', 'absolute', '(', 'array', ')', 'print', '(', '""Absolute array:\\n""', ',', 'rslt', ')']"
1895,"['write', 'python', 'program', 'remove', 'nested', 'record', 'tuple']","['test_tup', '=', '(', '1', ',', '5', ',', '7', ',', '(', '4', ',', '6', ')', ',', '10', ')', 'print', '(', '""The original tuple : ""', '+', 'str', '(', 'test_tup', ')', ')', 'res', '=', 'tuple', '(', ')', 'for', 'count', ',', 'ele', 'in', 'enumerate', '(', 'test_tup', ')', ':', 'if', 'not', 'isinstance', '(', 'ele', ',', 'tuple', ')', ':', 'res', '=', 'res', '+', '(', 'ele', ',', ')', 'print', '(', '""Elements after removal of nested records : ""', '+', 'str', '(', 'res', ')', ')']"
1896,"['write', 'python', 'program', 'reverse', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'ini_array', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ',', '6', ',', '4', ',', '5', ']', ')', 'print', '(', '""initial array""', ',', 'str', '(', 'ini_array', ')', ')', 'print', '(', '""type of ini_array""', ',', 'type', '(', 'ini_array', ')', ')', 'res', '=', 'ini_array', '[', ':', ':', '-', '1', ']', 'print', '(', '""final array""', ',', 'str', '(', 'res', ')', ')']"
1897,"['write', 'python', 'program', 'display', 'half', 'diamond', 'pattern', 'number', 'star', 'border']","['def', 'display', '(', 'n', ')', ':', 'print', '(', '""*""', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'for', 'j', 'in', 'range', '(', '1', ',', 'i', '+', '1', ')', ':', 'print', '(', 'j', ',', 'end', '=', '""""', ')', 'for', 'j', 'in', 'range', '(', 'i', '-', '1', ',', '0', ',', '-', '1', ')', ':', 'print', '(', 'j', ',', 'end', '=', '""""', ')', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'print', '(', ')', 'for', 'i', 'in', 'range', '(', 'n', '-', '1', ',', '0', ',', '-', '1', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'for', 'j', 'in', 'range', '(', '1', ',', 'i', '+', '1', ')', ':', 'print', '(', 'j', ',', 'end', '=', '""""', ')', 'for', 'j', 'in', 'range', '(', 'i', '-', '1', ',', '0', ',', '-', '1', ')', ':', 'print', '(', 'j', ',', 'end', '=', '""""', ')', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'print', '(', ')', 'print', '(', '""*""', ')', 'n', '=', '5', 'print', '(', ""'\\nFor n ='"", ',', 'n', ')', 'display', '(', 'n', ')', 'n', '=', '3', 'print', '(', ""'\\nFor n ='"", ',', 'n', ')', 'display', '(', 'n', ')']"
1898,"['collapse', 'multiple', 'column', 'panda', 'python']","['import', 'pandas', 'as', 'pd', 'n', '=', '3', 'Sample_1', '=', '[', '57', ',', '51', ',', '6', ']', 'Sample_2', '=', '[', '92', ',', '16', ',', '19', ']', 'Sample_3', '=', '[', '15', ',', '93', ',', '71', ']', 'Sample_4', '=', '[', '28', ',', '73', ',', '31', ']', 'sample_id', '=', 'zip', '(', '[', '""S""', ']', '*', 'n', ',', 'list', '(', 'range', '(', '1', ',', 'n', '+', '1', ')', ')', ')', 's_names', '=', '[', ""''"", '.', 'join', '(', '[', 'w', '[', '0', ']', ',', 'str', '(', 'w', '[', '1', ']', ')', ']', ')', 'for', 'w', 'in', 'sample_id', ']', 'd', '=', '{', ""'s_names'"", ':', 's_names', ',', ""'Sample_1'"", ':', 'Sample_1', ',', ""'Sample_2'"", ':', 'Sample_2', ',', ""'Sample_3'"", ':', 'Sample_3', ',', ""'Sample_4'"", ':', 'Sample_4', '}', 'df_1', '=', 'pd', '.', 'DataFrame', '(', 'd', ')', 'mapping', '=', '{', ""'Sample_1'"", ':', ""'Result_1'"", ',', ""'Sample_2'"", ':', ""'Result_1'"", ',', ""'Sample_3'"", ':', ""'Result_2'"", ',', ""'Sample_4'"", ':', ""'Result_2'"", '}', 'df', '=', 'df_1', '.', 'set_index', '(', ""'s_names'"", ')', '.', 'groupby', '(', 'mapping', ',', 'axis', '=', '1', ')', '.', 'sum', '(', ')', 'df', '.', 'reset_index', '(', 'level', '=', '0', ')']"
1899,"['write', 'python', 'program', 'insertion', 'beginning', 'ordereddict']","['from', 'collections', 'import', 'OrderedDict', 'iniordered_dict', '=', 'OrderedDict', '(', '[', '(', ""'akshat'"", ',', ""'1'"", ')', ',', '(', ""'nikhil'"", ',', ""'2'"", ')', ']', ')', 'iniordered_dict', '.', 'update', '(', '{', ""'manjeet'"", ':', ""'3'"", '}', ')', 'iniordered_dict', '.', 'move_to_end', '(', ""'manjeet'"", ',', 'last', '=', 'False', ')', 'print', '(', '""Resultant Dictionary : ""', '+', 'str', '(', 'iniordered_dict', ')', ')']"
1900,"['using', 'timedelta', 'period', 'create', 'datetime', 'based', 'index', 'panda', 'python']","['import', 'pandas', 'as', 'pd', 'ts', '=', 'pd', '.', 'Timestamp', '(', ""'02-06-2018'"", ')', 'print', '(', 'ts', ')']"
1901,"['write', 'python', 'program', 'sort', 'tuples', 'total', 'digit']","['def', 'count_digs', '(', 'tup', ')', ':', 'return', 'sum', '(', '[', 'len', '(', 'str', '(', 'ele', ')', ')', 'for', 'ele', 'in', 'tup', ']', ')', 'test_list', '=', '[', '(', '3', ',', '4', ',', '6', ',', '723', ')', ',', '(', '1', ',', '2', ')', ',', '(', '12345', ',', ')', ',', '(', '134', ',', '234', ',', '34', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'test_list', '.', 'sort', '(', 'key', '=', 'count_digs', ')', 'print', '(', '""Sorted tuples : ""', '+', 'str', '(', 'test_list', ')', ')']"
1902,"['write', 'python', 'program', 'reverse', 'stack']","['class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'Elements', '=', '[', ']', 'def', 'push', '(', 'self', ',', 'value', ')', ':', 'self', '.', 'Elements', '.', 'append', '(', 'value', ')', 'def', 'pop', '(', 'self', ')', ':', 'return', 'self', '.', 'Elements', '.', 'pop', '(', ')', 'def', 'empty', '(', 'self', ')', ':', 'return', 'self', '.', 'Elements', '==', '[', ']', 'def', 'show', '(', 'self', ')', ':', 'for', 'value', 'in', 'reversed', '(', 'self', '.', 'Elements', ')', ':', 'print', '(', 'value', ')', 'def', 'BottomInsert', '(', 's', ',', 'value', ')', ':', 'if', 's', '.', 'empty', '(', ')', ':', 's', '.', 'push', '(', 'value', ')', 'else', ':', 'popped', '=', 's', '.', 'pop', '(', ')', 'BottomInsert', '(', 's', ',', 'value', ')', 's', '.', 'push', '(', 'popped', ')', 'def', 'Reverse', '(', 's', ')', ':', 'if', 's', '.', 'empty', '(', ')', ':', 'pass', 'else', ':', 'popped', '=', 's', '.', 'pop', '(', ')', 'Reverse', '(', 's', ')', 'BottomInsert', '(', 's', ',', 'popped', ')', 'stk', '=', 'Stack', '(', ')', 'stk', '.', 'push', '(', '1', ')', 'stk', '.', 'push', '(', '2', ')', 'stk', '.', 'push', '(', '3', ')', 'stk', '.', 'push', '(', '4', ')', 'stk', '.', 'push', '(', '5', ')', 'print', '(', '""Original Stack""', ')', 'stk', '.', 'show', '(', ')', 'print', '(', '""\\nStack after Reversing""', ')', 'Reverse', '(', 'stk', ')', 'stk', '.', 'show', '(', ')']"
1903,"['explicitly', 'define', 'datatype', 'python', 'function']","['def', 'add', '(', 'num1', ',', 'num2', ')', ':', 'print', '(', '""Datatype of num1 is ""', ',', 'type', '(', 'num1', ')', ')', 'print', '(', '""Datatype of num2 is ""', ',', 'type', '(', 'num2', ')', ')', 'return', 'num1', '+', 'num2', 'print', '(', 'add', '(', '2', ',', '3', ')', ')', 'print', '(', 'add', '(', 'float', '(', '2', ')', ',', 'float', '(', '3', ')', ')', ')']"
1904,"['numpy', 'method', 'python']","['import', 'numpy', 'as', 'geek', 'arr', '=', '[', '[', '0', ',', '1', ',', '2', ',', '3', ',', '0', ']', ',', '[', '0', ',', '5', ',', '6', ',', '0', ',', '7', ']', ']', 'gfg', '=', 'geek', '.', 'count_nonzero', '(', 'arr', ')', 'print', '(', 'gfg', ')']"
1905,"['getting', 'frequency', 'count', 'column', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', '[', ""'foo'"", ',', ""'bar'"", ',', ""'g2g'"", ',', ""'g2g'"", ',', ""'g2g'"", ',', ""'bar'"", ',', ""'bar'"", ',', ""'foo'"", ',', ""'bar'"", ']', ',', ""'B'"", ':', '[', ""'a'"", ',', ""'b'"", ',', ""'a'"", ',', ""'b'"", ',', ""'b'"", ',', ""'b'"", ',', ""'a'"", ',', ""'a'"", ',', ""'b'"", ']', '}', ')', 'count', '=', 'df', '[', ""'A'"", ']', '.', 'value_counts', '(', ')', 'print', '(', 'count', ')']"
1906,"['write', 'python', 'program', 'reverse', 'content', 'file', 'store', 'another', 'file']","['f1', '=', 'open', '(', '""output1.txt""', ',', '""w""', ')', 'with', 'open', '(', '""file.txt""', ',', '""r""', ')', 'as', 'myfile', ':', 'data', '=', 'myfile', '.', 'read', '(', ')', 'data_1', '=', 'data', '[', ':', ':', '-', '1', ']', 'f1', '.', 'write', '(', 'data_1', ')', 'f1', '.', 'close', '(', ')']"
1907,"['write', 'python', 'program', 'sort', 'list', 'tuples', 'second', 'item']","['def', 'Sort_Tuple', '(', 'tup', ')', ':', 'lst', '=', 'len', '(', 'tup', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'lst', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'lst', '-', 'i', '-', '1', ')', ':', 'if', '(', 'tup', '[', 'j', ']', '[', '1', ']', '>', 'tup', '[', 'j', '+', '1', ']', '[', '1', ']', ')', ':', 'temp', '=', 'tup', '[', 'j', ']', 'tup', '[', 'j', ']', '=', 'tup', '[', 'j', '+', '1', ']', 'tup', '[', 'j', '+', '1', ']', '=', 'temp', 'return', 'tup', 'tup', '=', '[', '(', ""'for'"", ',', '24', ')', ',', '(', ""'is'"", ',', '10', ')', ',', '(', ""'Geeks'"", ',', '28', ')', ',', '(', ""'Geeksforgeeks'"", ',', '5', ')', ',', '(', ""'portal'"", ',', '20', ')', ',', '(', ""'a'"", ',', '15', ')', ']', 'print', '(', 'Sort_Tuple', '(', 'tup', ')', ')']"
1908,"['write', 'python', 'program', 'group', 'similar', 'element', 'matrix']","['from', 'itertools', 'import', 'groupby', 'test_list', '=', '[', '1', ',', '3', ',', '5', ',', '1', ',', '3', ',', '2', ',', '5', ',', '4', ',', '2', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', 'list', '(', 'val', ')', 'for', 'key', ',', 'val', 'in', 'groupby', '(', 'sorted', '(', 'test_list', ')', ')', ']', 'print', '(', '""Matrix after grouping : ""', '+', 'str', '(', 'res', ')', ')']"
1909,"['scrape', 'linkedin', 'using', 'selenium', 'beautiful', 'soup', 'python']","['from', 'selenium', 'import', 'webdriver', 'from', 'bs4', 'import', 'BeautifulSoup', 'import', 'time', 'driver', '=', 'webdriver', '.', 'Chrome', '(', '""Enter-Location-Of-Your-Web-Driver""', ')', 'driver', '.', 'get', '(', '""https://linkedin.com/uas/login""', ')', 'time', '.', 'sleep', '(', '5', ')', 'username', '=', 'driver', '.', 'find_element_by_id', '(', '""username""', ')', 'username', '.', 'send_keys', '(', '""User_email""', ')', 'pword', '=', 'driver', '.', 'find_element_by_id', '(', '""password""', ')', 'pword', '.', 'send_keys', '(', '""User_pass""', ')', 'driver', '.', 'find_element_by_xpath', '(', '""//button[@type=\'submit\']""', ')', '.', 'click', '(', ')']"
1910,"['randomly', 'select', 'row', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', '{', ""'Name'"", ':', '[', ""'Jai'"", ',', ""'Princi'"", ',', ""'Gaurav'"", ',', ""'Anuj'"", ',', ""'Geeku'"", ']', ',', ""'Age'"", ':', '[', '27', ',', '24', ',', '22', ',', '32', ',', '15', ']', ',', ""'Address'"", ':', '[', ""'Delhi'"", ',', ""'Kanpur'"", ',', ""'Allahabad'"", ',', ""'Kannauj'"", ',', ""'Noida'"", ']', ',', ""'Qualification'"", ':', '[', ""'Msc'"", ',', ""'MA'"", ',', ""'MCA'"", ',', ""'Phd'"", ',', ""'10th'"", ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', ')', 'df']"
1911,"['divide', 'polynomial', 'another', 'using', 'numpy', 'python']","['import', 'numpy', 'px', '=', '(', '5', ',', '-', '2', ',', '5', ')', 'gx', '=', '(', '2', ',', '1', ',', '0', ')', 'qx', ',', 'rx', '=', 'numpy', '.', 'polynomial', '.', 'polynomial', '.', 'polydiv', '(', 'px', ',', 'gx', ')', 'print', '(', 'qx', ')', 'print', '(', 'rx', ')']"
1912,"['write', 'python', 'program', 'numpy', 'matrixsum']","['import', 'numpy', 'as', 'np', 'gfg', '=', 'np', '.', 'matrix', '(', ""'[4, 1; 12, 3]'"", ')', 'geek', '=', 'gfg', '.', 'sum', '(', ')', 'print', '(', 'geek', ')']"
1913,"['execute', 'string', 'code', 'python']","['def', 'exec_code', '(', ')', ':', 'LOC', '=', '""""""\ndef factorial(num):\n\xa0\xa0\xa0\xa0fact=1\n\xa0\xa0\xa0\xa0for i in range(1,num+1):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fact = fact*i\n\xa0\xa0\xa0\xa0return fact\nprint(factorial(5))\n""""""', 'exec', '(', 'LOC', ')', 'exec_code', '(', ')']"
1914,"['write', 'python', 'program', 'remove', 'suffix', 'string', 'list']","['test_list', '=', '[', ""'allx'"", ',', ""'lovex'"", ',', ""'gfg'"", ',', ""'xit'"", ',', ""'is'"", ',', ""'bestx'"", ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'suff', '=', ""'x'"", 'for', 'word', 'in', 'test_list', '[', ':', ']', ':', 'if', 'word', '.', 'endswith', '(', 'suff', ')', ':', 'test_list', '.', 'remove', '(', 'word', ')', 'print', '(', '""List after removal of suffix elements : ""', '+', 'str', '(', 'test_list', ')', ')']"
1915,['python'],"['import', 'numpy', 'as', 'np', 'p1', '=', 'np', '.', 'poly1d', '(', '[', '1', ',', '2', ']', ')', 'p2', '=', 'np', '.', 'poly1d', '(', '[', '4', ',', '9', ',', '5', ',', '4', ']', ')', 'print', '(', '""P1 : ""', ',', 'p1', ')', 'print', '(', '""\\n p2 : \\n""', ',', 'p2', ')', 'print', '(', '""\\n\\np1 at x = 2 : ""', ',', 'p1', '(', '2', ')', ')', 'print', '(', '""p2 at x = 2 : ""', ',', 'p2', '(', '2', ')', ')', 'print', '(', '""\\n\\nRoots of P1 : ""', ',', 'p1', '.', 'r', ')', 'print', '(', '""Roots of P2 : ""', ',', 'p2', '.', 'r', ')', 'print', '(', '""\\n\\nCoefficients of P1 : ""', ',', 'p1', '.', 'c', ')', 'print', '(', '""Coefficients of P2 : ""', ',', 'p2', '.', 'coeffs', ')', 'print', '(', '""\\n\\nOrder / Degree of P1 : ""', ',', 'p1', '.', 'o', ')', 'print', '(', '""Order / Degree of P2 : ""', ',', 'p2', '.', 'order', ')']"
1916,"['write', 'python', 'code', 'time', 'complexity', 'plot', 'heap', 'sort']","['import', 'time', 'from', 'numpy', '.', 'random', 'import', 'seed', 'from', 'numpy', '.', 'random', 'import', 'randint', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'def', 'left', '(', 'i', ')', ':', 'return', '2', '*', 'i', '+', '1', 'def', 'right', '(', 'i', ')', ':', 'return', '2', '*', 'i', '+', '2', 'def', 'heapSize', '(', 'A', ')', ':', 'return', 'len', '(', 'A', ')', '-', '1', 'def', 'MaxHeapify', '(', 'A', ',', 'i', ')', ':', 'l', '=', 'left', '(', 'i', ')', 'r', '=', 'right', '(', 'i', ')', 'if', 'l', '<=', 'heapSize', '(', 'A', ')', 'and', 'A', '[', 'l', ']', '>', 'A', '[', 'i', ']', ':', 'largest', '=', 'l', 'else', ':', 'largest', '=', 'i', 'if', 'r', '<=', 'heapSize', '(', 'A', ')', 'and', 'A', '[', 'r', ']', '>', 'A', '[', 'largest', ']', ':', 'largest', '=', 'r', 'if', 'largest', '!=', 'i', ':', 'A', '[', 'i', ']', ',', 'A', '[', 'largest', ']', '=', 'A', '[', 'largest', ']', ',', 'A', '[', 'i', ']', 'MaxHeapify', '(', 'A', ',', 'largest', ')', 'def', 'BuildMaxHeap', '(', 'A', ')', ':', 'for', 'i', 'in', 'range', '(', 'int', '(', 'heapSize', '(', 'A', ')', '/', '2', ')', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'MaxHeapify', '(', 'A', ',', 'i', ')', 'def', 'HeapSort', '(', 'A', ')', ':', 'BuildMaxHeap', '(', 'A', ')', 'B', '=', 'list', '(', ')', 'heapSize1', '=', 'heapSize', '(', 'A', ')', 'for', 'i', 'in', 'range', '(', 'heapSize', '(', 'A', ')', ',', '0', ',', '-', '1', ')', ':', 'A', '[', '0', ']', ',', 'A', '[', 'i', ']', '=', 'A', '[', 'i', ']', ',', 'A', '[', '0', ']', 'B', '.', 'append', '(', 'A', '[', 'heapSize1', ']', ')', 'A', '=', 'A', '[', ':', '-', '1', ']', 'heapSize1', '=', 'heapSize1', '-', '1', 'MaxHeapify', '(', 'A', ',', '0', ')', 'elements', '=', 'list', '(', ')', 'times', '=', 'list', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '10', ')', ':', 'a', '=', 'randint', '(', '0', ',', '1000', '*', 'i', ',', '1000', '*', 'i', ')', 'start', '=', 'time', '.', 'clock', '(', ')', 'HeapSort', '(', 'a', ')', 'end', '=', 'time', '.', 'clock', '(', ')', 'print', '(', 'len', '(', 'a', ')', ',', '""Elements Sorted by HeapSort in ""', ',', 'end', '-', 'start', ')', 'elements', '.', 'append', '(', 'len', '(', 'a', ')', ')', 'times', '.', 'append', '(', 'end', '-', 'start', ')', 'plt', '.', 'xlabel', '(', ""'List Length'"", ')', 'plt', '.', 'ylabel', '(', ""'Time Complexity'"", ')', 'plt', '.', 'plot', '(', 'elements', ',', 'times', ',', 'label', '=', ""'Heap Sort'"", ')', 'plt', '.', 'grid', '(', ')', 'plt', '.', 'legend', '(', ')', 'plt', '.', 'show', '(', ')']"
1917,"['convert', 'json', 'data', 'custom', 'python', 'object']","['import', 'json', 'from', 'collections', 'import', 'namedtuple', 'data', '=', '\'{""name"" : ""Geek"", ""id"" : 1, ""location"" : ""Mumbai""}\'', 'x', '=', 'json', '.', 'loads', '(', 'data', ',', 'object_hook', '=', 'lambda', 'd', ':', 'namedtuple', '(', ""'X'"", ',', 'd', '.', 'keys', '(', ')', ')', '(', '*', 'd', '.', 'values', '(', ')', ')', ')', 'print', '(', 'x', '.', 'name', ',', 'x', '.', 'id', ',', 'x', '.', 'location', ')']"
1918,"['write', 'python', 'counter', 'dictionary', 'intersection', 'example', 'make', 'string', 'using', 'deletion', 'rearrangement']","['from', 'collections', 'import', 'Counter', 'def', 'makeString', '(', 'str1', ',', 'str2', ')', ':', 'dict1', '=', 'Counter', '(', 'str1', ')', 'dict2', '=', 'Counter', '(', 'str2', ')', 'result', '=', 'dict1', '&', 'dict2', 'return', 'result', '==', 'dict1', 'if', '__name__', '==', '""__main__""', ':', 'str1', '=', ""'ABHISHEKsinGH'"", 'str2', '=', ""'gfhfBHkooIHnfndSHEKsiAnG'"", 'if', '(', 'makeString', '(', 'str1', ',', 'str2', ')', '==', 'True', ')', ':', 'print', '(', '""Possible""', ')', 'else', ':', 'print', '(', '""Not Possible""', ')']"
1919,"['selecting', 'row', 'panda', 'dataframe', 'based', 'condition', 'python']","['import', 'pandas', 'as', 'pd', 'record', '=', '{', ""'Name'"", ':', '[', ""'Ankit'"", ',', ""'Amit'"", ',', ""'Aishwarya'"", ',', ""'Priyanka'"", ',', ""'Priya'"", ',', ""'Shaurya'"", ']', ',', ""'Age'"", ':', '[', '21', ',', '19', ',', '20', ',', '18', ',', '17', ',', '21', ']', ',', ""'Stream'"", ':', '[', ""'Math'"", ',', ""'Commerce'"", ',', ""'Science'"", ',', ""'Math'"", ',', ""'Math'"", ',', ""'Science'"", ']', ',', ""'Percentage'"", ':', '[', '88', ',', '92', ',', '95', ',', '70', ',', '65', ',', '78', ']', '}', 'dataframe', '=', 'pd', '.', 'DataFrame', '(', 'record', ',', 'columns', '=', '[', ""'Name'"", ',', ""'Age'"", ',', ""'Stream'"", ',', ""'Percentage'"", ']', ')', 'print', '(', '""Given Dataframe :\\n""', ',', 'dataframe', ')', 'rslt_df', '=', 'dataframe', '[', 'dataframe', '[', ""'Percentage'"", ']', '>', '80', ']', 'print', '(', ""'\\nResult dataframe :\\n'"", ',', 'rslt_df', ')']"
1920,"['write', 'python', 'program', 'find', 'power', 'number', 'using', 'recursion']","['def', 'power', '(', 'N', ',', 'P', ')', ':', 'if', 'P', '==', '0', ':', 'return', '1', 'elif', 'P', '==', '1', ':', 'return', 'N', 'else', ':', 'return', '(', 'N', '*', 'power', '(', 'N', ',', 'P', '-', '1', ')', ')', 'N', '=', '5', 'P', '=', '2', 'print', '(', 'power', '(', 'N', ',', 'P', ')', ')']"
1921,"['write', 'python', 'program', 'stack', 'stackswitcher', 'gtk']","['import', 'gi', 'gi', '.', 'require_version', '(', '""Gtk""', ',', '""3.0""', ')', 'from', 'gi', '.', 'repository', 'import', 'Gtk', 'class', 'StackWindow', '(', 'Gtk', '.', 'Window', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'Gtk', '.', 'Window', '.', '__init__', '(', 'self', ',', 'title', '=', '""Geeks for Geeks""', ')', 'self', '.', 'set_border_width', '(', '10', ')', 'vbox', '=', 'Gtk', '.', 'Box', '(', 'orientation', '=', 'Gtk', '.', 'Orientation', '.', 'VERTICAL', ',', 'spacing', '=', '100', ')', 'self', '.', 'add', '(', 'vbox', ')', 'stack', '=', 'Gtk', '.', 'Stack', '(', ')', 'stack', '.', 'set_transition_type', '(', 'Gtk', '.', 'StackTransitionType', '.', 'SLIDE_LEFT_RIGHT', ')', 'stack', '.', 'set_transition_duration', '(', '1000', ')', 'checkbutton', '=', 'Gtk', '.', 'CheckButton', '(', '""Yes""', ')', 'stack', '.', 'add_titled', '(', 'checkbutton', ',', '""check""', ',', '""Check Button""', ')', 'label', '=', 'Gtk', '.', 'Label', '(', ')', 'label', '.', 'set_markup', '(', '""<big>Hello World</big>""', ')', 'stack', '.', 'add_titled', '(', 'label', ',', '""label""', ',', '""Label""', ')', 'stack_switcher', '=', 'Gtk', '.', 'StackSwitcher', '(', ')', 'stack_switcher', '.', 'set_stack', '(', 'stack', ')', 'vbox', '.', 'pack_start', '(', 'stack_switcher', ',', 'True', ',', 'True', ',', '0', ')', 'vbox', '.', 'pack_start', '(', 'stack', ',', 'True', ',', 'True', ',', '0', ')', 'win', '=', 'StackWindow', '(', ')', 'win', '.', 'connect', '(', '""destroy""', ',', 'Gtk', '.', 'main_quit', ')', 'win', '.', 'show_all', '(', ')', 'Gtk', '.', 'main', '(', ')']"
1922,"['assign', 'function', 'variable', 'python']","['def', 'a', '(', ')', ':', 'print', '(', '""GFG""', ')', 'var', '=', 'a', 'var', '(', ')']"
1923,"['looping', 'button', 'tkinter', 'python']","['from', 'tkinter', 'import', '*', 'root', '=', 'Tk', '(', ')', 'root', '.', 'title', '(', '""GeekForGeeks""', ')', 'root', '.', 'geometry', '(', ""'400x400'"", ')', 'root', '.', 'mainloop', '(', ')']"
1924,"['remove', 'column', 'numpy', 'array', 'contains', 'nonnumeric', 'value', 'python']","['import', 'numpy', 'as', 'np', 'n_arr', '=', 'np', '.', 'array', '(', '[', '[', '10.5', ',', '22.5', ',', 'np', '.', 'nan', ']', ',', '[', '41', ',', '52.5', ',', 'np', '.', 'nan', ']', ']', ')', 'print', '(', '""Given array:""', ')', 'print', '(', 'n_arr', ')', 'print', '(', '""\\nRemove all columns containing non-numeric elements ""', ')', 'print', '(', 'n_arr', '[', ':', ',', '~', 'np', '.', 'isnan', '(', 'n_arr', ')', '.', 'any', '(', 'axis', '=', '0', ')', ']', ')']"
1925,"['write', 'python', 'program', 'interchange', 'first', 'last', 'element', 'list']","['def', 'swapList', '(', 'newList', ')', ':', 'size', '=', 'len', '(', 'newList', ')', 'temp', '=', 'newList', '[', '0', ']', 'newList', '[', '0', ']', '=', 'newList', '[', 'size', '-', '1', ']', 'newList', '[', 'size', '-', '1', ']', '=', 'temp', 'return', 'newList', 'newList', '=', '[', '12', ',', '35', ',', '9', ',', '56', ',', '24', ']', 'print', '(', 'swapList', '(', 'newList', ')', ')']"
1926,"['sort', 'data', 'column', 'csv', 'file', 'python']","['import', 'pandas', 'as', 'pandasForSortingCSV', 'csvData', '=', 'pandasForSortingCSV', '.', 'read_csv', '(', '""sample.csv""', ')', 'print', '(', '""\\nBefore sorting:""', ')', 'print', '(', 'csvData', ')', 'csvData', '.', 'sort_values', '(', '[', '""Salary""', ']', ',', 'axis', '=', '0', ',', 'ascending', '=', '[', 'False', ']', ',', 'inplace', '=', 'True', ')', 'print', '(', '""\\nAfter sorting:""', ')', 'print', '(', 'csvData', ')']"
1927,"['write', 'python', 'program', 'reverse', 'sort', 'string']","['test_string', '=', '""geekforgeeks""', 'print', '(', '""The original string : ""', '+', 'str', '(', 'test_string', ')', ')', 'res', '=', ""''"", '.', 'join', '(', 'sorted', '(', 'test_string', ',', 'reverse', '=', 'True', ')', ')', 'print', '(', '""String after reverse sorting : ""', '+', 'str', '(', 'res', ')', ')']"
1928,"['scrape', 'pdf', 'file', 'website', 'python']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup', 'import', 'io', 'from', 'PyPDF2', 'import', 'PdfFileReader']"
1929,"['multiply', 'matrix', 'complex', 'number', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '2', '+', '3j', ',', '4', '+', '5j', ']', ')', 'print', '(', '""Printing First matrix:""', ')', 'print', '(', 'x', ')', 'y', '=', 'np', '.', 'array', '(', '[', '8', '+', '7j', ',', '5', '+', '6j', ']', ')', 'print', '(', '""Printing Second matrix:""', ')', 'print', '(', 'y', ')', 'z', '=', 'np', '.', 'vdot', '(', 'x', ',', 'y', ')', 'print', '(', '""Product of first and second matrices are:""', ')', 'print', '(', 'z', ')']"
1930,"['calculate', 'euclidean', 'distance', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'point1', '=', 'np', '.', 'array', '(', '(', '1', ',', '2', ',', '3', ')', ')', 'point2', '=', 'np', '.', 'array', '(', '(', '1', ',', '1', ',', '1', ')', ')', 'dist', '=', 'np', '.', 'linalg', '.', 'norm', '(', 'point1', '-', 'point2', ')', 'print', '(', 'dist', ')']"
1931,"['write', 'python', 'program', 'swap', 'element', 'string', 'list']","['test_list', '=', '[', ""'Gfg'"", ',', ""'is'"", ',', ""'best'"", ',', ""'for'"", ',', ""'Geeks'"", ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', 'sub', '.', 'replace', '(', ""'G'"", ',', ""'-'"", ')', '.', 'replace', '(', ""'e'"", ',', ""'G'"", ')', '.', 'replace', '(', ""'-'"", ',', ""'e'"", ')', 'for', 'sub', 'in', 'test_list', ']', 'print', '(', '""List after performing character swaps : ""', '+', 'str', '(', 'res', ')', ')']"
1932,"['write', 'python', 'program', 'kth', 'column', 'product', 'tuple', 'list']","['def', 'prod', '(', 'val', ')', ':', 'res', '=', '1', 'for', 'ele', 'in', 'val', ':', 'res', '*=', 'ele', 'return', 'res', 'test_list', '=', '[', '(', '5', ',', '6', ',', '7', ')', ',', '(', '1', ',', '3', ',', '5', ')', ',', '(', '8', ',', '9', ',', '19', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '2', 'res', '=', 'prod', '(', '[', 'sub', '[', 'K', ']', 'for', 'sub', 'in', 'test_list', ']', ')', 'print', '(', '""Product of Kth Column of Tuple List : ""', '+', 'str', '(', 'res', ')', ')']"
1933,"['write', 'python', 'program', 'create', 'list', 'tuples', 'given', 'list', 'number', 'cube', 'tuple']","['list1', '=', '[', '1', ',', '2', ',', '5', ',', '6', ']', 'res', '=', '[', '(', 'val', ',', 'pow', '(', 'val', ',', '3', ')', ')', 'for', 'val', 'in', 'list1', ']', 'print', '(', 'res', ')']"
1934,"['change', 'current', 'working', 'directory', 'python']","['import', 'os', 'def', 'current_path', '(', ')', ':', 'print', '(', '""Current working directory before""', ')', 'print', '(', 'os', '.', 'getcwd', '(', ')', ')', 'print', '(', ')', 'current_path', '(', ')', 'os', '.', 'chdir', '(', ""'../'"", ')', 'current_path', '(', ')']"
1935,"['write', 'python', 'program', 'find', 'close', 'match', 'input', 'string', 'list']","['from', 'difflib', 'import', 'get_close_matches', 'def', 'closeMatches', '(', 'patterns', ',', 'word', ')', ':', 'print', '(', 'get_close_matches', '(', 'word', ',', 'patterns', ')', ')', 'if', '__name__', '==', '""__main__""', ':', 'word', '=', ""'appel'"", 'patterns', '=', '[', ""'ape'"", ',', ""'apple'"", ',', ""'peach'"", ',', ""'puppy'"", ']', 'closeMatches', '(', 'patterns', ',', 'word', ')']"
1936,"['write', 'python', 'program', 'find', 'fibonacci', 'series', 'upto', 'n', 'using', 'lambda']","['from', 'functools', 'import', 'reduce', 'fib', '=', 'lambda', 'n', ':', 'reduce', '(', 'lambda', 'x', ',', '_', ':', 'x', '+', '[', 'x', '[', '-', '1', ']', '+', 'x', '[', '-', '2', ']', ']', ',', 'range', '(', 'n', '-', '2', ')', ',', '[', '0', ',', '1', ']', ')', 'print', '(', 'fib', '(', '5', ')', ')']"
1937,"['sorting', 'csv', 'object', 'date', 'python']","['import', 'pandas', 'as', 'pd']"
1938,"['overuse', 'lambda', 'expression', 'python']","['x1', '=', '(', 'lambda', 'x', ',', 'y', ',', 'z', ':', '(', 'x', '+', 'y', ')', '*', 'z', ')', '(', '1', ',', '2', ',', '3', ')', 'print', '(', 'x1', ')', 'x2', '=', '(', 'lambda', 'x', ',', 'y', ',', 'z', ':', '(', 'x', '+', 'y', ')', 'if', '(', 'z', '==', '0', ')', 'else', '(', 'x', '*', 'y', ')', ')', '(', '1', ',', '2', ',', '3', ')', 'print', '(', 'x2', ')']"
1939,"['difference', 'two', 'column', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'df1', '=', '{', ""'Name'"", ':', '[', ""'George'"", ',', ""'Andrea'"", ',', ""'micheal'"", ',', ""'maggie'"", ',', ""'Ravi'"", ',', ""'Xien'"", ',', ""'Jalpa'"", ']', ',', ""'score1'"", ':', '[', '62', ',', '47', ',', '55', ',', '74', ',', '32', ',', '77', ',', '86', ']', ',', ""'score2'"", ':', '[', '45', ',', '78', ',', '44', ',', '89', ',', '66', ',', '49', ',', '72', ']', '}', 'df1', '=', 'pd', '.', 'DataFrame', '(', 'df1', ',', 'columns', '=', '[', ""'Name'"", ',', ""'score1'"", ',', ""'score2'"", ']', ')', 'print', '(', '""Given Dataframe :\\n""', ',', 'df1', ')', 'df1', '[', ""'Score_diff'"", ']', '=', 'df1', '[', ""'score1'"", ']', '-', 'df1', '[', ""'score2'"", ']', 'print', '(', '""\\nDifference of score1 and score2 :\\n""', ',', 'df1', ')']"
1940,"['open', 'computer', 'drive', 'like', 'c', 'e', 'using', 'python']","['import', 'os', 'query', '=', 'input', '(', '""Which drive you have to open ? C , D or E: \\n""', ')', 'if', '""C""', 'in', 'query', 'or', '""c""', 'in', 'query', ':', 'os', '.', 'startfile', '(', '""C:""', ')', 'elif', '""D""', 'in', 'query', 'or', '""d""', 'in', 'query', ':', 'os', '.', 'startfile', '(', '""D:""', ')', 'elif', '""E""', 'in', 'query', 'or', '""e""', 'in', 'query', ':', 'os', '.', 'startfile', '(', '""E:""', ')', 'else', ':', 'print', '(', '""Wrong Input""', ')']"
1941,"['write', 'python', 'dictionary', 'check', 'binary', 'representation', 'two', 'number', 'anagram']","['from', 'collections', 'import', 'Counter', 'def', 'checkAnagram', '(', 'num1', ',', 'num2', ')', ':', 'bin1', '=', 'bin', '(', 'num1', ')', '[', '2', ':', ']', 'bin2', '=', 'bin', '(', 'num2', ')', '[', '2', ':', ']', 'zeros', '=', 'abs', '(', 'len', '(', 'bin1', ')', '-', 'len', '(', 'bin2', ')', ')', 'if', '(', 'len', '(', 'bin1', ')', '>', 'len', '(', 'bin2', ')', ')', ':', 'bin2', '=', 'zeros', '*', ""'0'"", '+', 'bin2', 'else', ':', 'bin1', '=', 'zeros', '*', ""'0'"", '+', 'bin1', 'dict1', '=', 'Counter', '(', 'bin1', ')', 'dict2', '=', 'Counter', '(', 'bin2', ')', 'if', 'dict1', '==', 'dict2', ':', 'print', '(', ""'Yes'"", ')', 'else', ':', 'print', '(', ""'No'"", ')', 'if', '__name__', '==', '""__main__""', ':', 'num1', '=', '8', 'num2', '=', '4', 'checkAnagram', '(', 'num1', ',', 'num2', ')']"
1942,"['write', 'python', 'program', 'print', 'line', 'containing', 'given', 'string', 'file']","['file_name', '=', 'input', '(', '""Enter The File\'s Name: ""', ')', 'try', ':', 'file_read', '=', 'open', '(', 'file_name', ',', '""r""', ')', 'text', '=', 'input', '(', '""Enter the String: ""', ')', 'lines', '=', 'file_read', '.', 'readlines', '(', ')', 'new_list', '=', '[', ']', 'idx', '=', '0', 'for', 'line', 'in', 'lines', ':', 'if', 'text', 'in', 'line', ':', 'new_list', '.', 'insert', '(', 'idx', ',', 'line', ')', 'idx', '+=', '1', 'file_read', '.', 'close', '(', ')', 'if', 'len', '(', 'new_list', ')', '==', '0', ':', 'print', '(', '""\\n\\""""', '+', 'text', '+', '""\\"" is not found in \\""""', '+', 'file_name', '+', '""\\""!""', ')', 'else', ':', 'lineLen', '=', 'len', '(', 'new_list', ')', 'print', '(', '""\\n**** Lines containing \\""""', '+', 'text', '+', '""\\"" ****\\n""', ')', 'for', 'i', 'in', 'range', '(', 'lineLen', ')', ':', 'print', '(', 'end', '=', 'new_list', '[', 'i', ']', ')', 'print', '(', ')', 'except', ':', 'print', '(', '""\\nThe file doesn\'t exist!""', ')']"
1943,"['numpyhistogram', 'method', 'python']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'random', '.', 'randint', '(', '100', ',', 'size', '=', '(', '50', ')', ')', 'np', '.', 'histogram', '(', 'a', ',', 'bins', '=', '[', '0', ',', '10', ',', '20', ',', '30', ',', '40', ',', '50', ',', '60', ',', '70', ',', '80', ',', '90', ',', '100', ']', ')', 'hist', ',', 'bins', '=', 'np', '.', 'histogram', '(', 'a', ',', 'bins', '=', '[', '0', ',', '10', ',', '20', ',', '30', ',', '40', ',', '50', ',', '60', ',', '70', ',', '80', ',', '90', ',', '100', ']', ')', 'print', '(', ')', 'print', '(', 'hist', ')', 'print', '(', 'bins', ')', 'print', '(', ')']"
1944,"['write', 'python', 'program', 'find', 'file', 'particular', 'extension', 'using', 'regex']","['import', 're', 'filenames', '=', '[', '""gfg.html""', ',', '""geeks.xml""', ',', '""computer.txt""', ',', '""geeksforgeeks.jpg""', ']', 'for', 'file', 'in', 'filenames', ':', 'match', '=', 're', '.', 'search', '(', '""\\.xml$""', ',', 'file', ')', 'if', 'match', ':', 'print', '(', '""The file ending with .xml is:""', ',', 'file', ')']"
1945,"['write', 'python', 'program', 'dictionary', 'value', 'mean']","['test_dict', '=', '{', '""Gfg""', ':', '4', ',', '""is""', ':', '7', ',', '""Best""', ':', '8', ',', '""for""', ':', '6', ',', '""Geeks""', ':', '10', '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'res', '=', '0', 'for', 'val', 'in', 'test_dict', '.', 'values', '(', ')', ':', 'res', '+=', 'val', 'res', '=', 'res', '/', 'len', '(', 'test_dict', ')', 'print', '(', '""The computed mean : ""', '+', 'str', '(', 'res', ')', ')']"
1946,"['iterate', 'row', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'input_df', '=', '[', '{', ""'name'"", ':', ""'Sujeet'"", ',', ""'age'"", ':', '10', '}', ',', '{', ""'name'"", ':', ""'Sameer'"", ',', ""'age'"", ':', '11', '}', ',', '{', ""'name'"", ':', ""'Sumit'"", ',', ""'age'"", ':', '12', '}', ']', 'df', '=', 'pd', '.', 'DataFrame', '(', 'input_df', ')', 'print', '(', ""'Original DataFrame: \\n'"", ',', 'df', ')', 'print', '(', ""'\\nRows iterated using iterrows() : '"", ')', 'for', 'index', ',', 'row', 'in', 'df', '.', 'iterrows', '(', ')', ':', 'print', '(', 'row', '[', ""'name'"", ']', ',', 'row', '[', ""'age'"", ']', ')']"
1947,"['write', 'python', 'program', 'right', 'rotate', 'nnumbers']","['def', 'print_pattern', '(', 'n', ')', ':', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ',', '1', ')', ':', 'for', 'j', 'in', 'range', '(', '1', ',', 'n', '+', '1', ',', '1', ')', ':', 'if', 'i', '==', 'j', ':', 'print', '(', 'j', ',', 'end', '=', '"" ""', ')', 'if', 'i', '<=', 'j', ':', 'for', 'k', 'in', 'range', '(', 'j', '+', '1', ',', 'n', '+', '1', ',', '1', ')', ':', 'print', '(', 'k', ',', 'end', '=', '"" ""', ')', 'for', 'p', 'in', 'range', '(', '1', ',', 'j', ',', '1', ')', ':', 'print', '(', 'p', ',', 'end', '=', '"" ""', ')', 'print', '(', ')', 'print_pattern', '(', '3', ')']"
1948,"['create', 'filename', 'containing', 'date', 'time', 'python']","['from', 'datetime', 'import', 'datetime', 'current_datetime', '=', 'datetime', '.', 'now', '(', ')', 'print', '(', '""Current date & time : ""', ',', 'current_datetime', ')', 'str_current_datetime', '=', 'str', '(', 'current_datetime', ')', 'file_name', '=', 'str_current_datetime', '+', '"".txt""', 'file', '=', 'open', '(', 'file_name', ',', ""'w'"", ')', 'print', '(', '""File created : ""', ',', 'file', '.', 'name', ')', 'file', '.', 'close', '(', ')']"
1949,"['numpyswapaxes', 'function', 'python']","['import', 'numpy', 'as', 'geek', 'arr', '=', 'geek', '.', 'array', '(', '[', '[', '2', ',', '4', ',', '6', ']', ']', ')', 'gfg', '=', 'geek', '.', 'swapaxes', '(', 'arr', ',', '0', ',', '1', ')', 'print', '(', 'gfg', ')']"
1950,"['convert', 'json', 'dictionary', 'python']","['import', 'json', 'with', 'open', '(', ""'data.json'"", ')', 'as', 'json_file', ':', 'data', '=', 'json', '.', 'load', '(', 'json_file', ')', 'print', '(', '""Type:""', ',', 'type', '(', 'data', ')', ')', 'print', '(', '""\\nPeople1:""', ',', 'data', '[', ""'people1'"", ']', ')', 'print', '(', '""\\nPeople2:""', ',', 'data', '[', ""'people2'"", ']', ')']"
1951,"['write', 'python', 'program', 'convert', 'list', 'list', 'dictionary']","['test_list', '=', '[', '[', ""'a'"", ',', ""'b'"", ',', '1', ',', '2', ']', ',', '[', ""'c'"", ',', ""'d'"", ',', '3', ',', '4', ']', ',', '[', ""'e'"", ',', ""'f'"", ',', '5', ',', '6', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', 'dict', '(', ')', 'for', 'sub', 'in', 'test_list', ':', 'res', '[', 'tuple', '(', 'sub', '[', ':', '2', ']', ')', ']', '=', 'tuple', '(', 'sub', '[', '2', ':', ']', ')', 'print', '(', '""The mapped Dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
1952,"['write', 'python', 'program', 'way', 'convert', 'array', 'string', 'array', 'float']","['import', 'numpy', 'as', 'np', 'ini_array', '=', 'np', '.', 'array', '(', '[', '""1.1""', ',', '""1.5""', ',', '""2.7""', ',', '""8.9""', ']', ')', 'print', '(', '""initial array""', ',', 'str', '(', 'ini_array', ')', ')', 'res', '=', 'ini_array', '.', 'astype', '(', 'np', '.', 'float', ')', 'print', '(', '""final array""', ',', 'str', '(', 'res', ')', ')']"
1953,"['scrape', 'linkedin', 'using', 'selenium', 'beautiful', 'soup', 'python']","['from', 'selenium', 'import', 'webdriver', 'from', 'bs4', 'import', 'BeautifulSoup', 'import', 'time', 'driver', '=', 'webdriver', '.', 'Chrome', '(', '""Enter-Location-Of-Your-Web-Driver""', ')', 'driver', '.', 'get', '(', '""https://linkedin.com/uas/login""', ')', 'time', '.', 'sleep', '(', '5', ')', 'username', '=', 'driver', '.', 'find_element_by_id', '(', '""username""', ')', 'username', '.', 'send_keys', '(', '""User_email""', ')', 'pword', '=', 'driver', '.', 'find_element_by_id', '(', '""password""', ')', 'pword', '.', 'send_keys', '(', '""User_pass""', ')', 'driver', '.', 'find_element_by_xpath', '(', '""//button[@type=\'submit\']""', ')', '.', 'click', '(', ')']"
1954,"['write', 'python', 'program', 'closest', 'pair', 'kth', 'index', 'element', 'tuple']","['test_list', '=', '[', '(', '3', ',', '4', ')', ',', '(', '78', ',', '76', ')', ',', '(', '2', ',', '3', ')', ',', '(', '9', ',', '8', ')', ',', '(', '19', ',', '23', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'tup', '=', '(', '17', ',', '23', ')', 'K', '=', '1', 'min_dif', ',', 'res', '=', '999999999', ',', 'None', 'for', 'idx', ',', 'val', 'in', 'enumerate', '(', 'test_list', ')', ':', 'dif', '=', 'abs', '(', 'tup', '[', 'K', '-', '1', ']', '-', 'val', '[', 'K', '-', '1', ']', ')', 'if', 'dif', '<', 'min_dif', ':', 'min_dif', ',', 'res', '=', 'dif', ',', 'idx', 'print', '(', '""The nearest tuple to Kth index element is : ""', '+', 'str', '(', 'test_list', '[', 'res', ']', ')', ')']"
1955,"['write', 'python', 'program', 'substring', 'presence', 'string', 'list']","['test_list1', '=', '[', '""Gfg""', ',', '""is""', ',', '""Best""', ']', 'test_list2', '=', '[', '""I love Gfg""', ',', '""Its Best for Geeks""', ',', '""Gfg means CS""', ']', 'print', '(', '""The original list 1 : ""', '+', 'str', '(', 'test_list1', ')', ')', 'print', '(', '""The original list 2 : ""', '+', 'str', '(', 'test_list2', ')', ')', 'res', '=', '[', ']', 'for', 'ele', 'in', 'test_list1', ':', 'temp', '=', 'False', 'for', 'sub', 'in', 'test_list2', ':', 'if', 'ele', 'in', 'sub', ':', 'temp', '=', 'True', 'break', 'res', '.', 'append', '(', 'temp', ')', 'print', '(', '""The match list : ""', '+', 'str', '(', 'res', ')', ')']"
1956,"['write', 'python', 'program', 'delete', 'specific', 'line', 'file']","['try', ':', 'with', 'open', '(', ""'months.txt'"", ',', ""'r'"", ')', 'as', 'fr', ':', 'lines', '=', 'fr', '.', 'readlines', '(', ')', 'ptr', '=', '1', 'with', 'open', '(', ""'months.txt'"", ',', ""'w'"", ')', 'as', 'fw', ':', 'for', 'line', 'in', 'lines', ':', 'if', 'ptr', '!=', '5', ':', 'fw', '.', 'write', '(', 'line', ')', 'ptr', '+=', '1', 'print', '(', '""Deleted""', ')', 'except', ':', 'print', '(', '""Oops! something error""', ')']"
1957,"['write', 'python', 'program', 'append', 'dictionary', 'key', 'value', 'order', 'dictionary']","['test_dict', '=', '{', '""Gfg""', ':', '1', ',', '""is""', ':', '3', ',', '""Best""', ':', '2', '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'res', '=', 'list', '(', 'test_dict', '.', 'keys', '(', ')', ')', '+', 'list', '(', 'test_dict', '.', 'values', '(', ')', ')', 'print', '(', '""The ordered keys and values : ""', '+', 'str', '(', 'res', ')', ')']"
1958,"['write', 'python', 'program', 'numpy', 'method']","['import', 'numpy', 'as', 'np', 'from', 'numpy', '.', 'polynomial', '.', 'polynomial', 'import', 'polygrid2d', 'c', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '3', ',', '5', ']', ',', '[', '2', ',', '4', ',', '6', ']', ']', ')', 'ans', '=', 'polygrid2d', '(', '[', '7', ',', '9', ']', ',', '[', '8', ',', '10', ']', ',', 'c', ')', 'print', '(', 'ans', ')']"
1959,"['apply', 'uppercase', 'column', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', 'pd', '.', 'read_csv', '(', '""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv""', ')', 'data_top', '=', 'data', '.', 'head', '(', '10', ')', 'data_top']"
1960,"['flattening', 'json', 'object', 'python']","['unflat_json', '=', '{', ""'user'"", ':', '{', ""'Rachel'"", ':', '{', ""'UserID'"", ':', '1717171717', ',', ""'Email'"", ':', ""'rachel1999@gmail.com'"", ',', ""'friends'"", ':', '[', ""'John'"", ',', ""'Jeremy'"", ',', ""'Emily'"", ']', '}', '}', '}', 'def', 'flatten_json', '(', 'y', ')', ':', 'out', '=', '{', '}', 'def', 'flatten', '(', 'x', ',', 'name', '=', ""''"", ')', ':', 'if', 'type', '(', 'x', ')', 'is', 'dict', ':', 'for', 'a', 'in', 'x', ':', 'flatten', '(', 'x', '[', 'a', ']', ',', 'name', '+', 'a', '+', ""'_'"", ')', 'elif', 'type', '(', 'x', ')', 'is', 'list', ':', 'i', '=', '0', 'for', 'a', 'in', 'x', ':', 'flatten', '(', 'a', ',', 'name', '+', 'str', '(', 'i', ')', '+', ""'_'"", ')', 'i', '+=', '1', 'else', ':', 'out', '[', 'name', '[', ':', '-', '1', ']', ']', '=', 'x', 'flatten', '(', 'y', ')', 'return', 'out', 'print', '(', 'flatten_json', '(', 'unflat_json', ')', ')']"
1961,"['finding', 'largest', 'file', 'directory', 'using', 'python']","['import', 'os', 'print', '(', '""Enter folder path""', ')', 'path', '=', 'os', '.', 'path', '.', 'abspath', '(', 'input', '(', ')', ')', 'size', '=', '0', 'max_size', '=', '0', 'max_file', '=', '""""', 'for', 'folder', ',', 'subfolders', ',', 'files', 'in', 'os', '.', 'walk', '(', 'path', ')', ':', 'for', 'file', 'in', 'files', ':', 'size', '=', 'os', '.', 'stat', '(', 'os', '.', 'path', '.', 'join', '(', 'folder', ',', 'file', ')', ')', '.', 'st_size', 'if', 'size', '>', 'max_size', ':', 'max_size', '=', 'size', 'max_file', '=', 'os', '.', 'path', '.', 'join', '(', 'folder', ',', 'file', ')', 'print', '(', '""The largest file is: ""', '+', 'max_file', ')', 'print', '(', ""'Size: '"", '+', 'str', '(', 'max_size', ')', '+', ""' bytes'"", ')']"
1962,"['write', 'python', 'program', 'consecutive', 'kth', 'column', 'difference', 'tuple', 'list']","['test_list', '=', '[', '(', '5', ',', '4', ',', '2', ')', ',', '(', '1', ',', '3', ',', '4', ')', ',', '(', '5', ',', '7', ',', '8', ')', ',', '(', '7', ',', '4', ',', '3', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '1', 'res', '=', '[', ']', 'for', 'idx', 'in', 'range', '(', '0', ',', 'len', '(', 'test_list', ')', '-', '1', ')', ':', 'res', '.', 'append', '(', 'abs', '(', 'test_list', '[', 'idx', ']', '[', 'K', ']', '-', 'test_list', '[', 'idx', '+', '1', ']', '[', 'K', ']', ')', ')', 'print', '(', '""Resultant tuple list : ""', '+', 'str', '(', 'res', ')', ')']"
1963,"['calculate', 'average', 'variance', 'standard', 'deviation', 'python', 'using', 'numpy']","['import', 'numpy', 'as', 'np', 'list', '=', '[', '2', ',', '4', ',', '4', ',', '4', ',', '5', ',', '5', ',', '7', ',', '9', ']', 'print', '(', 'np', '.', 'average', '(', 'list', ')', ')']"
1964,"['write', 'python', 'program', 'kmp', 'algorithm', 'pattern', 'searching']","['def', 'KMPSearch', '(', 'pat', ',', 'txt', ')', ':', 'M', '=', 'len', '(', 'pat', ')', 'N', '=', 'len', '(', 'txt', ')', 'lps', '=', '[', '0', ']', '*', 'M', 'j', '=', '0', 'computeLPSArray', '(', 'pat', ',', 'M', ',', 'lps', ')', 'i', '=', '0', 'while', 'i', '<', 'N', ':', 'if', 'pat', '[', 'j', ']', '==', 'txt', '[', 'i', ']', ':', 'i', '+=', '1', 'j', '+=', '1', 'if', 'j', '==', 'M', ':', 'print', '""Found pattern at index ""', '+', 'str', '(', 'i', '-', 'j', ')', 'j', '=', 'lps', '[', 'j', '-', '1', ']', 'elif', 'i', '<', 'N', 'and', 'pat', '[', 'j', ']', '!=', 'txt', '[', 'i', ']', ':', 'if', 'j', '!=', '0', ':', 'j', '=', 'lps', '[', 'j', '-', '1', ']', 'else', ':', 'i', '+=', '1', 'def', 'computeLPSArray', '(', 'pat', ',', 'M', ',', 'lps', ')', ':', 'len', '=', '0', 'lps', '[', '0', ']', 'i', '=', '1', 'while', 'i', '<', 'M', ':', 'if', 'pat', '[', 'i', ']', '==', 'pat', '[', 'len', ']', ':', 'len', '+=', '1', 'lps', '[', 'i', ']', '=', 'len', 'i', '+=', '1', 'else', ':', 'if', 'len', '!=', '0', ':', 'len', '=', 'lps', '[', 'len', '-', '1', ']', 'else', ':', 'lps', '[', 'i', ']', '=', '0', 'i', '+=', '1', 'txt', '=', '""ABABDABACDABABCABAB""', 'pat', '=', '""ABABCABAB""', 'KMPSearch', '(', 'pat', ',', 'txt', ')']"
1965,"['write', 'python', 'program', 'check', 'two', 'string', 'rotationally', 'equivalent']","['test_str1', '=', ""'geeks'"", 'test_str2', '=', ""'eksge'"", 'print', '(', '""The original string 1 is : ""', '+', 'str', '(', 'test_str1', ')', ')', 'print', '(', '""The original string 2 is : ""', '+', 'str', '(', 'test_str2', ')', ')', 'res', '=', 'False', 'for', 'idx', 'in', 'range', '(', 'len', '(', 'test_str1', ')', ')', ':', 'if', 'test_str1', '[', 'idx', ':', ']', '+', 'test_str1', '[', ':', 'idx', ']', '==', 'test_str2', ':', 'res', '=', 'True', 'break', 'print', '(', '""Are two strings Rotationally equal ? : ""', '+', 'str', '(', 'res', ')', ')']"
1966,"['numpypercentile', 'python']","['import', 'numpy', 'as', 'np', 'arr', '=', '[', '20', ',', '2', ',', '7', ',', '1', ',', '34', ']', 'print', '(', '""arr : ""', ',', 'arr', ')', 'print', '(', '""50th percentile of arr : ""', ',', 'np', '.', 'percentile', '(', 'arr', ',', '50', ')', ')', 'print', '(', '""25th percentile of arr : ""', ',', 'np', '.', 'percentile', '(', 'arr', ',', '25', ')', ')', 'print', '(', '""75th percentile of arr : ""', ',', 'np', '.', 'percentile', '(', 'arr', ',', '75', ')', ')']"
1967,"['write', 'python', 'program', 'similar', 'character', 'string', 'comparison']","['test_str1', '=', ""'e:e:k:s:g'"", 'test_str2', '=', ""'g:e:e:k:s'"", 'print', '(', '""The original string 1 is : ""', '+', 'str', '(', 'test_str1', ')', ')', 'print', '(', '""The original string 2 is : ""', '+', 'str', '(', 'test_str2', ')', ')', 'delim', '=', ""':'"", 'res', '=', 'sorted', '(', 'test_str1', '.', 'split', '(', ""':'"", ')', ')', '==', 'sorted', '(', 'test_str2', '.', 'split', '(', ""':'"", ')', ')', 'print', '(', '""Are strings similar : ""', '+', 'str', '(', 'res', ')', ')']"
1968,"['write', 'python', 'program', 'print', 'even', 'length', 'word', 'string']","['def', 'printWords', '(', 's', ')', ':', 's', '=', 's', '.', 'split', '(', ""' '"", ')', 'for', 'word', 'in', 's', ':', 'if', 'len', '(', 'word', ')', '%', '2', '==', '0', ':', 'print', '(', 'word', ')', 's', '=', '""i am muskan""', 'printWords', '(', 's', ')']"
1969,"['write', 'python', 'program', 'reverse', 'dictionary', 'key', 'order']","['from', 'collections', 'import', 'OrderedDict', 'test_dict', '=', '{', ""'gfg'"", ':', '4', ',', ""'is'"", ':', '2', ',', ""'best'"", ':', '5', '}', 'print', '(', '""The original dictionary : ""', '+', 'str', '(', 'test_dict', ')', ')', 'res', '=', 'OrderedDict', '(', 'reversed', '(', 'list', '(', 'test_dict', '.', 'items', '(', ')', ')', ')', ')', 'print', '(', '""The reversed order dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
1970,"['write', 'python', 'program', 'stack', 'using', 'doubly', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'self', '.', 'prev', '=', 'None', 'class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'def', 'push', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'else', ':', 'new_node', '=', 'Node', '(', 'data', ')', 'self', '.', 'head', '.', 'prev', '=', 'new_node', 'new_node', '.', 'next', '=', 'self', '.', 'head', 'new_node', '.', 'prev', '=', 'None', 'self', '.', 'head', '=', 'new_node', 'def', 'pop', '(', 'self', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'None', 'elif', 'self', '.', 'head', '.', 'next', 'is', 'None', ':', 'temp', '=', 'self', '.', 'head', '.', 'data', 'self', '.', 'head', '=', 'None', 'return', 'temp', 'else', ':', 'temp', '=', 'self', '.', 'head', '.', 'data', 'self', '.', 'head', '=', 'self', '.', 'head', '.', 'next', 'self', '.', 'head', '.', 'prev', '=', 'None', 'return', 'temp', 'def', 'top', '(', 'self', ')', ':', 'return', 'self', '.', 'head', '.', 'data', 'def', 'size', '(', 'self', ')', ':', 'temp', '=', 'self', '.', 'head', 'count', '=', '0', 'while', 'temp', 'is', 'not', 'None', ':', 'count', '=', 'count', '+', '1', 'temp', '=', 'temp', '.', 'next', 'return', 'count', 'def', 'isEmpty', '(', 'self', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'True', 'else', ':', 'return', 'False', 'def', 'printstack', '(', 'self', ')', ':', 'print', '(', '""stack elements are:""', ')', 'temp', '=', 'self', '.', 'head', 'while', 'temp', 'is', 'not', 'None', ':', 'print', '(', 'temp', '.', 'data', ',', 'end', '=', '""->""', ')', 'temp', '=', 'temp', '.', 'next', 'if', '__name__', '==', ""'__main__'"", ':', 'stack', '=', 'Stack', '(', ')', 'print', '(', '""Stack operations using Doubly LinkedList""', ')', 'stack', '.', 'push', '(', '4', ')', 'stack', '.', 'push', '(', '5', ')', 'stack', '.', 'push', '(', '6', ')', 'stack', '.', 'push', '(', '7', ')', 'stack', '.', 'printstack', '(', ')', 'print', '(', '""\\nTop element is ""', ',', 'stack', '.', 'top', '(', ')', ')', 'print', '(', '""Size of the stack is ""', ',', 'stack', '.', 'size', '(', ')', ')', 'stack', '.', 'pop', '(', ')', 'stack', '.', 'pop', '(', ')', 'stack', '.', 'printstack', '(', ')', 'print', '(', '""\\nstack is empty:""', ',', 'stack', '.', 'isEmpty', '(', ')', ')']"
1971,"['write', 'python', 'program', 'print', 'number', 'diamond', 'given', 'size', 'n', 'rangoli', 'style']","['def', 'print_diamond', '(', 'size', ')', ':', 'for', 'i', 'in', 'range', '(', 'size', ')', ':', 'rownum', '=', 'i', '+', '1', 'num_alphabet', '=', '2', '*', 'rownum', '-', '1', 'space_in_between_alphabets', '=', 'num_alphabet', '-', '1', 'total_spots', '=', '(', '2', '*', 'size', '-', '1', ')', '*', '2', '-', '1', 'total_space', '=', 'total_spots', '-', 'num_alphabet', 'space_leading_trailing', '=', 'total_space', '-', 'space_in_between_alphabets', 'lead_space', '=', 'int', '(', 'space_leading_trailing', '/', '2', ')', 'trail_space', '=', 'int', '(', 'space_leading_trailing', '/', '2', ')', 'for', 'j', 'in', 'range', '(', 'lead_space', ')', ':', 'print', '(', ""'-'"", ',', 'end', '=', ""''"", ')', 'mid_char', '=', '(', '1', '+', 'size', '-', '1', ')', '-', 'int', '(', 'num_alphabet', '/', '2', ')', 'k', '=', '1', '+', 'size', '-', '1', 'is_alphabet_printed', '=', 'False', 'mid_char_reached', '=', 'False', 'for', 'j', 'in', 'range', '(', 'num_alphabet', '+', 'space_in_between_alphabets', ')', ':', 'if', 'not', 'is_alphabet_printed', ':', 'print', '(', 'str', '(', 'k', ')', ',', 'end', '=', ""''"", ')', 'is_alphabet_printed', '=', 'True', 'if', 'k', '==', 'mid_char', ':', 'mid_char_reached', '=', 'True', 'if', 'mid_char_reached', '==', 'True', ':', 'k', '+=', '1', 'else', ':', 'k', '-=', '1', 'else', ':', 'print', '(', ""'-'"", ',', 'end', '=', ""''"", ')', 'is_alphabet_printed', '=', 'False', 'for', 'j', 'in', 'range', '(', 'trail_space', ')', ':', 'print', '(', ""'-'"", ',', 'end', '=', ""''"", ')', 'print', '(', ""''"", ')', 'for', 'i', 'in', 'range', '(', 'size', '+', '1', ',', '2', '*', 'size', ')', ':', 'rownum', '=', 'i', 'num_alphabet', '=', '2', '*', '(', '2', '*', 'size', '-', 'rownum', ')', '-', '1', 'space_in_between_alphabets', '=', 'num_alphabet', '-', '1', 'total_spots', '=', '(', '2', '*', 'size', '-', '1', ')', '*', '2', '-', '1', 'total_space', '=', 'total_spots', '-', 'num_alphabet', 'space_leading_trailing', '=', 'total_space', '-', 'space_in_between_alphabets', 'lead_space', '=', 'int', '(', 'space_leading_trailing', '/', '2', ')', 'trail_space', '=', 'int', '(', 'space_leading_trailing', '/', '2', ')', 'for', 'j', 'in', 'range', '(', 'lead_space', ')', ':', 'print', '(', ""'-'"", ',', 'end', '=', ""''"", ')', 'mid_char', '=', '(', '1', '+', 'size', '-', '1', ')', '-', 'int', '(', 'num_alphabet', '/', '2', ')', 'k', '=', '1', '+', 'size', '-', '1', 'is_alphabet_printed', '=', 'False', 'mid_char_reached', '=', 'False', 'for', 'j', 'in', 'range', '(', 'num_alphabet', '+', 'space_in_between_alphabets', ')', ':', 'if', 'not', 'is_alphabet_printed', ':', 'print', '(', 'str', '(', 'k', ')', ',', 'end', '=', ""''"", ')', 'is_alphabet_printed', '=', 'True', 'if', 'k', '==', 'mid_char', ':', 'mid_char_reached', '=', 'True', 'if', 'mid_char_reached', '==', 'True', ':', 'k', '+=', '1', 'else', ':', 'k', '-=', '1', 'else', ':', 'print', '(', ""'-'"", ',', 'end', '=', ""''"", ')', 'is_alphabet_printed', '=', 'False', 'for', 'j', 'in', 'range', '(', 'trail_space', ')', ':', 'print', '(', ""'-'"", ',', 'end', '=', ""''"", ')', 'print', '(', ""''"", ')', 'if', '__name__', '==', ""'__main__'"", ':', 'n', '=', '5', 'print_diamond', '(', 'n', ')']"
1972,"['automate', 'google', 'chrome', 'using', 'foxtrot', 'python']","['from', 'selenium', 'import', 'webdriver', 'import', 'time', 'if', '__name__', '==', ""'__main__'"", ':', 'email', '=', ""''"", 'password', '=', ""''"", 'options', '=', 'webdriver', '.', 'ChromeOptions', '(', ')', 'options', '.', 'add_argument', '(', '""--start-maximized""', ')', 'driver', '=', 'webdriver', '.', 'Chrome', '(', 'executable_path', '=', '""C:/chromedriver/chromedriver.exe""', ',', 'chrome_options', '=', 'options', ')', 'driver', '.', 'set_window_size', '(', '1920', ',', '1080', ')', 'driver', '.', 'get', '(', ""'https://auth.geeksforgeeks.org/'"", ')', 'time', '.', 'sleep', '(', '5', ')', 'driver', '.', 'find_element_by_name', '(', ""'user'"", ')', '.', 'send_keys', '(', 'email', ')', 'driver', '.', 'find_element_by_name', '(', ""'pass'"", ')', '.', 'send_keys', '(', 'password', ')', 'driver', '.', 'find_element_by_css_selector', '(', ""'button.btn.btn-green.signin-button'"", ')', '.', 'click', '(', ')', 'time', '.', 'sleep', '(', '5', ')', 'container', '=', 'driver', '.', 'find_elements_by_css_selector', '(', ""'div.mdl-cell.mdl-cell--9-col.mdl-cell--12-col-phone.textBold'"", ')', 'name', '=', 'container', '[', '0', ']', '.', 'text', 'try', ':', 'institution', '=', 'container', '[', '1', ']', '.', 'find_element_by_css_selector', '(', ""'a'"", ')', '.', 'text', 'except', ':', 'institution', '=', 'container', '[', '1', ']', '.', 'text', 'email_id', '=', 'container', '[', '2', ']', '.', 'text', 'print', '(', '{', '""Name""', ':', 'name', ',', '""Institution""', ':', 'institution', ',', '""Email ID""', ':', 'email', '}', ')', 'driver', '.', 'quit', '(', ')']"
1973,"['program', 'print', 'k', 'using', 'alphabet', 'python']","['//', 'C', '+', '+', 'Program', 'to', 'design', 'the', '//', 'above', 'pattern', 'of', 'K', 'using', 'alphabets', 'using', 'namespace', 'std', ';', '//', 'Function', 'to', 'print', '//', 'the', 'above', 'Pattern', 'void', 'display', '(', 'int', 'n', ')', '{', 'int', 'v', '=', 'n', ';', '//', 'This', 'loop', 'is', 'used', '//', 'for', 'rows', 'and', 'prints', '//', 'the', 'alphabets', 'in', '//', 'decreasing', 'order', 'while', '(', 'v', '>=', '0', ')', '{', 'int', 'c', '=', '65', ';', '//', 'This', 'loop', 'is', 'used', '//', 'for', 'columns', 'for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'v', '+', '1', ';', 'j', '+', '+', ')', '{', '//', 'chr', '(', ')', 'function', 'converts', 'the', '//', 'number', 'to', 'alphabet', 'cout', '<<', 'char', '(', 'c', '+', 'j', ')', '<<', '"" ""', ';', '}', 'v', '-', '-', ';', 'cout', '<<', 'endl', ';', '}', '//', 'This', 'loop', 'is', 'again', 'used', '//', 'to', 'rows', 'and', 'prints', 'the', '//', 'half', 'remaining', 'pattern', 'in', '//', 'increasing', 'order', 'for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'n', '+', '1', ';', 'i', '+', '+', ')', '{', 'int', 'c', '=', '65', ';', 'for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'i', '+', '1', ';', 'j', '+', '+', ')', '{', 'cout', '<<', 'char', '(', 'c', '+', 'j', ')', '<<', '"" ""', ';', '}', 'cout', '<<', 'endl', ';', '}', '}', '//', 'Driver', 'code', 'int', 'main', '(', ')', '{', 'int', 'n', '=', '5', ';', 'display', '(', 'n', ')', ';', 'return', '0', ';', '}', '//', 'This', 'code', 'is', 'contributed', 'by', 'divyeshrabadiya07']"
1974,"['drop', 'one', 'multiple', 'column', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', '{', ""'A'"", ':', '[', ""'A1'"", ',', ""'A2'"", ',', ""'A3'"", ',', ""'A4'"", ',', ""'A5'"", ']', ',', ""'B'"", ':', '[', ""'B1'"", ',', ""'B2'"", ',', ""'B3'"", ',', ""'B4'"", ',', ""'B5'"", ']', ',', ""'C'"", ':', '[', ""'C1'"", ',', ""'C2'"", ',', ""'C3'"", ',', ""'C4'"", ',', ""'C5'"", ']', ',', ""'D'"", ':', '[', ""'D1'"", ',', ""'D2'"", ',', ""'D3'"", ',', ""'D4'"", ',', ""'D5'"", ']', ',', ""'E'"", ':', '[', ""'E1'"", ',', ""'E2'"", ',', ""'E3'"", ',', ""'E4'"", ',', ""'E5'"", ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', ')', 'df']"
1975,"['write', 'python', 'program', 'replace', 'text', 'file']","['s', '=', 'input', '(', '""Enter text to replace the existing contents:""', ')', 'f', '=', 'open', '(', '""file.txt""', ',', '""r+""', ')', 'f', '.', 'truncate', '(', '0', ')', 'f', '.', 'write', '(', 's', ')', 'f', '.', 'close', '(', ')', 'print', '(', '""Text successfully replaced""', ')']"
1976,"['remove', 'multiple', 'element', 'list', 'python']","['list1', '=', '[', '11', ',', '5', ',', '17', ',', '18', ',', '23', ',', '50', ']', 'for', 'ele', 'in', 'list1', ':', 'if', 'ele', '%', '2', '==', '0', ':', 'list1', '.', 'remove', '(', 'ele', ')', 'print', '(', '""New list after removing all even numbers: ""', ',', 'list1', ')']"
1977,"['get', 'column', 'name', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', 'pd', '.', 'read_csv', '(', '""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv""', ')', 'data_top', '=', 'data', '.', 'head', '(', ')', 'data_top']"
1978,"['nested', 'lambda', 'function', 'python']","['f', '=', 'lambda', 'a', '=', '2', ',', 'b', '=', '3', ':', 'lambda', 'c', ':', 'a', '+', 'b', '+', 'c', 'o', '=', 'f', '(', ')', 'print', '(', 'o', '(', '4', ')', ')']"
1979,"['write', 'python', 'program', 'sort', 'dictionary', 'key', 'value', 'list']","['test_dict', '=', '{', ""'gfg'"", ':', '[', '7', ',', '6', ',', '3', ']', ',', ""'is'"", ':', '[', '2', ',', '10', ',', '3', ']', ',', ""'best'"", ':', '[', '19', ',', '4', ']', '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'res', '=', 'dict', '(', ')', 'for', 'key', 'in', 'sorted', '(', 'test_dict', ')', ':', 'res', '[', 'key', ']', '=', 'sorted', '(', 'test_dict', '[', 'key', ']', ')', 'print', '(', '""The sorted dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
1980,"['write', 'python', 'program', 'remove', 'punctuation', 'string']","['test_str', '=', '""Gfg, is best : for ! Geeks ;""', 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'punc', '=', '\'\'\'!()-[]{};:\'""\\,<>./?@#$%^&*_~\'\'\'', 'for', 'ele', 'in', 'test_str', ':', 'if', 'ele', 'in', 'punc', ':', 'test_str', '=', 'test_str', '.', 'replace', '(', 'ele', ',', '""""', ')', 'print', '(', '""The string after punctuation filter : ""', '+', 'test_str', ')']"
1981,"['reset', 'index', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', '{', ""'Name'"", ':', '[', ""'Jai'"", ',', ""'Princi'"", ',', ""'Gaurav'"", ',', ""'Anuj'"", ',', ""'Geeku'"", ']', ',', ""'Age'"", ':', '[', '27', ',', '24', ',', '22', ',', '32', ',', '15', ']', ',', ""'Address'"", ':', '[', ""'Delhi'"", ',', ""'Kanpur'"", ',', ""'Allahabad'"", ',', ""'Kannauj'"", ',', ""'Noida'"", ']', ',', ""'Qualification'"", ':', '[', ""'Msc'"", ',', ""'MA'"", ',', ""'MCA'"", ',', ""'Phd'"", ',', ""'10th'"", ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', ')', 'df']"
1982,"['write', 'python', 'program', 'numpynanmean', 'function']","['import', 'numpy', 'as', 'np', 'arr', '=', 'np', '.', 'array', '(', '[', '[', '20', ',', '15', ',', '37', ']', ',', '[', '47', ',', '13', ',', 'np', '.', 'nan', ']', ']', ')', 'print', '(', '""Shape of array is""', ',', 'arr', '.', 'shape', ')', 'print', '(', '""Mean of array without using nanmean function:""', ',', 'np', '.', 'mean', '(', 'arr', ')', ')', 'print', '(', '""Using nanmean function:""', ',', 'np', '.', 'nanmean', '(', 'arr', ')', ')']"
1983,"['write', 'python', 'program', 'rowwise', 'element', 'addition', 'tuple', 'matrix']","['test_list', '=', '[', '[', '(', ""'Gfg'"", ',', '3', ')', ',', '(', ""'is'"", ',', '3', ')', ']', ',', '[', '(', ""'best'"", ',', '1', ')', ']', ',', '[', '(', ""'for'"", ',', '5', ')', ',', '(', ""'geeks'"", ',', '1', ')', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'cus_eles', '=', '[', '6', ',', '7', ',', '8', ']', 'res', '=', '[', '[', 'sub', '+', '(', 'cus_eles', '[', 'idx', ']', ',', ')', 'for', 'sub', 'in', 'val', ']', 'for', 'idx', ',', 'val', 'in', 'enumerate', '(', 'test_list', ')', ']', 'print', '(', '""The matrix after row elements addition : ""', '+', 'str', '(', 'res', ')', ')']"
1984,"['write', 'python', 'program', 'assigning', 'subsequent', 'row', 'matrix', 'first', 'row', 'element']","['test_list', '=', '[', '[', '5', ',', '8', ',', '9', ']', ',', '[', '2', ',', '0', ',', '9', ']', ',', '[', '5', ',', '4', ',', '2', ']', ',', '[', '2', ',', '3', ',', '9', ']', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '{', 'test_list', '[', '0', ']', '[', 'ele', ']', ':', 'test_list', '[', 'ele', '+', '1', ']', 'for', 'ele', 'in', 'range', '(', 'len', '(', 'test_list', ')', '-', '1', ')', '}', 'print', '(', '""The Assigned Matrix : ""', '+', 'str', '(', 'res', ')', ')']"
1985,"['write', 'python', 'program', 'split', 'repeating', 'substring']","['test_str', '=', '""gfggfggfggfggfggfggfggfg""', 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'K', '=', ""'gfg'"", 'temp', '=', 'len', '(', 'test_str', ')', '//', 'len', '(', 'str', '(', 'K', ')', ')', 'res', '=', '[', 'K', ']', '*', 'temp', 'print', '(', '""The split string is : ""', '+', 'str', '(', 'res', ')', ')']"
1986,"['write', 'python', 'program', 'way', 'remove', 'multiple', 'empty', 'space', 'string', 'list']","['test_list', '=', '[', ""'gfg'"", ',', ""'\xa0\xa0 '"", ',', ""' '"", ',', ""'is'"", ',', ""'\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 '"", ',', ""'best'"", ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', ']', 'for', 'ele', 'in', 'test_list', ':', 'if', 'ele', '.', 'strip', '(', ')', ':', 'res', '.', 'append', '(', 'ele', ')', 'print', '(', '""List after filtering non-empty strings : ""', '+', 'str', '(', 'res', ')', ')']"
1987,"['way', 'convert', 'string', 'dictionary', 'python']","['str', '=', '"" Jan = January; Feb = February; Mar = March""', 'dictionary', '=', 'dict', '(', 'subString', '.', 'split', '(', '""=""', ')', 'for', 'subString', 'in', 'str', '.', 'split', '(', '"";""', ')', ')', 'print', '(', 'dictionary', ')']"
1988,"['write', 'python', 'program', 'sum', 'number', 'digit', 'list']","['test_list', '=', '[', '12', ',', '67', ',', '98', ',', '34', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', ']', 'for', 'ele', 'in', 'test_list', ':', 'sum', '=', '0', 'for', 'digit', 'in', 'str', '(', 'ele', ')', ':', 'sum', '+=', 'int', '(', 'digit', ')', 'res', '.', 'append', '(', 'sum', ')', 'print', '(', '""List Integer Summation : ""', '+', 'str', '(', 'res', ')', ')']"
1989,"['get', 'index', 'maximum', 'value', 'dataframe', 'column', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', '""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv""', ')', 'df', '.', 'head', '(', '10', ')']"
1990,"['getting', 'time', 'since', 'o', 'startup', 'using', 'python']","['import', 'os', 't', '=', 'os', '.', 'popen', '(', ""'uptime -p'"", ')', '.', 'read', '(', ')', '[', ':', '-', '1', ']', 'print', '(', 't', ')']"
1991,"['write', 'python', 'program', 'get', 'function', 'signature']","['from', 'inspect', 'import', 'signature', 'def', 'gfg', '(', 'x', ':', 'str', ',', 'y', ':', 'int', ')', ':', 'pass', 't', '=', 'signature', '(', 'gfg', ')', 'print', '(', 't', ')', 'print', '(', 't', '.', 'parameters', '[', ""'x'"", ']', ')', 'print', '(', 't', '.', 'parameters', '[', ""'y'"", ']', '.', 'annotation', ')']"
1992,"['numpydiff', 'python']","['import', 'numpy', 'as', 'geek', 'arr', '=', 'geek', '.', 'array', '(', '[', '1', ',', '3', ',', '4', ',', '7', ',', '9', ']', ')', 'print', '(', '""Input array\xa0 : ""', ',', 'arr', ')', 'print', '(', '""First order difference\xa0 : ""', ',', 'geek', '.', 'diff', '(', 'arr', ')', ')', 'print', '(', '""Second order difference : ""', ',', 'geek', '.', 'diff', '(', 'arr', ',', 'n', '=', '2', ')', ')', 'print', '(', '""Third order difference\xa0 : ""', ',', 'geek', '.', 'diff', '(', 'arr', ',', 'n', '=', '3', ')', ')']"
1993,"['compute', 'kronecker', 'product', 'two', 'multidimension', 'numpy', 'array', 'python']","['import', 'numpy', 'array1', '=', 'numpy', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', ')', 'print', '(', ""'Array1:\\n'"", ',', 'array1', ')', 'array2', '=', 'numpy', '.', 'array', '(', '[', '[', '5', ',', '6', ']', ',', '[', '7', ',', '8', ']', ']', ')', 'print', '(', ""'\\nArray2:\\n'"", ',', 'array2', ')', 'kroneckerProduct', '=', 'numpy', '.', 'kron', '(', 'array1', ',', 'array2', ')', 'print', '(', ""'\\nArray1 ⊗ Array2:'"", ')', 'print', '(', 'kroneckerProduct', ')']"
1994,"['menu', 'driven', 'python', 'program', 'execute', 'linux', 'command']","['import', 'os', 'os', '.', 'system', '(', '""tput setaf 2""', ')', 'print', '(', '""Launching Terminal User Interface""', ')', 'os', '.', 'system', '(', '""tput setaf 1""', ')', 'print', '(', '""\\t\\tWELCOME TO Terminal User Interface\\t\\t\\t""', ')', 'os', '.', 'system', '(', '""tput setaf 7""', ')', 'print', '(', '""\\t-------------------------------------------------""', ')', 'print', '(', '""Entering local device""', ')', 'while', 'True', ':', 'print', '(', '""""""\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa01.Print date\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa02.Print cal\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa03.Configure web\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa04.Configure docker\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa05.Add user\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa06.Delete user\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa07.Create a file\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa08.Create a folder\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa09.Exit""""""', ')', 'ch', '=', 'int', '(', 'input', '(', '""Enter your choice: ""', ')', ')', 'if', '(', 'ch', '==', '1', ')', ':', 'os', '.', 'system', '(', '""date""', ')', 'elif', 'ch', '==', '2', ':', 'os', '.', 'system', '(', '""cal""', ')', 'elif', 'ch', '==', '3', ':', 'os', '.', 'system', '(', '""yum install httpd -y""', ')', 'os', '.', 'system', '(', '""systemctl start httpd""', ')', 'os', '.', 'system', '(', '""systemctl status httpd""', ')', 'elif', 'ch', '==', '4', ':', 'os', '.', 'system', '(', '""yum install docker-ce -y""', ')', 'os', '.', 'system', '(', '""systemctl start docker""', ')', 'os', '.', 'system', '(', '""systemctl status docker""', ')', 'elif', 'ch', '==', '5', ':', 'new_user', '=', 'input', '(', '""Enter the name of new user: ""', ')', 'os', '.', 'system', '(', '""sudo useradd {}""', '.', 'format', '(', 'new_user', ')', ')', 'os', '.', 'system', '(', '""id -u {}""', '.', 'format', '(', 'new_user', ')', ')', 'elif', 'ch', '==', '6', ':', 'del_user', '=', 'input', '(', '""Enter the name of the user to delete: ""', ')', 'os', '.', 'system', '(', '""sudo userdel {}""', '.', 'format', '(', 'del_user', ')', ')', 'elif', 'ch', '==', '7', ':', 'filename', '=', 'input', '(', '""Enter the filename: ""', ')', 'f', '=', 'os', '.', 'system', '(', '""sudo touch {}""', '.', 'format', '(', 'filename', ')', ')', 'if', 'f', '!=', '0', ':', 'print', '(', '""Some error occurred""', ')', 'else', ':', 'print', '(', '""File created successfully""', ')', 'elif', 'ch', '==', '8', ':', 'foldername', '=', 'input', '(', '""Enter the foldername: ""', ')', 'f', '=', 'os', '.', 'system', '(', '""sudo mkdir {}""', '.', 'format', '(', 'foldername', ')', ')', 'if', 'f', '!=', '0', ':', 'print', '(', '""Some error occurred""', ')', 'else', ':', 'print', '(', '""Folder created successfully""', ')', 'elif', 'ch', '==', '9', ':', 'print', '(', '""Exiting application""', ')', 'exit', '(', ')', 'else', ':', 'print', '(', '""Invalid entry""', ')', 'input', '(', '""Press enter to continue""', ')', 'os', '.', 'system', '(', '""clear""', ')']"
1995,"['calculate', 'average', 'value', 'two', 'given', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'arr1', '=', 'np', '.', 'array', '(', '[', '3', ',', '4', ']', ')', 'arr2', '=', 'np', '.', 'array', '(', '[', '1', ',', '0', ']', ')', 'avg', '=', '(', 'arr1', '+', 'arr2', ')', '/', '2', 'print', '(', '""Average of NumPy arrays:\\n""', ',', 'avg', ')']"
1996,"['write', 'python', 'program', 'extract', 'element', 'frequency', 'greater', 'k']","['test_list', '=', '[', '4', ',', '6', ',', '4', ',', '3', ',', '3', ',', '4', ',', '3', ',', '7', ',', '8', ',', '8', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '2', 'res', '=', '[', ']', 'for', 'i', 'in', 'test_list', ':', 'freq', '=', 'test_list', '.', 'count', '(', 'i', ')', 'if', 'freq', '>', 'K', 'and', 'i', 'not', 'in', 'res', ':', 'res', '.', 'append', '(', 'i', ')', 'print', '(', '""The required elements : ""', '+', 'str', '(', 'res', ')', ')']"
1997,"['write', 'python', 'program', 'maximum', 'consecutive', 'substring', 'occurrence']","['import', 're', 'test_str', '=', ""'geeksgeeks are geeks for all geeksgeeksgeeks'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'sub_str', '=', ""'geeks'"", 'res', '=', 'max', '(', 're', '.', 'findall', '(', ""'((?:'"", '+', 're', '.', 'escape', '(', 'sub_str', ')', '+', ""')*)'"", ',', 'test_str', ')', ',', 'key', '=', 'len', ')', 'print', '(', '""The maximum run of Substring : ""', '+', 'res', ')']"
1998,"['write', 'python', 'program', 'convert', 'list', 'list', 'dictionary']","['test_list', '=', '[', '""Gfg""', ',', '3', ',', '""is""', ',', '8', ',', '""Best""', ',', '10', ',', '""for""', ',', '18', ',', '""Geeks""', ',', '33', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'key_list', '=', '[', '""name""', ',', '""number""', ']', 'n', '=', 'len', '(', 'test_list', ')', 'res', '=', '[', ']', 'for', 'idx', 'in', 'range', '(', '0', ',', 'n', ',', '2', ')', ':', 'res', '.', 'append', '(', '{', 'key_list', '[', '0', ']', ':', 'test_list', '[', 'idx', ']', ',', 'key_list', '[', '1', ']', ':', 'test_list', '[', 'idx', '+', '1', ']', '}', ')', 'print', '(', '""The constructed dictionary list : ""', '+', 'str', '(', 'res', ')', ')']"
1999,"['iterate', 'set', 'python']","['test_set', '=', 'set', '(', '""geEks""', ')', 'for', 'val', 'in', 'test_set', ':', 'print', '(', 'val', ')']"
2000,"['read', 'multiple', 'text', 'file', 'folder', 'python']","['import', 'os', 'path', '=', '""Enter Folder Path""', 'os', '.', 'chdir', '(', 'path', ')', 'def', 'read_text_file', '(', 'file_path', ')', ':', 'with', 'open', '(', 'file_path', ',', ""'r'"", ')', 'as', 'f', ':', 'print', '(', 'f', '.', 'read', '(', ')', ')', 'for', 'file', 'in', 'os', '.', 'listdir', '(', ')', ':', 'if', 'file', '.', 'endswith', '(', '"".txt""', ')', ':', 'file_path', '=', 'f""{path}\\{file}""', 'read_text_file', '(', 'file_path', ')']"
2001,"['write', 'python', 'program', 'remove', 'item', 'set']","['def', 'Remove', '(', 'initial_set', ')', ':', 'while', 'initial_set', ':', 'initial_set', '.', 'pop', '(', ')', 'print', '(', 'initial_set', ')', 'initial_set', '=', 'set', '(', '[', '12', ',', '10', ',', '13', ',', '15', ',', '8', ',', '9', ']', ')', 'Remove', '(', 'initial_set', ')']"
2002,"['write', 'python', 'program', 'last', 'business', 'day', 'every', 'month', 'year']","['import', 'calendar', 'year', '=', '1997', 'print', '(', '""The original year : ""', '+', 'str', '(', 'year', ')', ')', 'weekdy', '=', '5', 'res', '=', '[', ']', 'for', 'month', 'in', 'range', '(', '1', ',', '13', ')', ':', 'res', '.', 'append', '(', 'str', '(', 'max', '(', 'week', '[', 'weekdy', ']', 'for', 'week', 'in', 'calendar', '.', 'monthcalendar', '(', 'year', ',', 'month', ')', ')', ')', '+', '""/""', '+', 'str', '(', 'month', ')', '+', '""/""', '+', 'str', '(', 'year', ')', ')', 'print', '(', '""Last weekdays of year : ""', '+', 'str', '(', 'res', ')', ')']"
2003,"['converting', 'digit', 'phone', 'number', 'u', 'format', 'using', 'regex', 'python']","['import', 're', 'def', 'convert_phone_number', '(', 'phone', ')', ':', 'num', '=', 're', '.', 'sub', '(', ""r'(?<!\\S)(\\d{3})-'"", ',', ""r'(\\1) '"", ',', 'phone', ')', 'return', 'num', 'print', '(', 'convert_phone_number', '(', '""Call geek 321-963-0612""', ')', ')']"
2004,"['write', 'python', 'program', 'add', 'space', 'potential', 'word']","['test_list', '=', '[', '""gfgBest""', ',', '""forGeeks""', ',', '""andComputerScience""', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', ']', 'for', 'ele', 'in', 'test_list', ':', 'temp', '=', '[', '[', ']', ']', 'for', 'char', 'in', 'ele', ':', 'if', 'char', '.', 'isupper', '(', ')', ':', 'temp', '.', 'append', '(', '[', ']', ')', 'temp', '[', '-', '1', ']', '.', 'append', '(', 'char', ')', 'res', '.', 'append', '(', ""' '"", '.', 'join', '(', ""''"", '.', 'join', '(', 'ele', ')', 'for', 'ele', 'in', 'temp', ')', ')', 'print', '(', '""The space added list of strings : ""', '+', 'str', '(', 'res', ')', ')']"
2005,"['convert', 'string', 'datetime', 'python', 'timezone']","['import', 'datetime', 'date_string', '=', ""'2021-09-01 15:27:05.004573 +0530'"", 'print', '(', '""string datetime: ""', ')', 'print', '(', 'date_string', ')', 'print', '(', '""datestring class is :""', ',', 'type', '(', 'date_string', ')', ')', 'datetime_obj', '=', 'datetime', '.', 'datetime', '.', 'strptime', '(', 'date_string', ',', ""'%Y-%m-%d %H:%M:%S.%f %z'"", ')', 'print', '(', '""converted to datetime:""', ')', 'print', '(', 'datetime_obj', ')', 'print', '(', '""datetime_obj class is :""', ',', 'type', '(', 'datetime_obj', ')', ')']"
2006,"['program', 'print', 'half', 'diamond', 'star', 'pattern', 'python']","['//', 'C', '+', '+', 'implementation', 'to', 'print', 'the', '//', 'half', 'diamond', 'star', 'pattern', 'using', 'namespace', 'std', ';', '//', 'Function', 'to', 'print', 'the', '//', 'half', 'diamond', 'star', 'pattern', 'void', 'halfDiamondStar', '(', 'int', 'N', ')', '{', 'int', 'i', ',', 'j', ';', '//', 'Loop', 'to', 'print', 'the', 'upper', 'half', '//', 'diamond', 'pattern', 'for', '(', 'i', '=', '0', ';', 'i', '<', 'N', ';', 'i', '+', '+', ')', '{', 'for', '(', 'j', '=', '0', ';', 'j', '<', 'i', '+', '1', ';', 'j', '+', '+', ')', 'cout', '<<', '""*""', ';', 'cout', '<<', '""\\n""', ';', '}', '//', 'Loop', 'to', 'print', 'the', 'lower', 'half', '//', 'diamond', 'pattern', 'for', '(', 'i', '=', '1', ';', 'i', '<', 'N', ';', 'i', '+', '+', ')', '{', 'for', '(', 'j', '=', 'i', ';', 'j', '<', 'N', ';', 'j', '+', '+', ')', 'cout', '<<', '""*""', ';', 'cout', '<<', '""\\n""', ';', '}', '}', '//', 'Driver', 'Code', 'int', 'main', '(', ')', '{', 'int', 'N', '=', '5', ';', '//', 'Function', 'Call', 'halfDiamondStar', '(', 'N', ')', ';', '}']"
2007,"['scrape', 'table', 'website', 'using', 'write', 'python', 'program', 'selenium']","['<', 'DOCTYPE', 'html', '>', '<', 'html', '>', '<', 'head', '>', '<', 'title', '>', 'Selenium', 'Table', '<', '/', 'title', '>', '<', '/', 'head', '>', '<', 'body', '>', '<', 'table', 'border', '=', '""1""', '>', '<', 'thead', '>', '<', 'tr', '>', '<', 'th', '>', 'Name', '<', '/', 'th', '>', '<', 'th', '>', 'Class', '<', '/', 'th', '>', '<', '/', 'tr', '>', '<', '/', 'thead', '>', '<', 'tbody', '>', '<', 'tr', '>', '<', 'td', '>', 'Vinayak', '<', '/', 'td', '>', '<', 'td', '>', '12', '<', '/', 'td', '>', '<', '/', 'tr', '>', '<', 'tr', '>', '<', 'td', '>', 'Ishita', '<', '/', 'td', '>', '<', 'td', '>', '10', '<', '/', 'td', '>', '<', '/', 'tr', '>', '<', '/', 'tbody', '>', '<', '/', 'table', '>', '<', '/', 'body', '>', '<', '/', 'html', '>']"
2008,"['write', 'python', 'program', 'cross', 'pairing', 'tuple', 'list']","['test_list1', '=', '[', '(', '1', ',', '7', ')', ',', '(', '6', ',', '7', ')', ',', '(', '9', ',', '100', ')', ',', '(', '4', ',', '21', ')', ']', 'test_list2', '=', '[', '(', '1', ',', '3', ')', ',', '(', '2', ',', '1', ')', ',', '(', '9', ',', '7', ')', ',', '(', '2', ',', '17', ')', ']', 'print', '(', '""The original list 1 : ""', '+', 'str', '(', 'test_list1', ')', ')', 'print', '(', '""The original list 2 : ""', '+', 'str', '(', 'test_list2', ')', ')', 'res', '=', '[', '(', 'sub1', '[', '1', ']', ',', 'sub2', '[', '1', ']', ')', 'for', 'sub2', 'in', 'test_list2', 'for', 'sub1', 'in', 'test_list1', 'if', 'sub1', '[', '0', ']', '==', 'sub2', '[', '0', ']', ']', 'print', '(', '""The mapped tuples : ""', '+', 'str', '(', 'res', ')', ')']"
2009,"['write', 'python', 'program', 'convert', 'dictionary', 'k', 'sized', 'dictionary']","['test_dict', '=', '{', ""'Gfg'"", ':', '1', ',', ""'is'"", ':', '2', ',', ""'best'"", ':', '3', ',', ""'for'"", ':', '4', ',', ""'geeks'"", ':', '5', ',', ""'CS'"", ':', '6', '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'K', '=', '2', 'res', '=', '[', ']', 'count', '=', '0', 'flag', '=', '0', 'indict', '=', 'dict', '(', ')', 'for', 'key', 'in', 'test_dict', ':', 'indict', '[', 'key', ']', '=', 'test_dict', '[', 'key', ']', 'count', '+=', '1', 'if', 'count', '%', 'K', '==', '0', 'and', 'flag', ':', 'res', '.', 'append', '(', 'indict', ')', 'indict', '=', 'dict', '(', ')', 'count', '=', '0', 'flag', '=', '1', 'print', '(', '""The converted list : ""', '+', 'str', '(', 'res', ')', ')']"
2010,"['write', 'python', 'program', 'numpy', 'matrixmax']","['import', 'numpy', 'as', 'np', 'gfg', '=', 'np', '.', 'matrix', '(', ""'[64, 1; 12, 3]'"", ')', 'geeks', '=', 'gfg', '.', 'max', '(', ')', 'print', '(', 'geeks', ')']"
2011,"['find', 'word', 'greater', 'given', 'length', 'k', 'python']","['//', 'C', '+', '+', 'program', 'to', 'find', 'all', 'string', '//', 'which', 'are', 'greater', 'than', 'given', 'length', 'k', 'using', 'namespace', 'std', ';', '//', 'function', 'find', 'string', 'greater', 'than', '//', 'length', 'k', 'void', 'string_k', '(', 'string', 's', ',', 'int', 'k', ')', '{', '//', 'create', 'the', 'empty', 'string', 'string', 'w', '=', '""""', ';', '//', 'iterate', 'the', 'loop', 'till', 'every', 'space', 'for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 's', '.', 'size', '(', ')', ';', 'i', '+', '+', ')', '{', 'if', '(', 's', '[', 'i', ']', '!=', ""' '"", ')', '//', 'append', 'this', 'sub', 'string', 'in', '//', 'string', 'w', 'w', '=', 'w', '+', 's', '[', 'i', ']', ';', 'else', '{', '//', 'if', 'length', 'of', 'current', 'sub', '//', 'string', 'w', 'is', 'greater', 'than', '//', 'k', 'then', 'print', 'if', '(', 'w', '.', 'size', '(', ')', '>', 'k', ')', 'cout', '<<', 'w', '<<', '"" ""', ';', 'w', '=', '""""', ';', '}', '}', '}', '//', 'Driver', 'code', 'int', 'main', '(', ')', '{', 'string', 's', '=', '""geek for geeks""', ';', 'int', 'k', '=', '3', ';', 's', '=', 's', '+', '"" ""', ';', 'string_k', '(', 's', ',', 'k', ')', ';', 'return', '0', ';', '}', '//', 'This', 'code', 'is', 'contributed', 'by', '//', 'Manish', 'Shaw', '(', 'manishshaw1', ')']"
2012,"['creating', 'panda', 'dataframe', 'using', 'list', 'list', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', '[', '[', ""'Geeks'"", ',', '10', ']', ',', '[', ""'for'"", ',', '15', ']', ',', '[', ""'geeks'"", ',', '20', ']', ']', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', ',', 'columns', '=', '[', ""'Name'"", ',', ""'Age'"", ']', ')', 'print', '(', 'df', ')']"
2013,"['write', 'python', 'program', 'convert', 'tuple', 'matrix', 'tuple', 'list']","['test_list', '=', '[', '[', '(', '4', ',', '5', ')', ',', '(', '7', ',', '8', ')', ']', ',', '[', '(', '10', ',', '13', ')', ',', '(', '18', ',', '17', ')', ']', ',', '[', '(', '0', ',', '4', ')', ',', '(', '10', ',', '1', ')', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'temp', '=', '[', 'ele', 'for', 'sub', 'in', 'test_list', 'for', 'ele', 'in', 'sub', ']', 'res', '=', 'list', '(', 'zip', '(', '*', 'temp', ')', ')', 'print', '(', '""The converted tuple list : ""', '+', 'str', '(', 'res', ')', ')']"
2014,"['write', 'python', 'program', 'reverse', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'def', 'reverse', '(', 'self', ')', ':', 'prev', '=', 'None', 'current', '=', 'self', '.', 'head', 'while', '(', 'current', 'is', 'not', 'None', ')', ':', 'next', '=', 'current', '.', 'next', 'current', '.', 'next', '=', 'prev', 'prev', '=', 'current', 'current', '=', 'next', 'self', '.', 'head', '=', 'prev', 'def', 'push', '(', 'self', ',', 'new_data', ')', ':', 'new_node', '=', 'Node', '(', 'new_data', ')', 'new_node', '.', 'next', '=', 'self', '.', 'head', 'self', '.', 'head', '=', 'new_node', 'def', 'printList', '(', 'self', ')', ':', 'temp', '=', 'self', '.', 'head', 'while', '(', 'temp', ')', ':', 'print', 'temp', '.', 'data', ',', 'temp', '=', 'temp', '.', 'next', 'llist', '=', 'LinkedList', '(', ')', 'llist', '.', 'push', '(', '20', ')', 'llist', '.', 'push', '(', '4', ')', 'llist', '.', 'push', '(', '15', ')', 'llist', '.', 'push', '(', '85', ')', 'print', '""Given Linked List""', 'llist', '.', 'printList', '(', ')', 'llist', '.', 'reverse', '(', ')', 'print', '""\\nReversed Linked List""', 'llist', '.', 'printList', '(', ')']"
2015,"['numpysqrt', 'python']","['import', 'numpy', 'as', 'geek', 'arr1', '=', 'geek', '.', 'sqrt', '(', '[', '1', ',', '4', ',', '9', ',', '16', ']', ')', 'arr2', '=', 'geek', '.', 'sqrt', '(', '[', '6', ',', '10', ',', '18', ']', ')', 'print', '(', '""square-root of an array1\xa0 : ""', ',', 'arr1', ')', 'print', '(', '""square-root of an array2\xa0 : ""', ',', 'arr2', ')']"
2016,"['remove', 'repetitive', 'character', 'word', 'given', 'panda', 'dataframe', 'using', 'regex', 'python']","['import', 'pandas', 'as', 'pd', 'import', 're', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'name'"", ':', '[', ""'Akash'"", ',', ""'Ayush'"", ',', ""'Diksha'"", ',', ""'Priyanka'"", ',', ""'Radhika'"", ']', ',', ""'common_comments'"", ':', '[', ""'hey buddy meet me today '"", ',', ""'sorry bro i cant meet'"", ',', ""'hey akash i love geeksforgeeks'"", ',', ""'twiiter is the best way to comment'"", ',', ""'geeksforgeeks is good for learners'"", ']', '}', ',', 'columns', '=', '[', ""'name'"", ',', ""'common_comments'"", ']', ')', 'df']"
2017,"['convert', 'column', 'row', 'nameindex', 'panda', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', '{', ""'Name'"", ':', '[', '""Akash""', ',', '""Geeku""', ',', '""Pankaj""', ',', '""Sumitra""', ',', '""Ramlal""', ']', ',', ""'Branch'"", ':', '[', '""B.Tech""', ',', '""MBA""', ',', '""BCA""', ',', '""B.Tech""', ',', '""BCA""', ']', ',', ""'Score'"", ':', '[', '""80""', ',', '""90""', ',', '""60""', ',', '""30""', ',', '""50""', ']', ',', ""'Result'"", ':', '[', '""Pass""', ',', '""Pass""', ',', '""Pass""', ',', '""Fail""', ',', '""Fail""', ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', ')', 'df']"
2018,"['write', 'python', 'program', 'count', 'number', 'vowel', 'using', 'set', 'given', 'string']","['def', 'vowel_count', '(', 'str', ')', ':', 'count', '=', '0', 'vowel', '=', 'set', '(', '""aeiouAEIOU""', ')', 'for', 'alphabet', 'in', 'str', ':', 'if', 'alphabet', 'in', 'vowel', ':', 'count', '=', 'count', '+', '1', 'print', '(', '""No. of vowels :""', ',', 'count', ')', 'str', '=', '""GeeksforGeeks""', 'vowel_count', '(', 'str', ')']"
2019,"['extract', 'date', 'excel', 'file', 'using', 'panda', 'python']","['import', 'pandas', 'as', 'pd', ';', 'import', 're', ';', 'data', '=', 'pd', '.', 'read_excel', '(', '""date_sample_data.xlsx""', ')', ';', 'print', '(', '""Original DataFrame""', ')', 'data']"
2020,"['write', 'python', 'program', 'operation', 'tuples']","['test_tup1', '=', '(', '10', ',', '4', ',', '5', ')', 'test_tup2', '=', '(', '2', ',', '5', ',', '18', ')', 'print', '(', '""The original tuple 1 : ""', '+', 'str', '(', 'test_tup1', ')', ')', 'print', '(', '""The original tuple 2 : ""', '+', 'str', '(', 'test_tup2', ')', ')', 'res', '=', 'tuple', '(', 'map', '(', 'lambda', 'i', ',', 'j', ':', 'i', '&', 'j', ',', 'test_tup1', ',', 'test_tup2', ')', ')', 'print', '(', '""Resultant tuple after AND operation : ""', '+', 'str', '(', 'res', ')', ')']"
2021,"['write', 'python', 'program', 'search', 'element', 'circular', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', ';', 'self', '.', 'next', '=', 'None', ';', 'class', 'CircularLinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'Node', '(', 'None', ')', ';', 'self', '.', 'tail', '=', 'Node', '(', 'None', ')', ';', 'self', '.', 'head', '.', 'next', '=', 'self', '.', 'tail', ';', 'self', '.', 'tail', '.', 'next', '=', 'self', '.', 'head', ';', 'def', 'add', '(', 'self', ',', 'data', ')', ':', 'newNode', '=', 'Node', '(', 'data', ')', ';', 'if', 'self', '.', 'head', '.', 'data', 'is', 'None', ':', 'self', '.', 'head', '=', 'newNode', ';', 'self', '.', 'tail', '=', 'newNode', ';', 'newNode', '.', 'next', '=', 'self', '.', 'head', ';', 'else', ':', 'self', '.', 'tail', '.', 'next', '=', 'newNode', ';', 'self', '.', 'tail', '=', 'newNode', ';', 'self', '.', 'tail', '.', 'next', '=', 'self', '.', 'head', ';', 'def', 'findNode', '(', 'self', ',', 'element', ')', ':', 'current', '=', 'self', '.', 'head', ';', 'i', '=', '1', ';', 'f', '=', '0', ';', 'if', '(', 'self', '.', 'head', '==', 'None', ')', ':', 'print', '(', '""Empty list""', ')', ';', 'else', ':', 'while', '(', 'True', ')', ':', 'if', '(', 'current', '.', 'data', '==', 'element', ')', ':', 'f', '+=', '1', ';', 'break', ';', 'current', '=', 'current', '.', 'next', ';', 'i', '=', 'i', '+', '1', ';', 'if', '(', 'current', '==', 'self', '.', 'head', ')', ':', 'break', ';', 'if', '(', 'f', '>', '0', ')', ':', 'print', '(', '""element is present""', ')', ';', 'else', ':', 'print', '(', '""element is not present""', ')', ';', 'if', '__name__', '==', ""'__main__'"", ':', ""'''\n\xa0\xa0\xa0\xa0Circular Linked List we will be working on:\n\xa0\xa0\xa0\xa01 -> 2 -> 3 -> 4 -> 5 -> 6\n\xa0\xa0\xa0\xa0'''"", 'circularLinkedList', '=', 'CircularLinkedList', '(', ')', ';', 'circularLinkedList', '.', 'add', '(', '1', ')', ';', 'circularLinkedList', '.', 'add', '(', '2', ')', ';', 'circularLinkedList', '.', 'add', '(', '3', ')', ';', 'circularLinkedList', '.', 'add', '(', '4', ')', ';', 'circularLinkedList', '.', 'add', '(', '5', ')', ';', 'circularLinkedList', '.', 'add', '(', '6', ')', ';', 'circularLinkedList', '.', 'findNode', '(', '2', ')', ';', 'circularLinkedList', '.', 'findNode', '(', '7', ')', ';']"
2022,"['write', 'python', 'program', 'odd', 'frequency', 'character']","['from', 'collections', 'import', 'defaultdict', 'def', 'hlper_fnc', '(', 'test_str', ')', ':', 'cntr', '=', 'defaultdict', '(', 'int', ')', 'for', 'ele', 'in', 'test_str', ':', 'cntr', '[', 'ele', ']', '+=', '1', 'return', '[', 'val', 'for', 'val', ',', 'chr', 'in', 'cntr', '.', 'items', '(', ')', 'if', 'chr', '%', '2', '!=', '0', ']', 'test_str', '=', ""'geekforgeeks is best for geeks'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'res', '=', 'hlper_fnc', '(', 'test_str', ')', 'print', '(', '""The Odd Frequency Characters are : ""', '+', 'str', '(', 'res', ')', ')']"
2023,"['write', 'python', 'program', 'program', 'print', 'duplicate', 'list', 'integer']","['def', 'Repeat', '(', 'x', ')', ':', '_size', '=', 'len', '(', 'x', ')', 'repeated', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '_size', ')', ':', 'k', '=', 'i', '+', '1', 'for', 'j', 'in', 'range', '(', 'k', ',', '_size', ')', ':', 'if', 'x', '[', 'i', ']', '==', 'x', '[', 'j', ']', 'and', 'x', '[', 'i', ']', 'not', 'in', 'repeated', ':', 'repeated', '.', 'append', '(', 'x', '[', 'i', ']', ')', 'return', 'repeated', 'list1', '=', '[', '10', ',', '20', ',', '30', ',', '20', ',', '20', ',', '30', ',', '40', ',', '50', ',', '-', '20', ',', '60', ',', '60', ',', '-', '20', ',', '-', '20', ']', 'print', '(', 'Repeat', '(', 'list1', ')', ')']"
2024,"['write', 'python', 'set', 'check', 'string', 'panagram']","['from', 'string', 'import', 'ascii_lowercase', 'as', 'asc_lower', 'def', 'check', '(', 's', ')', ':', 'return', 'set', '(', 'asc_lower', ')', '-', 'set', '(', 's', '.', 'lower', '(', ')', ')', '==', 'set', '(', '[', ']', ')', 'string', '=', '""The quick brown fox jumps over the lazy dog""', 'if', '(', 'check', '(', 'string', ')', '==', 'True', ')', ':', 'print', '(', '""The string is a pangram""', ')', 'else', ':', 'print', '(', '""The string isn\'t a pangram""', ')']"
2025,"['write', 'python', 'program', 'split', 'string', 'list', 'k', 'character']","['test_list', '=', '[', ""'Gfg is best'"", ',', ""'for Geeks'"", ',', ""'Preparing'"", ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', ""' '"", 'res', '=', '[', ']', 'for', 'ele', 'in', 'test_list', ':', 'sub', '=', 'ele', '.', 'split', '(', 'K', ')', 'res', '.', 'extend', '(', 'sub', ')', 'print', '(', '""The extended list after split strings : ""', '+', 'str', '(', 'res', ')', ')']"
2026,"['write', 'python', 'program', 'test', 'string', 'subset', 'another']","['test_str1', '=', '""geeksforgeeks""', 'test_str2', '=', '""gfks""', 'print', '(', '""The original string is : ""', '+', 'test_str1', ')', 'res', '=', 'all', '(', 'ele', 'in', 'test_str1', 'for', 'ele', 'in', 'test_str2', ')', 'print', '(', '""Does string contains all the characters of other list? : ""', '+', 'str', '(', 'res', ')', ')']"
2027,"['write', 'python', 'program', 'remove', 'reduntant', 'substring', 'string', 'list']","['test_list', '=', '[', '""Gfg""', ',', '""Gfg is best""', ',', '""Geeks""', ',', '""Gfg is for Geeks""', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'test_list', '.', 'sort', '(', 'key', '=', 'len', ')', 'res', '=', '[', ']', 'for', 'idx', ',', 'val', 'in', 'enumerate', '(', 'test_list', ')', ':', 'if', 'val', 'not', 'in', ""', '"", '.', 'join', '(', 'test_list', '[', 'idx', '+', '1', ':', ']', ')', ':', 'res', '.', 'append', '(', 'val', ')', 'print', '(', '""The filtered list : ""', '+', 'str', '(', 'res', ')', ')']"
2028,"['extract', 'time', 'datetime', 'python']","['import', 'datetime', 'from', 'datetime', 'import', 'datetime', 'datetime_str', '=', '""24AUG2001101010""', 'datetime_obj', '=', 'datetime', '.', 'strptime', '(', 'datetime_str', ',', '""%d%b%Y%H%M%S""', ')', 'print', '(', 'datetime_obj', ')', 'time', '=', 'datetime_obj', '.', 'time', '(', ')', 'print', '(', 'time', ')']"
2029,"['lowercase', 'column', 'name', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', '[', ""'John'"", ',', ""'bODAY'"", ',', ""'MinA'"", ',', ""'Peter'"", ',', ""'nicky'"", ']', ',', ""'B'"", ':', '[', ""'masters'"", ',', ""'graduate'"", ',', ""'graduate'"", ',', ""'Masters'"", ',', ""'Graduate'"", ']', ',', ""'C'"", ':', '[', '27', ',', '23', ',', '21', ',', '23', ',', '24', ']', '}', ')', 'df']"
2030,"['convert', 'column', 'type', 'string', 'datetime', 'format', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Date'"", ':', '[', ""'11/8/2011'"", ',', ""'04/23/2008'"", ',', ""'10/2/2019'"", ']', ',', ""'Event'"", ':', '[', ""'Music'"", ',', ""'Poetry'"", ',', ""'Theatre'"", ']', ',', ""'Cost'"", ':', '[', '10000', ',', '5000', ',', '15000', ']', '}', ')', 'print', '(', 'df', ')', 'df', '.', 'info', '(', ')']"
2031,"['write', 'python', 'program', 'find', 'character', 'position', 'kth', 'word', 'list', 'string']","['test_list', '=', '[', '""geekforgeeks""', ',', '""is""', ',', '""best""', ',', '""for""', ',', '""geeks""', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '20', 'res', '=', '[', 'ele', '[', '0', ']', 'for', 'sub', 'in', 'enumerate', '(', 'test_list', ')', 'for', 'ele', 'in', 'enumerate', '(', 'sub', '[', '1', ']', ')', ']', 'res', '=', 'res', '[', 'K', ']', 'print', '(', '""Index of character at Kth position word : ""', '+', 'str', '(', 'res', ')', ')']"
2032,"['access', 'different', 'row', 'multidimensional', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'arr', '=', 'np', '.', 'array', '(', '[', '[', '10', ',', '20', ',', '30', ']', ',', '[', '40', ',', '5', ',', '66', ']', ',', '[', '70', ',', '88', ',', '94', ']', ']', ')', 'print', '(', '""Given Array :""', ')', 'print', '(', 'arr', ')', 'res_arr', '=', 'arr', '[', '[', '0', ',', '2', ']', ']', 'print', '(', '""\\nAccessed Rows :""', ')', 'print', '(', 'res_arr', ')']"
2033,"['scientific', 'gui', 'calculator', 'using', 'tkinter', 'python']","['from', 'tkinter', 'import', '*', 'import', 'math', 'import', 'tkinter', '.', 'messagebox']"
2034,"['matrix', 'multiplication', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'p', '=', '[', '[', '1', ',', '2', ']', ',', '[', '2', ',', '3', ']', ']', 'q', '=', '[', '[', '4', ',', '5', ']', ',', '[', '6', ',', '7', ']', ']', 'print', '(', '""Matrix p :""', ')', 'print', '(', 'p', ')', 'print', '(', '""Matrix q :""', ')', 'print', '(', 'q', ')', 'result', '=', 'np', '.', 'dot', '(', 'p', ',', 'q', ')', 'print', '(', '""The matrix multiplication is :""', ')', 'print', '(', 'result', ')']"
2035,"['scraping', 'finding', 'ordered', 'word', 'dictionary', 'using', 'python']","['import', 'requests', 'def', 'getWords', '(', ')', ':', 'url', '=', '""http://www.puzzlers.org/pub/wordlists/unixdict.txt""', 'fetchData', '=', 'requests', '.', 'get', '(', 'url', ')', 'wordList', '=', 'fetchData', '.', 'content', 'wordList', '=', 'wordList', '.', 'decode', '(', '""utf-8""', ')', '.', 'split', '(', ')', 'return', 'wordList', 'def', 'isOrdered', '(', ')', ':', 'collection', '=', 'getWords', '(', ')', 'collection', '=', 'collection', '[', '16', ':', ']', 'word', '=', ""''"", 'for', 'word', 'in', 'collection', ':', 'result', '=', ""'Word is ordered'"", 'i', '=', '0', 'l', '=', 'len', '(', 'word', ')', '-', '1', 'if', '(', 'len', '(', 'word', ')', '<', '3', ')', ':', 'continue', 'while', 'i', '<', 'l', ':', 'if', '(', 'ord', '(', 'word', '[', 'i', ']', ')', '>', 'ord', '(', 'word', '[', 'i', '+', '1', ']', ')', ')', ':', 'result', '=', ""'Word is not ordered'"", 'break', 'else', ':', 'i', '+=', '1', 'if', '(', 'result', '==', ""'Word is ordered'"", ')', ':', 'print', '(', 'word', ',', ""': '"", ',', 'result', ')', 'if', '__name__', '==', ""'__main__'"", ':', 'isOrdered', '(', ')']"
2036,"['write', 'python', 'program', 'reverse', 'string', 'string', 'list']","['test_list', '=', '[', '""geeks""', ',', '""for""', ',', '""geeks""', ',', '""is""', ',', '""best""', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', 'i', '[', ':', ':', '-', '1', ']', 'for', 'i', 'in', 'test_list', ']', 'print', '(', '""The reversed string list is : ""', '+', 'str', '(', 'res', ')', ')']"
2037,"['write', 'python', 'program', 'count', 'string', 'substring', 'string', 'list']","['test_list', '=', '[', ""'GeeksforGeeks'"", ',', ""'Geeky'"", ',', ""'Computers'"", ',', ""'Algorithms'"", ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'subs', '=', ""'Geek'"", 'res', '=', 'len', '(', '[', 'i', 'for', 'i', 'in', 'test_list', 'if', 'subs', 'in', 'i', ']', ')', 'print', '(', '""All strings count with given substring are : ""', '+', 'str', '(', 'res', ')', ')']"
2038,"['write', 'python', 'program', 'remove', 'word', 'containing', 'list', 'character']","['from', 'itertools', 'import', 'groupby', 'test_list', '=', '[', ""'gfg'"", ',', ""'is'"", ',', ""'best'"", ',', ""'for'"", ',', ""'geeks'"", ']', 'char_list', '=', '[', ""'g'"", ',', ""'o'"", ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'print', '(', '""The character list is : ""', '+', 'str', '(', 'char_list', ')', ')', 'res', '=', '[', 'ele', 'for', 'ele', 'in', 'test_list', 'if', 'all', '(', 'ch', 'not', 'in', 'ele', 'for', 'ch', 'in', 'char_list', ')', ']', 'print', '(', '""The filtered strings are : ""', '+', 'str', '(', 'res', ')', ')']"
2039,"['write', 'python', 'program', 'convert', 'json', 'string']","['import', 'json', 'a', '=', '{', '""name""', ':', '""GeeksforGeeks""', ',', '""Topic""', ':', '""Json to String""', ',', '""Method""', ':', '1', '}', 'y', '=', 'json', '.', 'dumps', '(', 'a', ')', 'print', '(', 'y', ')', 'print', '(', 'type', '(', 'y', ')', ')']"
2040,"['write', 'python', 'program', 'rabinkarp', 'algorithm', 'pattern', 'searching']","['d', '=', '256', 'def', 'search', '(', 'pat', ',', 'txt', ',', 'q', ')', ':', 'M', '=', 'len', '(', 'pat', ')', 'N', '=', 'len', '(', 'txt', ')', 'i', '=', '0', 'j', '=', '0', 'p', '=', '0', 't', '=', '0', 'h', '=', '1', 'for', 'i', 'in', 'xrange', '(', 'M', '-', '1', ')', ':', 'h', '=', '(', 'h', '*', 'd', ')', '%', 'q', 'for', 'i', 'in', 'xrange', '(', 'M', ')', ':', 'p', '=', '(', 'd', '*', 'p', '+', 'ord', '(', 'pat', '[', 'i', ']', ')', ')', '%', 'q', 't', '=', '(', 'd', '*', 't', '+', 'ord', '(', 'txt', '[', 'i', ']', ')', ')', '%', 'q', 'for', 'i', 'in', 'xrange', '(', 'N', '-', 'M', '+', '1', ')', ':', 'if', 'p', '==', 't', ':', 'for', 'j', 'in', 'xrange', '(', 'M', ')', ':', 'if', 'txt', '[', 'i', '+', 'j', ']', '!=', 'pat', '[', 'j', ']', ':', 'break', 'j', '+=', '1', 'if', 'j', '==', 'M', ':', 'print', '""Pattern found at index ""', '+', 'str', '(', 'i', ')', 'if', 'i', '<', 'N', '-', 'M', ':', 't', '=', '(', 'd', '*', '(', 't', '-', 'ord', '(', 'txt', '[', 'i', ']', ')', '*', 'h', ')', '+', 'ord', '(', 'txt', '[', 'i', '+', 'M', ']', ')', ')', '%', 'q', 'if', 't', '<', '0', ':', 't', '=', 't', '+', 'q', 'txt', '=', '""GEEKS FOR GEEKS""', 'pat', '=', '""GEEK""', 'q', '=', '101', 'search', '(', 'pat', ',', 'txt', ',', 'q', ')']"
2041,"['write', 'python', 'program', 'uncommon', 'element', 'list', 'list']","['test_list1', '=', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ',', '[', '5', ',', '6', ']', ']', 'test_list2', '=', '[', '[', '3', ',', '4', ']', ',', '[', '5', ',', '7', ']', ',', '[', '1', ',', '2', ']', ']', 'print', '(', '""The original list 1 : ""', '+', 'str', '(', 'test_list1', ')', ')', 'print', '(', '""The original list 2 : ""', '+', 'str', '(', 'test_list2', ')', ')', 'res_list', '=', '[', ']', 'for', 'i', 'in', 'test_list1', ':', 'if', 'i', 'not', 'in', 'test_list2', ':', 'res_list', '.', 'append', '(', 'i', ')', 'for', 'i', 'in', 'test_list2', ':', 'if', 'i', 'not', 'in', 'test_list1', ':', 'res_list', '.', 'append', '(', 'i', ')', 'print', '(', '""The uncommon of two lists is : ""', '+', 'str', '(', 'res_list', ')', ')']"
2042,"['write', 'python', 'program', 'split', 'join', 'string']","['def', 'split_string', '(', 'string', ')', ':', 'list_string', '=', 'string', '.', 'split', '(', ""' '"", ')', 'return', 'list_string', 'def', 'join_string', '(', 'list_string', ')', ':', 'string', '=', ""'-'"", '.', 'join', '(', 'list_string', ')', 'return', 'string', 'if', '__name__', '==', ""'__main__'"", ':', 'string', '=', ""'Geeks for Geeks'"", 'list_string', '=', 'split_string', '(', 'string', ')', 'print', '(', 'list_string', ')', 'new_string', '=', 'join_string', '(', 'list_string', ')', 'print', '(', 'new_string', ')']"
2043,"['create', 'numpy', 'array', 'random', 'value', 'python']","['import', 'numpy', 'as', 'geek', 'b', '=', 'geek', '.', 'empty', '(', '2', ',', 'dtype', '=', 'int', ')', 'print', '(', '""Matrix b : \\n""', ',', 'b', ')', 'a', '=', 'geek', '.', 'empty', '(', '[', '2', ',', '2', ']', ',', 'dtype', '=', 'int', ')', 'print', '(', '""\\nMatrix a : \\n""', ',', 'a', ')']"
2044,"['write', 'python', 'program', 'numpy', 'method']","['import', 'numpy', 'as', 'np', 'from', 'numpy', '.', 'polynomial', '.', 'polynomial', 'import', 'polygrid3d', 'c', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '3', ',', '5', ']', ',', '[', '2', ',', '4', ',', '6', ']', ',', '[', '10', ',', '11', ',', '12', ']', ']', ')', 'ans', '=', 'polygrid3d', '(', '[', '7', ',', '9', ']', ',', '[', '8', ',', '10', ']', ',', '[', '5', ',', '6', ']', ',', 'c', ')', 'print', '(', 'ans', ')']"
2045,"['write', 'python', 'program', 'replace', 'multiple', 'word', 'k']","['test_str', '=', ""'Geeksforgeeks is best for geeks and CS'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'word_list', '=', '[', '""best""', ',', ""'CS'"", ',', ""'for'"", ']', 'repl_wrd', '=', ""'gfg'"", 'res', '=', ""' '"", '.', 'join', '(', '[', 'repl_wrd', 'if', 'idx', 'in', 'word_list', 'else', 'idx', 'for', 'idx', 'in', 'test_str', '.', 'split', '(', ')', ']', ')', 'print', '(', '""String after multiple replace : ""', '+', 'str', '(', 'res', ')', ')']"
2046,"['reindexing', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'column', '=', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", ',', ""'e'"", ']', 'index', '=', '[', ""'A'"", ',', ""'B'"", ',', ""'C'"", ',', ""'D'"", ',', ""'E'"", ']', 'df1', '=', 'pd', '.', 'DataFrame', '(', 'np', '.', 'random', '.', 'rand', '(', '5', ',', '5', ')', ',', 'columns', '=', 'column', ',', 'index', '=', 'index', ')', 'print', '(', 'df1', ')', 'print', '(', ""'\\n\\nDataframe after reindexing rows: \\n'"", ',', 'df1', '.', 'reindex', '(', '[', ""'B'"", ',', ""'D'"", ',', ""'A'"", ',', ""'C'"", ',', ""'E'"", ']', ')', ')']"
2047,"['quote', 'guessing', 'game', 'using', 'web', 'scraping', 'python']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup', 'from', 'csv', 'import', 'writer', 'from', 'time', 'import', 'sleep', 'from', 'random', 'import', 'choice', 'all_quotes', '=', '[', ']', 'base_url', '=', '""http://quotes.toscrape.com/""', 'url', '=', '""/page/1""', 'while', 'url', ':', 'res', '=', 'requests', '.', 'get', '(', 'f""{base_url}{url}""', ')', 'print', '(', 'f""Now Scraping{base_url}{url}""', ')', 'soup', '=', 'BeautifulSoup', '(', 'res', '.', 'text', ',', '""html.parser""', ')', 'quotes', '=', 'soup', '.', 'find_all', '(', 'class_', '=', '""quote""', ')', 'for', 'quote', 'in', 'quotes', ':', 'all_quotes', '.', 'append', '(', '{', '""text""', ':', 'quote', '.', 'find', '(', 'class_', '=', '""text""', ')', '.', 'get_text', '(', ')', ',', '""author""', ':', 'quote', '.', 'find', '(', 'class_', '=', '""author""', ')', '.', 'get_text', '(', ')', ',', '""bio-link""', ':', 'quote', '.', 'find', '(', '""a""', ')', '[', '""href""', ']', '}', ')', 'next_btn', '=', 'soup', '.', 'find', '(', '_class', '=', '""next""', ')', 'url', '=', 'next_btn', '.', 'find', '(', '""a""', ')', '[', '""href""', ']', 'if', 'next_btn', 'else', 'None', 'sleep', '(', '2', ')', 'quote', '=', 'choice', '(', 'all_quotes', ')', 'remaining_guesses', '=', '4', 'print', '(', '""Here\'s a quote:\xa0 ""', ')', 'print', '(', 'quote', '[', '""text""', ']', ')', 'guess', '=', ""''"", 'while', 'guess', '.', 'lower', '(', ')', '!=', 'quote', '[', '""author""', ']', '.', 'lower', '(', ')', 'and', 'remaining_guesses', '>', '0', ':', 'guess', '=', 'input', '(', 'f""Who said this quote? Guesses remaining {remaining_guesses}""', ')', 'if', 'guess', '==', 'quote', '[', '""author""', ']', ':', 'print', '(', '""CONGRATULATIONS!!! YOU GOT IT RIGHT""', ')', 'break', 'remaining_guesses', '-=', '1', 'if', 'remaining_guesses', '==', '3', ':', 'res', '=', 'requests', '.', 'get', '(', 'f""{base_url}{quote[\'bio-link\']}""', ')', 'soup', '=', 'BeautifulSoup', '(', 'res', '.', 'text', ',', '""html.parser""', ')', 'birth_date', '=', 'soup', '.', 'find', '(', 'class_', '=', '""author-born-date""', ')', '.', 'get_text', '(', ')', 'birth_place', '=', 'soup', '.', 'find', '(', 'class_', '=', '""author-born-location""', ')', '.', 'get_text', '(', ')', 'print', '(', 'f""Here\'s a hint: The author was born on {birth_date}{birth_place}""', ')', 'elif', 'remaining_guesses', '==', '2', ':', 'print', '(', 'f""Here\'s a hint: The author\'s first name starts with: {quote[\'author\'][0]}""', ')', 'elif', 'remaining_guesses', '==', '1', ':', 'last_initial', '=', 'quote', '[', '""author""', ']', '.', 'split', '(', '"" ""', ')', '[', '1', ']', '[', '0', ']', 'print', '(', 'f""Here\'s a hint: The author\'s last name starts with: {last_initial}""', ')', 'else', ':', 'print', '(', 'f""Sorry, you ran out of guesses. The answer was {quote[\'author\']}""', ')']"
2048,"['scraping', 'indeed', 'job', 'data', 'using', 'python']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup', 'def', 'getdata', '(', 'url', ')', ':', 'r', '=', 'requests', '.', 'get', '(', 'url', ')', 'return', 'r', '.', 'text', 'def', 'html_code', '(', 'url', ')', ':', 'htmldata', '=', 'getdata', '(', 'url', ')', 'soup', '=', 'BeautifulSoup', '(', 'htmldata', ',', ""'html.parser'"", ')', 'return', '(', 'soup', ')', 'def', 'job_data', '(', 'soup', ')', ':', 'data_str', '=', '""""', 'for', 'item', 'in', 'soup', '.', 'find_all', '(', '""a""', ',', 'class_', '=', '""jobtitle turnstileLink""', ')', ':', 'data_str', '=', 'data_str', '+', 'item', '.', 'get_text', '(', ')', 'result_1', '=', 'data_str', '.', 'split', '(', '""\\n""', ')', 'return', '(', 'result_1', ')', 'def', 'company_data', '(', 'soup', ')', ':', 'data_str', '=', '""""', 'result', '=', '""""', 'for', 'item', 'in', 'soup', '.', 'find_all', '(', '""div""', ',', 'class_', '=', '""sjcl""', ')', ':', 'data_str', '=', 'data_str', '+', 'item', '.', 'get_text', '(', ')', 'result_1', '=', 'data_str', '.', 'split', '(', '""\\n""', ')', 'res', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '1', ',', 'len', '(', 'result_1', ')', ')', ':', 'if', 'len', '(', 'result_1', '[', 'i', ']', ')', '>', '1', ':', 'res', '.', 'append', '(', 'result_1', '[', 'i', ']', ')', 'return', '(', 'res', ')', 'if', '__name__', '==', '""__main__""', ':', 'job', '=', '""data+science+internship""', 'Location', '=', '""Noida%2C+Uttar+Pradesh""', 'url', '=', '""https://in.indeed.com/jobs?q=""', '+', 'job', '+', '""&l=""', '+', 'Location', 'soup', '=', 'html_code', '(', 'url', ')', 'job_res', '=', 'job_data', '(', 'soup', ')', 'com_res', '=', 'company_data', '(', 'soup', ')', 'temp', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'len', '(', 'job_res', ')', ')', ':', 'j', '=', 'temp', 'for', 'j', 'in', 'range', '(', 'temp', ',', '2', '+', 'temp', ')', ':', 'print', '(', '""Company Name and Address : ""', '+', 'com_res', '[', 'j', ']', ')', 'temp', '=', 'j', 'print', '(', '""Job : ""', '+', 'job_res', '[', 'i', ']', ')', 'print', '(', '""-----------------------------""', ')']"
2049,"['adding', 'subtracting', 'matrix', 'python']","['import', 'numpy', 'as', 'np', 'A', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', ')', 'B', '=', 'np', '.', 'array', '(', '[', '[', '4', ',', '5', ']', ',', '[', '6', ',', '7', ']', ']', ')', 'print', '(', '""Printing elements of first matrix""', ')', 'print', '(', 'A', ')', 'print', '(', '""Printing elements of second matrix""', ')', 'print', '(', 'B', ')', 'print', '(', '""Addition of two matrix""', ')', 'print', '(', 'np', '.', 'add', '(', 'A', ',', 'B', ')', ')']"
2050,"['read', 'csv', 'file', 'folder', 'panda', 'python']","['import', 'pandas', 'as', 'pd', 'import', 'os', 'import', 'glob', 'path', '=', 'os', '.', 'getcwd', '(', ')', 'csv_files', '=', 'glob', '.', 'glob', '(', 'os', '.', 'path', '.', 'join', '(', 'path', ',', '""*.csv""', ')', ')', 'for', 'f', 'in', 'csv_files', ':', 'df', '=', 'pd', '.', 'read_csv', '(', 'f', ')', 'print', '(', ""'Location:'"", ',', 'f', ')', 'print', '(', ""'File Name:'"", ',', 'f', '.', 'split', '(', '""\\\\""', ')', '[', '-', '1', ']', ')', 'print', '(', ""'Content:'"", ')', 'display', '(', 'df', ')', 'print', '(', ')']"
2051,"['minimum', 'two', 'number', 'python']","['def', 'minimum', '(', 'a', ',', 'b', ')', ':', 'if', 'a', '<=', 'b', ':', 'return', 'a', 'else', ':', 'return', 'b', 'a', '=', '2', 'b', '=', '4', 'print', '(', 'minimum', '(', 'a', ',', 'b', ')', ')']"
2052,"['string', 'slicing', 'python', 'rotate', 'string']","['def', 'rotate', '(', 'input', ',', 'd', ')', ':', 'Lfirst', '=', 'input', '[', '0', ':', 'd', ']', 'Lsecond', '=', 'input', '[', 'd', ':', ']', 'Rfirst', '=', 'input', '[', '0', ':', 'len', '(', 'input', ')', '-', 'd', ']', 'Rsecond', '=', 'input', '[', 'len', '(', 'input', ')', '-', 'd', ':', ']', 'print', '(', '""Left Rotation : ""', ',', '(', 'Lsecond', '+', 'Lfirst', ')', ')', 'print', '(', '""Right Rotation : ""', ',', '(', 'Rsecond', '+', 'Rfirst', ')', ')', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', ""'GeeksforGeeks'"", 'd', '=', '2', 'rotate', '(', 'input', ',', 'd', ')']"
2053,"['find', 'sum', 'average', 'list', 'python']","['L', '=', '[', '4', ',', '5', ',', '1', ',', '2', ',', '9', ',', '7', ',', '10', ',', '8', ']', 'count', '=', '0', 'for', 'i', 'in', 'L', ':', 'count', '+=', 'i', 'avg', '=', 'count', '/', 'len', '(', 'L', ')', 'print', '(', '""sum = ""', ',', 'count', ')', 'print', '(', '""average = ""', ',', 'avg', ')']"
2054,"['write', 'python', 'program', 'find', 'second', 'largest', 'number', 'list']","['list1', '=', '[', '10', ',', '20', ',', '4', ',', '45', ',', '99', ']', 'mx', '=', 'max', '(', 'list1', '[', '0', ']', ',', 'list1', '[', '1', ']', ')', 'secondmax', '=', 'min', '(', 'list1', '[', '0', ']', ',', 'list1', '[', '1', ']', ')', 'n', '=', 'len', '(', 'list1', ')', 'for', 'i', 'in', 'range', '(', '2', ',', 'n', ')', ':', 'if', 'list1', '[', 'i', ']', '>', 'mx', ':', 'secondmax', '=', 'mx', 'mx', '=', 'list1', '[', 'i', ']', 'elif', 'list1', '[', 'i', ']', '>', 'secondmax', 'and', 'mx', '!=', 'list1', '[', 'i', ']', ':', 'secondmax', '=', 'list1', '[', 'i', ']', 'print', '(', '""Second highest number is : ""', ',', 'str', '(', 'secondmax', ')', ')']"
2055,"['write', 'python', 'program', 'loop', 'file', 'certain', 'extension']","['import', 'os', 'dirname', '=', ""'D:\\\\AllData'"", 'ext', '=', '(', ""'.exe'"", ',', ""'jpg'"", ')', 'for', 'files', 'in', 'os', '.', 'listdir', '(', 'dirname', ')', ':', 'if', 'files', '.', 'endswith', '(', 'ext', ')', ':', 'print', '(', 'files', ')', 'else', ':', 'continue']"
2056,"['write', 'python', 'program', 'print', 'odd', 'number', 'range']","['start', ',', 'end', '=', '4', ',', '19', 'for', 'num', 'in', 'range', '(', 'start', ',', 'end', '+', '1', ')', ':', 'if', 'num', '%', '2', '!=', '0', ':', 'print', '(', 'num', ',', 'end', '=', '"" ""', ')']"
2057,"['write', 'python', 'program', 'multiply', 'numpy', 'array', 'corresponding', 'array']","['import', 'numpy', 'as', 'np', 'ini_array1', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '2', ',', '4', ',', '5', ']', ',', '[', '1', ',', '2', ',', '3', ']', ']', ')', 'ini_array2', '=', 'np', '.', 'array', '(', '[', '0', ',', '2', ',', '3', ']', ')', 'print', '(', '""initial array""', ',', 'str', '(', 'ini_array1', ')', ')', 'result', '=', 'ini_array1', '*', 'ini_array2', '[', ':', ',', 'np', '.', 'newaxis', ']', 'print', '(', '""New resulting array: ""', ',', 'result', ')']"
2058,"['write', 'python', 'program', 'replace', 'occurrence', 'substring', 'string']","['test_str', '=', '""geeksforgeeks""', 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'temp', '=', 'str', '.', 'maketrans', '(', '""geek""', ',', '""abcd""', ')', 'test_str', '=', 'test_str', '.', 'translate', '(', 'temp', ')', 'print', '(', '""The string after swap : ""', '+', 'str', '(', 'test_str', ')', ')']"
2059,"['convert', 'multiple', 'json', 'file', 'csv', 'python']","['import', 'pandas', 'as', 'pd', 'df1', '=', 'pd', '.', 'read_json', '(', ""'file1.json'"", ')', 'print', '(', 'df1', ')', 'df2', '=', 'pd', '.', 'read_json', '(', ""'file2.json'"", ')', 'print', '(', 'df2', ')', 'df', '=', 'pd', '.', 'concat', '(', '[', 'df1', ',', 'df2', ']', ')', 'print', '(', 'df', ')', 'df', '.', 'to_csv', '(', '""CSV.csv""', ',', 'index', '=', 'False', ')', 'result', '=', 'pd', '.', 'read_csv', '(', '""CSV.csv""', ')', 'print', '(', 'result', ')']"
2060,"['create', 'panda', 'series', 'using', 'numpy', 'function', 'python']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'ser1', '=', 'pd', '.', 'Series', '(', 'np', '.', 'linspace', '(', '3', ',', '33', ',', '3', ')', ')', 'print', '(', 'ser1', ')', 'ser2', '=', 'pd', '.', 'Series', '(', 'np', '.', 'linspace', '(', '1', ',', '100', ',', '10', ')', ')', 'print', '(', '""\\n""', ',', 'ser2', ')']"
2061,"['write', 'python', 'program', 'capitalize', 'first', 'last', 'character', 'word', 'string']","['def', 'word_both_cap', '(', 'str', ')', ':', 'return', ""' '"", '.', 'join', '(', 'map', '(', 'lambda', 's', ':', 's', '[', ':', '-', '1', ']', '+', 's', '[', '-', '1', ']', '.', 'upper', '(', ')', ',', 's', '.', 'title', '(', ')', '.', 'split', '(', ')', ')', ')', 's', '=', '""welcome to geeksforgeeks""', 'print', '(', '""String before:""', ',', 's', ')', 'print', '(', '""String after:""', ',', 'word_both_cap', '(', 'str', ')', ')']"
2062,"['write', 'python', 'program', 'queue', 'using', 'doubly', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'self', '.', 'prev', '=', 'None', 'class', 'Queue', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last', '=', 'None', 'def', 'enqueue', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last', '.', 'next', '.', 'prev', '=', 'self', '.', 'last', 'self', '.', 'last', '=', 'self', '.', 'last', '.', 'next', 'def', 'dequeue', '(', 'self', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'None', 'else', ':', 'temp', '=', 'self', '.', 'head', '.', 'data', 'self', '.', 'head', '=', 'self', '.', 'head', '.', 'next', 'self', '.', 'head', '.', 'prev', '=', 'None', 'return', 'temp', 'def', 'first', '(', 'self', ')', ':', 'return', 'self', '.', 'head', '.', 'data', 'def', 'size', '(', 'self', ')', ':', 'temp', '=', 'self', '.', 'head', 'count', '=', '0', 'while', 'temp', 'is', 'not', 'None', ':', 'count', '=', 'count', '+', '1', 'temp', '=', 'temp', '.', 'next', 'return', 'count', 'def', 'isEmpty', '(', 'self', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'True', 'else', ':', 'return', 'False', 'def', 'printqueue', '(', 'self', ')', ':', 'print', '(', '""queue elements are:""', ')', 'temp', '=', 'self', '.', 'head', 'while', 'temp', 'is', 'not', 'None', ':', 'print', '(', 'temp', '.', 'data', ',', 'end', '=', '""->""', ')', 'temp', '=', 'temp', '.', 'next', 'if', '__name__', '==', ""'__main__'"", ':', 'queue', '=', 'Queue', '(', ')', 'print', '(', '""Queue operations using doubly linked list""', ')', 'queue', '.', 'enqueue', '(', '4', ')', 'queue', '.', 'enqueue', '(', '5', ')', 'queue', '.', 'enqueue', '(', '6', ')', 'queue', '.', 'enqueue', '(', '7', ')', 'queue', '.', 'printqueue', '(', ')', 'print', '(', '""\\nfirst element is ""', ',', 'queue', '.', 'first', '(', ')', ')', 'print', '(', '""Size of the queue is ""', ',', 'queue', '.', 'size', '(', ')', ')', 'queue', '.', 'dequeue', '(', ')', 'queue', '.', 'dequeue', '(', ')', 'print', '(', '""After applying dequeue() two times""', ')', 'queue', '.', 'printqueue', '(', ')', 'print', '(', '""\\nqueue is empty:""', ',', 'queue', '.', 'isEmpty', '(', ')', ')']"
2063,"['create', 'new', 'column', 'panda', 'dataframe', 'based', 'existing', 'column', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Date'"", ':', '[', ""'10/2/2011'"", ',', ""'11/2/2011'"", ',', ""'12/2/2011'"", ',', ""'13/2/2011'"", ']', ',', ""'Event'"", ':', '[', ""'Music'"", ',', ""'Poetry'"", ',', ""'Theatre'"", ',', ""'Comedy'"", ']', ',', ""'Cost'"", ':', '[', '10000', ',', '5000', ',', '15000', ',', '2000', ']', '}', ')', 'print', '(', 'df', ')']"
2064,"['write', 'python', 'code', 'time', 'complexity', 'plot', 'heap', 'sort']","['import', 'time', 'from', 'numpy', '.', 'random', 'import', 'seed', 'from', 'numpy', '.', 'random', 'import', 'randint', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'def', 'left', '(', 'i', ')', ':', 'return', '2', '*', 'i', '+', '1', 'def', 'right', '(', 'i', ')', ':', 'return', '2', '*', 'i', '+', '2', 'def', 'heapSize', '(', 'A', ')', ':', 'return', 'len', '(', 'A', ')', '-', '1', 'def', 'MaxHeapify', '(', 'A', ',', 'i', ')', ':', 'l', '=', 'left', '(', 'i', ')', 'r', '=', 'right', '(', 'i', ')', 'if', 'l', '<=', 'heapSize', '(', 'A', ')', 'and', 'A', '[', 'l', ']', '>', 'A', '[', 'i', ']', ':', 'largest', '=', 'l', 'else', ':', 'largest', '=', 'i', 'if', 'r', '<=', 'heapSize', '(', 'A', ')', 'and', 'A', '[', 'r', ']', '>', 'A', '[', 'largest', ']', ':', 'largest', '=', 'r', 'if', 'largest', '!=', 'i', ':', 'A', '[', 'i', ']', ',', 'A', '[', 'largest', ']', '=', 'A', '[', 'largest', ']', ',', 'A', '[', 'i', ']', 'MaxHeapify', '(', 'A', ',', 'largest', ')', 'def', 'BuildMaxHeap', '(', 'A', ')', ':', 'for', 'i', 'in', 'range', '(', 'int', '(', 'heapSize', '(', 'A', ')', '/', '2', ')', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'MaxHeapify', '(', 'A', ',', 'i', ')', 'def', 'HeapSort', '(', 'A', ')', ':', 'BuildMaxHeap', '(', 'A', ')', 'B', '=', 'list', '(', ')', 'heapSize1', '=', 'heapSize', '(', 'A', ')', 'for', 'i', 'in', 'range', '(', 'heapSize', '(', 'A', ')', ',', '0', ',', '-', '1', ')', ':', 'A', '[', '0', ']', ',', 'A', '[', 'i', ']', '=', 'A', '[', 'i', ']', ',', 'A', '[', '0', ']', 'B', '.', 'append', '(', 'A', '[', 'heapSize1', ']', ')', 'A', '=', 'A', '[', ':', '-', '1', ']', 'heapSize1', '=', 'heapSize1', '-', '1', 'MaxHeapify', '(', 'A', ',', '0', ')', 'elements', '=', 'list', '(', ')', 'times', '=', 'list', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '10', ')', ':', 'a', '=', 'randint', '(', '0', ',', '1000', '*', 'i', ',', '1000', '*', 'i', ')', 'start', '=', 'time', '.', 'clock', '(', ')', 'HeapSort', '(', 'a', ')', 'end', '=', 'time', '.', 'clock', '(', ')', 'print', '(', 'len', '(', 'a', ')', ',', '""Elements Sorted by HeapSort in ""', ',', 'end', '-', 'start', ')', 'elements', '.', 'append', '(', 'len', '(', 'a', ')', ')', 'times', '.', 'append', '(', 'end', '-', 'start', ')', 'plt', '.', 'xlabel', '(', ""'List Length'"", ')', 'plt', '.', 'ylabel', '(', ""'Time Complexity'"", ')', 'plt', '.', 'plot', '(', 'elements', ',', 'times', ',', 'label', '=', ""'Heap Sort'"", ')', 'plt', '.', 'grid', '(', ')', 'plt', '.', 'legend', '(', ')', 'plt', '.', 'show', '(', ')']"
2065,"['calculate', 'sum', 'diagonal', 'element', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'n_array', '=', 'np', '.', 'array', '(', '[', '[', '55', ',', '25', ',', '15', ']', ',', '[', '30', ',', '44', ',', '2', ']', ',', '[', '11', ',', '45', ',', '77', ']', ']', ')', 'print', '(', '""Numpy Matrix is:""', ')', 'print', '(', 'n_array', ')', 'trace', '=', 'np', '.', 'trace', '(', 'n_array', ')', 'print', '(', '""\\nTrace of given 3X3 matrix:""', ')', 'print', '(', 'trace', ')']"
2066,"['menu', 'driven', 'python', 'program', 'opening', 'required', 'software', 'application']","['import', 'os', 'while', 'True', ':', 'print', '(', '""Hello! user choose your tool""', ')', 'print', '(', '""Choose your tool :-\\n""', ')', 'print', '(', '""-> mousepad""', ')', 'print', '(', '""-> chrome""', ')', 'print', '(', '""-> vlc""', ')', 'print', '(', '""-> virtualbox""', ')', 'print', '(', '""-> camera""', ')', 'print', '(', '""-> telegram""', ')', 'print', '(', '""-> firefox""', ')', 'print', '(', '""-> codeblocks""', ')', 'print', '(', '""-> screenshot""', ')', 'print', '(', '""-> task-manager""', ')', 'print', '(', '""-> libreoffice impress / presentation""', ')', 'print', '(', '""-> libreoffice writer / text editor / notepad""', ')', 'print', '(', '""-> libreoffice clac / spreadsheets""', ')', 'print', '(', '""-> libreoffice""', ')', 'print', '(', '""-> jupyter notebook\\n""', ')', 'print', '(', '""chat with system:-""', ',', 'end', '=', ""' '"", ')', 'p', '=', 'input', '(', ')', 'if', '(', '(', '""do not""', 'in', 'p', ')', 'or', '(', '""dont""', 'in', 'p', ')', 'or', '(', '""don\'t""', 'in', 'p', ')', ')', ':', 'print', '(', '""OK user\\n""', ')', 'elif', '(', '(', '""open""', 'in', 'p', ')', 'or', '(', '""start""', 'in', 'p', ')', 'or', '(', '""run""', 'in', 'p', ')', 'or', '(', '""execute""', 'in', 'p', ')', 'or', '(', '""launch""', 'in', 'p', ')', 'or', '(', '""activate""', 'in', 'p', ')', ')', ':', 'if', '(', '(', '""mousepad""', 'in', 'p', ')', 'or', '(', '""editor""', 'in', 'p', ')', ')', ':', 'os', '.', 'system', '(', '""mousepad""', ')', 'elif', '(', '(', '""vlc""', 'in', 'p', ')', 'or', '(', '""media player""', 'in', 'p', ')', ')', ':', 'os', '.', 'system', '(', '""vlc""', ')', 'elif', '(', '(', '""virtualbox""', 'in', 'p', ')', 'or', '(', '""virtual machine""', 'in', 'p', ')', 'or', '(', '""virtual tool""', 'in', 'p', ')', ')', ':', 'os', '.', 'system', '(', '""virtualbox""', ')', 'elif', '(', '(', '""camera""', 'in', 'p', ')', 'or', '(', '""cheese""', 'in', 'p', ')', ')', ':', 'os', '.', 'system', '(', '""cheese""', ')', 'elif', '(', '""telegram""', 'in', 'p', ')', ':', 'os', '.', 'system', '(', '""telegram-desktop""', ')', 'elif', '(', '""codeblocks""', 'in', 'p', ')', ':', 'os', '.', 'system', '(', '""codeblocks""', ')', 'elif', '(', '""taskmanager""', 'in', 'p', ')', ':', 'os', '.', 'system', '(', '""xfce4-taskmanager""', ')', 'elif', '(', '""screenshot""', 'in', 'p', ')', ':', 'os', '.', 'system', '(', '""xfce4-screenshooter""', ')', 'elif', '(', '(', '""jupyter""', 'in', 'p', ')', 'or', '(', '""notebook""', 'in', 'p', ')', ')', ':', 'os', '.', 'system', '(', '""jupyter notebook""', ')', 'elif', '(', '(', '""libreoffice impress""', 'in', 'p', ')', 'or', '(', '""presentation tool""', 'in', 'p', ')', ')', ':', 'os', '.', 'system', '(', '""libreoffice --impress""', ')', 'elif', '(', '(', '""libreoffice writer""', 'in', 'p', ')', 'or', '(', '""text editor""', 'in', 'p', ')', ')', ':', 'os', '.', 'system', '(', '""libreoffice --writer""', ')', 'elif', '(', '""notepad""', 'in', 'p', ')', ':', 'os', '.', 'system', '(', '""notepad""', ')', 'elif', '(', '(', '""libreoffice calc""', 'in', 'p', ')', 'or', '(', '""spreadsheet""', 'in', 'p', ')', ')', ':', 'os', '.', 'system', '(', '""libreoffice --calc""', ')', 'elif', '(', '""libreoffice""', 'in', 'p', ')', ':', 'os', '.', 'system', '(', '""libreoffice""', ')', 'elif', '(', '""chrome""', 'in', 'p', ')', ':', 'os', '.', 'system', '(', '""google-chrome-stable""', ')', 'elif', '(', '(', '""firefox""', 'in', 'p', ')', 'or', '(', '""mozilla""', 'in', 'p', ')', ')', ':', 'os', '.', 'system', '(', '""firefox""', ')', 'else', ':', 'print', '(', '""don\'t support""', ')', 'elif', '(', '(', '""quit""', 'in', 'p', ')', 'or', '(', '""exit""', 'in', 'p', ')', 'or', '(', '""stop""', 'in', 'p', ')', 'or', '(', '""close""', 'in', 'p', ')', 'or', '(', '""deactivate""', 'in', 'p', ')', 'or', '(', '""terminate""', 'in', 'p', ')', ')', ':', 'print', '(', '""Thnank You!""', ')', 'break', 'else', ':', 'print', '(', '""don\'t support""', ')']"
2067,"['create', 'empty', 'full', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'empa', '=', 'np', '.', 'empty', '(', '(', '3', ',', '4', ')', ',', 'dtype', '=', 'int', ')', 'print', '(', '""Empty Array""', ')', 'print', '(', 'empa', ')', 'flla', '=', 'np', '.', 'full', '(', '[', '3', ',', '3', ']', ',', '55', ',', 'dtype', '=', 'int', ')', 'print', '(', '""\\n Full Array""', ')', 'print', '(', 'flla', ')']"
2068,"['write', 'python', 'program', 'mirror', 'image', 'string']","['test_str', '=', ""'void'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'mir_dict', '=', '{', ""'b'"", ':', ""'d'"", ',', ""'d'"", ':', ""'b'"", ',', ""'i'"", ':', ""'i'"", ',', ""'o'"", ':', ""'o'"", ',', ""'v'"", ':', ""'v'"", ',', ""'w'"", ':', ""'w'"", ',', ""'x'"", ':', ""'x'"", '}', 'res', '=', ""''"", 'for', 'ele', 'in', 'test_str', ':', 'if', 'ele', 'in', 'mir_dict', ':', 'res', '+=', 'mir_dict', '[', 'ele', ']', 'else', ':', 'res', '=', '""Not Possible""', 'break', 'print', '(', '""The mirror string : ""', '+', 'str', '(', 'res', ')', ')']"
2069,"['write', 'python', 'program', 'substituting', 'pattern', 'text', 'using', 'regex']","['import', 're', 'def', 'substitutor', '(', ')', ':', 'sentence1', '=', '""It is raining outside.""', 'print', '(', 're', '.', 'sub', '(', 'r""raining""', ',', '""sunny""', ',', 'sentence1', ')', ')', 'sentence2', '=', '""Thank you very very much.""', 'print', '(', 're', '.', 'sub', '(', 'r""very""', ',', '""so""', ',', 'sentence2', ')', ')', 'substitutor', '(', ')']"
2070,"['write', 'python', 'program', 'oddeven', 'sort', 'brick', 'sort']","['def', 'oddEvenSort', '(', 'arr', ',', 'n', ')', ':', 'isSorted', '=', '0', 'while', 'isSorted', '==', '0', ':', 'isSorted', '=', '1', 'temp', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '-', '1', ',', '2', ')', ':', 'if', 'arr', '[', 'i', ']', '>', 'arr', '[', 'i', '+', '1', ']', ':', 'arr', '[', 'i', ']', ',', 'arr', '[', 'i', '+', '1', ']', '=', 'arr', '[', 'i', '+', '1', ']', ',', 'arr', '[', 'i', ']', 'isSorted', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', '-', '1', ',', '2', ')', ':', 'if', 'arr', '[', 'i', ']', '>', 'arr', '[', 'i', '+', '1', ']', ':', 'arr', '[', 'i', ']', ',', 'arr', '[', 'i', '+', '1', ']', '=', 'arr', '[', 'i', '+', '1', ']', ',', 'arr', '[', 'i', ']', 'isSorted', '=', '0', 'return', 'arr', '=', '[', '34', ',', '2', ',', '10', ',', '-', '9', ']', 'n', '=', 'len', '(', 'arr', ')', 'oddEvenSort', '(', 'arr', ',', 'n', ')', ';', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')']"
2071,"['find', 'size', 'tuple', 'python']","['import', 'sys', 'Tuple1', '=', '(', '""A""', ',', '1', ',', '""B""', ',', '2', ',', '""C""', ',', '3', ')', 'Tuple2', '=', '(', '""Geek1""', ',', '""Raju""', ',', '""Geek2""', ',', '""Nikhil""', ',', '""Geek3""', ',', '""Deepanshu""', ')', 'Tuple3', '=', '(', '(', '1', ',', '""Lion""', ')', ',', '(', '2', ',', '""Tiger""', ')', ',', '(', '3', ',', '""Fox""', ')', ',', '(', '4', ',', '""Wolf""', ')', ')', 'print', '(', '""Size of Tuple1: ""', '+', 'str', '(', 'sys', '.', 'getsizeof', '(', 'Tuple1', ')', ')', '+', '""bytes""', ')', 'print', '(', '""Size of Tuple2: ""', '+', 'str', '(', 'sys', '.', 'getsizeof', '(', 'Tuple2', ')', ')', '+', '""bytes""', ')', 'print', '(', '""Size of Tuple3: ""', '+', 'str', '(', 'sys', '.', 'getsizeof', '(', 'Tuple3', ')', ')', '+', '""bytes""', ')']"
2072,"['way', 'sort', 'list', 'dictionary', 'value', 'write', 'python', 'program', 'using', 'itemgetter']","['from', 'operator', 'import', 'itemgetter', 'lis', '=', '[', '{', '""name""', ':', '""Nandini""', ',', '""age""', ':', '20', '}', ',', '{', '""name""', ':', '""Manjeet""', ',', '""age""', ':', '20', '}', ',', '{', '""name""', ':', '""Nikhil""', ',', '""age""', ':', '19', '}', ']', 'print', '""The list printed sorting by age: ""', 'print', 'sorted', '(', 'lis', ',', 'key', '=', 'itemgetter', '(', ""'age'"", ')', ')', 'print', '(', '""\\r""', ')', 'print', '""The list printed sorting by age and name: ""', 'print', 'sorted', '(', 'lis', ',', 'key', '=', 'itemgetter', '(', ""'age'"", ',', ""'name'"", ')', ')', 'print', '(', '""\\r""', ')', 'print', '""The list printed sorting by age in descending order: ""', 'print', 'sorted', '(', 'lis', ',', 'key', '=', 'itemgetter', '(', ""'age'"", ')', ',', 'reverse', '=', 'True', ')']"
2073,"['saving', 'text', 'json', 'csv', 'file', 'python']","['file1', '=', 'open', '(', '""myfile.txt""', ')', 'print', '(', 'file1', '.', 'read', '(', ')', ')', 'file1', '.', 'close', '(', ')']"
2074,"['write', 'python', 'program', 'sort', 'list', 'tuple']","['test_tup', '=', '(', '[', '7', ',', '5', ',', '4', ']', ',', '[', '8', ',', '2', ',', '4', ']', ',', '[', '0', ',', '7', ',', '5', ']', ')', 'print', '(', '""The original tuple is : ""', '+', 'str', '(', 'test_tup', ')', ')', 'res', '=', 'tuple', '(', '(', 'sorted', '(', 'sub', ')', 'for', 'sub', 'in', 'test_tup', ')', ')', 'print', '(', '""The tuple after sorting lists : ""', '+', 'str', '(', 'res', ')', ')']"
2075,"['write', 'python', 'program', 'reverse', 'content', 'file', 'using', 'stack']","['class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', '_arr', '=', '[', ']', 'def', 'push', '(', 'self', ',', 'val', ')', ':', 'self', '.', '_arr', '.', 'append', '(', 'val', ')', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'len', '(', 'self', '.', '_arr', ')', '==', '0', 'def', 'pop', '(', 'self', ')', ':', 'if', 'self', '.', 'is_empty', '(', ')', ':', 'print', '(', '""Stack is empty""', ')', 'return', 'return', 'self', '.', '_arr', '.', 'pop', '(', ')', 'def', 'reverse_file', '(', 'filename', ')', ':', 'S', '=', 'Stack', '(', ')', 'original', '=', 'open', '(', 'filename', ')', 'for', 'line', 'in', 'original', ':', 'S', '.', 'push', '(', 'line', '.', 'rstrip', '(', '""\\n""', ')', ')', 'original', '.', 'close', '(', ')', 'output', '=', 'open', '(', 'filename', ',', ""'w'"", ')', 'while', 'not', 'S', '.', 'is_empty', '(', ')', ':', 'output', '.', 'write', '(', 'S', '.', 'pop', '(', ')', '+', '""\\n""', ')', 'output', '.', 'close', '(', ')', 'filename', '=', '""GFG.txt""', 'reverse_file', '(', 'filename', ')', 'with', 'open', '(', 'filename', ')', 'as', 'file', ':', 'for', 'f', 'in', 'file', '.', 'readlines', '(', ')', ':', 'print', '(', 'f', ',', 'end', '=', '""""', ')']"
2076,"['get', 'weighted', 'random', 'choice', 'python']","['import', 'random', 'sampleList', '=', '[', '100', ',', '200', ',', '300', ',', '400', ',', '500', ']', 'randomList', '=', 'random', '.', 'choices', '(', 'sampleList', ',', 'weights', '=', '(', '10', ',', '20', ',', '30', ',', '40', ',', '50', ')', ',', 'k', '=', '5', ')', 'print', '(', 'randomList', ')']"
2077,"['multithreaded', 'priority', 'queue', 'python']","['import', 'queue', 'import', 'threading', 'import', 'time', 'thread_exit_Flag', '=', '0', 'class', 'sample_Thread', '(', 'threading', '.', 'Thread', ')', ':', 'def', '__init__', '(', 'self', ',', 'threadID', ',', 'name', ',', 'q', ')', ':', 'threading', '.', 'Thread', '.', '__init__', '(', 'self', ')', 'self', '.', 'threadID', '=', 'threadID', 'self', '.', 'name', '=', 'name', 'self', '.', 'q', '=', 'q', 'def', 'run', '(', 'self', ')', ':', 'print', '(', '""initializing ""', '+', 'self', '.', 'name', ')', 'process_data', '(', 'self', '.', 'name', ',', 'self', '.', 'q', ')', 'print', '(', '""Exiting ""', '+', 'self', '.', 'name', ')', 'def', 'process_data', '(', 'threadName', ',', 'q', ')', ':', 'while', 'not', 'thread_exit_Flag', ':', 'queueLock', '.', 'acquire', '(', ')', 'if', 'not', 'workQueue', '.', 'empty', '(', ')', ':', 'data', '=', 'q', '.', 'get', '(', ')', 'queueLock', '.', 'release', '(', ')', 'print', '(', '""% s processing % s""', '%', '(', 'threadName', ',', 'data', ')', ')', 'else', ':', 'queueLock', '.', 'release', '(', ')', 'time', '.', 'sleep', '(', '1', ')', 'thread_list', '=', '[', '""Thread-1""', ',', '""Thread-2""', ',', '""Thread-3""', ']', 'name_list', '=', '[', '""A""', ',', '""B""', ',', '""C""', ',', '""D""', ',', '""E""', ']', 'queueLock', '=', 'threading', '.', 'Lock', '(', ')', 'workQueue', '=', 'queue', '.', 'Queue', '(', '10', ')', 'threads', '=', '[', ']', 'threadID', '=', '1', 'for', 'thread_name', 'in', 'thread_list', ':', 'thread', '=', 'sample_Thread', '(', 'threadID', ',', 'thread_name', ',', 'workQueue', ')', 'thread', '.', 'start', '(', ')', 'threads', '.', 'append', '(', 'thread', ')', 'threadID', '+=', '1', 'queueLock', '.', 'acquire', '(', ')', 'for', 'items', 'in', 'name_list', ':', 'workQueue', '.', 'put', '(', 'items', ')', 'queueLock', '.', 'release', '(', ')', 'while', 'not', 'workQueue', '.', 'empty', '(', ')', ':', 'pass', 'thread_exit_Flag', '=', '1', 'for', 't', 'in', 'threads', ':', 't', '.', 'join', '(', ')', 'print', '(', '""Exit Main Thread""', ')']"
2078,"['add', 'padding', 'tkinter', 'widget', 'one', 'side', 'python']","['from', 'tkinter', 'import', '*', 'app', '=', 'Tk', '(', ')', 'app', '.', 'title', '(', '""Vinayak App""', ')', 'width', '=', 'app', '.', 'winfo_screenwidth', '(', ')', 'height', '=', 'app', '.', 'winfo_screenheight', '(', ')', 'app', '.', 'geometry', '(', '""%dx%d""', '%', '(', 'width', ',', 'height', ')', ')', 'l1', '=', 'Label', '(', 'app', ',', 'text', '=', ""'Geeks For Geeks'"", ')', 'l1', '.', 'grid', '(', 'padx', '=', '(', '200', ',', '0', ')', ',', 'pady', '=', '(', '0', ',', '0', ')', ')', 'app', '.', 'mainloop', '(', ')']"
2079,"['switch', 'new', 'window', 'selenium', 'python']","['from', 'selenium', 'import', 'webdriver', 'import', 'time', 'PATH', '=', '""C:/chromedriver.exe""', 'driver', '=', 'webdriver', '.', 'Chrome', '(', 'PATH', ')']"
2080,"['write', 'python', 'program', 'longest', 'substring', 'length', 'k']","['test_str', '=', ""'abcaaaacbbaa'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'K', '=', ""'a'"", 'cnt', '=', '0', 'res', '=', '0', 'for', 'idx', 'in', 'range', '(', 'len', '(', 'test_str', ')', ')', ':', 'if', 'test_str', '[', 'idx', ']', '==', 'K', ':', 'cnt', '+=', '1', 'else', ':', 'cnt', '=', '0', 'res', '=', 'max', '(', 'res', ',', 'cnt', ')', 'print', '(', '""The Longest Substring Length : ""', '+', 'str', '(', 'res', ')', ')']"
2081,"['write', 'python', 'program', 'multiply', 'number', 'list', 'different', 'way']","['def', 'multiplyList', '(', 'myList', ')', ':', 'result', '=', '1', 'for', 'x', 'in', 'myList', ':', 'result', '=', 'result', '*', 'x', 'return', 'result', 'list1', '=', '[', '1', ',', '2', ',', '3', ']', 'list2', '=', '[', '3', ',', '2', ',', '4', ']', 'print', '(', 'multiplyList', '(', 'list1', ')', ')', 'print', '(', 'multiplyList', '(', 'list2', ')', ')']"
2082,"['search', 'replace', 'text', 'file', 'python']","['search_text', '=', '""dummy""', 'replace_text', '=', '""replaced""', 'with', 'open', '(', ""r'SampleFile.txt'"", ',', ""'r'"", ')', 'as', 'file', ':', 'data', '=', 'file', '.', 'read', '(', ')', 'data', '=', 'data', '.', 'replace', '(', 'search_text', ',', 'replace_text', ')', 'with', 'open', '(', ""r'SampleFile.txt'"", ',', ""'w'"", ')', 'as', 'file', ':', 'file', '.', 'write', '(', 'data', ')', 'print', '(', '""Text replaced""', ')']"
2083,"['convert', 'csv', 'json', 'using', 'python']","['import', 'csv', 'import', 'json', 'def', 'make_json', '(', 'csvFilePath', ',', 'jsonFilePath', ')', ':', 'data', '=', '{', '}', 'with', 'open', '(', 'csvFilePath', ',', 'encoding', '=', ""'utf-8'"", ')', 'as', 'csvf', ':', 'csvReader', '=', 'csv', '.', 'DictReader', '(', 'csvf', ')', 'for', 'rows', 'in', 'csvReader', ':', 'key', '=', 'rows', '[', ""'No'"", ']', 'data', '[', 'key', ']', '=', 'rows', 'with', 'open', '(', 'jsonFilePath', ',', ""'w'"", ',', 'encoding', '=', ""'utf-8'"", ')', 'as', 'jsonf', ':', 'jsonf', '.', 'write', '(', 'json', '.', 'dumps', '(', 'data', ',', 'indent', '=', '4', ')', ')', 'csvFilePath', '=', ""r'Names.csv'"", 'jsonFilePath', '=', ""r'Names.json'"", 'make_json', '(', 'csvFilePath', ',', 'jsonFilePath', ')']"
2084,"['print', 'multiple', 'argument', 'python']","['def', 'GFG', '(', 'name', ',', 'num', ')', ':', 'print', '(', '""Hello from ""', ',', 'name', '+', ""', '"", '+', 'num', ')', 'GFG', '(', '""geeks for geeks""', ',', '""25""', ')']"
2085,"['write', 'python', 'program', 'remove', 'duplicate', 'value', 'across', 'dictionary', 'value']","['from', 'collections', 'import', 'Counter', 'test_dict', '=', '{', ""'Manjeet'"", ':', '[', '1', ',', '4', ',', '5', ',', '6', ']', ',', ""'Akash'"", ':', '[', '1', ',', '8', ',', '9', ']', ',', ""'Nikhil'"", ':', '[', '10', ',', '22', ',', '4', ']', ',', ""'Akshat'"", ':', '[', '5', ',', '11', ',', '22', ']', '}', 'print', '(', '""The original dictionary : ""', '+', 'str', '(', 'test_dict', ')', ')', 'cnt', '=', 'Counter', '(', ')', 'for', 'idx', 'in', 'test_dict', '.', 'values', '(', ')', ':', 'cnt', '.', 'update', '(', 'idx', ')', 'res', '=', '{', 'idx', ':', '[', 'key', 'for', 'key', 'in', 'j', 'if', 'cnt', '[', 'key', ']', '==', '1', ']', 'for', 'idx', ',', 'j', 'in', 'test_dict', '.', 'items', '(', ')', '}', 'print', '(', '""Uncommon elements records : ""', '+', 'str', '(', 'res', ')', ')']"
2086,"['check', 'horoscope', 'using', 'python']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup']"
2087,"['write', 'python', 'program', 'adding', 'tuple', 'list', 'vice', 'versa']","['test_list', '=', '[', '5', ',', '6', ',', '7', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'test_tup', '=', '(', '9', ',', '10', ')', 'test_list', '+=', 'test_tup', 'print', '(', '""The container after addition : ""', '+', 'str', '(', 'test_list', ')', ')']"
2088,"['check', 'python', 'variable', 'exists']","['def', 'func', '(', ')', ':', 'a_variable', '=', '0', 'is_local_var', '=', '""a_variable""', 'in', 'locals', '(', ')', 'print', '(', 'is_local_var', ')', 'func', '(', ')']"
2089,"['write', 'python', 'program', 'binary', 'insertion', 'sort']","['def', 'binary_search', '(', 'arr', ',', 'val', ',', 'start', ',', 'end', ')', ':', 'if', 'start', '==', 'end', ':', 'if', 'arr', '[', 'start', ']', '>', 'val', ':', 'return', 'start', 'else', ':', 'return', 'start', '+', '1', 'if', 'start', '>', 'end', ':', 'return', 'start', 'mid', '=', '(', 'start', '+', 'end', ')', '/', '2', 'if', 'arr', '[', 'mid', ']', '<', 'val', ':', 'return', 'binary_search', '(', 'arr', ',', 'val', ',', 'mid', '+', '1', ',', 'end', ')', 'elif', 'arr', '[', 'mid', ']', '>', 'val', ':', 'return', 'binary_search', '(', 'arr', ',', 'val', ',', 'start', ',', 'mid', '-', '1', ')', 'else', ':', 'return', 'mid', 'def', 'insertion_sort', '(', 'arr', ')', ':', 'for', 'i', 'in', 'xrange', '(', '1', ',', 'len', '(', 'arr', ')', ')', ':', 'val', '=', 'arr', '[', 'i', ']', 'j', '=', 'binary_search', '(', 'arr', ',', 'val', ',', '0', ',', 'i', '-', '1', ')', 'arr', '=', 'arr', '[', ':', 'j', ']', '+', '[', 'val', ']', '+', 'arr', '[', 'j', ':', 'i', ']', '+', 'arr', '[', 'i', '+', '1', ':', ']', 'return', 'arr', 'print', '(', '""Sorted array:""', ')', 'print', 'insertion_sort', '(', '[', '37', ',', '23', ',', '0', ',', '17', ',', '12', ',', '72', ',', '31', ',', '46', ',', '100', ',', '88', ',', '54', ']', ')']"
2090,"['write', 'python', 'program', 'numpyisin', 'method']","['import', 'numpy', 'as', 'np', 'gfg1', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ')', 'lis', '=', '[', '1', ',', '3', ',', '5', ']', 'gfg', '=', 'np', '.', 'isin', '(', 'gfg1', ',', 'lis', ')', 'print', '(', 'gfg', ')']"
2091,"['calculate', 'inner', 'outer', 'cross', 'product', 'matrix', 'vector', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', '2', ',', '6', ']', ')', 'b', '=', 'np', '.', 'array', '(', '[', '3', ',', '10', ']', ')', 'print', '(', '""Vectors :""', ')', 'print', '(', '""a = ""', ',', 'a', ')', 'print', '(', '""\\nb = ""', ',', 'b', ')', 'print', '(', '""\\nInner product of vectors a and b =""', ')', 'print', '(', 'np', '.', 'inner', '(', 'a', ',', 'b', ')', ')', 'print', '(', '""---------------------------------------""', ')', 'x', '=', 'np', '.', 'array', '(', '[', '[', '2', ',', '3', ',', '4', ']', ',', '[', '3', ',', '2', ',', '9', ']', ']', ')', 'y', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '5', ',', '0', ']', ',', '[', '5', ',', '10', ',', '3', ']', ']', ')', 'print', '(', '""\\nMatrices :""', ')', 'print', '(', '""x =""', ',', 'x', ')', 'print', '(', '""\\ny =""', ',', 'y', ')', 'print', '(', '""\\nInner product of matrices x and y =""', ')', 'print', '(', 'np', '.', 'inner', '(', 'x', ',', 'y', ')', ')']"
2092,"['write', 'python', 'program', 'get', 'number', 'character', 'word', 'space', 'line', 'file']","['def', 'counter', '(', 'fname', ')', ':', 'num_words', '=', '0', 'num_lines', '=', '0', 'num_charc', '=', '0', 'num_spaces', '=', '0', 'with', 'open', '(', 'fname', ',', ""'r'"", ')', 'as', 'f', ':', 'for', 'line', 'in', 'f', ':', 'num_lines', '+=', '1', 'word', '=', ""'Y'"", 'for', 'letter', 'in', 'line', ':', 'if', '(', 'letter', '!=', ""' '"", 'and', 'word', '==', ""'Y'"", ')', ':', 'num_words', '+=', '1', 'word', '=', ""'N'"", 'elif', '(', 'letter', '==', ""' '"", ')', ':', 'num_spaces', '+=', '1', 'word', '=', ""'Y'"", 'for', 'i', 'in', 'letter', ':', 'if', '(', 'i', '!=', '"" ""', 'and', 'i', '!=', '""\\n""', ')', ':', 'num_charc', '+=', '1', 'print', '(', '""Number of words in text file: ""', ',', 'num_words', ')', 'print', '(', '""Number of lines in text file: ""', ',', 'num_lines', ')', 'print', '(', ""'Number of characters in text file: '"", ',', 'num_charc', ')', 'print', '(', ""'Number of spaces in text file: '"", ',', 'num_spaces', ')', 'if', '__name__', '==', ""'__main__'"", ':', 'fname', '=', ""'File1.txt'"", 'try', ':', 'counter', '(', 'fname', ')', 'except', ':', 'print', '(', ""'File not found'"", ')']"
2093,"['split', 'text', 'column', 'two', 'column', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Name'"", ':', '[', ""'John Larter'"", ',', ""'Robert Junior'"", ',', ""'Jonny Depp'"", ']', ',', ""'Age'"", ':', '[', '32', ',', '34', ',', '36', ']', '}', ')', 'print', '(', '""Given Dataframe is :\\n""', ',', 'df', ')', 'print', '(', '""\\nSplitting \'Name\' column into two different columns :\\n""', ',', 'df', '.', 'Name', '.', 'str', '.', 'split', '(', 'expand', '=', 'True', ')', ')']"
2094,"['write', 'python', 'program', 'creating', 'dataframe', 'dict', 'narraylists']","['import', 'pandas', 'as', 'pd', 'data', '=', '{', ""'Category'"", ':', '[', ""'Array'"", ',', ""'Stack'"", ',', ""'Queue'"", ']', ',', ""'Marks'"", ':', '[', '20', ',', '21', ',', '19', ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', ')', 'print', '(', 'df', ')']"
2095,"['write', 'python', 'program', 'numpy', 'npeigvals', 'method']","['from', 'numpy', 'import', 'linalg', 'as', 'LA', 'gfg', '=', 'LA', '.', 'eigvals', '(', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', ')', 'print', '(', 'gfg', ')']"
2096,"['saving', 'networkx', 'graph', 'gexf', 'format', 'visualize', 'using', 'gephi', 'python']","['import', 'networkx', 'as', 'nx', 'G', '=', 'nx', '.', 'path_graph', '(', '10', ')', 'nx', '.', 'write_gexf', '(', 'G', ',', '""geeksforgeeks.gexf""', ')']"
2097,"['sort', 'csv', 'multiple', 'column', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', 'pd', '.', 'read_csv', '(', '""diamonds.csv""', ')', 'data', '.', 'sort_values', '(', '""carat""', ',', 'axis', '=', '0', ',', 'ascending', '=', 'True', ',', 'inplace', '=', 'True', ',', 'na_position', '=', ""'first'"", ')', 'data', '.', 'head', '(', '10', ')']"
2098,"['write', 'python', 'program', 'extract', 'symmetric', 'tuples']","['test_list', '=', '[', '(', '6', ',', '7', ')', ',', '(', '2', ',', '3', ')', ',', '(', '7', ',', '6', ')', ',', '(', '9', ',', '8', ')', ',', '(', '10', ',', '2', ')', ',', '(', '8', ',', '9', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'temp', '=', 'set', '(', 'test_list', ')', '&', '{', '(', 'b', ',', 'a', ')', 'for', 'a', ',', 'b', 'in', 'test_list', '}', 'res', '=', '{', '(', 'a', ',', 'b', ')', 'for', 'a', ',', 'b', 'in', 'temp', 'if', 'a', '<', 'b', '}', 'print', '(', '""The Symmetric tuples : ""', '+', 'str', '(', 'res', ')', ')']"
2099,"['write', 'python', 'program', 'remove', 'key', 'substring', 'value']","['test_dict', '=', '{', '1', ':', ""'Gfg is best for geeks'"", ',', '2', ':', ""'Gfg is good'"", ',', '3', ':', ""'I love Gfg'"", '}', 'print', '(', '""The original dictionary : ""', '+', 'str', '(', 'test_dict', ')', ')', 'sub_list', '=', '[', ""'love'"", ',', ""'good'"", ']', 'res', '=', 'dict', '(', ')', 'for', 'key', ',', 'val', 'in', 'test_dict', '.', 'items', '(', ')', ':', 'if', 'not', 'any', '(', 'ele', 'in', 'val', 'for', 'ele', 'in', 'sub_list', ')', ':', 'res', '[', 'key', ']', '=', 'val', 'print', '(', '""Filtered Dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
2100,"['numpy', 'string', 'operation', 'upper', 'function', 'python']","['import', 'numpy', 'as', 'geek', 'in_arr', '=', 'geek', '.', 'array', '(', '[', ""'p4q r'"", ',', ""'4q rp'"", ',', ""'q rp4'"", ',', ""'rp4q'"", ']', ')', 'print', '(', '""input array : ""', ',', 'in_arr', ')', 'out_arr', '=', 'geek', '.', 'char', '.', 'upper', '(', 'in_arr', ')', 'print', '(', '""output uppercased array :""', ',', 'out_arr', ')']"
2101,"['map', 'function', 'lambda', 'expression', 'python', 'replace', 'character']","['def', 'replaceChars', '(', 'input', ',', 'c1', ',', 'c2', ')', ':', 'newChars', '=', 'map', '(', 'lambda', 'x', ':', 'x', 'if', '(', 'x', '!=', 'c1', 'and', 'x', '!=', 'c2', ')', 'else', 'c1', 'if', '(', 'x', '==', 'c2', ')', 'else', 'c2', ',', 'input', ')', 'print', '(', ""''"", '.', 'join', '(', 'newChars', ')', ')', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', ""'grrksfoegrrks'"", 'c1', '=', ""'e'"", 'c2', '=', ""'r'"", 'replaceChars', '(', 'input', ',', 'c1', ',', 'c2', ')']"
2102,"['validate', 'ip', 'address', 'using', 'python', 'without', 'using', 'regex']","['def', 'isValidIP', '(', 's', ')', ':', 'if', 's', '.', 'count', '(', ""'.'"", ')', '!=', '3', ':', 'return', ""'Invalid Ip address'"", 'l', '=', 'list', '(', 'map', '(', 'str', ',', 's', '.', 'split', '(', ""'.'"", ')', ')', ')', 'for', 'ele', 'in', 'l', ':', 'if', 'int', '(', 'ele', ')', '<', '0', 'or', 'int', '(', 'ele', ')', '>', '255', ':', 'return', ""'Invalid Ip address'"", 'return', ""'Valid Ip address'"", 'print', '(', 'isValidIP', '(', ""'666.1.2.2'"", ')', ')']"
2103,"['write', 'python', 'program', 'consecutive', 'character', 'frequency']","['from', 'itertools', 'import', 'groupby', 'test_str', '=', '""geekksforgggeeks""', 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'res', '=', '[', 'len', '(', 'list', '(', 'j', ')', ')', 'for', '_', ',', 'j', 'in', 'groupby', '(', 'test_str', ')', ']', 'print', '(', '""The Consecutive characters frequency : ""', '+', 'str', '(', 'res', ')', ')']"
2104,"['save', 'numpy', 'array', 'text', 'file', 'python']","['import', 'numpy', 'List', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', 'Array', '=', 'numpy', '.', 'array', '(', 'List', ')', 'print', '(', ""'Array:\\n'"", ',', 'Array', ')', 'file', '=', 'open', '(', '""file1.txt""', ',', '""w+""', ')', 'content', '=', 'str', '(', 'Array', ')', 'file', '.', 'write', '(', 'content', ')', 'file', '.', 'close', '(', ')', 'file', '=', 'open', '(', '""file1.txt""', ',', '""r""', ')', 'content', '=', 'file', '.', 'read', '(', ')', 'print', '(', '""\\nContent in file1.txt:\\n""', ',', 'content', ')', 'file', '.', 'close', '(', ')']"
2105,"['select', 'row', 'dataframe', 'using', 'iloc', 'iat', 'panda', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Date'"", ':', '[', ""'10/2/2011'"", ',', ""'11/2/2011'"", ',', ""'12/2/2011'"", ',', ""'13/2/11'"", ']', ',', ""'Event'"", ':', '[', ""'Music'"", ',', ""'Poetry'"", ',', ""'Theatre'"", ',', ""'Comedy'"", ']', ',', ""'Cost'"", ':', '[', '10000', ',', '5000', ',', '15000', ',', '2000', ']', '}', ')', 'Row_list', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '(', 'df', '.', 'shape', '[', '0', ']', ')', ')', ':', 'Row_list', '.', 'append', '(', 'list', '(', 'df', '.', 'iloc', '[', 'i', ',', ':', ']', ')', ')', 'print', '(', 'Row_list', '[', ':', '3', ']', ')']"
2106,"['multiply', 'polynomial', 'another', 'using', 'numpy', 'python']","['import', 'numpy', 'px', '=', '(', '5', ',', '-', '2', ',', '5', ')', 'qx', '=', '(', '2', ',', '-', '5', ',', '2', ')', 'rx', '=', 'numpy', '.', 'polynomial', '.', 'polynomial', '.', 'polymul', '(', 'px', ',', 'qx', ')', 'print', '(', 'rx', ')']"
2107,"['creating', 'panda', 'series', 'dictionary', 'python']","['import', 'pandas', 'as', 'pd', 'dictionary', '=', '{', ""'A'"", ':', '10', ',', ""'B'"", ':', '20', ',', ""'C'"", ':', '30', '}', 'series', '=', 'pd', '.', 'Series', '(', 'dictionary', ')', 'print', '(', 'series', ')']"
2108,"['compute', 'median', 'flattened', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'x_odd', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ']', ')', 'print', '(', '""\\nPrinting the Original array:""', ')', 'print', '(', 'x_odd', ')', 'med_odd', '=', 'np', '.', 'median', '(', 'x_odd', ')', 'print', '(', '""\\nMedian of the array that contains \\\nodd no of elements:""', ')', 'print', '(', 'med_odd', ')']"
2109,"['check', 'whether', 'specified', 'value', 'present', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'n_array', '=', 'np', '.', 'array', '(', '[', '[', '2', ',', '3', ',', '0', ']', ',', '[', '4', ',', '1', ',', '6', ']', ']', ')', 'print', '(', '""Given array:""', ')', 'print', '(', 'n_array', ')', 'print', '(', '2', 'in', 'n_array', ')', 'print', '(', '0', 'in', 'n_array', ')', 'print', '(', '6', 'in', 'n_array', ')', 'print', '(', '50', 'in', 'n_array', ')', 'print', '(', '10', 'in', 'n_array', ')']"
2110,"['write', 'python', 'program', 'possible', 'substring', 'count', 'string']","['test_str', '=', '""gekseforgeeks""', 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'arg_str', '=', '""geeks""', 'res', '=', 'min', '(', 'test_str', '.', 'count', '(', 'char', ')', '//', 'arg_str', '.', 'count', '(', 'char', ')', 'for', 'char', 'in', 'set', '(', 'arg_str', ')', ')', 'print', '(', '""Possible substrings count : ""', '+', 'str', '(', 'res', ')', ')']"
2111,"['create', 'numpy', 'array', 'filled', 'one', 'python']","['import', 'numpy', 'as', 'geek', 'a', '=', 'geek', '.', 'ones', '(', '3', ',', 'dtype', '=', 'int', ')', 'print', '(', '""Matrix a : \\n""', ',', 'a', ')', 'b', '=', 'geek', '.', 'ones', '(', '[', '3', ',', '3', ']', ',', 'dtype', '=', 'int', ')', 'print', '(', '""\\nMatrix b : \\n""', ',', 'b', ')']"
2112,"['check', 'button', 'clicked', 'tkinter', 'python']","['from', 'tkinter', 'import', '*', 'app', '=', 'Tk', '(', ')', 'def', 'which_button', '(', 'button_press', ')', ':', 'print', '(', 'button_press', ')', 'b1', '=', 'Button', '(', 'app', ',', 'text', '=', '""Apple""', ',', 'command', '=', 'lambda', 'm', '=', '""It is an apple""', ':', 'which_button', '(', 'm', ')', ')', 'b1', '.', 'grid', '(', 'padx', '=', '10', ',', 'pady', '=', '10', ')', 'b2', '=', 'Button', '(', 'app', ',', 'text', '=', '""Banana""', ',', 'command', '=', 'lambda', 'm', '=', '""It is a banana""', ':', 'which_button', '(', 'm', ')', ')', 'b2', '.', 'grid', '(', 'padx', '=', '10', ',', 'pady', '=', '10', ')', 'app', '.', 'mainloop', '(', ')']"
2113,"['make', 'panda', 'dataframe', 'twodimensional', 'list', 'python']","['import', 'pandas', 'as', 'pd', 'lst', '=', '[', '[', ""'Geek'"", ',', '25', ']', ',', '[', ""'is'"", ',', '30', ']', ',', '[', ""'for'"", ',', '26', ']', ',', '[', ""'Geeksforgeeks'"", ',', '22', ']', ']', 'df', '=', 'pd', '.', 'DataFrame', '(', 'lst', ',', 'columns', '=', '[', ""'Tag'"", ',', ""'number'"", ']', ')', 'print', '(', 'df', ')']"
2114,"['write', 'python', 'program', 'convert', 'list', 'tuples', 'dictionary']","['def', 'Convert', '(', 'tup', ',', 'di', ')', ':', 'for', 'a', ',', 'b', 'in', 'tup', ':', 'di', '.', 'setdefault', '(', 'a', ',', '[', ']', ')', '.', 'append', '(', 'b', ')', 'return', 'di', 'tups', '=', '[', '(', '""akash""', ',', '10', ')', ',', '(', '""gaurav""', ',', '12', ')', ',', '(', '""anand""', ',', '14', ')', ',', '(', '""suraj""', ',', '20', ')', ',', '(', '""akhil""', ',', '25', ')', ',', '(', '""ashish""', ',', '30', ')', ']', 'dictionary', '=', '{', '}', 'print', '(', 'Convert', '(', 'tups', ',', 'dictionary', ')', ')']"
2115,"['bisect', 'algorithm', 'function', 'python']","['import', 'bisect', 'li', '=', '[', '1', ',', '3', ',', '4', ',', '4', ',', '4', ',', '6', ',', '7', ']', 'print', '(', '""The rightmost index to insert, so list remains sorted is\xa0 : ""', ',', 'end', '=', '""""', ')', 'print', '(', 'bisect', '.', 'bisect', '(', 'li', ',', '4', ')', ')', 'print', '(', '""The leftmost index to insert, so list remains sorted is\xa0 : ""', ',', 'end', '=', '""""', ')', 'print', '(', 'bisect', '.', 'bisect_left', '(', 'li', ',', '4', ')', ')', 'print', '(', '""The rightmost index to insert, so list remains sorted is\xa0 : ""', ',', 'end', '=', '""""', ')', 'print', '(', 'bisect', '.', 'bisect_right', '(', 'li', ',', '4', ',', '0', ',', '4', ')', ')']"
2116,"['handling', 'missing', 'key', 'python', 'dictionary']","['d', '=', '{', ""'a'"", ':', '1', ',', ""'b'"", ':', '2', '}', 'print', '(', '""The value associated with \'c\' is : ""', ')', 'print', '(', 'd', '[', ""'c'"", ']', ')']"
2117,"['construct', 'dataframe', 'panda', 'using', 'string', 'data', 'python']","['import', 'pandas', 'as', 'pd', 'from', 'io', 'import', 'StringIO', 'StringData', '=', 'StringIO', '(', '""""""Date;Event;Cost\n\xa0\xa0\xa0\xa010/2/2011;Music;10000\n\xa0\xa0\xa0\xa011/2/2011;Poetry;12000\n\xa0\xa0\xa0\xa012/2/2011;Theatre;5000\n\xa0\xa0\xa0\xa013/2/2011;Comedy;8000\n\xa0\xa0\xa0\xa0""""""', ')', 'df', '=', 'pd', '.', 'read_csv', '(', 'StringData', ',', 'sep', '=', '"";""', ')', 'print', '(', 'df', ')']"
2118,"['write', 'python', 'program', 'sort', 'list', 'tuples', 'alphabetically']","['def', 'SortTuple', '(', 'tup', ')', ':', 'n', '=', 'len', '(', 'tup', ')', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'for', 'j', 'in', 'range', '(', 'n', '-', 'i', '-', '1', ')', ':', 'if', 'tup', '[', 'j', ']', '[', '0', ']', '>', 'tup', '[', 'j', '+', '1', ']', '[', '0', ']', ':', 'tup', '[', 'j', ']', ',', 'tup', '[', 'j', '+', '1', ']', '=', 'tup', '[', 'j', '+', '1', ']', ',', 'tup', '[', 'j', ']', 'return', 'tup', 'tup', '=', '[', '(', '""Amana""', ',', '28', ')', ',', '(', '""Zenat""', ',', '30', ')', ',', '(', '""Abhishek""', ',', '29', ')', ',', '(', '""Nikhil""', ',', '21', ')', ',', '(', '""B""', ',', '""C""', ')', ']', 'print', '(', 'SortTuple', '(', 'tup', ')', ')']"
2119,"['numpy', 'string', 'operation', 'lower', 'function', 'python']","['import', 'numpy', 'as', 'geek', 'in_arr', '=', 'geek', '.', 'array', '(', '[', ""'P4Q R'"", ',', ""'4Q RP'"", ',', ""'Q RP4'"", ',', ""'RP4Q'"", ']', ')', 'print', '(', '""input array : ""', ',', 'in_arr', ')', 'out_arr', '=', 'geek', '.', 'char', '.', 'lower', '(', 'in_arr', ')', 'print', '(', '""output lowercased array :""', ',', 'out_arr', ')']"
2120,"['numpyrandomlaplace', 'python']","['import', 'numpy', 'as', 'np', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'gfg', '=', 'np', '.', 'random', '.', 'laplace', '(', '1.45', ',', '15', ',', '1000', ')', 'count', ',', 'bins', ',', 'ignored', '=', 'plt', '.', 'hist', '(', 'gfg', ',', '30', ',', 'density', '=', 'True', ')', 'plt', '.', 'show', '(', ')']"
2121,"['convert', 'class', 'object', 'json', 'python']","['import', 'json', 'class', 'Student', ':', 'def', '__init__', '(', 'self', ',', 'roll_no', ',', 'name', ',', 'batch', ')', ':', 'self', '.', 'roll_no', '=', 'roll_no', 'self', '.', 'name', '=', 'name', 'self', '.', 'batch', '=', 'batch', 'class', 'Car', ':', 'def', '__init__', '(', 'self', ',', 'brand', ',', 'name', ',', 'batch', ')', ':', 'self', '.', 'brand', '=', 'brand', 'self', '.', 'name', '=', 'name', 'self', '.', 'batch', '=', 'batch', 'if', '__name__', '==', '""__main__""', ':', 's1', '=', 'Student', '(', '""85""', ',', '""Swapnil""', ',', '""IMT""', ')', 's2', '=', 'Student', '(', '""124""', ',', '""Akash""', ',', '""IMT""', ')', 'c1', '=', 'Car', '(', '""Honda""', ',', '""city""', ',', '""2005""', ')', 'c2', '=', 'Car', '(', '""Honda""', ',', '""Amaze""', ',', '""2011""', ')', 'jsonstr1', '=', 'json', '.', 'dumps', '(', 's1', '.', '__dict__', ')', 'jsonstr2', '=', 'json', '.', 'dumps', '(', 's2', '.', '__dict__', ')', 'jsonstr3', '=', 'json', '.', 'dumps', '(', 'c1', '.', '__dict__', ')', 'jsonstr4', '=', 'json', '.', 'dumps', '(', 'c2', '.', '__dict__', ')', 'print', '(', 'jsonstr1', ')', 'print', '(', 'jsonstr2', ')', 'print', '(', 'jsonstr3', ')', 'print', '(', 'jsonstr4', ')']"
2122,"['write', 'python', 'program', 'bitonic', 'sort']","['def', 'compAndSwap', '(', 'a', ',', 'i', ',', 'j', ',', 'dire', ')', ':', 'if', '(', 'dire', '==', '1', 'and', 'a', '[', 'i', ']', '>', 'a', '[', 'j', ']', ')', 'or', '(', 'dire', '==', '0', 'and', 'a', '[', 'i', ']', '>', 'a', '[', 'j', ']', ')', ':', 'a', '[', 'i', ']', ',', 'a', '[', 'j', ']', '=', 'a', '[', 'j', ']', ',', 'a', '[', 'i', ']', 'def', 'bitonicMerge', '(', 'a', ',', 'low', ',', 'cnt', ',', 'dire', ')', ':', 'if', 'cnt', '>', '1', ':', 'k', '=', 'cnt', '/', '2', 'for', 'i', 'in', 'range', '(', 'low', ',', 'low', '+', 'k', ')', ':', 'compAndSwap', '(', 'a', ',', 'i', ',', 'i', '+', 'k', ',', 'dire', ')', 'bitonicMerge', '(', 'a', ',', 'low', ',', 'k', ',', 'dire', ')', 'bitonicMerge', '(', 'a', ',', 'low', '+', 'k', ',', 'k', ',', 'dire', ')', 'def', 'bitonicSort', '(', 'a', ',', 'low', ',', 'cnt', ',', 'dire', ')', ':', 'if', 'cnt', '>', '1', ':', 'k', '=', 'cnt', '/', '2', 'bitonicSort', '(', 'a', ',', 'low', ',', 'k', ',', '1', ')', 'bitonicSort', '(', 'a', ',', 'low', '+', 'k', ',', 'k', ',', '0', ')', 'bitonicMerge', '(', 'a', ',', 'low', ',', 'cnt', ',', 'dire', ')', 'def', 'sort', '(', 'a', ',', 'N', ',', 'up', ')', ':', 'bitonicSort', '(', 'a', ',', '0', ',', 'N', ',', 'up', ')', 'a', '=', '[', '3', ',', '7', ',', '4', ',', '8', ',', '6', ',', '2', ',', '1', ',', '5', ']', 'n', '=', 'len', '(', 'a', ')', 'up', '=', '1', 'sort', '(', 'a', ',', 'n', ',', 'up', ')', 'print', '(', '""\\n\\nSorted array is""', ')', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'print', '(', '""%d""', '%', 'a', '[', 'i', ']', ')', ',']"
2123,"['write', 'python', 'program', 'way', 'remove', 'key', 'dictionary']","['test_dict', '=', '{', '""Arushi""', ':', '22', ',', '""Anuradha""', ':', '21', ',', '""Mani""', ':', '21', ',', '""Haritha""', ':', '21', '}', 'print', '(', '""The dictionary before performing remove is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'del', 'test_dict', '[', ""'Mani'"", ']', 'print', '(', '""The dictionary after remove is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'del', 'test_dict', '[', ""'Manjeet'"", ']']"
2124,"['write', 'python', 'program', 'gnome', 'sort']","['def', 'gnomeSort', '(', 'arr', ',', 'n', ')', ':', 'index', '=', '0', 'while', 'index', '<', 'n', ':', 'if', 'index', '==', '0', ':', 'index', '=', 'index', '+', '1', 'if', 'arr', '[', 'index', ']', '>=', 'arr', '[', 'index', '-', '1', ']', ':', 'index', '=', 'index', '+', '1', 'else', ':', 'arr', '[', 'index', ']', ',', 'arr', '[', 'index', '-', '1', ']', '=', 'arr', '[', 'index', '-', '1', ']', ',', 'arr', '[', 'index', ']', 'index', '=', 'index', '-', '1', 'return', 'arr', 'arr', '=', '[', '34', ',', '2', ',', '10', ',', '-', '9', ']', 'n', '=', 'len', '(', 'arr', ')', 'arr', '=', 'gnomeSort', '(', 'arr', ',', 'n', ')', 'print', '""Sorted sequence after applying Gnome Sort :""', ',', 'for', 'i', 'in', 'arr', ':', 'print', 'i', ',']"
2125,"['reverse', 'word', 'given', 'string', 'python']","['def', 'rev_sentence', '(', 'sentence', ')', ':', 'words', '=', 'sentence', '.', 'split', '(', ""' '"", ')', 'reverse_sentence', '=', ""' '"", '.', 'join', '(', 'reversed', '(', 'words', ')', ')', 'return', 'reverse_sentence', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', ""'geeks quiz practice code'"", 'print', '(', 'rev_sentence', '(', 'input', ')', ')']"
2126,"['write', 'python', 'program', 'rowwise', 'element', 'addition', 'tuple', 'matrix']","['test_list', '=', '[', '[', '(', ""'Gfg'"", ',', '3', ')', ',', '(', ""'is'"", ',', '3', ')', ']', ',', '[', '(', ""'best'"", ',', '1', ')', ']', ',', '[', '(', ""'for'"", ',', '5', ')', ',', '(', ""'geeks'"", ',', '1', ')', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'cus_eles', '=', '[', '6', ',', '7', ',', '8', ']', 'res', '=', '[', '[', 'sub', '+', '(', 'cus_eles', '[', 'idx', ']', ',', ')', 'for', 'sub', 'in', 'val', ']', 'for', 'idx', ',', 'val', 'in', 'enumerate', '(', 'test_list', ')', ']', 'print', '(', '""The matrix after row elements addition : ""', '+', 'str', '(', 'res', ')', ')']"
2127,"['write', 'python', 'program', 'print', 'hollow', 'half', 'diamond', 'hash', 'pattern']","['def', 'hollow_half_diamond', '(', 'N', ')', ':', 'for', 'i', 'in', 'range', '(', '1', ',', 'N', '+', '1', ')', ':', 'for', 'j', 'in', 'range', '(', '1', ',', 'i', '+', '1', ')', ':', 'if', 'i', '==', 'j', 'or', 'j', '==', '1', ':', 'print', '(', '""#""', ',', 'end', '=', '"" ""', ')', 'else', ':', 'print', '(', '"" ""', ',', 'end', '=', '"" ""', ')', 'print', '(', ')', 'for', 'i', 'in', 'range', '(', 'N', '-', '1', ',', '0', ',', '-', '1', ')', ':', 'for', 'j', 'in', 'range', '(', '1', ',', 'i', '+', '1', ')', ':', 'if', 'j', '==', '1', 'or', 'i', '==', 'j', ':', 'print', '(', '""#""', ',', 'end', '=', '"" ""', ')', 'else', ':', 'print', '(', '"" ""', ',', 'end', '=', '"" ""', ')', 'print', '(', ')', 'if', '__name__', '==', '""__main__""', ':', 'N', '=', '7', 'hollow_half_diamond', '(', 'N', ')']"
2128,"['compute', 'condition', 'number', 'given', 'matrix', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'matrix', '=', 'np', '.', 'array', '(', '[', '[', '4', ',', '2', ']', ',', '[', '3', ',', '1', ']', ']', ')', 'print', '(', '""Original matrix:""', ')', 'print', '(', 'matrix', ')', 'result', '=', 'np', '.', 'linalg', '.', 'cond', '(', 'matrix', ')', 'print', '(', '""Condition number of the matrix:""', ')', 'print', '(', 'result', ')']"
2129,"['extract', 'paragraph', 'website', 'save', 'text', 'file', 'python']","['import', 'urllib', '.', 'request', 'from', 'bs4', 'import', 'BeautifulSoup', 'urllib', '.', 'request', '.', 'urlretrieve', '(', '""https://www.geeksforgeeks.org/grep-command-in-unixlinux/?ref=leftbar-rightbar""', ',', '""/home/gpt/PycharmProjects/pythonProject1/test/text_file.txt""', ')', 'file', '=', 'open', '(', '""text_file.txt""', ',', '""r""', ')', 'contents', '=', 'file', '.', 'read', '(', ')', 'soup', '=', 'BeautifulSoup', '(', 'contents', ',', ""'html.parser'"", ')', 'f', '=', 'open', '(', '""test1.txt""', ',', '""w""', ')', 'for', 'data', 'in', 'soup', '.', 'find_all', '(', '""p""', ')', ':', 'sum', '=', 'data', '.', 'get_text', '(', ')', 'f', '.', 'writelines', '(', 'sum', ')', 'f', '.', 'close', '(', ')']"
2130,"['write', 'python', 'program', 'minimum', 'number', 'subset', 'distinct', 'element', 'using', 'counter']","['from', 'collections', 'import', 'Counter', 'def', 'minSubsets', '(', 'input', ')', ':', 'freqDict', '=', 'Counter', '(', 'input', ')', 'print', '(', 'max', '(', 'freqDict', '.', 'values', '(', ')', ')', ')', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', '[', '1', ',', '2', ',', '3', ',', '3', ']', 'minSubsets', '(', 'input', ')']"
2131,"['add', 'one', 'polynomial', 'another', 'using', 'numpy', 'python']","['import', 'numpy', 'px', '=', '(', '5', ',', '-', '2', ',', '5', ')', 'qx', '=', '(', '2', ',', '-', '5', ',', '2', ')', 'rx', '=', 'numpy', '.', 'polynomial', '.', 'polynomial', '.', 'polyadd', '(', 'px', ',', 'qx', ')', 'print', '(', 'rx', ')']"
2132,"['write', 'python', 'program', 'numpy', 'matrixmean']","['import', 'numpy', 'as', 'np', 'gfg', '=', 'np', '.', 'matrix', '(', ""'[64, 1; 12, 3]'"", ')', 'geeks', '=', 'gfg', '.', 'mean', '(', ')', 'print', '(', 'geeks', ')']"
2133,"['write', 'python', 'program', 'remove', 'empty', 'list', 'list']","['test_list', '=', '[', '5', ',', '6', ',', '[', ']', ',', '3', ',', '[', ']', ',', '[', ']', ',', '9', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', 'ele', 'for', 'ele', 'in', 'test_list', 'if', 'ele', '!=', '[', ']', ']', 'print', '(', '""List after empty list removal : ""', '+', 'str', '(', 'res', ')', ')']"
2134,"['write', 'python', 'program', 'read', 'csv', 'column', 'list', 'without', 'header']","['import', 'csv', 'with', 'open', '(', ""'Data.csv'"", ',', 'newline', '=', ""''"", ')', 'as', 'file', ':', 'reader', '=', 'csv', '.', 'reader', '(', 'file', ',', 'delimiter', '=', ""' '"", ')', 'headings', '=', 'next', '(', 'reader', ')', 'Output', '=', '[', ']', 'for', 'row', 'in', 'reader', ':', 'Output', '.', 'append', '(', 'row', '[', ':', ']', ')', 'for', 'row_num', ',', 'rows', 'in', 'enumerate', '(', 'Output', ')', ':', 'print', '(', ""'data in row number {} is {}'"", '.', 'format', '(', 'row_num', '+', '1', ',', 'rows', ')', ')', 'print', '(', ""'headers were: '"", ',', 'headings', ')']"
2135,"['write', 'python', 'program', 'create', 'nested', 'dictionary', 'using', 'given', 'list']","['test_dict', '=', '{', ""'Gfg'"", ':', '4', ',', ""'is'"", ':', '5', ',', ""'best'"", ':', '9', '}', 'test_list', '=', '[', '8', ',', '3', ',', '2', ']', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '{', '}', 'for', 'key', ',', 'ele', 'in', 'zip', '(', 'test_list', ',', 'test_dict', '.', 'items', '(', ')', ')', ':', 'res', '[', 'key', ']', '=', 'dict', '(', '[', 'ele', ']', ')', 'print', '(', '""The mapped dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
2136,"['split', 'column', 'panda', 'dataframe', 'get', 'part', 'python']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Geek_ID'"", ':', '[', ""'Geek1_id'"", ',', ""'Geek2_id'"", ',', ""'Geek3_id'"", ',', ""'Geek4_id'"", ',', ""'Geek5_id'"", ']', ',', ""'Geek_A'"", ':', '[', '1', ',', '1', ',', '3', ',', '2', ',', '4', ']', ',', ""'Geek_B'"", ':', '[', '1', ',', '2', ',', '3', ',', '4', ',', '6', ']', ',', ""'Geek_R'"", ':', 'np', '.', 'random', '.', 'randn', '(', '5', ')', '}', ')', 'print', '(', 'df', '.', 'Geek_ID', '.', 'str', '.', 'split', '(', ""'_'"", ')', '.', 'str', '[', '0', ']', ')']"
2137,"['pretty', 'print', 'linked', 'list', 'python']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'val', '=', 'None', ')', ':', 'self', '.', 'val', '=', 'val', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ',', 'head', '=', 'None', ')', ':', 'self', '.', 'head', '=', 'head', 'def', '__str__', '(', 'self', ')', ':', 'res', '=', '""""', 'ptr', '=', 'self', '.', 'head', 'while', 'ptr', ':', 'res', '+=', 'str', '(', 'ptr', '.', 'val', ')', '+', '"", ""', 'ptr', '=', 'ptr', '.', 'next', 'res', '=', 'res', '.', 'strip', '(', '"", ""', ')', 'if', 'len', '(', 'res', ')', ':', 'return', '""[""', '+', 'res', '+', '""]""', 'else', ':', 'return', '""[]""', 'if', '__name__', '==', '""__main__""', ':', 'll', '=', 'LinkedList', '(', ')', 'node1', '=', 'Node', '(', '10', ')', 'node2', '=', 'Node', '(', '15', ')', 'node3', '=', 'Node', '(', '20', ')', 'll', '.', 'head', '=', 'node1', 'node1', '.', 'next', '=', 'node2', 'node2', '.', 'next', '=', 'node3', 'print', '(', 'll', ')']"
2138,"['write', 'python', 'program', 'maximum', 'minimum', 'k', 'element', 'tuple']","['test_tup', '=', '(', '5', ',', '20', ',', '3', ',', '7', ',', '6', ',', '8', ')', 'print', '(', '""The original tuple is : ""', '+', 'str', '(', 'test_tup', ')', ')', 'K', '=', '2', 'res', '=', '[', ']', 'test_tup', '=', 'list', '(', 'sorted', '(', 'test_tup', ')', ')', 'for', 'idx', ',', 'val', 'in', 'enumerate', '(', 'test_tup', ')', ':', 'if', 'idx', '<', 'K', 'or', 'idx', '>=', 'len', '(', 'test_tup', ')', '-', 'K', ':', 'res', '.', 'append', '(', 'val', ')', 'res', '=', 'tuple', '(', 'res', ')', 'print', '(', '""The extracted values : ""', '+', 'str', '(', 'res', ')', ')']"
2139,"['write', 'python', 'program', 'pigeonhole', 'sort']","['def', 'pigeonhole_sort', '(', 'a', ')', ':', 'my_min', '=', 'min', '(', 'a', ')', 'my_max', '=', 'max', '(', 'a', ')', 'size', '=', 'my_max', '-', 'my_min', '+', '1', 'holes', '=', '[', '0', ']', '*', 'size', 'for', 'x', 'in', 'a', ':', 'assert', 'type', '(', 'x', ')', 'is', 'int', ',', '""integers only please""', 'holes', '[', 'x', '-', 'my_min', ']', '+=', '1', 'i', '=', '0', 'for', 'count', 'in', 'range', '(', 'size', ')', ':', 'while', 'holes', '[', 'count', ']', '>', '0', ':', 'holes', '[', 'count', ']', '-=', '1', 'a', '[', 'i', ']', '=', 'count', '+', 'my_min', 'i', '+=', '1', 'a', '=', '[', '8', ',', '3', ',', '2', ',', '7', ',', '4', ',', '6', ',', '8', ']', 'print', '(', '""Sorted order is : ""', ',', 'end', '=', '"" ""', ')', 'pigeonhole_sort', '(', 'a', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'a', ')', ')', ':', 'print', '(', 'a', '[', 'i', ']', ',', 'end', '=', '"" ""', ')']"
2140,"['write', 'python', 'program', 'replace', 'substring', 'string', 'list']","['test_list1', '=', '[', ""'GeeksforGeeks'"", ',', ""'is'"", ',', ""'Best'"", ',', ""'For'"", ',', ""'Geeks'"", ',', ""'And'"", ',', ""'Computer Science'"", ']', 'test_list2', '=', '[', '[', ""'Geeks'"", ',', ""'Gks'"", ']', ',', '[', ""'And'"", ',', ""'&'"", ']', ',', '[', ""'Computer'"", ',', ""'Comp'"", ']', ']', 'print', '(', '""The original list 1 is : ""', '+', 'str', '(', 'test_list1', ')', ')', 'print', '(', '""The original list 2 is : ""', '+', 'str', '(', 'test_list2', ')', ')', 'sub', '=', 'dict', '(', 'test_list2', ')', 'for', 'key', ',', 'val', 'in', 'sub', '.', 'items', '(', ')', ':', 'for', 'idx', ',', 'ele', 'in', 'enumerate', '(', 'test_list1', ')', ':', 'if', 'key', 'in', 'ele', ':', 'test_list1', '[', 'idx', ']', '=', 'ele', '.', 'replace', '(', 'key', ',', 'val', ')', 'print', '(', '""The list after replacement : ""', '+', 'str', '(', 'test_list1', ')', ')']"
2141,"['write', 'python', 'dictionary', 'set', 'counter', 'check', 'frequency', 'become']","['from', 'collections', 'import', 'Counter', 'def', 'allSame', '(', 'input', ')', ':', 'dict', '=', 'Counter', '(', 'input', ')', 'same', '=', 'list', '(', 'set', '(', 'dict', '.', 'values', '(', ')', ')', ')', 'if', 'len', '(', 'same', ')', '>', '2', ':', 'print', '(', ""'No'"", ')', 'elif', 'len', '(', 'same', ')', '==', '2', 'and', 'same', '[', '1', ']', '-', 'same', '[', '0', ']', '>', '1', ':', 'print', '(', ""'No'"", ')', 'else', ':', 'print', '(', ""'Yes'"", ')', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', ""'xxxyyzzt'"", 'allSame', '(', 'input', ')']"
2142,"['creating', 'dataframe', 'panda', 'series', 'python']","['import', 'pandas', 'as', 'pd', 'import', 'matplotlib', '.', 'pyplot', 'as', 'plt', 'author', '=', '[', ""'Jitender'"", ',', ""'Purnima'"", ',', ""'Arpit'"", ',', ""'Jyoti'"", ']', 'auth_series', '=', 'pd', '.', 'Series', '(', 'author', ')', 'print', '(', 'auth_series', ')']"
2143,"['write', 'python', 'program', 'print', 'even', 'number', 'list']","['list1', '=', '[', '10', ',', '21', ',', '4', ',', '45', ',', '66', ',', '93', ']', 'for', 'num', 'in', 'list1', ':', 'if', 'num', '%', '2', '==', '0', ':', 'print', '(', 'num', ',', 'end', '=', '"" ""', ')']"
2144,"['write', 'python', 'program', 'sort', 'dictionary', 'value', 'summation']","['test_dict', '=', '{', ""'Gfg'"", ':', '[', '6', ',', '7', ',', '4', ']', ',', ""'is'"", ':', '[', '4', ',', '3', ',', '2', ']', ',', ""'best'"", ':', '[', '7', ',', '6', ',', '5', ']', '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'temp1', '=', '{', 'val', ':', 'sum', '(', 'int', '(', 'idx', ')', 'for', 'idx', 'in', 'key', ')', 'for', 'val', ',', 'key', 'in', 'test_dict', '.', 'items', '(', ')', '}', 'temp2', '=', 'sorted', '(', 'temp1', '.', 'items', '(', ')', ',', 'key', '=', 'lambda', 'ele', ':', 'temp1', '[', 'ele', '[', '0', ']', ']', ')', 'res', '=', '{', 'key', ':', 'val', 'for', 'key', ',', 'val', 'in', 'temp2', '}', 'print', '(', '""The sorted dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
2145,"['numpymoveaxis', 'function', 'python']","['import', 'numpy', 'as', 'geek', 'arr', '=', 'geek', '.', 'zeros', '(', '(', '1', ',', '2', ',', '3', ',', '4', ')', ')', 'gfg', '=', 'geek', '.', 'moveaxis', '(', 'arr', ',', '0', ',', '-', '1', ')', '.', 'shape', 'print', '(', 'gfg', ')']"
2146,"['write', 'python', 'program', 'test', 'substring', 'occurs', 'specific', 'position']","['test_str', '=', '""Gfg is best""', 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'i', ',', 'j', '=', '7', ',', '11', 'substr', '=', '""best""', 'res', '=', 'True', 'k', '=', '0', 'for', 'idx', 'in', 'range', '(', 'len', '(', 'test_str', ')', ')', ':', 'if', 'idx', '>=', 'i', 'and', 'idx', '<', 'j', ':', 'if', 'test_str', '[', 'idx', ']', '!=', 'substr', '[', 'k', ']', ':', 'res', '=', 'False', 'break', 'k', '=', 'k', '+', '1', 'print', '(', '""Does string contain substring at required position ? : ""', '+', 'str', '(', 'res', ')', ')']"
2147,"['write', 'python', 'program', 'element', 'frequency', 'mixed', 'nested', 'tuple']","['def', 'flatten', '(', 'test_tuple', ')', ':', 'for', 'tup', 'in', 'test_tuple', ':', 'if', 'isinstance', '(', 'tup', ',', 'tuple', ')', ':', 'yield', 'from', 'flatten', '(', 'tup', ')', 'else', ':', 'yield', 'tup', 'test_tuple', '=', '(', '5', ',', '6', ',', '(', '5', ',', '6', ')', ',', '7', ',', '(', '8', ',', '9', ')', ',', '9', ')', 'print', '(', '""The original tuple : ""', '+', 'str', '(', 'test_tuple', ')', ')', 'res', '=', '{', '}', 'for', 'ele', 'in', 'flatten', '(', 'test_tuple', ')', ':', 'if', 'ele', 'not', 'in', 'res', ':', 'res', '[', 'ele', ']', '=', '0', 'res', '[', 'ele', ']', '+=', '1', 'print', '(', '""The elements frequency : ""', '+', 'str', '(', 'res', ')', ')']"
2148,"['write', 'python', 'program', 'permutation', 'given', 'string', 'using', 'inbuilt', 'function']","['from', 'itertools', 'import', 'permutations', 'def', 'allPermutations', '(', 'str', ')', ':', 'permList', '=', 'permutations', '(', 'str', ')', 'for', 'perm', 'in', 'list', '(', 'permList', ')', ':', 'print', '(', ""''"", '.', 'join', '(', 'perm', ')', ')', 'if', '__name__', '==', '""__main__""', ':', 'str', '=', ""'ABC'"", 'allPermutations', '(', 'str', ')']"
2149,"['write', 'python', 'program', 'scoring', 'matrix', 'using', 'dictionary']","['test_list', '=', '[', '[', ""'gfg'"", ',', ""'is'"", ',', ""'best'"", ']', ',', '[', ""'gfg'"", ',', ""'is'"", ',', ""'for'"", ',', ""'geeks'"", ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'test_dict', '=', '{', ""'gfg'"", ':', '5', ',', ""'is'"", ':', '10', ',', ""'best'"", ':', '13', ',', ""'for'"", ':', '2', ',', ""'geeks'"", ':', '15', '}', 'res', '=', '[', ']', 'for', 'sub', 'in', 'test_list', ':', 'sum', '=', '0', 'for', 'val', 'in', 'sub', ':', 'if', 'val', 'in', 'test_dict', ':', 'sum', '+=', 'test_dict', '[', 'val', ']', 'res', '.', 'append', '(', 'sum', ')', 'print', '(', '""The Row scores : ""', '+', 'str', '(', 'res', ')', ')']"
2150,"['write', 'python', 'lambda', 'underscore', 'argument']","['remainder', '=', 'lambda', 'num', ':', 'num', '%', '2', 'print', '(', 'remainder', '(', '5', ')', ')']"
2151,"['find', 'matrix', 'vector', 'norm', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'vec', '=', 'np', '.', 'arange', '(', '10', ')', 'vec_norm', '=', 'np', '.', 'linalg', '.', 'norm', '(', 'vec', ')', 'print', '(', '""Vector norm:""', ')', 'print', '(', 'vec_norm', ')']"
2152,"['conditional', 'operation', 'panda', 'dataframe', 'column', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Date'"", ':', '[', ""'10/2/2011'"", ',', ""'11/2/2011'"", ',', ""'12/2/2011'"", ',', ""'13/2/2011'"", ']', ',', ""'Product'"", ':', '[', ""'Umbrella'"", ',', ""'Matress'"", ',', ""'Badminton'"", ',', ""'Shuttle'"", ']', ',', ""'Last Price'"", ':', '[', '1200', ',', '1500', ',', '1600', ',', '352', ']', ',', ""'Updated Price'"", ':', '[', '1250', ',', '1450', ',', '1550', ',', '400', ']', ',', ""'Discount'"", ':', '[', '10', ',', '10', ',', '10', ',', '10', ']', '}', ')', 'print', '(', 'df', ')']"
2153,"['write', 'python', 'program', 'removing', 'ith', 'character', 'string']","['def', 'remove', '(', 'string', ',', 'i', ')', ':', 'a', '=', 'string', '[', ':', 'i', ']', 'b', '=', 'string', '[', 'i', '+', '1', ':', ']', 'return', 'a', '+', 'b', 'if', '__name__', '==', ""'__main__'"", ':', 'string', '=', '""geeksFORgeeks""', 'i', '=', '5', 'print', '(', 'remove', '(', 'string', ',', 'i', ')', ')']"
2154,"['concatenated', 'string', 'uncommon', 'character', 'python']","['def', 'uncommonConcat', '(', 'str1', ',', 'str2', ')', ':', 'set1', '=', 'set', '(', 'str1', ')', 'set2', '=', 'set', '(', 'str2', ')', 'common', '=', 'list', '(', 'set1', '&', 'set2', ')', 'result', '=', '[', 'ch', 'for', 'ch', 'in', 'str1', 'if', 'ch', 'not', 'in', 'common', ']', '+', '[', 'ch', 'for', 'ch', 'in', 'str2', 'if', 'ch', 'not', 'in', 'common', ']', 'print', '(', ""''"", '.', 'join', '(', 'result', ')', ')', 'if', '__name__', '==', '""__main__""', ':', 'str1', '=', ""'aacdb'"", 'str2', '=', ""'gafd'"", 'uncommonConcat', '(', 'str1', ',', 'str2', ')']"
2155,"['clean', 'string', 'data', 'given', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Date'"", ':', '[', ""'10/2/2011'"", ',', ""'11/2/2011'"", ',', ""'12/2/2011'"", ',', ""'13/2/2011'"", ']', ',', ""'Product'"", ':', '[', ""' UMbreLla'"", ',', ""'\xa0 maTress'"", ',', ""'BaDmintoN '"", ',', ""'Shuttle'"", ']', ',', ""'Updated_Price'"", ':', '[', '1250', ',', '1450', ',', '1550', ',', '400', ']', ',', ""'Discount'"", ':', '[', '10', ',', '8', ',', '15', ',', '10', ']', '}', ')', 'print', '(', 'df', ')']"
2156,"['write', 'python', 'program', 'sort', 'matrix', 'indexvalue', 'equality', 'count']","['def', 'get_idx_ele_count', '(', 'row', ')', ':', 'return', 'len', '(', '[', 'ele', 'for', 'idx', ',', 'ele', 'in', 'enumerate', '(', 'row', ')', 'if', 'ele', '==', 'idx', ']', ')', 'test_list', '=', '[', '[', '3', ',', '1', ',', '2', ',', '5', ',', '4', ']', ',', '[', '0', ',', '1', ',', '2', ',', '3', ',', '4', ']', ',', '[', '6', ',', '5', ',', '4', ',', '3', ',', '2', ']', ',', '[', '0', ',', '5', ',', '4', ',', '2', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'test_list', '.', 'sort', '(', 'key', '=', 'get_idx_ele_count', ')', 'print', '(', '""Sorted List : ""', '+', 'str', '(', 'test_list', ')', ')']"
2157,"['subtract', 'one', 'polynomial', 'another', 'using', 'numpy', 'python']","['import', 'numpy', 'px', '=', '(', '5', ',', '-', '2', ',', '5', ')', 'qx', '=', '(', '2', ',', '-', '5', ',', '2', ')', 'rx', '=', 'numpy', '.', 'polynomial', '.', 'polynomial', '.', 'polysub', '(', 'px', ',', 'qx', ')', 'print', '(', 'rx', ')']"
2158,"['write', 'python', 'program', 'convert', 'numeric', 'word', 'number']","['help_dict', '=', '{', ""'one'"", ':', ""'1'"", ',', ""'two'"", ':', ""'2'"", ',', ""'three'"", ':', ""'3'"", ',', ""'four'"", ':', ""'4'"", ',', ""'five'"", ':', ""'5'"", ',', ""'six'"", ':', ""'6'"", ',', ""'seven'"", ':', ""'7'"", ',', ""'eight'"", ':', ""'8'"", ',', ""'nine'"", ':', ""'9'"", ',', ""'zero'"", ':', ""'0'"", '}', 'test_str', '=', '""zero four zero one""', 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'res', '=', ""''"", '.', 'join', '(', 'help_dict', '[', 'ele', ']', 'for', 'ele', 'in', 'test_str', '.', 'split', '(', ')', ')', 'print', '(', '""The string after performing replace : ""', '+', 'res', ')']"
2159,"['write', 'python', 'program', 'sort', 'string', 'list', 'k', 'character', 'frequency']","['test_list', '=', '[', '""geekforgeeks""', ',', '""is""', ',', '""best""', ',', '""for""', ',', '""geeks""', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', ""'e'"", 'res', '=', 'sorted', '(', 'test_list', ',', 'key', '=', 'lambda', 'ele', ':', '-', 'ele', '.', 'count', '(', 'K', ')', ')', 'print', '(', '""Sorted String : ""', '+', 'str', '(', 'res', ')', ')']"
2160,"['write', 'python', 'program', 'swap', 'element', 'string', 'list']","['test_list', '=', '[', ""'Gfg'"", ',', ""'is'"", ',', ""'best'"", ',', ""'for'"", ',', ""'Geeks'"", ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', 'sub', '.', 'replace', '(', ""'G'"", ',', ""'-'"", ')', '.', 'replace', '(', ""'e'"", ',', ""'G'"", ')', '.', 'replace', '(', ""'-'"", ',', ""'e'"", ')', 'for', 'sub', 'in', 'test_list', ']', 'print', '(', '""List after performing character swaps : ""', '+', 'str', '(', 'res', ')', ')']"
2161,"['write', 'python', 'program', 'difference', 'two', 'list']","['def', 'Diff', '(', 'li1', ',', 'li2', ')', ':', 'return', 'list', '(', 'set', '(', 'li1', ')', '-', 'set', '(', 'li2', ')', ')', '+', 'list', '(', 'set', '(', 'li2', ')', '-', 'set', '(', 'li1', ')', ')', 'li1', '=', '[', '10', ',', '15', ',', '20', ',', '25', ',', '30', ',', '35', ',', '40', ']', 'li2', '=', '[', '25', ',', '40', ',', '35', ']', 'print', '(', 'Diff', '(', 'li1', ',', 'li2', ')', ')']"
2162,"['numpy', 'string', 'operation', 'count', 'function', 'python']","['import', 'numpy', 'as', 'geek', 'in_arr', '=', 'geek', '.', 'array', '(', '[', ""'Sayantan'"", ',', ""'\xa0 Sayan\xa0 '"", ',', ""'Sayansubhra'"", ']', ')', 'print', '(', '""Input array : ""', ',', 'in_arr', ')', 'out_arr', '=', 'geek', '.', 'char', '.', 'count', '(', 'in_arr', ',', 'sub', '=', ""'an'"", ')', 'print', '(', '""Output array: ""', ',', 'out_arr', ')']"
2163,"['write', 'python', 'program', 'convert', 'matrix', 'dictionary']","['test_list', '=', '[', '[', '5', ',', '6', ',', '7', ']', ',', '[', '8', ',', '3', ',', '2', ']', ',', '[', '8', ',', '2', ',', '1', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '{', 'idx', '+', '1', ':', 'test_list', '[', 'idx', ']', 'for', 'idx', 'in', 'range', '(', 'len', '(', 'test_list', ')', ')', '}', 'print', '(', '""The constructed dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
2164,"['write', 'python', 'program', 'specific', 'character', 'frequency', 'string', 'list']","['from', 'collections', 'import', 'Counter', 'test_list', '=', '[', '""geeksforgeeks is best for geeks""', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'chr_list', '=', '[', ""'e'"", ',', ""'b'"", ',', ""'g'"", ']', 'res', '=', '{', 'key', ':', 'val', 'for', 'key', ',', 'val', 'in', 'dict', '(', 'Counter', '(', '""""', '.', 'join', '(', 'test_list', ')', ')', ')', '.', 'items', '(', ')', 'if', 'key', 'in', 'chr_list', '}', 'print', '(', '""Specific Characters Frequencies : ""', '+', 'str', '(', 'res', ')', ')']"
2165,"['write', 'python', 'program', 'sort', 'dictionary', 'list', 'key', 'value', 'list', 'index']","['test_list', '=', '[', '{', '""Gfg""', ':', '[', '6', ',', '7', ',', '8', ']', ',', '""is""', ':', '9', ',', '""best""', ':', '10', '}', ',', '{', '""Gfg""', ':', '[', '2', ',', '0', ',', '3', ']', ',', '""is""', ':', '11', ',', '""best""', ':', '19', '}', ',', '{', '""Gfg""', ':', '[', '4', ',', '6', ',', '9', ']', ',', '""is""', ':', '16', ',', '""best""', ':', '1', '}', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '""Gfg""', 'idx', '=', '2', 'res', '=', 'sorted', '(', 'test_list', ',', 'key', '=', 'lambda', 'ele', ':', 'ele', '[', 'K', ']', '[', 'idx', ']', ')', 'print', '(', '""The required sort order : ""', '+', 'str', '(', 'res', ')', ')']"
2166,"['find', 'size', 'dictionary', 'python']","['import', 'sys', 'dic1', '=', '{', '""A""', ':', '1', ',', '""B""', ':', '2', ',', '""C""', ':', '3', '}', 'dic2', '=', '{', '""Geek1""', ':', '""Raju""', ',', '""Geek2""', ':', '""Nikhil""', ',', '""Geek3""', ':', '""Deepanshu""', '}', 'dic3', '=', '{', '1', ':', '""Lion""', ',', '2', ':', '""Tiger""', ',', '3', ':', '""Fox""', ',', '4', ':', '""Wolf""', '}', 'print', '(', '""Size of dic1: ""', '+', 'str', '(', 'sys', '.', 'getsizeof', '(', 'dic1', ')', ')', '+', '""bytes""', ')', 'print', '(', '""Size of dic2: ""', '+', 'str', '(', 'sys', '.', 'getsizeof', '(', 'dic2', ')', ')', '+', '""bytes""', ')', 'print', '(', '""Size of dic3: ""', '+', 'str', '(', 'sys', '.', 'getsizeof', '(', 'dic3', ')', ')', '+', '""bytes""', ')']"
2167,"['write', 'python', 'program', 'find', 'type', 'ip', 'address', 'using', 'regex']","['import', 're', 'ipv4', '=', ""'''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa025[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa025[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa025[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''"", 'ipv6', '=', ""'''(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:)\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0{1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa01,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa04}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0|1{0,1}[0-9]){0,1}[0-9]))'''"", 'def', 'find', '(', 'Ip', ')', ':', 'if', 're', '.', 'search', '(', 'ipv4', ',', 'Ip', ')', ':', 'print', '(', '""IPv4""', ')', 'elif', 're', '.', 'search', '(', 'ipv6', ',', 'Ip', ')', ':', 'print', '(', '""IPv6""', ')', 'else', ':', 'print', '(', '""Neither""', ')', 'if', '__name__', '==', ""'__main__'"", ':', 'Ip', '=', '""192.0.2.126""', 'find', '(', 'Ip', ')', 'Ip', '=', '""3001:0da8:75a3:0000:0000:8a2e:0370:7334""', 'find', '(', 'Ip', ')', 'Ip', '=', '""36.12.08.20.52""', 'find', '(', 'Ip', ')']"
2168,"['write', 'python', 'get', 'list', 'empty', 'directory']","['import', 'os', 'empty', '=', '[', ']', 'for', 'root', ',', 'dirs', ',', 'files', 'in', 'os', '.', 'walk', '(', ""'Test'"", ')', ':', 'if', 'not', 'len', '(', 'dirs', ')', 'and', 'not', 'len', '(', 'files', ')', ':', 'empty', '.', 'append', '(', 'root', ')', 'Print', '(', '""Empty Directories:""', ')', 'print', '(', 'empty', ')']"
2169,"['generate', 'random', 'number', 'uniform', 'distribution', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'r', '=', 'np', '.', 'random', '.', 'uniform', '(', 'size', '=', '4', ')', 'print', '(', 'r', ')']"
2170,"['write', 'python', 'program', 'print', 'odd', 'number', 'list']","['list1', '=', '[', '10', ',', '21', ',', '4', ',', '45', ',', '66', ',', '93', ']', 'for', 'num', 'in', 'list1', ':', 'if', 'num', '%', '2', '!=', '0', ':', 'print', '(', 'num', ',', 'end', '=', '"" ""', ')']"
2171,"['write', 'python', 'program', 'check', 'given', 'string', 'binary', 'string']","['def', 'check', '(', 'string', ')', ':', 'p', '=', 'set', '(', 'string', ')', 's', '=', '{', ""'0'"", ',', ""'1'"", '}', 'if', 's', '==', 'p', 'or', 'p', '==', '{', ""'0'"", '}', 'or', 'p', '==', '{', ""'1'"", '}', ':', 'print', '(', '""Yes""', ')', 'else', ':', 'print', '(', '""No""', ')', 'if', '__name__', '==', '""__main__""', ':', 'string', '=', '""101010000111""', 'check', '(', 'string', ')']"
2172,"['write', 'python', 'program', 'extract', 'tuples', 'k', 'digit', 'element']","['test_list', '=', '[', '(', '54', ',', '2', ')', ',', '(', '34', ',', '55', ')', ',', '(', '222', ',', '23', ')', ',', '(', '12', ',', '45', ')', ',', '(', '78', ',', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '2', 'res', '=', '[', 'sub', 'for', 'sub', 'in', 'test_list', 'if', 'all', '(', 'len', '(', 'str', '(', 'ele', ')', ')', '==', 'K', 'for', 'ele', 'in', 'sub', ')', ']', 'print', '(', '""The Extracted tuples : ""', '+', 'str', '(', 'res', ')', ')']"
2173,"['write', 'python', 'program', 'convert', 'nested', 'tuple', 'custom', 'key', 'dictionary']","['test_tuple', '=', '(', '(', '4', ',', ""'Gfg'"", ',', '10', ')', ',', '(', '3', ',', ""'is'"", ',', '8', ')', ',', '(', '6', ',', ""'Best'"", ',', '10', ')', ')', 'print', '(', '""The original tuple : ""', '+', 'str', '(', 'test_tuple', ')', ')', 'res', '=', '[', '{', ""'key'"", ':', 'sub', '[', '0', ']', ',', ""'value'"", ':', 'sub', '[', '1', ']', ',', ""'id'"", ':', 'sub', '[', '2', ']', '}', 'for', 'sub', 'in', 'test_tuple', ']', 'print', '(', '""The converted dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
2174,"['using', 'dictionary', 'remap', 'value', 'panda', 'dataframe', 'column', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Date'"", ':', '[', ""'10/2/2011'"", ',', ""'11/2/2011'"", ',', ""'12/2/2011'"", ',', ""'13/2/2011'"", ']', ',', ""'Event'"", ':', '[', ""'Music'"", ',', ""'Poetry'"", ',', ""'Theatre'"", ',', ""'Comedy'"", ']', ',', ""'Cost'"", ':', '[', '10000', ',', '5000', ',', '15000', ',', '2000', ']', '}', ')', 'print', '(', 'df', ')']"
2175,"['remove', 'occurrence', 'element', 'list', 'python']","['def', 'remove_items', '(', 'test_list', ',', 'item', ')', ':', 'res', '=', '[', 'i', 'for', 'i', 'in', 'test_list', 'if', 'i', '!=', 'item', ']', 'return', 'res', 'if', '__name__', '==', '""__main__""', ':', 'test_list', '=', '[', '1', ',', '3', ',', '4', ',', '6', ',', '5', ',', '1', ']', 'item', '=', '1', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', 'remove_items', '(', 'test_list', ',', 'item', ')', 'print', '(', '""The list after performing the remove operation is : ""', '+', 'str', '(', 'res', ')', ')']"
2176,"['insert', 'row', 'given', 'position', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Date'"", ':', '[', ""'10/2/2011'"", ',', ""'12/2/2011'"", ',', ""'13/2/2011'"", ',', ""'14/2/2011'"", ']', ',', ""'Event'"", ':', '[', ""'Music'"", ',', ""'Poetry'"", ',', ""'Theatre'"", ',', ""'Comedy'"", ']', ',', ""'Cost'"", ':', '[', '10000', ',', '5000', ',', '15000', ',', '2000', ']', '}', ')', 'print', '(', 'df', ')']"
2177,"['write', 'python', 'program', 'matrix', 'row', 'subset']","['test_list', '=', '[', '[', '4', ',', '5', ',', '7', ']', ',', '[', '2', ',', '3', ',', '4', ']', ',', '[', '9', ',', '8', ',', '0', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'check_matr', '=', '[', '[', '2', ',', '3', ']', ',', '[', '1', ',', '2', ']', ',', '[', '9', ',', '0', ']', ']', 'res', '=', '[', 'ele', 'for', 'ele', 'in', 'check_matr', 'if', 'any', '(', 'all', '(', 'a', 'in', 'sub', 'for', 'a', 'in', 'ele', ')', 'for', 'sub', 'in', 'test_list', ')', ']', 'print', '(', '""Matrix row subsets : ""', '+', 'str', '(', 'res', ')', ')']"
2178,"['inverse', 'matrix', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'A', '=', 'np', '.', 'array', '(', '[', '[', '6', ',', '1', ',', '1', ']', ',', '[', '4', ',', '-', '2', ',', '5', ']', ',', '[', '2', ',', '8', ',', '7', ']', ']', ')', 'print', '(', 'np', '.', 'linalg', '.', 'inv', '(', 'A', ')', ')']"
2179,"['create', 'list', 'object', 'python', 'class']","['class', 'geeks', ':', 'def', '__init__', '(', 'self', ',', 'name', ',', 'roll', ')', ':', 'self', '.', 'name', '=', 'name', 'self', '.', 'roll', '=', 'roll', 'list', '=', '[', ']', 'list', '.', 'append', '(', 'geeks', '(', ""'Akash'"", ',', '2', ')', ')', 'list', '.', 'append', '(', 'geeks', '(', ""'Deependra'"", ',', '40', ')', ')', 'list', '.', 'append', '(', 'geeks', '(', ""'Reaper'"", ',', '44', ')', ')', 'for', 'obj', 'in', 'list', ':', 'print', '(', 'obj', '.', 'name', ',', 'obj', '.', 'roll', ',', 'sep', '=', ""' '"", ')']"
2180,"['write', 'python', 'program', 'recursive', 'insertion', 'sort']","['def', 'insertionSortRecursive', '(', 'arr', ',', 'n', ')', ':', 'if', 'n', '<=', '1', ':', 'return', 'insertionSortRecursive', '(', 'arr', ',', 'n', '-', '1', ')', 'last', '=', 'arr', '[', 'n', '-', '1', ']', 'j', '=', 'n', '-', '2', 'while', '(', 'j', '>=', '0', 'and', 'arr', '[', 'j', ']', '>', 'last', ')', ':', 'arr', '[', 'j', '+', '1', ']', '=', 'arr', '[', 'j', ']', 'j', '=', 'j', '-', '1', 'arr', '[', 'j', '+', '1', ']', '=', 'last', 'if', '__name__', '==', ""'__main__'"", ':', 'A', '=', '[', '-', '7', ',', '11', ',', '6', ',', '0', ',', '-', '3', ',', '5', ',', '10', ',', '2', ']', 'n', '=', 'len', '(', 'A', ')', 'insertionSortRecursive', '(', 'A', ',', 'n', ')', 'print', '(', 'A', ')']"
2181,"['get', 'value', 'numpy', 'array', 'certain', 'index', 'position', 'python']","['import', 'numpy', 'as', 'np', 'a1', '=', 'np', '.', 'array', '(', '[', '11', ',', '10', ',', '22', ',', '30', ',', '33', ']', ')', 'print', '(', '""Array 1 :""', ')', 'print', '(', 'a1', ')', 'a2', '=', 'np', '.', 'array', '(', '[', '1', ',', '15', ',', '60', ']', ')', 'print', '(', '""Array 2 :""', ')', 'print', '(', 'a2', ')', 'print', '(', '""\\nTake 1 and 15 from Array 2 and put them in\\\n1st and 5th position of Array 1""', ')', 'a1', '.', 'put', '(', '[', '0', ',', '4', ']', ',', 'a2', ')', 'print', '(', '""Resultant Array :""', ')', 'print', '(', 'a1', ')']"
2182,"['write', 'python', 'program', 'convert', 'binary', 'tuple', 'integer']","['test_tup', '=', '(', '1', ',', '1', ',', '0', ',', '1', ',', '0', ',', '0', ',', '1', ')', 'print', '(', '""The original tuple is : ""', '+', 'str', '(', 'test_tup', ')', ')', 'res', '=', 'int', '(', '""""', '.', 'join', '(', 'str', '(', 'ele', ')', 'for', 'ele', 'in', 'test_tup', ')', ',', '2', ')', 'print', '(', '""Decimal number is : ""', '+', 'str', '(', 'res', ')', ')']"
2183,"['download', 'image', 'web', 'page', 'python']","['from', 'bs4', 'import', '*', 'import', 'requests', 'import', 'os', 'def', 'folder_create', '(', 'images', ')', ':', 'try', ':', 'folder_name', '=', 'input', '(', '""Enter Folder Name:- ""', ')', 'os', '.', 'mkdir', '(', 'folder_name', ')', 'except', ':', 'print', '(', '""Folder Exist with that name!""', ')', 'folder_create', '(', ')', 'download_images', '(', 'images', ',', 'folder_name', ')', 'def', 'download_images', '(', 'images', ',', 'folder_name', ')', ':', 'count', '=', '0', 'print', '(', 'f""Total {len(images)} Image Found!""', ')', 'if', 'len', '(', 'images', ')', '!=', '0', ':', 'for', 'i', ',', 'image', 'in', 'enumerate', '(', 'images', ')', ':', 'try', ':', 'image_link', '=', 'image', '[', '""data-srcset""', ']', 'except', ':', 'try', ':', 'image_link', '=', 'image', '[', '""data-src""', ']', 'except', ':', 'try', ':', 'image_link', '=', 'image', '[', '""data-fallback-src""', ']', 'except', ':', 'try', ':', 'image_link', '=', 'image', '[', '""src""', ']', 'except', ':', 'pass', 'try', ':', 'r', '=', 'requests', '.', 'get', '(', 'image_link', ')', '.', 'content', 'try', ':', 'r', '=', 'str', '(', 'r', ',', ""'utf-8'"", ')', 'except', 'UnicodeDecodeError', ':', 'with', 'open', '(', 'f""{folder_name}/images{i+1}.jpg""', ',', '""wb+""', ')', 'as', 'f', ':', 'f', '.', 'write', '(', 'r', ')', 'count', '+=', '1', 'except', ':', 'pass', 'if', 'count', '==', 'len', '(', 'images', ')', ':', 'print', '(', '""All Images Downloaded!""', ')', 'else', ':', 'print', '(', 'f""Total {count} Images Downloaded Out of {len(images)}""', ')', 'def', 'main', '(', 'url', ')', ':', 'r', '=', 'requests', '.', 'get', '(', 'url', ')', 'soup', '=', 'BeautifulSoup', '(', 'r', '.', 'text', ',', ""'html.parser'"", ')', 'images', '=', 'soup', '.', 'findAll', '(', ""'img'"", ')', 'folder_create', '(', 'images', ')', 'url', '=', 'input', '(', '""Enter URL:- ""', ')', 'main', '(', 'url', ')']"
2184,"['write', 'python', 'program', 'get', 'list', 'running', 'process']","['import', 'wmi', 'f', '=', 'wmi', '.', 'WMI', '(', ')', 'print', '(', '""pid\xa0\xa0 Process name""', ')', 'for', 'process', 'in', 'f', '.', 'Win32_Process', '(', ')', ':', 'print', '(', 'f""{process.ProcessId:<10} {process.Name}""', ')']"
2185,"['write', 'python', 'program', 'split', 'string', 'vowel']","['import', 're', 'test_str', '=', ""'GFGaBste4oCS'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'res', '=', 're', '.', 'split', '(', ""'a|e|i|o|u'"", ',', 'test_str', ')', 'print', '(', '""The splitted string : ""', '+', 'str', '(', 'res', ')', ')']"
2186,"['write', 'python', 'program', 'way', 'add', 'rowcolumns', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'ini_array', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '45', ',', '4', ',', '7', ']', ',', '[', '9', ',', '6', ',', '10', ']', ']', ')', 'print', '(', '""initial_array : ""', ',', 'str', '(', 'ini_array', ')', ')', ';', 'column_to_be_added', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ']', ')', 'result', '=', 'np', '.', 'hstack', '(', '(', 'ini_array', ',', 'np', '.', 'atleast_2d', '(', 'column_to_be_added', ')', '.', 'T', ')', ')', 'print', '(', '""resultant array""', ',', 'str', '(', 'result', ')', ')']"
2187,"['write', 'python', 'program', 'flatten', 'numpy', 'array', 'array']","['import', 'numpy', 'as', 'np', 'ini_array1', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '2', ',', '4', ',', '5', ']', ',', '[', '1', ',', '2', ',', '3', ']', ']', ')', 'print', '(', '""initial array""', ',', 'str', '(', 'ini_array1', ')', ')', 'result', '=', 'ini_array1', '.', 'flatten', '(', ')', 'print', '(', '""New resulting array: ""', ',', 'result', ')']"
2188,"['calculate', 'sum', 'column', 'numpy', 'array', 'python']","['import', 'numpy', 'def', 'colsum', '(', 'arr', ',', 'n', ',', 'm', ')', ':', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'su', '=', '0', ';', 'for', 'j', 'in', 'range', '(', 'm', ')', ':', 'su', '+=', 'arr', '[', 'j', ']', '[', 'i', ']', 'print', '(', 'su', ',', 'end', '=', '"" ""', ')', 'TwoDList', '=', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '5', ',', '6', ']', ',', '[', '7', ',', '8', ',', '9', ']', ',', '[', '10', ',', '11', ',', '12', ']', ']', 'TwoDArray', '=', 'numpy', '.', 'array', '(', 'TwoDList', ')', 'print', '(', '""2D Array:""', ')', 'print', '(', 'TwoDArray', ')', 'print', '(', '""\\nColumn-wise Sum:""', ')', 'colsum', '(', 'TwoDArray', ',', 'len', '(', 'TwoDArray', '[', '0', ']', ')', ',', 'len', '(', 'TwoDArray', ')', ')']"
2189,"['returning', 'function', 'function', 'python']","['def', 'B', '(', ')', ':', 'print', '(', '""Inside the method B.""', ')', 'def', 'A', '(', ')', ':', 'print', '(', '""Inside the method A.""', ')', 'return', 'B', 'returned_function', '=', 'A', '(', ')', 'returned_function', '(', ')']"
2190,"['write', 'python', 'program', 'method']","['import', 'numpy', 'as', 'np', 'array', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '2', ',', '1', ']', ']', ')', 'np', '.', 'fill_diagonal', '(', 'array', ',', '5', ')', 'print', '(', 'array', ')']"
2191,"['write', 'python', 'program', 'count', 'occurrence', 'element', 'list']","['def', 'countX', '(', 'lst', ',', 'x', ')', ':', 'count', '=', '0', 'for', 'ele', 'in', 'lst', ':', 'if', '(', 'ele', '==', 'x', ')', ':', 'count', '=', 'count', '+', '1', 'return', 'count', 'lst', '=', '[', '8', ',', '6', ',', '8', ',', '10', ',', '8', ',', '20', ',', '10', ',', '8', ',', '8', ']', 'x', '=', '8', 'print', '(', ""'{} has occurred {} times'"", '.', 'format', '(', 'x', ',', 'countX', '(', 'lst', ',', 'x', ')', ')', ')']"
2192,"['write', 'python', 'program', 'print', 'negative', 'number', 'range']","['start', ',', 'end', '=', '-', '4', ',', '19', 'for', 'num', 'in', 'range', '(', 'start', ',', 'end', '+', '1', ')', ':', 'if', 'num', '<', '0', ':', 'print', '(', 'num', ',', 'end', '=', '"" ""', ')']"
2193,"['formatting', 'float', 'column', 'dataframe', 'panda', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', '{', ""'Month'"", ':', '[', ""'January'"", ',', ""'February'"", ',', ""'March'"", ',', ""'April'"", ']', ',', ""'Expense'"", ':', '[', '21525220.653', ',', '31125840.875', ',', '23135428.768', ',', '56245263.942', ']', '}', 'dataframe', '=', 'pd', '.', 'DataFrame', '(', 'data', ',', 'columns', '=', '[', ""'Month'"", ',', ""'Expense'"", ']', ')', 'print', '(', '""Given Dataframe :\\n""', ',', 'dataframe', ')', 'pd', '.', 'options', '.', 'display', '.', 'float_format', '=', ""'{:.2f}'"", '.', 'format', 'print', '(', ""'\\nResult :\\n'"", ',', 'dataframe', ')']"
2194,"['write', 'python', 'program', 'flatten', 'tuples', 'list', 'string']","['test_list', '=', '[', '(', ""'1'"", ',', ""'4'"", ',', ""'6'"", ')', ',', '(', ""'5'"", ',', ""'8'"", ')', ',', '(', ""'2'"", ',', ""'9'"", ')', ',', '(', ""'1'"", ',', ""'10'"", ')', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', ""' '"", '.', 'join', '(', '[', 'idx', 'for', 'tup', 'in', 'test_list', 'for', 'idx', 'in', 'tup', ']', ')', 'print', '(', '""Tuple list converted to String is : ""', '+', 'res', ')']"
2195,"['write', 'python', 'program', 'remove', 'dictionary', 'key', 'word']","['test_str', '=', ""'gfg is best for geeks'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'test_dict', '=', '{', ""'geeks'"", ':', '1', ',', ""'best'"", ':', '6', '}', 'for', 'key', 'in', 'test_dict', ':', 'if', 'key', 'in', 'test_str', '.', 'split', '(', ""' '"", ')', ':', 'test_str', '=', 'test_str', '.', 'replace', '(', 'key', ',', '""""', ')', 'print', '(', '""The string after replace : ""', '+', 'str', '(', 'test_str', ')', ')']"
2196,"['convert', 'unknown', 'format', 'string', 'datetime', 'object', 'python']","['import', 'dateutil', '.', 'parser', 'as', 'parser', 'date_string', '=', '""19750503T080120""', 'date_time', '=', 'parser', '.', 'parse', '(', 'date_string', ')', 'print', '(', 'date_time', ')']"
2197,"['compute', 'outer', 'product', 'two', 'given', 'vector', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'array1', '=', 'np', '.', 'array', '(', '[', '6', ',', '2', ']', ')', 'array2', '=', 'np', '.', 'array', '(', '[', '2', ',', '5', ']', ')', 'print', '(', '""Original 1-D arrays:""', ')', 'print', '(', 'array1', ')', 'print', '(', 'array2', ')', 'print', '(', '""Outer Product of the two array is:""', ')', 'result', '=', 'np', '.', 'outer', '(', 'array1', ',', 'array2', ')', 'print', '(', 'result', ')']"
2198,"['write', 'python', 'program', 'linear', 'search']","['def', 'search', '(', 'arr', ',', 'x', ')', ':', 'for', 'i', 'in', 'range', '(', 'len', '(', 'arr', ')', ')', ':', 'if', 'arr', '[', 'i', ']', '==', 'x', ':', 'return', 'i', 'return', '-', '1']"
2199,"['resize', 'image', 'write', 'python', 'program', 'tkinter']","['from', 'tkinter', 'import', '*', 'from', 'PIL', 'import', 'Image', ',', 'ImageTk']"
2200,"['implementation', 'xor', 'linked', 'list', 'python']","['import', 'ctypes', 'class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'value', ')', ':', 'self', '.', 'value', '=', 'value', 'self', '.', 'npx', '=', '0', 'class', 'XorLinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'tail', '=', 'None', 'self', '.', '__nodes', '=', '[', ']', 'def', 'InsertAtStart', '(', 'self', ',', 'value', ')', ':', 'node', '=', 'Node', '(', 'value', ')', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'node', 'self', '.', 'tail', '=', 'node', 'else', ':', 'self', '.', 'head', '.', 'npx', '=', 'id', '(', 'node', ')', '^', 'self', '.', 'head', '.', 'npx', 'node', '.', 'npx', '=', 'id', '(', 'self', '.', 'head', ')', 'self', '.', 'head', '=', 'node', 'self', '.', '__nodes', '.', 'append', '(', 'node', ')', 'def', 'InsertAtEnd', '(', 'self', ',', 'value', ')', ':', 'node', '=', 'Node', '(', 'value', ')', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'node', 'self', '.', 'tail', '=', 'node', 'else', ':', 'self', '.', 'tail', '.', 'npx', '=', 'id', '(', 'node', ')', '^', 'self', '.', 'tail', '.', 'npx', 'node', '.', 'npx', '=', 'id', '(', 'self', '.', 'tail', ')', 'self', '.', 'tail', '=', 'node', 'self', '.', '__nodes', '.', 'append', '(', 'node', ')', 'def', 'DeleteAtStart', '(', 'self', ')', ':', 'if', 'self', '.', 'isEmpty', '(', ')', ':', 'return', '""List is empty !""', 'elif', 'self', '.', 'head', '==', 'self', '.', 'tail', ':', 'self', '.', 'head', '=', 'self', '.', 'tail', '=', 'None', 'elif', '(', '0', '^', 'self', '.', 'head', '.', 'npx', ')', '==', 'id', '(', 'self', '.', 'tail', ')', ':', 'self', '.', 'head', '=', 'self', '.', 'tail', 'self', '.', 'head', '.', 'npx', '=', 'self', '.', 'tail', '.', 'npx', '=', '0', 'else', ':', 'res', '=', 'self', '.', 'head', '.', 'value', 'x', '=', 'self', '.', '__type_cast', '(', '0', '^', 'self', '.', 'head', '.', 'npx', ')', 'y', '=', '(', 'id', '(', 'self', '.', 'head', ')', '^', 'x', '.', 'npx', ')', 'self', '.', 'head', '=', 'x', 'self', '.', 'head', '.', 'npx', '=', '0', '^', 'y', 'return', 'res', 'def', 'DeleteAtEnd', '(', 'self', ')', ':', 'if', 'self', '.', 'isEmpty', '(', ')', ':', 'return', '""List is empty !""', 'elif', 'self', '.', 'head', '==', 'self', '.', 'tail', ':', 'self', '.', 'head', '=', 'self', '.', 'tail', '=', 'None', 'elif', 'self', '.', '__type_cast', '(', '0', '^', 'self', '.', 'head', '.', 'npx', ')', '==', '(', 'self', '.', 'tail', ')', ':', 'self', '.', 'tail', '=', 'self', '.', 'head', 'self', '.', 'head', '.', 'npx', '=', 'self', '.', 'tail', '.', 'npx', '=', '0', 'else', ':', 'prev_id', '=', '0', 'node', '=', 'self', '.', 'head', 'next_id', '=', '1', 'while', 'next_id', ':', 'next_id', '=', 'prev_id', '^', 'node', '.', 'npx', 'if', 'next_id', ':', 'prev_id', '=', 'id', '(', 'node', ')', 'node', '=', 'self', '.', '__type_cast', '(', 'next_id', ')', 'res', '=', 'node', '.', 'value', 'x', '=', 'self', '.', '__type_cast', '(', 'prev_id', ')', '.', 'npx', '^', 'id', '(', 'node', ')', 'y', '=', 'self', '.', '__type_cast', '(', 'prev_id', ')', 'y', '.', 'npx', '=', 'x', '^', '0', 'self', '.', 'tail', '=', 'y', 'return', 'res', 'def', 'Print', '(', 'self', ')', ':', '""""""We are printing values rather than returning it bacause\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for returning we have to append all values in a list\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0and it takes extra memory to save all values in a list.""""""', 'if', 'self', '.', 'head', '!=', 'None', ':', 'prev_id', '=', '0', 'node', '=', 'self', '.', 'head', 'next_id', '=', '1', 'print', '(', 'node', '.', 'value', ',', 'end', '=', ""' '"", ')', 'while', 'next_id', ':', 'next_id', '=', 'prev_id', '^', 'node', '.', 'npx', 'if', 'next_id', ':', 'prev_id', '=', 'id', '(', 'node', ')', 'node', '=', 'self', '.', '__type_cast', '(', 'next_id', ')', 'print', '(', 'node', '.', 'value', ',', 'end', '=', ""' '"", ')', 'else', ':', 'return', 'else', ':', 'print', '(', '""List is empty !""', ')', 'def', 'ReversePrint', '(', 'self', ')', ':', '""""""We are printing values rather than returning it bacause\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for returning we have to append all values in a list\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0and it takes extra memory to save all values in a list.""""""', 'if', 'self', '.', 'head', '!=', 'None', ':', 'prev_id', '=', '0', 'node', '=', 'self', '.', 'tail', 'next_id', '=', '1', 'print', '(', 'node', '.', 'value', ',', 'end', '=', ""' '"", ')', 'while', 'next_id', ':', 'next_id', '=', 'prev_id', '^', 'node', '.', 'npx', 'if', 'next_id', ':', 'prev_id', '=', 'id', '(', 'node', ')', 'node', '=', 'self', '.', '__type_cast', '(', 'next_id', ')', 'print', '(', 'node', '.', 'value', ',', 'end', '=', ""' '"", ')', 'else', ':', 'return', 'else', ':', 'print', '(', '""List is empty !""', ')', 'def', 'Length', '(', 'self', ')', ':', 'if', 'not', 'self', '.', 'isEmpty', '(', ')', ':', 'prev_id', '=', '0', 'node', '=', 'self', '.', 'head', 'next_id', '=', '1', 'count', '=', '1', 'while', 'next_id', ':', 'next_id', '=', 'prev_id', '^', 'node', '.', 'npx', 'if', 'next_id', ':', 'prev_id', '=', 'id', '(', 'node', ')', 'node', '=', 'self', '.', '__type_cast', '(', 'next_id', ')', 'count', '+=', '1', 'else', ':', 'return', 'count', 'else', ':', 'return', '0', 'def', 'PrintByIndex', '(', 'self', ',', 'index', ')', ':', 'prev_id', '=', '0', 'node', '=', 'self', '.', 'head', 'for', 'i', 'in', 'range', '(', 'index', ')', ':', 'next_id', '=', 'prev_id', '^', 'node', '.', 'npx', 'if', 'next_id', ':', 'prev_id', '=', 'id', '(', 'node', ')', 'node', '=', 'self', '.', '__type_cast', '(', 'next_id', ')', 'else', ':', 'return', '""Value dosn\'t found index out of range.""', 'return', 'node', '.', 'value', 'def', 'isEmpty', '(', 'self', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'True', 'return', 'False', 'def', '__type_cast', '(', 'self', ',', 'id', ')', ':', 'return', 'ctypes', '.', 'cast', '(', 'id', ',', 'ctypes', '.', 'py_object', ')', '.', 'value', 'obj', '=', 'XorLinkedList', '(', ')', 'obj', '.', 'InsertAtEnd', '(', '2', ')', 'obj', '.', 'InsertAtEnd', '(', '3', ')', 'obj', '.', 'InsertAtEnd', '(', '4', ')', 'obj', '.', 'InsertAtStart', '(', '0', ')', 'obj', '.', 'InsertAtStart', '(', '6', ')', 'obj', '.', 'InsertAtEnd', '(', '55', ')', 'print', '(', '""\\nLength:""', ',', 'obj', '.', 'Length', '(', ')', ')', 'print', '(', '""\\nTraverse linked list:""', ')', 'obj', '.', 'Print', '(', ')', 'print', '(', '""\\nTraverse in reverse order:""', ')', 'obj', '.', 'ReversePrint', '(', ')', 'print', '(', ""'\\nNodes:'"", ')', 'for', 'i', 'in', 'range', '(', 'obj', '.', 'Length', '(', ')', ')', ':', 'print', '(', '""Data value at index""', ',', 'i', ',', ""'is'"", ',', 'obj', '.', 'PrintByIndex', '(', 'i', ')', ')', 'print', '(', '""\\nDelete Last Node: ""', ',', 'obj', '.', 'DeleteAtEnd', '(', ')', ')', 'print', '(', '""\\nDelete First Node: ""', ',', 'obj', '.', 'DeleteAtStart', '(', ')', ')', 'print', '(', '""\\nUpdated length:""', ',', 'obj', '.', 'Length', '(', ')', ')', 'print', '(', ""'\\nNodes:'"", ')', 'for', 'i', 'in', 'range', '(', 'obj', '.', 'Length', '(', ')', ')', ':', 'print', '(', '""Data value at index""', ',', 'i', ',', ""'is'"", ',', 'obj', '.', 'PrintByIndex', '(', 'i', ')', ')', 'print', '(', '""\\nTraverse linked list:""', ')', 'obj', '.', 'Print', '(', ')', 'print', '(', '""\\nTraverse in reverse order:""', ')', 'obj', '.', 'ReversePrint', '(', ')']"
2201,"['visualizing', 'quick', 'sort', 'using', 'tkinter', 'python']","['import', 'time', 'def', 'partition', '(', 'data', ',', 'head', ',', 'tail', ',', 'drawData', ',', 'timeTick', ')', ':', 'border', '=', 'head', 'pivot', '=', 'data', '[', 'tail', ']', 'drawData', '(', 'data', ',', 'getColorArray', '(', 'len', '(', 'data', ')', ',', 'head', ',', 'tail', ',', 'border', ',', 'border', ')', ')', 'time', '.', 'sleep', '(', 'timeTick', ')', 'for', 'j', 'in', 'range', '(', 'head', ',', 'tail', ')', ':', 'if', 'data', '[', 'j', ']', '<', 'pivot', ':', 'drawData', '(', 'data', ',', 'getColorArray', '(', 'len', '(', 'data', ')', ',', 'head', ',', 'tail', ',', 'border', ',', 'j', ',', 'True', ')', ')', 'time', '.', 'sleep', '(', 'timeTick', ')', 'data', '[', 'border', ']', ',', 'data', '[', 'j', ']', '=', 'data', '[', 'j', ']', ',', 'data', '[', 'border', ']', 'border', '+=', '1', 'drawData', '(', 'data', ',', 'getColorArray', '(', 'len', '(', 'data', ')', ',', 'head', ',', 'tail', ',', 'border', ',', 'j', ')', ')', 'time', '.', 'sleep', '(', 'timeTick', ')', 'drawData', '(', 'data', ',', 'getColorArray', '(', 'len', '(', 'data', ')', ',', 'head', ',', 'tail', ',', 'border', ',', 'tail', ',', 'True', ')', ')', 'time', '.', 'sleep', '(', 'timeTick', ')', 'data', '[', 'border', ']', ',', 'data', '[', 'tail', ']', '=', 'data', '[', 'tail', ']', ',', 'data', '[', 'border', ']', 'return', 'border', 'def', 'quick_sort', '(', 'data', ',', 'head', ',', 'tail', ',', 'drawData', ',', 'timeTick', ')', ':', 'if', 'head', '<', 'tail', ':', 'partitionIdx', '=', 'partition', '(', 'data', ',', 'head', ',', 'tail', ',', 'drawData', ',', 'timeTick', ')', 'quick_sort', '(', 'data', ',', 'head', ',', 'partitionIdx', '-', '1', ',', 'drawData', ',', 'timeTick', ')', 'quick_sort', '(', 'data', ',', 'partitionIdx', '+', '1', ',', 'tail', ',', 'drawData', ',', 'timeTick', ')', 'def', 'getColorArray', '(', 'dataLen', ',', 'head', ',', 'tail', ',', 'border', ',', 'currIdx', ',', 'isSwaping', '=', 'False', ')', ':', 'colorArray', '=', '[', ']', 'for', 'i', 'in', 'range', '(', 'dataLen', ')', ':', 'if', 'i', '>=', 'head', 'and', 'i', '<=', 'tail', ':', 'colorArray', '.', 'append', '(', ""'Grey'"", ')', 'else', ':', 'colorArray', '.', 'append', '(', ""'White'"", ')', 'if', 'i', '==', 'tail', ':', 'colorArray', '[', 'i', ']', '=', ""'Blue'"", 'elif', 'i', '==', 'border', ':', 'colorArray', '[', 'i', ']', '=', ""'Red'"", 'elif', 'i', '==', 'currIdx', ':', 'colorArray', '[', 'i', ']', '=', ""'Yellow'"", 'if', 'isSwaping', ':', 'if', 'i', '==', 'border', 'or', 'i', '==', 'currIdx', ':', 'colorArray', '[', 'i', ']', '=', ""'Green'"", 'return', 'colorArray']"
2202,"['write', 'python', 'program', 'convert', 'nested', 'dictionary', 'mapped', 'tuple']","['test_dict', '=', '{', ""'gfg'"", ':', '{', ""'x'"", ':', '5', ',', ""'y'"", ':', '6', '}', ',', ""'is'"", ':', '{', ""'x'"", ':', '1', ',', ""'y'"", ':', '4', '}', ',', ""'best'"", ':', '{', ""'x'"", ':', '8', ',', ""'y'"", ':', '3', '}', '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'res', '=', '[', '(', 'key', ',', 'tuple', '(', 'sub', '[', 'key', ']', 'for', 'sub', 'in', 'test_dict', '.', 'values', '(', ')', ')', ')', 'for', 'key', 'in', 'test_dict', '[', ""'gfg'"", ']', ']', 'print', '(', '""The grouped dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
2203,"['write', 'python', 'program', 'remove', 'k', 'length', 'duplicate', 'string']","['test_str', '=', ""'geeksforfreeksfo'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'K', '=', '3', 'memo', '=', 'set', '(', ')', 'res', '=', '[', ']', 'for', 'idx', 'in', 'range', '(', '0', ',', 'len', '(', 'test_str', ')', '-', 'K', ')', ':', 'sub', '=', 'test_str', '[', 'idx', ':', 'idx', '+', 'K', ']', 'if', 'sub', 'not', 'in', 'memo', ':', 'memo', '.', 'add', '(', 'sub', ')', 'res', '.', 'append', '(', 'sub', ')', 'res', '=', ""''"", '.', 'join', '(', 'res', '[', 'ele', ']', 'for', 'ele', 'in', 'range', '(', '0', ',', 'len', '(', 'res', ')', ',', 'K', ')', ')', 'print', '(', '""The modified string : ""', '+', 'str', '(', 'res', ')', ')']"
2204,"['calculate', 'qr', 'decomposition', 'given', 'matrix', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'matrix1', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ']', ',', '[', '3', ',', '4', ',', '5', ']', ']', ')', 'print', '(', 'matrix1', ')', 'q', ',', 'r', '=', 'np', '.', 'linalg', '.', 'qr', '(', 'matrix1', ')', 'print', '(', ""'\\nQ:\\n'"", ',', 'q', ')', 'print', '(', ""'\\nR:\\n'"", ',', 'r', ')']"
2205,"['count', 'group', 'largest', 'size', 'grouping', 'according', 'sum', 'digit', 'python']","['//', 'C', '+', '+', 'implementation', 'to', 'Count', 'the', '//', 'number', 'of', 'groups', 'having', 'the', 'largest', '//', 'size', 'where', 'groups', 'are', 'according', '//', 'to', 'the', 'sum', 'of', 'its', 'digits', 'using', 'namespace', 'std', ';', '//', 'function', 'to', 'return', 'sum', 'of', 'digits', 'of', 'i', 'int', 'sumDigits', '(', 'int', 'n', ')', '{', 'int', 'sum', '=', '0', ';', 'while', '(', 'n', ')', '{', 'sum', '+=', 'n', '%', '10', ';', 'n', '/=', '10', ';', '}', 'return', 'sum', ';', '}', '//', 'Create', 'the', 'dictionary', 'of', 'unique', 'sum', 'map', '<', 'int', ',', 'int', '>', 'constDict', '(', 'int', 'n', ')', '{', '//', 'dictionary', 'that', 'contain', '//', 'unique', 'sum', 'count', 'map', '<', 'int', ',', 'int', '>', 'd', ';', 'for', '(', 'int', 'i', '=', '1', ';', 'i', '<', 'n', '+', '1', ';', '+', '+', 'i', ')', '{', '//', 'calculate', 'the', 'sum', 'of', 'its', 'digits', 'int', 'sum1', '=', 'sumDigits', '(', 'i', ')', ';', 'if', '(', 'd', '.', 'find', '(', 'sum1', ')', '==', 'd', '.', 'end', '(', ')', ')', 'd', '[', 'sum1', ']', '=', '1', ';', 'else', 'd', '[', 'sum1', ']', '+=', '1', ';', '}', 'return', 'd', ';', '}', '//', 'function', 'to', 'find', 'the', '//', 'largest', 'size', 'of', 'group', 'int', 'countLargest', '(', 'int', 'n', ')', '{', 'map', '<', 'int', ',', 'int', '>', 'd', '=', 'constDict', '(', 'n', ')', ';', 'int', 'size', '=', '0', ';', '//', 'count', 'of', 'largest', 'size', 'group', 'int', 'count', '=', '0', ';', 'for', '(', 'auto', 'it', '=', 'd', '.', 'begin', '(', ')', ';', 'it', '!=', 'd', '.', 'end', '(', ')', ';', '+', '+', 'it', ')', '{', 'int', 'k', '=', 'it', '->', 'first', ';', 'int', 'val', '=', 'it', '->', 'second', ';', 'if', '(', 'val', '>', 'size', ')', '{', 'size', '=', 'val', ';', 'count', '=', '1', ';', '}', 'else', 'if', '(', 'val', '==', 'size', ')', 'count', '+=', '1', ';', '}', 'return', 'count', ';', '}', '//', 'Driver', 'code', 'int', 'main', '(', ')', '{', 'int', 'n', '=', '13', ';', 'int', 'group', '=', 'countLargest', '(', 'n', ')', ';', 'cout', '<<', 'group', '<<', 'endl', ';', 'return', '0', ';', '}']"
2206,"['capitalize', 'first', 'letter', 'column', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', '[', ""'john'"", ',', ""'bODAY'"", ',', ""'minA'"", ',', ""'Peter'"", ',', ""'nicky'"", ']', ',', ""'B'"", ':', '[', ""'masters'"", ',', ""'graduate'"", ',', ""'graduate'"", ',', ""'Masters'"", ',', ""'Graduate'"", ']', ',', ""'C'"", ':', '[', '27', ',', '23', ',', '21', ',', '23', ',', '24', ']', '}', ')', 'df']"
2207,"['write', 'python', 'program', 'replace', 'negative', 'value', 'zero', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'ini_array1', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '-', '3', ',', '4', ',', '-', '5', ',', '-', '6', ']', ')', 'print', '(', '""initial array""', ',', 'ini_array1', ')', 'ini_array1', '[', 'ini_array1', '<', '0', ']', '=', '0', 'print', '(', '""New resulting array: ""', ',', 'ini_array1', ')']"
2208,"['write', 'python', 'program', 'cocktail', 'sort']","['def', 'cocktailSort', '(', 'a', ')', ':', 'n', '=', 'len', '(', 'a', ')', 'swapped', '=', 'True', 'start', '=', '0', 'end', '=', 'n', '-', '1', 'while', '(', 'swapped', '==', 'True', ')', ':', 'swapped', '=', 'False', 'for', 'i', 'in', 'range', '(', 'start', ',', 'end', ')', ':', 'if', '(', 'a', '[', 'i', ']', '>', 'a', '[', 'i', '+', '1', ']', ')', ':', 'a', '[', 'i', ']', ',', 'a', '[', 'i', '+', '1', ']', '=', 'a', '[', 'i', '+', '1', ']', ',', 'a', '[', 'i', ']', 'swapped', '=', 'True', 'if', '(', 'swapped', '==', 'False', ')', ':', 'break', 'swapped', '=', 'False', 'end', '=', 'end', '-', '1', 'for', 'i', 'in', 'range', '(', 'end', '-', '1', ',', 'start', '-', '1', ',', '-', '1', ')', ':', 'if', '(', 'a', '[', 'i', ']', '>', 'a', '[', 'i', '+', '1', ']', ')', ':', 'a', '[', 'i', ']', ',', 'a', '[', 'i', '+', '1', ']', '=', 'a', '[', 'i', '+', '1', ']', ',', 'a', '[', 'i', ']', 'swapped', '=', 'True', 'start', '=', 'start', '+', '1', 'a', '=', '[', '5', ',', '1', ',', '4', ',', '2', ',', '8', ',', '0', ',', '2', ']', 'cocktailSort', '(', 'a', ')', 'print', '(', '""Sorted array is:""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'a', ')', ')', ':', 'print', '(', '""%d""', '%', 'a', '[', 'i', ']', ')', ',']"
2209,"['changing', 'colour', 'tkinter', 'menu', 'bar', 'python']","['from', 'tkinter', 'import', '*', 'app', '=', 'Tk', '(', ')', 'app', '.', 'title', '(', '""Geeks For Geeks""', ')', 'app', '.', 'geometry', '(', '""800x500""', ')', 'menubar', '=', 'Menu', '(', 'app', ',', 'background', '=', ""'blue'"", ',', 'fg', '=', ""'white'"", ')', 'file', '=', 'Menu', '(', 'menubar', ',', 'tearoff', '=', 'False', ',', 'background', '=', ""'yellow'"", ')', 'edit', '=', 'Menu', '(', 'menubar', ',', 'tearoff', '=', 'False', ',', 'background', '=', ""'pink'"", ')', 'file', '.', 'add_command', '(', 'label', '=', '""New""', ')', 'file', '.', 'add_command', '(', 'label', '=', '""Exit""', ',', 'command', '=', 'app', '.', 'quit', ')', 'edit', '.', 'add_command', '(', 'label', '=', '""Cut""', ')', 'edit', '.', 'add_command', '(', 'label', '=', '""Copy""', ')', 'edit', '.', 'add_command', '(', 'label', '=', '""Paste""', ')', 'menubar', '.', 'add_cascade', '(', 'label', '=', '""File""', ',', 'menu', '=', 'file', ')', 'menubar', '.', 'add_cascade', '(', 'label', '=', '""Edit""', ',', 'menu', '=', 'edit', ')', 'app', '.', 'config', '(', 'menu', '=', 'menubar', ')', 'app', '.', 'mainloop', '(', ')']"
2210,"['write', 'python', 'program', 'check', 'order', 'character', 'string', 'using', 'ordereddict']","['from', 'collections', 'import', 'OrderedDict', 'def', 'checkOrder', '(', 'input', ',', 'pattern', ')', ':', 'dict', '=', 'OrderedDict', '.', 'fromkeys', '(', 'input', ')', 'ptrlen', '=', '0', 'for', 'key', ',', 'value', 'in', 'dict', '.', 'items', '(', ')', ':', 'if', '(', 'key', '==', 'pattern', '[', 'ptrlen', ']', ')', ':', 'ptrlen', '=', 'ptrlen', '+', '1', 'if', '(', 'ptrlen', '==', '(', 'len', '(', 'pattern', ')', ')', ')', ':', 'return', ""'true'"", 'return', ""'false'"", 'if', '__name__', '==', '""__main__""', ':', 'input', '=', ""'engineers rock'"", 'pattern', '=', ""'egr'"", 'print', '(', 'checkOrder', '(', 'input', ',', 'pattern', ')', ')']"
2211,"['get', 'index', 'minimum', 'value', 'dataframe', 'column', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', '""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv""', ')', 'df', '.', 'head', '(', '10', ')']"
2212,"['write', 'python', 'program', 'multiply', 'adjacent', 'element']","['test_tup', '=', '(', '1', ',', '5', ',', '7', ',', '8', ',', '10', ')', 'print', '(', '""The original tuple : ""', '+', 'str', '(', 'test_tup', ')', ')', 'res', '=', 'tuple', '(', 'i', '*', 'j', 'for', 'i', ',', 'j', 'in', 'zip', '(', 'test_tup', ',', 'test_tup', '[', '1', ':', ']', ')', ')', 'print', '(', '""Resultant tuple after multiplication : ""', '+', 'str', '(', 'res', ')', ')']"
2213,"['numpy', 'string', 'operation', 'function', 'python']","['import', 'numpy', 'as', 'geek', 'in_arr1', '=', 'geek', '.', 'array', '(', ""'numpy'"", ')', 'print', '(', '""1st Input array : ""', ',', 'in_arr1', ')', 'in_arr2', '=', 'geek', '.', 'array', '(', ""'nump'"", ')', 'print', '(', '""2nd Input array : ""', ',', 'in_arr2', ')', 'out_arr', '=', 'geek', '.', 'char', '.', 'not_equal', '(', 'in_arr1', ',', 'in_arr2', ')', 'print', '(', '""Output array: ""', ',', 'out_arr', ')']"
2214,"['compute', 'eigenvalue', 'right', 'eigenvectors', 'given', 'square', 'array', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'm', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '2', ',', '3', ']', ']', ')', 'print', '(', '""Printing the Original square array:\\n""', ',', 'm', ')', 'w', ',', 'v', '=', 'np', '.', 'linalg', '.', 'eig', '(', 'm', ')', 'print', '(', '""Printing the Eigen values of the given square array:\\n""', ',', 'w', ')', 'print', '(', '""Printing Right eigenvectors of the given square array:\\n""', 'v', ')']"
2215,"['write', 'python', 'program', 'cycle', 'sort']","['def', 'cycleSort', '(', 'array', ')', ':', 'writes', '=', '0', 'for', 'cycleStart', 'in', 'range', '(', '0', ',', 'len', '(', 'array', ')', '-', '1', ')', ':', 'item', '=', 'array', '[', 'cycleStart', ']', 'pos', '=', 'cycleStart', 'for', 'i', 'in', 'range', '(', 'cycleStart', '+', '1', ',', 'len', '(', 'array', ')', ')', ':', 'if', 'array', '[', 'i', ']', '<', 'item', ':', 'pos', '+=', '1', 'if', 'pos', '==', 'cycleStart', ':', 'continue', 'while', 'item', '==', 'array', '[', 'pos', ']', ':', 'pos', '+=', '1', 'array', '[', 'pos', ']', ',', 'item', '=', 'item', ',', 'array', '[', 'pos', ']', 'writes', '+=', '1', 'while', 'pos', '!=', 'cycleStart', ':', 'pos', '=', 'cycleStart', 'for', 'i', 'in', 'range', '(', 'cycleStart', '+', '1', ',', 'len', '(', 'array', ')', ')', ':', 'if', 'array', '[', 'i', ']', '<', 'item', ':', 'pos', '+=', '1', 'while', 'item', '==', 'array', '[', 'pos', ']', ':', 'pos', '+=', '1', 'array', '[', 'pos', ']', ',', 'item', '=', 'item', ',', 'array', '[', 'pos', ']', 'writes', '+=', '1', 'return', 'writes', 'arr', '=', '[', '1', ',', '8', ',', '3', ',', '9', ',', '10', ',', '10', ',', '2', ',', '4', ']', 'n', '=', 'len', '(', 'arr', ')', 'cycleSort', '(', 'arr', ')', 'print', '(', '""After sort : ""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', ')']"
2216,"['write', 'python', 'dictionary', 'set', 'counter', 'check', 'frequency', 'become']","['from', 'collections', 'import', 'Counter', 'def', 'allSame', '(', 'input', ')', ':', 'dict', '=', 'Counter', '(', 'input', ')', 'same', '=', 'list', '(', 'set', '(', 'dict', '.', 'values', '(', ')', ')', ')', 'if', 'len', '(', 'same', ')', '>', '2', ':', 'print', '(', ""'No'"", ')', 'elif', 'len', '(', 'same', ')', '==', '2', 'and', 'same', '[', '1', ']', '-', 'same', '[', '0', ']', '>', '1', ':', 'print', '(', ""'No'"", ')', 'else', ':', 'print', '(', ""'Yes'"", ')', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', ""'xxxyyzzt'"", 'allSame', '(', 'input', ')']"
2217,"['describe', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'arr', '=', 'np', '.', 'array', '(', '[', '4', ',', '5', ',', '8', ',', '5', ',', '6', ',', '4', ',', '9', ',', '2', ',', '4', ',', '3', ',', '6', ']', ')', 'print', '(', 'arr', ')']"
2218,"['split', 'element', 'given', 'numpy', 'array', 'space', 'python']","['import', 'numpy', 'as', 'np', 'array', '=', 'np', '.', 'array', '(', '[', ""'PHP C# Python C Java C++'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', 'array', ')', 'sparr', '=', 'np', '.', 'char', '.', 'split', '(', 'array', ')', 'print', '(', 'sparr', ')']"
2219,"['numpy', 'size', 'function', 'python']","['import', 'numpy', 'as', 'np', 'arr', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ',', '3', ',', '4', ']', ',', '[', '5', ',', '6', ',', '7', ',', '8', ']', ']', ')', 'print', '(', 'np', '.', 'size', '(', 'arr', ')', ')']"
2220,"['write', 'python', 'program', 'successive', 'character', 'frequency']","['import', 're', 'test_str', '=', ""'geeksforgeeks is best for geeks. A geek should take interest.'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'que_word', '=', '""geek""', 'temp', '=', '[', ']', 'for', 'sub', 'in', 're', '.', 'findall', '(', 'que_word', '+', ""'.'"", ',', 'test_str', ')', ':', 'temp', '.', 'append', '(', 'sub', '[', '-', '1', ']', ')', 'res', '=', '{', 'que_word', ':', 'temp', '.', 'count', '(', 'que_word', ')', 'for', 'que_word', 'in', 'temp', '}', 'print', '(', '""The Characters Frequency is : ""', '+', 'str', '(', 'res', ')', ')']"
2221,"['write', 'python', 'program', 'right', 'left', 'shift', 'character', 'string']","['test_str', '=', ""'geeksforgeeks'"", 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'r_rot', '=', '7', 'l_rot', '=', '3', 'res', '=', '(', 'test_str', '*', '3', ')', '[', 'len', '(', 'test_str', ')', '+', 'r_rot', '-', 'l_rot', ':', '2', '*', 'len', '(', 'test_str', ')', '+', 'r_rot', '-', 'l_rot', ']', 'print', '(', '""The string after rotation is : ""', '+', 'str', '(', 'res', ')', ')']"
2222,"['write', 'python', 'program', 'stack', 'using', 'doubly', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'self', '.', 'prev', '=', 'None', 'class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'def', 'push', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'else', ':', 'new_node', '=', 'Node', '(', 'data', ')', 'self', '.', 'head', '.', 'prev', '=', 'new_node', 'new_node', '.', 'next', '=', 'self', '.', 'head', 'new_node', '.', 'prev', '=', 'None', 'self', '.', 'head', '=', 'new_node', 'def', 'pop', '(', 'self', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'None', 'elif', 'self', '.', 'head', '.', 'next', 'is', 'None', ':', 'temp', '=', 'self', '.', 'head', '.', 'data', 'self', '.', 'head', '=', 'None', 'return', 'temp', 'else', ':', 'temp', '=', 'self', '.', 'head', '.', 'data', 'self', '.', 'head', '=', 'self', '.', 'head', '.', 'next', 'self', '.', 'head', '.', 'prev', '=', 'None', 'return', 'temp', 'def', 'top', '(', 'self', ')', ':', 'return', 'self', '.', 'head', '.', 'data', 'def', 'size', '(', 'self', ')', ':', 'temp', '=', 'self', '.', 'head', 'count', '=', '0', 'while', 'temp', 'is', 'not', 'None', ':', 'count', '=', 'count', '+', '1', 'temp', '=', 'temp', '.', 'next', 'return', 'count', 'def', 'isEmpty', '(', 'self', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'True', 'else', ':', 'return', 'False', 'def', 'printstack', '(', 'self', ')', ':', 'print', '(', '""stack elements are:""', ')', 'temp', '=', 'self', '.', 'head', 'while', 'temp', 'is', 'not', 'None', ':', 'print', '(', 'temp', '.', 'data', ',', 'end', '=', '""->""', ')', 'temp', '=', 'temp', '.', 'next', 'if', '__name__', '==', ""'__main__'"", ':', 'stack', '=', 'Stack', '(', ')', 'print', '(', '""Stack operations using Doubly LinkedList""', ')', 'stack', '.', 'push', '(', '4', ')', 'stack', '.', 'push', '(', '5', ')', 'stack', '.', 'push', '(', '6', ')', 'stack', '.', 'push', '(', '7', ')', 'stack', '.', 'printstack', '(', ')', 'print', '(', '""\\nTop element is ""', ',', 'stack', '.', 'top', '(', ')', ')', 'print', '(', '""Size of the stack is ""', ',', 'stack', '.', 'size', '(', ')', ')', 'stack', '.', 'pop', '(', ')', 'stack', '.', 'pop', '(', ')', 'stack', '.', 'printstack', '(', ')', 'print', '(', '""\\nstack is empty:""', ',', 'stack', '.', 'isEmpty', '(', ')', ')']"
2223,"['different', 'way', 'convert', 'python', 'dictionary', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'from', 'ast', 'import', 'literal_eval', 'name_list', '=', '""""""{\n\xa0\xa0\xa0""column0"": {""First_Name"": ""Akash"",\n\xa0\xa0\xa0""Second_Name"": ""kumar"", ""Interest"": ""Coding""},\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0""column1"": {""First_Name"": ""Ayush"",\n\xa0\xa0\xa0""Second_Name"": ""Sharma"", ""Interest"": ""Cricket""},\n\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0""column2"": {""First_Name"": ""Diksha"",\n\xa0\xa0\xa0""Second_Name"": ""Sharma"",""Interest"": ""Reading""},\n\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0\xa0""column3"": {""First_Name"":"" Priyanka"",\n\xa0\xa0\xa0""Second_Name"": ""Kumari"", ""Interest"": ""Dancing""}\n\xa0\xa0\xa0\xa0\xa0\n\xa0\xa0}""""""', 'print', '(', '""Type of name_list created:\\n""', ',', 'type', '(', 'name_list', ')', ')', 't', '=', 'literal_eval', '(', 'name_list', ')', 'print', '(', '""\\nPrinting the original Name_list dictionary:\\n""', ',', 't', ')', 'print', '(', '""Type of original dictionary:\\n""', ',', 'type', '(', 't', ')', ')', 'result_nparra', '=', 'np', '.', 'array', '(', '[', '[', 'v', '[', 'j', ']', 'for', 'j', 'in', '[', ""'First_Name'"", ',', ""'Second_Name'"", ',', ""'Interest'"", ']', ']', 'for', 'k', ',', 'v', 'in', 't', '.', 'items', '(', ')', ']', ')', 'print', '(', '""\\nConverted ndarray from the Original dictionary:\\n""', ',', 'result_nparra', ')', 'print', '(', '""Type:\\n""', ',', 'type', '(', 'result_nparra', ')', ')']"
2224,"['write', 'python', 'set', 'check', 'whether', 'given', 'string', 'heterogram']","['def', 'heterogram', '(', 'input', ')', ':', 'alphabets', '=', '[', 'ch', 'for', 'ch', 'in', 'input', 'if', '(', 'ord', '(', 'ch', ')', '>=', 'ord', '(', ""'a'"", ')', 'and', 'ord', '(', 'ch', ')', '<=', 'ord', '(', ""'z'"", ')', ')', ']', 'if', 'len', '(', 'set', '(', 'alphabets', ')', ')', '==', 'len', '(', 'alphabets', ')', ':', 'print', '(', ""'Yes'"", ')', 'else', ':', 'print', '(', ""'No'"", ')', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', ""'the big dwarf only jumps'"", 'heterogram', '(', 'input', ')']"
2225,"['find', 'number', 'argument', 'python', 'function']","['def', 'no_of_argu', '(', '*', 'args', ')', ':', 'return', '(', 'len', '(', 'args', ')', ')', 'a', '=', '1', 'b', '=', '3', 'n', '=', 'no_of_argu', '(', '1', ',', '2', ',', '4', ',', 'a', ')', 'print', '(', '"" The number of arguments are: ""', ',', 'n', ')']"
2226,"['return', 'index', 'label', 'condition', 'satisfied', 'column', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Date'"", ':', '[', ""'10/2/2011'"", ',', ""'11/2/2011'"", ',', ""'12/2/2011'"", ',', ""'13/2/2011'"", ']', ',', ""'Product'"", ':', '[', ""'Umbrella'"", ',', ""'Matress'"", ',', ""'Badminton'"", ',', ""'Shuttle'"", ']', ',', ""'Last_Price'"", ':', '[', '1200', ',', '1500', ',', '1600', ',', '352', ']', ',', ""'Updated_Price'"", ':', '[', '1250', ',', '1450', ',', '1550', ',', '400', ']', ',', ""'Discount'"", ':', '[', '10', ',', '10', ',', '10', ',', '10', ']', '}', ')', 'df', '.', 'index', '=', '[', ""'Item 1'"", ',', ""'Item 2'"", ',', ""'Item 3'"", ',', ""'Item 4'"", ']', 'print', '(', 'df', ')']"
2227,"['program', 'check', 'string', 'contains', 'special', 'character', 'python']","['//', 'C', '+', '+', 'program', 'to', 'check', 'if', 'a', 'string', '//', 'contains', 'any', 'special', 'character', '//', 'import', 'required', 'packages', 'using', 'namespace', 'std', ';', '//', 'Function', 'checks', 'if', 'the', 'string', '//', 'contains', 'any', 'special', 'character', 'void', 'run', '(', 'string', 'str', ')', '{', '//', 'Make', 'own', 'character', 'set', 'regex', 'regx', '(', '""[@_!#$%^&*()<>?/|}{~:]""', ')', ';', '//', 'Pass', 'the', 'string', 'in', 'regex_search', '//', 'method', 'if', '(', 'regex_search', '(', 'str', ',', 'regx', ')', '==', '0', ')', 'cout', '<<', '""String is accepted""', ';', 'else', 'cout', '<<', '""String is not accepted.""', ';', '}', '//', 'Driver', 'Code', 'int', 'main', '(', ')', '{', '//', 'Enter', 'the', 'string', 'string', 'str', '=', '""Geeks$For$Geeks""', ';', '//', 'Calling', 'run', 'function', 'run', '(', 'str', ')', ';', 'return', '0', ';', '}', '//', 'This', 'code', 'is', 'contributed', 'by', 'Yash_R']"
2228,"['convert', 'python', 'datetime', 'epoch']","['import', 'datetime', 'epoch', '=', 'datetime', '.', 'datetime', '(', '2021', ',', '7', ',', '7', ',', '1', ',', '2', ',', '1', ')', '.', 'strftime', '(', ""'%s'"", ')', 'print', '(', 'epoch', ')', 'epoch', '=', 'datetime', '.', 'datetime', '(', '2021', ',', '3', ',', '3', ',', '4', ',', '3', ',', '4', ')', '.', 'strftime', '(', ""'%s'"", ')', 'print', '(', 'epoch', ')', 'epoch', '=', 'datetime', '.', 'datetime', '(', '2021', ',', '7', ',', '7', ',', '12', ',', '12', ',', '34', ')', '.', 'strftime', '(', ""'%s'"", ')', 'print', '(', 'epoch', ')', 'epoch', '=', 'datetime', '.', 'datetime', '(', '2021', ',', '7', ',', '7', ',', '12', ',', '56', ',', '0', ')', '.', 'strftime', '(', ""'%s'"", ')', 'print', '(', 'epoch', ')']"
2229,"['get', 'daily', 'news', 'using', 'python']","['import', 'requests', 'from', 'bs4', 'import', 'BeautifulSoup']"
2230,"['convert', 'set', 'string', 'python']","['s', '=', '{', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", '}', 'print', '(', '""Initially""', ')', 'print', '(', '""The datatype of s : ""', '+', 'str', '(', 'type', '(', 's', ')', ')', ')', 'print', '(', '""Contents of s : ""', ',', 's', ')', 's', '=', 'str', '(', 's', ')', 'print', '(', '""\\nAfter the conversion""', ')', 'print', '(', '""The datatype of s : ""', '+', 'str', '(', 'type', '(', 's', ')', ')', ')', 'print', '(', '""Contents of s : ""', '+', 's', ')']"
2231,"['write', 'python', 'program', 'print', 'possible', 'combination', 'three', 'digit']","['def', 'comb', '(', 'L', ')', ':', 'for', 'i', 'in', 'range', '(', '3', ')', ':', 'for', 'j', 'in', 'range', '(', '3', ')', ':', 'for', 'k', 'in', 'range', '(', '3', ')', ':', 'if', '(', 'i', '!=', 'j', 'and', 'j', '!=', 'k', 'and', 'i', '!=', 'k', ')', ':', 'print', '(', 'L', '[', 'i', ']', ',', 'L', '[', 'j', ']', ',', 'L', '[', 'k', ']', ')', 'comb', '(', '[', '1', ',', '2', ',', '3', ']', ')']"
2232,"['write', 'python', 'program', 'check', 'string', 'contain', 'defined', 'character', 'using', 'regex']","['import', 're', 'def', 'check', '(', 'str', ',', 'pattern', ')', ':', 'if', 're', '.', 'search', '(', 'pattern', ',', 'str', ')', ':', 'print', '(', '""Valid String""', ')', 'else', ':', 'print', '(', '""Invalid String""', ')', 'pattern', '=', 're', '.', 'compile', '(', ""'^[1234]+$'"", ')', 'check', '(', ""'2134'"", ',', 'pattern', ')', 'check', '(', ""'349'"", ',', 'pattern', ')']"
2233,"['write', 'python', 'program', 'maximum', 'minimum', 'set']","['def', 'MAX', '(', 'sets', ')', ':', 'return', '(', 'max', '(', 'sets', ')', ')', 'sets', '=', 'set', '(', '[', '8', ',', '16', ',', '24', ',', '1', ',', '25', ',', '3', ',', '10', ',', '65', ',', '55', ']', ')', 'print', '(', 'MAX', '(', 'sets', ')', ')']"
2234,"['remove', 'duplicate', 'given', 'string', 'python']","['from', 'collections', 'import', 'OrderedDict', 'def', 'removeDupWithoutOrder', '(', 'str', ')', ':', 'return', '""""', '.', 'join', '(', 'set', '(', 'str', ')', ')', 'def', 'removeDupWithOrder', '(', 'str', ')', ':', 'return', '""""', '.', 'join', '(', 'OrderedDict', '.', 'fromkeys', '(', 'str', ')', ')', 'if', '__name__', '==', '""__main__""', ':', 'str', '=', '""geeksforgeeks""', 'print', '(', '""Without Order = ""', ',', 'removeDupWithoutOrder', '(', 'str', ')', ')', 'print', '(', '""With Order = ""', ',', 'removeDupWithOrder', '(', 'str', ')', ')']"
2235,"['write', 'python', 'program', 'iterative', 'merge', 'sort']","['def', 'merge', '(', 'left', ',', 'right', ')', ':', 'if', 'not', 'len', '(', 'left', ')', 'or', 'not', 'len', '(', 'right', ')', ':', 'return', 'left', 'or', 'right', 'result', '=', '[', ']', 'i', ',', 'j', '=', '0', ',', '0', 'while', '(', 'len', '(', 'result', ')', '<', 'len', '(', 'left', ')', '+', 'len', '(', 'right', ')', ')', ':', 'if', 'left', '[', 'i', ']', '<', 'right', '[', 'j', ']', ':', 'result', '.', 'append', '(', 'left', '[', 'i', ']', ')', 'i', '+=', '1', 'else', ':', 'result', '.', 'append', '(', 'right', '[', 'j', ']', ')', 'j', '+=', '1', 'if', 'i', '==', 'len', '(', 'left', ')', 'or', 'j', '==', 'len', '(', 'right', ')', ':', 'result', '.', 'extend', '(', 'left', '[', 'i', ':', ']', 'or', 'right', '[', 'j', ':', ']', ')', 'break', 'return', 'result', 'def', 'mergesort', '(', 'list', ')', ':', 'if', 'len', '(', 'list', ')', '<', '2', ':', 'return', 'list', 'middle', '=', 'len', '(', 'list', ')', '/', '2', 'left', '=', 'mergesort', '(', 'list', '[', ':', 'middle', ']', ')', 'right', '=', 'mergesort', '(', 'list', '[', 'middle', ':', ']', ')', 'return', 'merge', '(', 'left', ',', 'right', ')', 'seq', '=', '[', '12', ',', '11', ',', '13', ',', '5', ',', '6', ',', '7', ']', 'print', '(', '""Given array is""', ')', 'print', '(', 'seq', ')', ';', 'print', '(', '""\\n""', ')', 'print', '(', '""Sorted array is""', ')', 'print', '(', 'mergesort', '(', 'seq', ')', ')']"
2236,"['repeat', 'element', 'numpy', 'array', 'string', 'python']","['import', 'numpy', 'as', 'np', 'arr', '=', 'np', '.', 'array', '(', '[', ""'Akash'"", ',', ""'Rohit'"", ',', ""'Ayush'"", ',', ""'Dhruv'"", ',', ""'Radhika'"", ']', ',', 'dtype', '=', 'np', '.', 'str', ')', 'print', '(', '""Original Array :""', ')', 'print', '(', 'arr', ')', 'new_array', '=', 'np', '.', 'char', '.', 'multiply', '(', 'arr', ',', '3', ')', 'print', '(', '""\\nNew array :""', ')', 'print', '(', 'new_array', ')']"
2237,"['write', 'python', 'program', 'reverse', 'every', 'kth', 'row', 'matrix']","['test_list', '=', '[', '[', '5', ',', '3', ',', '2', ']', ',', '[', '8', ',', '6', ',', '3', ']', ',', '[', '3', ',', '5', ',', '2', ']', ',', '[', '3', ',', '6', ']', ',', '[', '3', ',', '7', ',', '4', ']', ',', '[', '2', ',', '9', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '3', 'res', '=', '[', ']', 'for', 'idx', ',', 'ele', 'in', 'enumerate', '(', 'test_list', ')', ':', 'if', '(', 'idx', '+', '1', ')', '%', 'K', '==', '0', ':', 'res', '.', 'append', '(', 'list', '(', 'reversed', '(', 'ele', ')', ')', ')', 'else', ':', 'res', '.', 'append', '(', 'ele', ')', 'print', '(', '""After reversing every Kth row: ""', '+', 'str', '(', 'res', ')', ')']"
2238,"['scrape', 'multiple', 'page', 'using', 'selenium', 'python']","['from', 'selenium', 'import', 'webdriver', 'from', 'webdriver_manager', '.', 'chrome', 'import', 'ChromeDriverManager', 'element_list', '=', '[', ']', 'for', 'page', 'in', 'range', '(', '1', ',', '3', ',', '1', ')', ':', 'page_url', '=', '""https://webscraper.io/test-sites/e-commerce/static/computers/laptops?page=""', '+', 'str', '(', 'page', ')', 'driver', '=', 'webdriver', '.', 'Chrome', '(', 'ChromeDriverManager', '(', ')', '.', 'install', '(', ')', ')', 'driver', '.', 'get', '(', 'page_url', ')', 'title', '=', 'driver', '.', 'find_elements_by_class_name', '(', '""title""', ')', 'price', '=', 'driver', '.', 'find_elements_by_class_name', '(', '""price""', ')', 'description', '=', 'driver', '.', 'find_elements_by_class_name', '(', '""description""', ')', 'rating', '=', 'driver', '.', 'find_elements_by_class_name', '(', '""ratings""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'title', ')', ')', ':', 'element_list', '.', 'append', '(', '[', 'title', '[', 'i', ']', '.', 'text', ',', 'price', '[', 'i', ']', '.', 'text', ',', 'description', '[', 'i', ']', '.', 'text', ',', 'rating', '[', 'i', ']', '.', 'text', ']', ')', 'print', '(', 'element_list', ')', 'driver', '.', 'close', '(', ')']"
2239,"['write', 'python', 'program', 'order', 'tuples', 'list']","['test_list', '=', '[', '(', ""'Gfg'"", ',', '3', ')', ',', '(', ""'best'"", ',', '9', ')', ',', '(', ""'CS'"", ',', '10', ')', ',', '(', ""'Geeks'"", ',', '2', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'ord_list', '=', '[', ""'Geeks'"", ',', ""'best'"", ',', ""'CS'"", ',', ""'Gfg'"", ']', 'temp', '=', 'dict', '(', 'test_list', ')', 'res', '=', '[', '(', 'key', ',', 'temp', '[', 'key', ']', ')', 'for', 'key', 'in', 'ord_list', ']', 'print', '(', '""The ordered tuple list : ""', '+', 'str', '(', 'res', ')', ')']"
2240,"['write', 'python', 'program', 'select', 'random', 'value', 'form', 'list', 'list']","['from', 'itertools', 'import', 'chain', 'import', 'random', 'test_list', '=', '[', '[', '4', ',', '5', ',', '5', ']', ',', '[', '2', ',', '7', ',', '4', ']', ',', '[', '8', ',', '6', ',', '3', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', 'random', '.', 'choice', '(', 'list', '(', 'chain', '.', 'from_iterable', '(', 'test_list', ')', ')', ')', 'print', '(', '""Random number from Matrix : ""', '+', 'str', '(', 'res', ')', ')']"
2241,"['write', 'python', 'program', 'check', 'given', 'string', 'binary', 'string']","['def', 'check', '(', 'string', ')', ':', 'p', '=', 'set', '(', 'string', ')', 's', '=', '{', ""'0'"", ',', ""'1'"", '}', 'if', 's', '==', 'p', 'or', 'p', '==', '{', ""'0'"", '}', 'or', 'p', '==', '{', ""'1'"", '}', ':', 'print', '(', '""Yes""', ')', 'else', ':', 'print', '(', '""No""', ')', 'if', '__name__', '==', '""__main__""', ':', 'string', '=', '""101010000111""', 'check', '(', 'string', ')']"
2242,"['make', 'numpy', 'array', 'readonly', 'python']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'zeros', '(', '11', ')', 'print', '(', '""Before any change ""', ')', 'print', '(', 'a', ')', 'a', '[', '1', ']', '=', '2', 'print', '(', '""Before after first change ""', ')', 'print', '(', 'a', ')', 'a', '.', 'flags', '.', 'writeable', '=', 'False', 'print', '(', '""After making array immutable on attempting\xa0 second change ""', ')', 'a', '[', '1', ']', '=', '7']"
2243,"['write', 'python', 'program', 'convert', 'list', 'list', 'dictionary']","['test_list', '=', '[', '[', ""'a'"", ',', ""'b'"", ',', '1', ',', '2', ']', ',', '[', ""'c'"", ',', ""'d'"", ',', '3', ',', '4', ']', ',', '[', ""'e'"", ',', ""'f'"", ',', '5', ',', '6', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', 'dict', '(', ')', 'for', 'sub', 'in', 'test_list', ':', 'res', '[', 'tuple', '(', 'sub', '[', ':', '2', ']', ')', ']', '=', 'tuple', '(', 'sub', '[', '2', ':', ']', ')', 'print', '(', '""The mapped Dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
2244,"['limited', 'row', 'selection', 'given', 'column', 'panda', 'python']","['import', 'pandas', 'as', 'pd', 'data', '=', '{', ""'Name'"", ':', '[', ""'Jai'"", ',', ""'Princi'"", ',', ""'Gaurav'"", ',', ""'Anuj'"", ']', ',', ""'Age'"", ':', '[', '27', ',', '24', ',', '22', ',', '32', ']', ',', ""'Address'"", ':', '[', ""'Delhi'"", ',', ""'Kanpur'"", ',', ""'Allahabad'"", ',', ""'Kannauj'"", ']', ',', ""'Qualification'"", ':', '[', ""'Msc'"", ',', ""'MA'"", ',', ""'MCA'"", ',', ""'Phd'"", ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', ')', 'print', '(', 'df', '.', 'loc', '[', '1', ':', '3', ',', '[', ""'Name'"", ',', ""'Qualification'"", ']', ']', ')']"
2245,"['write', 'python', 'program', 'print', 'pascal', 'triangle']","['from', 'math', 'import', 'factorial', 'n', '=', '5', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'for', 'j', 'in', 'range', '(', 'n', '-', 'i', '+', '1', ')', ':', 'print', '(', 'end', '=', '"" ""', ')', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ')', ':', 'print', '(', 'factorial', '(', 'i', ')', '//', '(', 'factorial', '(', 'j', ')', '*', 'factorial', '(', 'i', '-', 'j', ')', ')', ',', 'end', '=', '"" ""', ')', 'print', '(', ')']"
2246,"['extract', 'wikipedia', 'data', 'python']","['import', 'wikipedia', 'wikipedia', '.', 'summary', '(', '""Python (programming language)""', ')']"
2247,"['get', 'row', 'panda', 'dataframe', 'containing', 'given', 'substring', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Name'"", ':', '[', ""'Geeks'"", ',', ""'Peter'"", ',', ""'James'"", ',', ""'Jack'"", ',', ""'Lisa'"", ']', ',', ""'Team'"", ':', '[', ""'Boston'"", ',', ""'Boston'"", ',', ""'Boston'"", ',', ""'Chele'"", ',', ""'Barse'"", ']', ',', ""'Position'"", ':', '[', ""'PG'"", ',', ""'PG'"", ',', ""'UG'"", ',', ""'PG'"", ',', ""'UG'"", ']', ',', ""'Number'"", ':', '[', '3', ',', '4', ',', '7', ',', '11', ',', '5', ']', ',', ""'Age'"", ':', '[', '33', ',', '25', ',', '34', ',', '35', ',', '28', ']', ',', ""'Height'"", ':', '[', ""'6-2'"", ',', ""'6-4'"", ',', ""'5-9'"", ',', ""'6-1'"", ',', ""'5-8'"", ']', ',', ""'Weight'"", ':', '[', '89', ',', '79', ',', '113', ',', '78', ',', '84', ']', ',', ""'College'"", ':', '[', ""'MIT'"", ',', ""'MIT'"", ',', ""'MIT'"", ',', ""'Stanford'"", ',', ""'Stanford'"", ']', ',', ""'Salary'"", ':', '[', '99999', ',', '99994', ',', '89999', ',', '78889', ',', '87779', ']', '}', ',', 'index', '=', '[', ""'ind1'"", ',', ""'ind2'"", ',', ""'ind3'"", ',', ""'ind4'"", ',', ""'ind5'"", ']', ')', 'print', '(', 'df', ',', '""\\n""', ')', 'print', '(', '""Check PG values in Position column:\\n""', ')', 'df1', '=', 'df', '[', ""'Position'"", ']', '.', 'str', '.', 'contains', '(', '""PG""', ')', 'print', '(', 'df1', ')']"
2248,"['write', 'python', 'program', 'filter', 'string', 'combination', 'k', 'substring']","['from', 'itertools', 'import', 'permutations', 'test_list', '=', '[', '""geeks4u""', ',', '""allbest""', ',', '""abcdef""', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'substr_list', '=', '[', '""s4u""', ',', '""est""', ',', '""al""', ',', '""ge""', ',', '""ek""', ',', '""def""', ',', '""lb""', ']', 'K', '=', '3', 'perms', '=', 'list', '(', 'set', '(', 'map', '(', ""''"", '.', 'join', ',', 'permutations', '(', 'substr_list', ',', 'r', '=', 'K', ')', ')', ')', ')', 'res', '=', '[', ']', 'for', 'ele', 'in', 'perms', ':', 'if', 'ele', 'in', 'test_list', ':', 'res', '.', 'append', '(', 'ele', ')', 'print', '(', '""Strings after joins : ""', '+', 'str', '(', 'res', ')', ')']"
2249,"['scrape', 'save', 'table', 'data', 'csv', 'file', 'using', 'selenium', 'python']","['from', 'selenium', 'import', 'webdriver', 'from', 'selenium', '.', 'webdriver', '.', 'support', '.', 'ui', 'import', 'Select', 'from', 'selenium', '.', 'webdriver', '.', 'support', '.', 'ui', 'import', 'WebDriverWait', 'import', 'time', 'import', 'pandas', 'as', 'pd', 'from', 'selenium', '.', 'webdriver', '.', 'support', '.', 'ui', 'import', 'Select', 'from', 'selenium', '.', 'common', '.', 'exceptions', 'import', 'NoSuchElementException', 'from', 'selenium', '.', 'webdriver', '.', 'common', '.', 'keys', 'import', 'Keys', 'import', 'csv']"
2250,"['program', 'print', 'window', 'pattern', 'python']","['//', 'C', '+', '+', 'program', 'to', 'print', 'the', 'pattern', '//', 'hollow', 'square', 'with', 'plus', 'inside', 'it', '//', 'window', 'pattern', 'using', 'namespace', 'std', ';', '//', 'Function', 'to', 'print', 'pattern', 'n', 'means', '//', 'number', 'of', 'rows', 'which', 'we', 'want', 'void', 'window_pattern', '(', 'int', 'n', ')', '{', 'int', 'c', ',', 'd', ';', '//', 'If', 'n', 'is', 'odd', 'then', 'we', 'will', 'have', '//', 'only', 'one', 'middle', 'element', 'if', '(', 'n', '%', '2', '!=', '0', ')', '{', 'c', '=', '(', 'n', '/', '2', ')', '+', '1', ';', 'd', '=', '0', ';', '}', '//', 'If', 'n', 'is', 'even', 'then', 'we', 'will', 'have', 'two', '//', 'values', 'else', '{', 'c', '=', '(', 'n', '/', '2', ')', '+', '1', ';', 'd', '=', 'n', '/', '2', ';', '}', 'for', '(', 'int', 'i', '=', '1', ';', 'i', '<=', 'n', ';', 'i', '+', '+', ')', '{', 'for', '(', 'int', 'j', '=', '1', ';', 'j', '<=', 'n', ';', 'j', '+', '+', ')', '{', '//', 'If', 'i', ',', 'j', 'equals', 'to', 'corner', 'row', 'or', '//', 'column', 'then', '""*""', 'if', '(', 'i', '==', '1', '|', '|', 'j', '==', '1', '|', '|', 'i', '==', 'n', '|', '|', 'j', '==', 'n', ')', 'cout', '<<', '""* ""', ';', 'else', '{', '//', 'If', 'i', ',', 'j', 'equals', 'to', 'the', 'middle', '//', 'row', 'or', 'column', 'then', '""*""', 'if', '(', 'i', '==', 'c', '|', '|', 'j', '==', 'c', ')', 'cout', '<<', '""* ""', ';', 'else', 'if', '(', 'i', '==', 'd', '|', '|', 'j', '==', 'd', ')', 'cout', '<<', '""* ""', ';', 'else', 'cout', '<<', '""\xa0 ""', ';', '}', '}', 'cout', '<<', ""'\\n'"", ';', '}', '}', '//', 'Driver', 'Code', 'int', 'main', '(', ')', '{', 'int', 'n', '=', '7', ';', 'window_pattern', '(', 'n', ')', ';', 'return', '0', ';', '}', '//', 'This', 'code', 'is', 'contributed', 'by', 'himanshu77']"
2251,"['lambda', 'expression', 'python', 'rearrange', 'positive', 'negative', 'number']","['def', 'Rearrange', '(', 'arr', ')', ':', 'return', '[', 'x', 'for', 'x', 'in', 'arr', 'if', 'x', '<', '0', ']', '+', '[', 'x', 'for', 'x', 'in', 'arr', 'if', 'x', '>=', '0', ']', 'if', '__name__', '==', '""__main__""', ':', 'arr', '=', '[', '12', ',', '11', ',', '-', '13', ',', '-', '5', ',', '6', ',', '-', '7', ',', '5', ',', '-', '3', ',', '-', '6', ']', 'print', '(', 'Rearrange', '(', 'arr', ')', ')']"
2252,"['write', 'python', 'program', 'sort', 'frequency', 'second', 'element', 'tuple', 'list']","['from', 'collections', 'import', 'defaultdict', 'test_list', '=', '[', '(', '6', ',', '5', ')', ',', '(', '2', ',', '7', ')', ',', '(', '2', ',', '5', ')', ',', '(', '8', ',', '7', ')', ',', '(', '9', ',', '8', ')', ',', '(', '3', ',', '7', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'freq_map', '=', 'defaultdict', '(', 'int', ')', 'for', 'idx', ',', 'val', 'in', 'test_list', ':', 'freq_map', '[', 'val', ']', '+=', '1', 'res', '=', 'sorted', '(', 'test_list', ',', 'key', '=', 'lambda', 'ele', ':', 'freq_map', '[', 'ele', '[', '1', ']', ']', ',', 'reverse', '=', 'True', ')', 'print', '(', '""Sorted List of tuples : ""', '+', 'str', '(', 'res', ')', ')']"
2253,"['write', 'python', 'program', 'count', 'even', 'odd', 'number', 'list']","['list1', '=', '[', '10', ',', '21', ',', '4', ',', '45', ',', '66', ',', '93', ',', '1', ']', 'even_count', ',', 'odd_count', '=', '0', ',', '0', 'for', 'num', 'in', 'list1', ':', 'if', 'num', '%', '2', '==', '0', ':', 'even_count', '+=', '1', 'else', ':', 'odd_count', '+=', '1', 'print', '(', '""Even numbers in the list: ""', ',', 'even_count', ')', 'print', '(', '""Odd numbers in the list: ""', ',', 'odd_count', ')']"
2254,"['write', 'python', 'program', 'test', 'list', 'contains', 'element', 'range']","['test_list', '=', '[', '4', ',', '5', ',', '6', ',', '7', ',', '3', ',', '9', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'i', ',', 'j', '=', '3', ',', '10', 'res', '=', 'True', 'for', 'ele', 'in', 'test_list', ':', 'if', 'ele', '<', 'i', 'or', 'ele', '>=', 'j', ':', 'res', '=', 'False', 'break', 'print', '(', '""Does list contain all elements in range : ""', '+', 'str', '(', 'res', ')', ')']"
2255,"['select', 'row', 'maximum', 'minimum', 'value', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'dict1', '=', '{', ""'Driver'"", ':', '[', ""'Hamilton'"", ',', ""'Vettel'"", ',', ""'Raikkonen'"", ',', ""'Verstappen'"", ',', ""'Bottas'"", ',', ""'Ricciardo'"", ',', ""'Hulkenberg'"", ',', ""'Perez'"", ',', ""'Magnussen'"", ',', ""'Sainz'"", ',', ""'Alonso'"", ',', ""'Ocon'"", ',', ""'Leclerc'"", ',', ""'Grosjean'"", ',', ""'Gasly'"", ',', ""'Vandoorne'"", ',', ""'Ericsson'"", ',', ""'Stroll'"", ',', ""'Hartley'"", ',', ""'Sirotkin'"", ']', ',', ""'Points'"", ':', '[', '408', ',', '320', ',', '251', ',', '249', ',', '247', ',', '170', ',', '69', ',', '62', ',', '56', ',', '53', ',', '50', ',', '49', ',', '39', ',', '37', ',', '29', ',', '12', ',', '9', ',', '6', ',', '4', ',', '1', ']', ',', ""'Age'"", ':', '[', '33', ',', '31', ',', '39', ',', '21', ',', '29', ',', '29', ',', '31', ',', '28', ',', '26', ',', '24', ',', '37', ',', '22', ',', '21', ',', '32', ',', '22', ',', '26', ',', '28', ',', '20', ',', '29', ',', '23', ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'dict1', ')', 'print', '(', 'df', '.', 'head', '(', '10', ')', ')']"
2256,"['create', 'n', 'x', 'n', 'square', 'matrix', 'submatrix', 'sum', 'opposite', 'corner', 'element', 'even', 'python']","['//', 'C', '+', '+', 'program', 'for', '//', 'the', 'above', 'approach', 'using', 'namespace', 'std', ';', 'void', 'sub_mat_even', '(', 'int', 'N', ')', '{', '//', 'Counter', 'to', 'initialize', '//', 'the', 'values', 'in', '2', '-', 'D', 'array', 'int', 'K', '=', '1', ';', '//', 'To', 'create', 'a', '2', '-', 'D', 'array', '//', 'from', 'to', '1', 'to', 'N', '*', '2', 'int', 'A', '[', 'N', ']', '[', 'N', ']', ';', 'for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'N', ';', 'i', '+', '+', ')', '{', 'for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'N', ';', 'j', '+', '+', ')', '{', 'A', '[', 'i', ']', '[', 'j', ']', '=', 'K', ';', 'K', '+', '+', ';', '}', '}', '//', 'If', 'found', 'even', 'we', 'reverse', '//', 'the', 'alternate', 'row', 'elements', '//', 'to', 'get', 'all', 'diagonal', 'elements', '//', 'as', 'all', 'even', 'or', 'all', 'odd', 'if', '(', 'N', '%', '2', '==', '0', ')', '{', 'for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'N', ';', 'i', '+', '+', ')', '{', 'if', '(', 'i', '%', '2', '==', '1', ')', '{', 'int', 's', '=', '0', ';', 'int', 'l', '=', 'N', '-', '1', ';', '//', 'Reverse', 'the', 'row', 'while', '(', 's', '<', 'l', ')', '{', 'swap', '(', 'A', '[', 'i', ']', '[', 's', ']', ',', 'A', '[', 'i', ']', '[', 'l', ']', ')', ';', 's', '+', '+', ';', 'l', '-', '-', ';', '}', '}', '}', '}', '//', 'Print', 'the', 'formed', 'array', 'for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'N', ';', 'i', '+', '+', ')', '{', 'for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'N', ';', 'j', '+', '+', ')', '{', 'cout', '<<', 'A', '[', 'i', ']', '[', 'j', ']', '<<', '"" ""', ';', '}', 'cout', '<<', 'endl', ';', '}', '}', '//', 'Driver', 'code', 'int', 'main', '(', ')', '{', 'int', 'N', '=', '4', ';', '//', 'Function', 'call', 'sub_mat_even', '(', 'N', ')', ';', '}', '//', 'This', 'code', 'is', 'contributed', 'by', 'mishrapriyanshu557']"
2257,"['write', 'python', 'program', 'swap', 'comma', 'dot', 'string']","['def', 'Replace', '(', 'str1', ')', ':', 'maketrans', '=', 'str1', '.', 'maketrans', 'final', '=', 'str1', '.', 'translate', '(', 'maketrans', '(', ""',.'"", ',', ""'.,'"", ',', ""' '"", ')', ')', 'return', 'final', '.', 'replace', '(', ""','"", ',', '"", ""', ')', 'string', '=', '""14, 625, 498.002""', 'print', '(', 'Replace', '(', 'string', ')', ')']"
2258,"['write', 'python', 'program', 'filter', 'range', 'length', 'tuples']","['test_list', '=', '[', '(', '4', ',', ')', ',', '(', '5', ',', '6', ')', ',', '(', '2', ',', '3', ',', '5', ')', ',', '(', '5', ',', '6', ',', '8', ',', '2', ')', ',', '(', '5', ',', '9', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'i', ',', 'j', '=', '2', ',', '3', 'res', '=', '[', 'sub', 'for', 'sub', 'in', 'test_list', 'if', 'len', '(', 'sub', ')', '>=', 'i', 'and', 'len', '(', 'sub', ')', '<=', 'j', ']', 'print', '(', '""The tuple list after filtering range records : ""', '+', 'str', '(', 'res', ')', ')']"
2259,"['rename', 'column', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'rankings', '=', '{', ""'test'"", ':', '[', ""'India'"", ',', ""'South Africa'"", ',', ""'England'"", ',', ""'New Zealand'"", ',', ""'Australia'"", ']', ',', ""'odi'"", ':', '[', ""'England'"", ',', ""'India'"", ',', ""'New Zealand'"", ',', ""'South Africa'"", ',', ""'Pakistan'"", ']', ',', ""'t20'"", ':', '[', ""'Pakistan'"", ',', ""'India'"", ',', ""'Australia'"", ',', ""'England'"", ',', ""'New Zealand'"", ']', '}', 'rankings_pd', '=', 'pd', '.', 'DataFrame', '(', 'rankings', ')', 'print', '(', 'rankings_pd', ')', 'rankings_pd', '.', 'rename', '(', 'columns', '=', '{', ""'test'"", ':', ""'TEST'"", '}', ',', 'inplace', '=', 'True', ')', 'print', '(', '""\\nAfter modifying first column:\\n""', ',', 'rankings_pd', '.', 'columns', ')']"
2260,"['write', 'python', 'program', 'print', 'positive', 'number', 'range']","['start', ',', 'end', '=', '-', '4', ',', '19', 'for', 'num', 'in', 'range', '(', 'start', ',', 'end', '+', '1', ')', ':', 'if', 'num', '>=', '0', ':', 'print', '(', 'num', ',', 'end', '=', '"" ""', ')']"
2261,"['write', 'python', 'program', 'numpy', 'matrixround']","['import', 'numpy', 'as', 'np', 'gfg', '=', 'np', '.', 'matrix', '(', ""'[6.4, 1.3; 12.7, 32.3]'"", ')', 'geeks', '=', 'gfg', '.', 'round', '(', ')', 'print', '(', 'geeks', ')']"
2262,"['write', 'python', 'program', 'element', 'frequency', 'tuple']","['from', 'collections', 'import', 'defaultdict', 'test_tup', '=', '(', '4', ',', '5', ',', '4', ',', '5', ',', '6', ',', '6', ',', '5', ',', '5', ',', '4', ')', 'print', '(', '""The original tuple is : ""', '+', 'str', '(', 'test_tup', ')', ')', 'res', '=', 'defaultdict', '(', 'int', ')', 'for', 'ele', 'in', 'test_tup', ':', 'res', '[', 'ele', ']', '+=', '1', 'print', '(', '""Tuple elements frequency is : ""', '+', 'str', '(', 'dict', '(', 'res', ')', ')', ')']"
2263,"['get', 'nsmallest', 'value', 'particular', 'column', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', '""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv""', ')', 'df', '.', 'head', '(', '10', ')']"
2264,"['write', 'python', 'program', 'retain', 'record', 'n', 'occurrence', 'k']","['test_list', '=', '[', '(', '4', ',', '5', ',', '6', ',', '4', ',', '4', ')', ',', '(', '4', ',', '4', ',', '3', ')', ',', '(', '4', ',', '4', ',', '4', ')', ',', '(', '3', ',', '4', ',', '9', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '4', 'N', '=', '3', 'res', '=', '[', 'ele', 'for', 'ele', 'in', 'test_list', 'if', 'ele', '.', 'count', '(', 'K', ')', '==', 'N', ']', 'print', '(', '""Filtered tuples : ""', '+', 'str', '(', 'res', ')', ')']"
2265,"['numpy', 'matrix', 'operation', 'rand', 'function', 'python']","['import', 'numpy', 'as', 'geek', 'import', 'numpy', '.', 'matlib', 'out_mat', '=', 'geek', '.', 'matlib', '.', 'rand', '(', '(', '3', ',', '4', ')', ')', 'print', '(', '""Output matrix : ""', ',', 'out_mat', ')']"
2266,"['write', 'python', 'program', 'convert', 'list', 'nested', 'dictionary', 'panda', 'dataframe']","['import', 'pandas', 'as', 'pd', 'list', '=', '[', '{', '""Student""', ':', '[', '{', '""Exam""', ':', '90', ',', '""Grade""', ':', '""a""', '}', ',', '{', '""Exam""', ':', '99', ',', '""Grade""', ':', '""b""', '}', ',', '{', '""Exam""', ':', '97', ',', '""Grade""', ':', '""c""', '}', ',', ']', ',', '""Name""', ':', '""Paras Jain""', '}', ',', '{', '""Student""', ':', '[', '{', '""Exam""', ':', '89', ',', '""Grade""', ':', '""a""', '}', ',', '{', '""Exam""', ':', '80', ',', '""Grade""', ':', '""b""', '}', ']', ',', '""Name""', ':', '""Chunky Pandey""', '}', ']']"
2267,"['write', 'python', 'program', 'swapping', 'hierarchy', 'nested', 'dictionary']","['test_dict', '=', '{', ""'Gfg'"", ':', '{', ""'a'"", ':', '[', '1', ',', '3', ']', ',', ""'b'"", ':', '[', '3', ',', '6', ']', ',', ""'c'"", ':', '[', '6', ',', '7', ',', '8', ']', '}', ',', ""'Best'"", ':', '{', ""'a'"", ':', '[', '7', ',', '9', ']', ',', ""'b'"", ':', '[', '5', ',', '3', ',', '2', ']', ',', ""'d'"", ':', '[', '0', ',', '1', ',', '0', ']', '}', '}', 'print', '(', '""The original dictionary : ""', '+', 'str', '(', 'test_dict', ')', ')', 'res', '=', 'dict', '(', ')', 'for', 'key', ',', 'val', 'in', 'test_dict', '.', 'items', '(', ')', ':', 'for', 'key_in', ',', 'val_in', 'in', 'val', '.', 'items', '(', ')', ':', 'if', 'key_in', 'not', 'in', 'res', ':', 'temp', '=', 'dict', '(', ')', 'else', ':', 'temp', '=', 'res', '[', 'key_in', ']', 'temp', '[', 'key', ']', '=', 'val_in', 'res', '[', 'key_in', ']', '=', 'temp', 'print', '(', '""The rearranged dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
2268,"['get', 'diagonal', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'arr', '=', 'np', '.', 'arange', '(', '3', '*', '4', '*', '4', ')', '.', 'reshape', '(', '3', ',', '4', ',', '4', ')', 'print', '(', '""Original 3d array:\\n""', ',', 'arr', ')', 'diag_arr', '=', 'np', '.', 'diagonal', '(', 'arr', ',', 'axis1', '=', '1', ',', 'axis2', '=', '2', ')', 'print', '(', '""2d diagonal array:\\n""', ',', 'diag_arr', ')']"
2269,"['write', 'python', 'counter', 'find', 'size', 'largest', 'subset', 'anagram', 'word']","['from', 'collections', 'import', 'Counter', 'def', 'maxAnagramSize', '(', 'input', ')', ':', 'input', '=', 'input', '.', 'split', '(', '"" ""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'input', ')', ')', ':', 'input', '[', 'i', ']', '=', ""''"", '.', 'join', '(', 'sorted', '(', 'input', '[', 'i', ']', ')', ')', 'freqDict', '=', 'Counter', '(', 'input', ')', 'print', '(', 'max', '(', 'freqDict', '.', 'values', '(', ')', ')', ')', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', ""'ant magenta magnate tan gnamate'"", 'maxAnagramSize', '(', 'input', ')']"
2270,"['write', 'python', 'program', 'anagram', 'substring', 'search', 'search', 'permutation']","['MAX', '=', '256', 'def', 'compare', '(', 'arr1', ',', 'arr2', ')', ':', 'for', 'i', 'in', 'range', '(', 'MAX', ')', ':', 'if', 'arr1', '[', 'i', ']', '!=', 'arr2', '[', 'i', ']', ':', 'return', 'False', 'return', 'True', 'def', 'search', '(', 'pat', ',', 'txt', ')', ':', 'M', '=', 'len', '(', 'pat', ')', 'N', '=', 'len', '(', 'txt', ')', 'countP', '=', '[', '0', ']', '*', 'MAX', 'countTW', '=', '[', '0', ']', '*', 'MAX', 'for', 'i', 'in', 'range', '(', 'M', ')', ':', '(', 'countP', '[', 'ord', '(', 'pat', '[', 'i', ']', ')', ']', ')', '+=', '1', '(', 'countTW', '[', 'ord', '(', 'txt', '[', 'i', ']', ')', ']', ')', '+=', '1', 'for', 'i', 'in', 'range', '(', 'M', ',', 'N', ')', ':', 'if', 'compare', '(', 'countP', ',', 'countTW', ')', ':', 'print', '(', '""Found at Index""', ',', '(', 'i', '-', 'M', ')', ')', '(', 'countTW', '[', 'ord', '(', 'txt', '[', 'i', ']', ')', ']', ')', '+=', '1', '(', 'countTW', '[', 'ord', '(', 'txt', '[', 'i', '-', 'M', ']', ')', ']', ')', '-=', '1', 'if', 'compare', '(', 'countP', ',', 'countTW', ')', ':', 'print', '(', '""Found at Index""', ',', 'N', '-', 'M', ')', 'txt', '=', '""BACDGABCDA""', 'pat', '=', '""ABCD""', 'search', '(', 'pat', ',', 'txt', ')']"
2271,"['convert', 'image', 'numpy', 'array', 'saveit', 'csv', 'file', 'using', 'python']","['from', 'PIL', 'import', 'Image', 'import', 'numpy', 'as', 'gfg', 'img', '=', 'Image', '.', 'open', '(', ""'geeksforgeeks.jpg'"", ')', 'imageToMatrice', '=', 'gfg', '.', 'asarray', '(', 'img', ')', 'print', '(', 'imageToMatrice', '.', 'shape', ')']"
2272,"['write', 'python', 'program', 'build', 'flashcard', 'using', 'class', 'python']","['class', 'flashcard', ':', 'def', '__init__', '(', 'self', ',', 'word', ',', 'meaning', ')', ':', 'self', '.', 'word', '=', 'word', 'self', '.', 'meaning', '=', 'meaning', 'def', '__str__', '(', 'self', ')', ':', 'return', 'self', '.', 'word', '+', ""' ( '"", '+', 'self', '.', 'meaning', '+', ""' )'"", 'flash', '=', '[', ']', 'print', '(', '""welcome to flashcard application""', ')', 'while', '(', 'True', ')', ':', 'word', '=', 'input', '(', '""enter the name you want to add to flashcard : ""', ')', 'meaning', '=', 'input', '(', '""enter the meaning of the word : ""', ')', 'flash', '.', 'append', '(', 'flashcard', '(', 'word', ',', 'meaning', ')', ')', 'option', '=', 'int', '(', 'input', '(', '""enter 0 , if you want to add another flashcard : ""', ')', ')', 'if', '(', 'option', ')', ':', 'break', 'print', '(', '""\\nYour flashcards""', ')', 'for', 'i', 'in', 'flash', ':', 'print', '(', '"">""', ',', 'i', ')']"
2273,"['write', 'python', 'program', 'divide', 'date', 'range', 'n', 'equal', 'duration']","['import', 'datetime', 'test_date1', '=', 'datetime', '.', 'datetime', '(', '1997', ',', '1', ',', '4', ')', 'test_date2', '=', 'datetime', '.', 'datetime', '(', '1997', ',', '1', ',', '30', ')', 'print', '(', '""The original date 1 is : ""', '+', 'str', '(', 'test_date1', ')', ')', 'print', '(', '""The original date 2 is : ""', '+', 'str', '(', 'test_date2', ')', ')', 'N', '=', '7', 'temp', '=', '[', ']', 'diff', '=', '(', 'test_date2', '-', 'test_date1', ')', '//', 'N', 'for', 'idx', 'in', 'range', '(', '0', ',', 'N', ')', ':', 'temp', '.', 'append', '(', '(', 'test_date1', '+', 'idx', '*', 'diff', ')', ')', 'res', '=', '[', ']', 'for', 'sub', 'in', 'temp', ':', 'res', '.', 'append', '(', 'sub', '.', 'strftime', '(', '""%Y/%m/%d %H:%M:%S""', ')', ')', 'print', '(', '""N equal duration dates : ""', '+', 'str', '(', 'res', ')', ')']"
2274,"['create', 'multiple', 'csv', 'file', 'existing', 'csv', 'file', 'using', 'panda', 'python']","['import', 'pandas', 'as', 'pd', 'data_dict', '=', '{', ""'CustomerID'"", ':', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', ',', ""'Gender'"", ':', '[', '""Male""', ',', '""Female""', ',', '""Female""', ',', '""Male""', ',', '""Male""', ',', '""Female""', ',', '""Male""', ',', '""Male""', ',', '""Female""', ',', '""Male""', ']', ',', ""'Age'"", ':', '[', '20', ',', '21', ',', '19', ',', '18', ',', '25', ',', '26', ',', '32', ',', '41', ',', '20', ',', '19', ']', ',', ""'Annual Income(k$)'"", ':', '[', '10', ',', '20', ',', '30', ',', '10', ',', '25', ',', '60', ',', '70', ',', '15', ',', '21', ',', '22', ']', ',', ""'Spending Score'"", ':', '[', '30', ',', '50', ',', '48', ',', '84', ',', '90', ',', '65', ',', '32', ',', '46', ',', '12', ',', '56', ']', '}', 'data', '=', 'pd', '.', 'DataFrame', '(', 'data_dict', ')', 'data', '.', 'to_csv', '(', '""Customers.csv""', ')', 'print', '(', 'data', ')']"
2275,"['change', 'data', 'type', 'one', 'column', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'A'"", ':', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', ',', ""'B'"", ':', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", ',', ""'e'"", ']', ',', ""'C'"", ':', '[', '1.1', ',', ""'1.0'"", ',', ""'1.3'"", ',', '2', ',', '5', ']', '}', ')', 'df', '=', 'df', '.', 'astype', '(', 'str', ')', 'print', '(', 'df', '.', 'dtypes', ')']"
2276,"['convert', 'text', 'file', 'json', 'python']","['import', 'json', 'filename', '=', ""'data.txt'"", 'dict1', '=', '{', '}', 'with', 'open', '(', 'filename', ')', 'as', 'fh', ':', 'for', 'line', 'in', 'fh', ':', 'command', ',', 'description', '=', 'line', '.', 'strip', '(', ')', '.', 'split', '(', 'None', ',', '1', ')', 'dict1', '[', 'command', ']', '=', 'description', '.', 'strip', '(', ')', 'out_file', '=', 'open', '(', '""test1.json""', ',', '""w""', ')', 'json', '.', 'dump', '(', 'dict1', ',', 'out_file', ',', 'indent', '=', '4', ',', 'sort_keys', '=', 'False', ')', 'out_file', '.', 'close', '(', ')']"
2277,"['write', 'python', 'program', 'read', 'csv', 'column', 'list']","['from', 'pandas', 'import', '*', 'data', '=', 'read_csv', '(', '""company_sales_data.csv""', ')', 'month', '=', 'data', '[', ""'month_number'"", ']', '.', 'tolist', '(', ')', 'fc', '=', 'data', '[', ""'facecream'"", ']', '.', 'tolist', '(', ')', 'fw', '=', 'data', '[', ""'facewash'"", ']', '.', 'tolist', '(', ')', 'tp', '=', 'data', '[', ""'toothpaste'"", ']', '.', 'tolist', '(', ')', 'sh', '=', 'data', '[', ""'shampoo'"", ']', '.', 'tolist', '(', ')', 'print', '(', ""'Facecream:'"", ',', 'fc', ')', 'print', '(', ""'Facewash:'"", ',', 'fw', ')', 'print', '(', ""'Toothpaste:'"", ',', 'tp', ')', 'print', '(', ""'Shampoo:'"", ',', 'sh', ')']"
2278,"['write', 'python', 'program', 'search', 'element', 'circular', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', ';', 'self', '.', 'next', '=', 'None', ';', 'class', 'CircularLinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'Node', '(', 'None', ')', ';', 'self', '.', 'tail', '=', 'Node', '(', 'None', ')', ';', 'self', '.', 'head', '.', 'next', '=', 'self', '.', 'tail', ';', 'self', '.', 'tail', '.', 'next', '=', 'self', '.', 'head', ';', 'def', 'add', '(', 'self', ',', 'data', ')', ':', 'newNode', '=', 'Node', '(', 'data', ')', ';', 'if', 'self', '.', 'head', '.', 'data', 'is', 'None', ':', 'self', '.', 'head', '=', 'newNode', ';', 'self', '.', 'tail', '=', 'newNode', ';', 'newNode', '.', 'next', '=', 'self', '.', 'head', ';', 'else', ':', 'self', '.', 'tail', '.', 'next', '=', 'newNode', ';', 'self', '.', 'tail', '=', 'newNode', ';', 'self', '.', 'tail', '.', 'next', '=', 'self', '.', 'head', ';', 'def', 'findNode', '(', 'self', ',', 'element', ')', ':', 'current', '=', 'self', '.', 'head', ';', 'i', '=', '1', ';', 'f', '=', '0', ';', 'if', '(', 'self', '.', 'head', '==', 'None', ')', ':', 'print', '(', '""Empty list""', ')', ';', 'else', ':', 'while', '(', 'True', ')', ':', 'if', '(', 'current', '.', 'data', '==', 'element', ')', ':', 'f', '+=', '1', ';', 'break', ';', 'current', '=', 'current', '.', 'next', ';', 'i', '=', 'i', '+', '1', ';', 'if', '(', 'current', '==', 'self', '.', 'head', ')', ':', 'break', ';', 'if', '(', 'f', '>', '0', ')', ':', 'print', '(', '""element is present""', ')', ';', 'else', ':', 'print', '(', '""element is not present""', ')', ';', 'if', '__name__', '==', ""'__main__'"", ':', ""'''\n\xa0\xa0\xa0\xa0Circular Linked List we will be working on:\n\xa0\xa0\xa0\xa01 -> 2 -> 3 -> 4 -> 5 -> 6\n\xa0\xa0\xa0\xa0'''"", 'circularLinkedList', '=', 'CircularLinkedList', '(', ')', ';', 'circularLinkedList', '.', 'add', '(', '1', ')', ';', 'circularLinkedList', '.', 'add', '(', '2', ')', ';', 'circularLinkedList', '.', 'add', '(', '3', ')', ';', 'circularLinkedList', '.', 'add', '(', '4', ')', ';', 'circularLinkedList', '.', 'add', '(', '5', ')', ';', 'circularLinkedList', '.', 'add', '(', '6', ')', ';', 'circularLinkedList', '.', 'findNode', '(', '2', ')', ';', 'circularLinkedList', '.', 'findNode', '(', '7', ')', ';']"
2279,"['isoformat', 'datetime', 'python']","['from', 'datetime', 'import', 'datetime', 'todays_Date', '=', 'datetime', '.', 'now', '(', ')', 'isoformat_date', '=', 'todays_Date', '.', 'isoformat', '(', ')', 'print', '(', 'type', '(', 'isoformat_date', ')', ')', 'result', '=', 'datetime', '.', 'fromisoformat', '(', 'isoformat_date', ')', 'print', '(', 'type', '(', 'result', ')', ')']"
2280,"['categorize', 'password', 'strong', 'weak', 'using', 'regex', 'python']","['import', 're', 'def', 'password', '(', 'v', ')', ':', 'if', 'v', '==', '""\\n""', 'or', 'v', '==', '"" ""', ':', 'return', '""Password cannot be a newline or space!""', 'if', '9', '<=', 'len', '(', 'v', ')', '<=', '20', ':', 'if', 're', '.', 'search', '(', ""r'(.)\\1\\1'"", ',', 'v', ')', ':', 'return', '""Weak Password: Same character repeats three or more times in a row""', 'if', 're', '.', 'search', '(', ""r'(..)(.*?)\\1'"", ',', 'v', ')', ':', 'return', '""Weak password: Same string pattern repetition""', 'else', ':', 'return', '""Strong Password!""', 'else', ':', 'return', '""Password length must be 9-20 characters!""', 'def', 'main', '(', ')', ':', 'print', '(', 'password', '(', '""Qggf!@ghf3""', ')', ')', 'print', '(', 'password', '(', '""Gggksforgeeks""', ')', ')', 'print', '(', 'password', '(', '""aaabnil1gu""', ')', ')', 'print', '(', 'password', '(', '""Aasd!feasn""', ')', ')', 'print', '(', 'password', '(', '""772*hd897""', ')', ')', 'print', '(', 'password', '(', '"" ""', ')', ')', 'if', '__name__', '==', ""'__main__'"", ':', 'main', '(', ')']"
2281,"['create', 'panda', 'series', 'array', 'python']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'data', '=', 'np', '.', 'array', '(', '[', ""'a'"", ',', ""'b'"", ',', ""'c'"", ',', ""'d'"", ',', ""'e'"", ']', ')', 's', '=', 'pd', '.', 'Series', '(', 'data', ')', 'print', '(', 's', ')']"
2282,"['write', 'python', 'program', 'find', 'number', 'occurring', 'odd', 'number', 'time', 'using', 'lambda', 'expression', 'reduce', 'function']","['from', 'functools', 'import', 'reduce', 'def', 'oddTimes', '(', 'input', ')', ':', 'print', '(', 'reduce', '(', 'lambda', 'a', ',', 'b', ':', 'a', '^', 'b', ',', 'input', ')', ')', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', '[', '1', ',', '2', ',', '3', ',', '2', ',', '3', ',', '1', ',', '3', ']', 'oddTimes', '(', 'input', ')']"
2283,"['possible', 'word', 'using', 'given', 'character', 'python']","['def', 'charCount', '(', 'word', ')', ':', 'dict', '=', '{', '}', 'for', 'i', 'in', 'word', ':', 'dict', '[', 'i', ']', '=', 'dict', '.', 'get', '(', 'i', ',', '0', ')', '+', '1', 'return', 'dict', 'def', 'possible_words', '(', 'lwords', ',', 'charSet', ')', ':', 'for', 'word', 'in', 'lwords', ':', 'flag', '=', '1', 'chars', '=', 'charCount', '(', 'word', ')', 'for', 'key', 'in', 'chars', ':', 'if', 'key', 'not', 'in', 'charSet', ':', 'flag', '=', '0', 'else', ':', 'if', 'charSet', '.', 'count', '(', 'key', ')', '!=', 'chars', '[', 'key', ']', ':', 'flag', '=', '0', 'if', 'flag', '==', '1', ':', 'print', '(', 'word', ')', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', '[', ""'goo'"", ',', ""'bat'"", ',', ""'me'"", ',', ""'eat'"", ',', ""'goal'"", ',', ""'boy'"", ',', ""'run'"", ']', 'charSet', '=', '[', ""'e'"", ',', ""'o'"", ',', ""'b'"", ',', ""'a'"", ',', ""'m'"", ',', ""'g'"", ',', ""'l'"", ']', 'possible_words', '(', 'input', ',', 'charSet', ')']"
2284,"['write', 'python', 'program', 'custom', 'sorting', 'list', 'tuples']","['test_list', '=', '[', '(', '7', ',', '8', ')', ',', '(', '5', ',', '6', ')', ',', '(', '7', ',', '5', ')', ',', '(', '10', ',', '4', ')', ',', '(', '10', ',', '1', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', 'sorted', '(', 'test_list', ',', 'key', '=', 'lambda', 'sub', ':', '(', '-', 'sub', '[', '0', ']', ',', 'sub', '[', '1', ']', ')', ')', 'print', '(', '""The tuple after custom sorting is : ""', '+', 'str', '(', 'res', ')', ')']"
2285,"['write', 'python', 'program', 'skew', 'nested', 'tuple', 'summation']","['test_tup', '=', '(', '5', ',', '(', '6', ',', '(', '1', ',', '(', '9', ',', '(', '10', ',', 'None', ')', ')', ')', ')', ')', 'print', '(', '""The original tuple is : ""', '+', 'str', '(', 'test_tup', ')', ')', 'res', '=', '0', 'while', 'test_tup', ':', 'res', '+=', 'test_tup', '[', '0', ']', 'test_tup', '=', 'test_tup', '[', '1', ']', 'print', '(', '""Summation of 1st positions : ""', '+', 'str', '(', 'res', ')', ')']"
2286,"['write', 'python', 'program', 'filter', 'tuples', 'kth', 'element', 'list']","['test_list', '=', '[', '(', '""GFg""', ',', '5', ',', '9', ')', ',', '(', '""is""', ',', '4', ',', '3', ')', ',', '(', '""best""', ',', '10', ',', '29', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'check_list', '=', '[', '4', ',', '2', ',', '8', ',', '10', ']', 'K', '=', '1', 'res', '=', '[', 'sub', 'for', 'sub', 'in', 'test_list', 'if', 'sub', '[', 'K', ']', 'in', 'check_list', ']', 'print', '(', '""The filtered tuples : ""', '+', 'str', '(', 'res', ')', ')']"
2287,"['get', 'list', 'parameter', 'name', 'function', 'python']","['import', 'inspect', 'import', 'collections', 'print', '(', 'inspect', '.', 'signature', '(', 'collections', '.', 'Counter', ')', ')']"
2288,"['different', 'way', 'clear', 'list', 'python']","['GEEK', '=', '[', '6', ',', '0', ',', '4', ',', '1', ']', 'print', '(', ""'GEEK before clear:'"", ',', 'GEEK', ')', 'GEEK', '.', 'clear', '(', ')', 'print', '(', ""'GEEK after clear:'"", ',', 'GEEK', ')']"
2289,"['write', 'python', 'program', 'extract', 'string', 'html', 'tag']","['import', 're', 'test_str', '=', ""'<b>Gfg</b> is <b>Best</b>. I love <b>Reading CS</b> from it.'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'tag', '=', '""b""', 'reg_str', '=', '""<""', '+', 'tag', '+', '"">(.*?)</""', '+', 'tag', '+', '"">""', 'res', '=', 're', '.', 'findall', '(', 'reg_str', ',', 'test_str', ')', 'print', '(', '""The Strings extracted : ""', '+', 'str', '(', 'res', ')', ')']"
2290,"['rename', 'folder', 'image', 'using', 'tkinter', 'python']","['import', 'os', 'from', 'tkinter', 'import', 'messagebox', 'import', 'cv2', 'from', 'tkinter', 'import', 'filedialog', 'from', 'tkinter', 'import', '*', 'height1', '=', '0', 'width1', '=', '0', 'def', 'get_folder_path', '(', ')', ':', 'root', '=', 'Tk', '(', ')', 'root', '.', 'withdraw', '(', ')', 'folder_selected', '=', 'filedialog', '.', 'askdirectory', '(', ')', 'return', 'folder_selected', 'def', 'submit', '(', ')', ':', 'source', '=', 'src_dir', '.', 'get', '(', ')', 'src_dir', '.', 'set', '(', '""""', ')', 'global', 'width1', 'global', 'height1', 'input_folder', '=', 'get_folder_path', '(', ')', 'i', '=', '0', 'for', 'img_file', 'in', 'os', '.', 'listdir', '(', 'input_folder', ')', ':', 'file_name', '=', 'os', '.', 'path', '.', 'splitext', '(', 'img_file', ')', '[', '0', ']', 'extension', '=', 'os', '.', 'path', '.', 'splitext', '(', 'img_file', ')', '[', '1', ']', 'if', 'extension', '==', ""'.jpg'"", ':', 'src', '=', 'os', '.', 'path', '.', 'join', '(', 'input_folder', ',', 'img_file', ')', 'img', '=', 'cv2', '.', 'imread', '(', 'src', ')', 'h', ',', 'w', ',', 'c', '=', 'img', '.', 'shape', 'dst', '=', 'source', '+', ""'-'"", '+', 'str', '(', 'i', ')', '+', ""'-'"", '+', 'str', '(', 'w', ')', '+', '""x""', '+', 'str', '(', 'h', ')', '+', '"".jpg""', 'dst', '=', 'os', '.', 'path', '.', 'join', '(', 'input_folder', ',', 'dst', ')', 'os', '.', 'rename', '(', 'src', ',', 'dst', ')', 'i', '+=', '1', 'messagebox', '.', 'showinfo', '(', '""Done""', ',', '""All files renamed successfully !!""', ')', 'if', '__name__', '==', ""'__main__'"", ':', 'top', '=', 'Tk', '(', ')', 'top', '.', 'geometry', '(', '""450x300""', ')', 'top', '.', 'title', '(', '""Image Files Renamer""', ')', 'top', '.', 'configure', '(', 'background', '=', '""Dark grey""', ')', 'input_path', '=', 'Label', '(', 'top', ',', 'text', '=', '""Enter Name to Rename files:""', ',', 'bg', '=', '""Dark grey""', ')', '.', 'place', '(', 'x', '=', '40', ',', 'y', '=', '60', ')', 'src_dir', '=', 'StringVar', '(', ')', 'input_path_entry_area', '=', 'Entry', '(', 'top', ',', 'textvariable', '=', 'src_dir', ',', 'width', '=', '50', ')', '.', 'place', '(', 'x', '=', '40', ',', 'y', '=', '100', ')', 'submit_button', '=', 'Button', '(', 'top', ',', 'text', '=', '""Submit""', ',', 'command', '=', 'submit', ')', '.', 'place', '(', 'x', '=', '200', ',', 'y', '=', '150', ')', 'top', '.', 'mainloop', '(', ')']"
2291,"['compare', 'two', 'file', 'line', 'line', 'python']","['import', 'difflib', 'with', 'open', '(', ""'file1.txt'"", ')', 'as', 'file_1', ':', 'file_1_text', '=', 'file_1', '.', 'readlines', '(', ')', 'with', 'open', '(', ""'file2.txt'"", ')', 'as', 'file_2', ':', 'file_2_text', '=', 'file_2', '.', 'readlines', '(', ')', 'for', 'line', 'in', 'difflib', '.', 'unified_diff', '(', 'file_1_text', ',', 'file_2_text', ',', 'fromfile', '=', ""'file1.txt'"", ',', 'tofile', '=', ""'file2.txt'"", ',', 'lineterm', '=', ""''"", ')', ':', 'print', '(', 'line', ')']"
2292,"['write', 'python', 'program', 'numpy', 'matrixsort']","['import', 'numpy', 'as', 'np', 'gfg', '=', 'np', '.', 'matrix', '(', ""'[4, 1; 12, 3]'"", ')', 'gfg', '.', 'sort', '(', ')', 'print', '(', 'gfg', ')']"
2293,"['write', 'python', 'program', 'group', 'element', 'matrix']","['test_list', '=', '[', '[', '5', ',', '8', ']', ',', '[', '2', ',', '0', ']', ',', '[', '5', ',', '4', ']', ',', '[', '2', ',', '3', ']', ',', '[', '7', ',', '9', ']', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '{', 'idx', '[', '0', ']', ':', '[', ']', 'for', 'idx', 'in', 'test_list', '}', 'for', 'idx', 'in', 'test_list', ':', 'res', '[', 'idx', '[', '0', ']', ']', '.', 'append', '(', 'idx', '[', '1', ']', ')', 'print', '(', '""The Grouped Matrix : ""', '+', 'str', '(', 'res', ')', ')']"
2294,"['write', 'python', 'program', 'convert', 'string', 'matrix', 'representation', 'matrix']","['import', 're', 'test_str', '=', '""[gfg,is],[best,for],[all,geeks]""', 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'flat_1', '=', 're', '.', 'findall', '(', 'r""\\[(.+?)\\]""', ',', 'test_str', ')', 'res', '=', '[', 'sub', '.', 'split', '(', '"",""', ')', 'for', 'sub', 'in', 'flat_1', ']', 'print', '(', '""The type of result : ""', '+', 'str', '(', 'type', '(', 'res', ')', ')', ')', 'print', '(', '""Converted Matrix : ""', '+', 'str', '(', 'res', ')', ')']"
2295,"['get', 'selected', 'value', 'listbox', 'tkinter', 'python']","['from', 'tkinter', 'import', '*', 'root', '=', 'Tk', '(', ')', 'root', '.', 'geometry', '(', ""'180x200'"", ')', 'listbox', '=', 'Listbox', '(', 'root', ',', 'width', '=', '40', ',', 'height', '=', '10', ',', 'selectmode', '=', 'MULTIPLE', ')', 'listbox', '.', 'insert', '(', '1', ',', '""Data Structure""', ')', 'listbox', '.', 'insert', '(', '2', ',', '""Algorithm""', ')', 'listbox', '.', 'insert', '(', '3', ',', '""Data Science""', ')', 'listbox', '.', 'insert', '(', '4', ',', '""Machine Learning""', ')', 'listbox', '.', 'insert', '(', '5', ',', '""Blockchain""', ')', 'def', 'selected_item', '(', ')', ':', 'for', 'i', 'in', 'listbox', '.', 'curselection', '(', ')', ':', 'print', '(', 'listbox', '.', 'get', '(', 'i', ')', ')', 'btn', '=', 'Button', '(', 'root', ',', 'text', '=', ""'Print Selected'"", ',', 'command', '=', 'selected_item', ')', 'btn', '.', 'pack', '(', 'side', '=', ""'bottom'"", ')', 'listbox', '.', 'pack', '(', ')', 'root', '.', 'mainloop', '(', ')']"
2296,"['write', 'python', 'program', 'modulo', 'tuple', 'element']","['test_tup1', '=', '(', '10', ',', '4', ',', '5', ',', '6', ')', 'test_tup2', '=', '(', '5', ',', '6', ',', '7', ',', '5', ')', 'print', '(', '""The original tuple 1 : ""', '+', 'str', '(', 'test_tup1', ')', ')', 'print', '(', '""The original tuple 2 : ""', '+', 'str', '(', 'test_tup2', ')', ')', 'res', '=', 'tuple', '(', 'ele1', '%', 'ele2', 'for', 'ele1', ',', 'ele2', 'in', 'zip', '(', 'test_tup1', ',', 'test_tup2', ')', ')', 'print', '(', '""The modulus tuple : ""', '+', 'str', '(', 'res', ')', ')']"
2297,"['write', 'python', 'script', 'change', 'name', 'file', 'timestamp']","['import', 'time', 'import', 'os', 'f_path', '=', '""/location/to/gfg.png""', 't', '=', 'os', '.', 'path', '.', 'getctime', '(', 'f_path', ')', 't_str', '=', 'time', '.', 'ctime', '(', 't', ')', 't_obj', '=', 'time', '.', 'strptime', '(', 't_str', ')', 'form_t', '=', 'time', '.', 'strftime', '(', '""%Y-%m-%d %H:%M:%S""', ',', 't_obj', ')', 'form_t', '=', 'form_t', '.', 'replace', '(', '"":""', ',', '""꞉""', ')', 'os', '.', 'rename', '(', 'f_path', ',', 'os', '.', 'path', '.', 'split', '(', 'f_path', ')', '[', '0', ']', '+', ""'/'"", '+', 'form_t', '+', 'os', '.', 'path', '.', 'splitext', '(', 'f_path', ')', '[', '1', ']', ')']"
2298,"['write', 'python', 'program', 'count', 'even', 'odd', 'number', 'list']","['list1', '=', '[', '10', ',', '21', ',', '4', ',', '45', ',', '66', ',', '93', ',', '1', ']', 'even_count', ',', 'odd_count', '=', '0', ',', '0', 'for', 'num', 'in', 'list1', ':', 'if', 'num', '%', '2', '==', '0', ':', 'even_count', '+=', '1', 'else', ':', 'odd_count', '+=', '1', 'print', '(', '""Even numbers in the list: ""', ',', 'even_count', ')', 'print', '(', '""Odd numbers in the list: ""', ',', 'odd_count', ')']"
2299,"['write', 'python', 'program', 'frequency', 'number', 'string']","['import', 're', 'test_str', '=', '""geeks4feeks is No. 1 4 geeks""', 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'res', '=', 'len', '(', 're', '.', 'findall', '(', ""r'\\d+'"", ',', 'test_str', ')', ')', 'print', '(', '""Count of numerics in string : ""', '+', 'str', '(', 'res', ')', ')']"
2300,"['write', 'python', 'program', 'sort', 'list', 'according', 'column', 'using', 'lambda']","['def', 'sortarray', '(', 'array', ')', ':', 'for', 'i', 'in', 'range', '(', 'len', '(', 'array', '[', '0', ']', ')', ')', ':', 'sortedcolumn', '=', 'sorted', '(', 'array', ',', 'key', '=', 'lambda', 'x', ':', 'x', '[', 'i', ']', ')', 'print', '(', '""Sorted array specific to column {}, \\\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0{}""', '.', 'format', '(', 'i', ',', 'sortedcolumn', ')', ')', 'if', '__name__', '==', ""'__main__'"", ':', 'array', '=', '[', '[', ""'java'"", ',', '1995', ']', ',', '[', ""'c++'"", ',', '1983', ']', ',', '[', ""'python'"", ',', '1989', ']', ']', 'sortarray', '(', 'array', ')']"
2301,"['reversing', 'list', 'python']","['def', 'Reverse', '(', 'lst', ')', ':', 'return', '[', 'ele', 'for', 'ele', 'in', 'reversed', '(', 'lst', ')', ']', 'lst', '=', '[', '10', ',', '11', ',', '12', ',', '13', ',', '14', ',', '15', ']', 'print', '(', 'Reverse', '(', 'lst', ')', ')']"
2302,"['dictionary', 'counter', 'python', 'find', 'winner', 'election']","['from', 'collections', 'import', 'Counter', 'def', 'winner', '(', 'input', ')', ':', 'votes', '=', 'Counter', '(', 'input', ')', 'dict', '=', '{', '}', 'for', 'value', 'in', 'votes', '.', 'values', '(', ')', ':', 'dict', '[', 'value', ']', '=', '[', ']', 'for', '(', 'key', ',', 'value', ')', 'in', 'votes', '.', 'items', '(', ')', ':', 'dict', '[', 'value', ']', '.', 'append', '(', 'key', ')', 'maxVote', '=', 'sorted', '(', 'dict', '.', 'keys', '(', ')', ',', 'reverse', '=', 'True', ')', '[', '0', ']', 'if', 'len', '(', 'dict', '[', 'maxVote', ']', ')', '>', '1', ':', 'print', '(', 'sorted', '(', 'dict', '[', 'maxVote', ']', ')', '[', '0', ']', ')', 'else', ':', 'print', '(', 'dict', '[', 'maxVote', ']', '[', '0', ']', ')', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', '[', ""'john'"", ',', ""'johnny'"", ',', ""'jackie'"", ',', ""'johnny'"", ',', ""'john'"", ',', ""'jackie'"", ',', ""'jamie'"", ',', ""'jamie'"", ',', ""'john'"", ',', ""'johnny'"", ',', ""'jamie'"", ',', ""'johnny'"", ',', ""'john'"", ']', 'winner', '(', 'input', ')']"
2303,"['write', 'python', 'program', 'sort', 'python', 'dictionary', 'key', 'value']","['def', 'dictionairy', '(', ')', ':', 'key_value', '=', '{', '}', 'key_value', '[', '2', ']', '=', '56', 'key_value', '[', '1', ']', '=', '2', 'key_value', '[', '5', ']', '=', '12', 'key_value', '[', '4', ']', '=', '24', 'key_value', '[', '6', ']', '=', '18', 'key_value', '[', '3', ']', '=', '323', 'print', '(', '""Task 1:-\\n""', ')', 'print', '(', '""Keys are""', ')', 'for', 'i', 'in', 'sorted', '(', 'key_value', '.', 'keys', '(', ')', ')', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')', 'def', 'main', '(', ')', ':', 'dictionairy', '(', ')', 'if', '__name__', '==', '""__main__""', ':', 'main', '(', ')']"
2304,"['convert', 'list', 'tuple', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'list1', '=', '[', '3', ',', '4', ',', '5', ',', '6', ']', 'print', '(', 'type', '(', 'list1', ')', ')', 'print', '(', 'list1', ')', 'print', '(', ')', 'array1', '=', 'np', '.', 'asarray', '(', 'list1', ')', 'print', '(', 'type', '(', 'array1', ')', ')', 'print', '(', 'array1', ')', 'print', '(', ')', 'tuple1', '=', '(', '[', '8', ',', '4', ',', '6', ']', ',', '[', '1', ',', '2', ',', '3', ']', ')', 'print', '(', 'type', '(', 'tuple1', ')', ')', 'print', '(', 'tuple1', ')', 'print', '(', ')', 'array2', '=', 'np', '.', 'asarray', '(', 'tuple1', ')', 'print', '(', 'type', '(', 'array2', ')', ')', 'print', '(', 'array2', ')']"
2305,"['write', 'python', 'program', 'find', 'largest', 'number', 'list']","['list1', '=', '[', '10', ',', '20', ',', '4', ',', '45', ',', '99', ']', 'list1', '.', 'sort', '(', ')', 'print', '(', '""Largest element is:""', ',', 'list1', '[', '-', '1', ']', ')']"
2306,"['write', 'python', 'program', 'removing', 'duplicate', 'tuple']","['test_tup', '=', '(', '1', ',', '3', ',', '5', ',', '2', ',', '3', ',', '5', ',', '1', ',', '1', ',', '3', ')', 'print', '(', '""The original tuple is : ""', '+', 'str', '(', 'test_tup', ')', ')', 'res', '=', 'tuple', '(', 'set', '(', 'test_tup', ')', ')', 'print', '(', '""The tuple after removing duplicates : ""', '+', 'str', '(', 'res', ')', ')']"
2307,"['write', 'python', 'program', 'find', 'missing', 'additional', 'value', 'two', 'list']","['list1', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', 'list2', '=', '[', '4', ',', '5', ',', '6', ',', '7', ',', '8', ']', 'print', '(', '""Missing values in second list:""', ',', '(', 'set', '(', 'list1', ')', '.', 'difference', '(', 'list2', ')', ')', ')', 'print', '(', '""Additional values in second list:""', ',', '(', 'set', '(', 'list2', ')', '.', 'difference', '(', 'list1', ')', ')', ')', 'print', '(', '""Missing values in first list:""', ',', '(', 'set', '(', 'list2', ')', '.', 'difference', '(', 'list1', ')', ')', ')', 'print', '(', '""Additional values in first list:""', ',', '(', 'set', '(', 'list1', ')', '.', 'difference', '(', 'list2', ')', ')', ')']"
2308,"['shuffle', 'deck', 'card', 'oops', 'python']","['from', 'random', 'import', 'shuffle', 'class', 'Cards', ':', 'global', 'suites', ',', 'values', 'suites', '=', '[', ""'Hearts'"", ',', ""'Diamonds'"", ',', ""'Clubs'"", ',', ""'Spades'"", ']', 'values', '=', '[', ""'A'"", ',', ""'2'"", ',', ""'3'"", ',', ""'4'"", ',', ""'5'"", ',', ""'6'"", ',', ""'7'"", ',', ""'8'"", ',', ""'9'"", ',', ""'10'"", ',', ""'J'"", ',', ""'Q'"", ',', ""'K'"", ']', 'def', '__init__', '(', 'self', ')', ':', 'pass', 'class', 'Deck', '(', 'Cards', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'Cards', '.', '__init__', '(', 'self', ')', 'self', '.', 'mycardset', '=', '[', ']', 'for', 'n', 'in', 'suites', ':', 'for', 'c', 'in', 'values', ':', 'self', '.', 'mycardset', '.', 'append', '(', '(', 'c', ')', '+', '"" ""', '+', '""of""', '+', '"" ""', '+', 'n', ')', 'def', 'popCard', '(', 'self', ')', ':', 'if', 'len', '(', 'self', '.', 'mycardset', ')', '==', '0', ':', 'return', '""NO CARDS CAN BE POPPED FURTHER""', 'else', ':', 'cardpopped', '=', 'self', '.', 'mycardset', '.', 'pop', '(', ')', 'print', '(', '""Card removed is""', ',', 'cardpopped', ')', 'class', 'ShuffleCards', '(', 'Deck', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'Deck', '.', '__init__', '(', 'self', ')', 'def', 'shuffle', '(', 'self', ')', ':', 'if', 'len', '(', 'self', '.', 'mycardset', ')', '<', '52', ':', 'print', '(', '""cannot shuffle the cards""', ')', 'else', ':', 'shuffle', '(', 'self', '.', 'mycardset', ')', 'return', 'self', '.', 'mycardset', 'def', 'popCard', '(', 'self', ')', ':', 'if', 'len', '(', 'self', '.', 'mycardset', ')', '==', '0', ':', 'return', '""NO CARDS CAN BE POPPED FURTHER""', 'else', ':', 'cardpopped', '=', 'self', '.', 'mycardset', '.', 'pop', '(', ')', 'return', '(', 'cardpopped', ')', 'objCards', '=', 'Cards', '(', ')', 'objDeck', '=', 'Deck', '(', ')', 'player1Cards', '=', 'objDeck', '.', 'mycardset', 'print', '(', ""'\\n Player 1 Cards: \\n'"", ',', 'player1Cards', ')', 'objShuffleCards', '=', 'ShuffleCards', '(', ')', 'player2Cards', '=', 'objShuffleCards', '.', 'shuffle', '(', ')', 'print', '(', ""'\\n Player 2 Cards: \\n'"", ',', 'player2Cards', ')', 'print', '(', ""'\\n Removing a card from the deck:'"", ',', 'objShuffleCards', '.', 'popCard', '(', ')', ')', 'print', '(', ""'\\n Removing another card from the deck:'"", ',', 'objShuffleCards', '.', 'popCard', '(', ')', ')']"
2309,"['extract', 'youtube', 'data', 'python']","['from', 'youtube_statistics', 'import', 'YTstats', 'API_KEY', '=', '""AIzaSyA-0KfpLK04NpQN1XghxhSlzG-WkC3DHLs""', 'channel_id', '=', '""UC0RhatS1pyxInC00YKjjBqQ""', 'yt', '=', 'YTstats', '(', 'API_KEY', ',', 'channel_id', ')', 'yt', '.', 'get_channel_statistics', '(', ')', 'yt', '.', 'dump', '(', ')']"
2310,"['check', 'whether', 'given', 'string', 'palindrome', 'using', 'stack', 'python']","['//', 'C', '+', '+', 'implementation', 'of', 'the', 'approach', 'using', 'namespace', 'std', ';', '//', 'Function', 'that', 'returns', 'true', '//', 'if', 'string', 'is', 'a', 'palindrome', 'bool', 'isPalindrome', '(', 'string', 's', ')', '{', 'int', 'length', '=', 's', '.', 'size', '(', ')', ';', '//', 'Creating', 'a', 'Stack', 'stack', '<', 'char', '>', 'st', ';', '//', 'Finding', 'the', 'mid', 'int', 'i', ',', 'mid', '=', 'length', '/', '2', ';', 'for', '(', 'i', '=', '0', ';', 'i', '<', 'mid', ';', 'i', '+', '+', ')', '{', 'st', '.', 'push', '(', 's', '[', 'i', ']', ')', ';', '}', '//', 'Checking', 'if', 'the', 'length', 'of', 'the', 'string', '//', 'is', 'odd', ',', 'if', 'odd', 'then', 'neglect', 'the', '//', 'middle', 'character', 'if', '(', 'length', '%', '2', '!=', '0', ')', '{', 'i', '+', '+', ';', '}', 'char', 'ele', ';', '//', 'While', 'not', 'the', 'end', 'of', 'the', 'string', 'while', '(', 's', '[', 'i', ']', '!=', ""'\\0'"", ')', '{', 'ele', '=', 'st', '.', 'top', '(', ')', ';', 'st', '.', 'pop', '(', ')', ';', '//', 'If', 'the', 'characters', 'differ', 'then', 'the', '//', 'given', 'string', 'is', 'not', 'a', 'palindrome', 'if', '(', 'ele', '!=', 's', '[', 'i', ']', ')', 'return', 'false', ';', 'i', '+', '+', ';', '}', 'return', 'true', ';', '}', '//', 'Driver', 'code', 'int', 'main', '(', ')', '{', 'string', 's', '=', '""madam""', ';', 'if', '(', 'isPalindrome', '(', 's', ')', ')', '{', 'cout', '<<', '""Yes""', ';', '}', 'else', '{', 'cout', '<<', '""No""', ';', '}', 'return', '0', ';', '}', '//', 'This', 'Code', 'is', 'Contributed', 'by', 'Harshit', 'Srivastava']"
2311,"['write', 'python', 'program', 'maximum', 'occurring', 'substring', 'list']","['import', 're', 'import', 'itertools', 'test_str', '=', '""gfghsisbjknlmkesbestgfgsdcngfgcsdjnisdjnlbestdjsklgfgcdsbestbnjdsgfgdbhisbhsbestdkgfgb""', 'test_list', '=', '[', ""'gfg'"", ',', ""'is'"", ',', ""'best'"", ']', 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'seqs', '=', 're', '.', 'findall', '(', 'str', '.', 'join', '(', ""'|'"", ',', 'test_list', ')', ',', 'test_str', ')', 'grps', '=', '[', '(', 'key', ',', 'len', '(', 'list', '(', 'j', ')', ')', ')', 'for', 'key', ',', 'j', 'in', 'itertools', '.', 'groupby', '(', 'seqs', ')', ']', 'res', '=', 'max', '(', 'grps', ',', 'key', '=', 'lambda', 'ele', ':', 'ele', '[', '1', ']', ')', 'print', '(', '""Maximum frequency substring : ""', '+', 'str', '(', 'res', '[', '0', ']', ')', ')']"
2312,"['write', 'python', 'program', 'check', 'string', 'least', 'one', 'letter', 'one', 'number']","['def', 'checkString', '(', 'str', ')', ':', 'flag_l', '=', 'False', 'flag_n', '=', 'False', 'for', 'i', 'in', 'str', ':', 'if', 'i', '.', 'isalpha', '(', ')', ':', 'flag_l', '=', 'True', 'if', 'i', '.', 'isdigit', '(', ')', ':', 'flag_n', '=', 'True', 'return', 'flag_l', 'and', 'flag_n', 'print', '(', 'checkString', '(', ""'thishasboth29'"", ')', ')', 'print', '(', 'checkString', '(', ""'geeksforgeeks'"", ')', ')']"
2313,"['write', 'python', 'program', 'count', 'number', 'vowel', 'using', 'set', 'given', 'string']","['def', 'vowel_count', '(', 'str', ')', ':', 'count', '=', '0', 'vowel', '=', 'set', '(', '""aeiouAEIOU""', ')', 'for', 'alphabet', 'in', 'str', ':', 'if', 'alphabet', 'in', 'vowel', ':', 'count', '=', 'count', '+', '1', 'print', '(', '""No. of vowels :""', ',', 'count', ')', 'str', '=', '""GeeksforGeeks""', 'vowel_count', '(', 'str', ')']"
2314,"['write', 'python', 'program', 'convert', 'matrix', 'custom', 'tuple', 'matrix']","['test_list', '=', '[', '[', '4', ',', '5', ',', '6', ']', ',', '[', '6', ',', '7', ',', '3', ']', ',', '[', '1', ',', '3', ',', '4', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'add_list', '=', '[', ""'Gfg'"", ',', ""'is'"", ',', ""'best'"", ']', 'res', '=', '[', ']', 'for', 'idx', ',', 'ele', 'in', 'zip', '(', 'add_list', ',', 'test_list', ')', ':', 'for', 'e', 'in', 'ele', ':', 'res', '.', 'append', '(', '(', 'idx', ',', 'e', ')', ')', 'print', '(', '""Matrix after conversion : ""', '+', 'str', '(', 'res', ')', ')']"
2315,"['write', 'python', 'program', 'list', 'product', 'excluding', 'duplicate']","['def', 'prod', '(', 'val', ')', ':', 'res', '=', '1', 'for', 'ele', 'in', 'val', ':', 'res', '*=', 'ele', 'return', 'res', 'test_list', '=', '[', '1', ',', '3', ',', '5', ',', '6', ',', '3', ',', '5', ',', '6', ',', '1', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', ']', 'for', 'i', 'in', 'test_list', ':', 'if', 'i', 'not', 'in', 'res', ':', 'res', '.', 'append', '(', 'i', ')', 'res', '=', 'prod', '(', 'res', ')', 'print', '(', '""Duplication removal list product : ""', '+', 'str', '(', 'res', ')', ')']"
2316,"['write', 'python', 'program', 'cloning', 'copying', 'list']","['def', 'Cloning', '(', 'li1', ')', ':', 'li_copy', '=', 'li1', '[', ':', ']', 'return', 'li_copy', 'li1', '=', '[', '4', ',', '8', ',', '2', ',', '10', ',', '15', ',', '18', ']', 'li2', '=', 'Cloning', '(', 'li1', ')', 'print', '(', '""Original List:""', ',', 'li1', ')', 'print', '(', '""After Cloning:""', ',', 'li2', ')']"
2317,"['add', 'timestamp', 'csv', 'file', 'python']","['import', 'csv', 'from', 'datetime', 'import', 'datetime', 'rows', '=', '[', '[', ""'GeeksforGeeks1'"", ',', ""'GeeksforGeeks2'"", ']', ',', '[', ""'GeeksforGeeks3'"", ',', ""'GeeksforGeeks4'"", ']', ',', '[', ""'GeeksforGeeks5'"", ',', ""'GeeksforGeeks6'"", ']', ']', 'with', 'open', '(', ""r'YOUR_CSV_FILE.csv'"", ',', ""'r+'"", ',', 'newline', '=', ""''"", ')', 'as', 'file', ':', 'file_write', '=', 'csv', '.', 'writer', '(', 'file', ')', 'current_date_time', '=', 'datetime', '.', 'now', '(', ')', 'for', 'val', 'in', 'rows', ':', 'val', '.', 'insert', '(', '0', ',', 'current_date_time', ')', 'file_write', '.', 'writerow', '(', 'val', ')']"
2318,"['write', 'python', 'program', 'count', 'word', 'text', 'file']","['number_of_words', '=', '0', 'with', 'open', '(', ""r'SampleFile.txt'"", ',', ""'r'"", ')', 'as', 'file', ':', 'data', '=', 'file', '.', 'read', '(', ')', 'lines', '=', 'data', '.', 'split', '(', ')', 'number_of_words', '+=', 'len', '(', 'lines', ')', 'print', '(', 'number_of_words', ')']"
2319,"['convert', 'numpy', 'array', 'csv', 'file', 'python']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'arr', '=', 'np', '.', 'arange', '(', '1', ',', '11', ')', '.', 'reshape', '(', '2', ',', '5', ')', 'print', '(', 'arr', ')', 'DF', '=', 'pd', '.', 'DataFrame', '(', 'arr', ')', 'DF', '.', 'to_csv', '(', '""data1.csv""', ')']"
2320,"['add', 'border', 'around', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'array', '=', 'np', '.', 'ones', '(', '(', '2', ',', '2', ')', ')', 'print', '(', '""Original array""', ')', 'print', '(', 'array', ')', 'print', '(', '""\\n0 on the border and 1 inside the array""', ')', 'array', '=', 'np', '.', 'pad', '(', 'array', ',', 'pad_width', '=', '1', ',', 'mode', '=', ""'constant'"", ',', 'constant_values', '=', '0', ')', 'print', '(', 'array', ')']"
2321,"['write', 'python', 'program', 'filter', 'integer', 'float', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'ini_array', '=', 'np', '.', 'array', '(', '[', '1.0', ',', '1.2', ',', '2.2', ',', '2.0', ',', '3.0', ',', '2.0', ']', ')', 'print', '(', '""initial array : ""', ',', 'str', '(', 'ini_array', ')', ')', 'result', '=', 'ini_array', '[', 'ini_array', '!=', 'ini_array', '.', 'astype', '(', 'int', ')', ']', 'print', '(', '""final array""', ',', 'result', ')']"
2322,"['write', 'python', 'program', 'remove', 'tuples', 'length', 'k']","['test_list', '=', '[', '(', '4', ',', '5', ')', ',', '(', '4', ',', ')', ',', '(', '8', ',', '6', ',', '7', ')', ',', '(', '1', ',', ')', ',', '(', '3', ',', '4', ',', '6', ',', '7', ')', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '1', 'res', '=', '[', 'ele', 'for', 'ele', 'in', 'test_list', 'if', 'len', '(', 'ele', ')', '!=', 'K', ']', 'print', '(', '""Filtered list : ""', '+', 'str', '(', 'res', ')', ')']"
2323,"['write', 'python', 'program', 'program', 'accept', 'string', 'contains', 'vowel']","['def', 'check', '(', 'string', ')', ':', 'string', '=', 'string', '.', 'lower', '(', ')', 'vowels', '=', 'set', '(', '""aeiou""', ')', 's', '=', 'set', '(', '{', '}', ')', 'for', 'char', 'in', 'string', ':', 'if', 'char', 'in', 'vowels', ':', 's', '.', 'add', '(', 'char', ')', 'else', ':', 'pass', 'if', 'len', '(', 's', ')', '==', 'len', '(', 'vowels', ')', ':', 'print', '(', '""Accepted""', ')', 'else', ':', 'print', '(', '""Not Accepted""', ')', 'if', '__name__', '==', '""__main__""', ':', 'string', '=', '""SEEquoiaL""', 'check', '(', 'string', ')']"
2324,"['allowed', 'character', 'python', 'function', 'name']","['def', 'calculate_sum', '(', 'a', ',', 'b', ')', ':', 'return', 'a', '+', 'b', 'x', '=', '2', 'y', '=', '5', 'print', '(', 'calculate_sum', '(', 'x', ',', 'y', ')', ')', 'def', '=', '12', 'if', '=', '2', 'print', '(', 'calculate_sum', '(', 'def', ',', 'if', ')', ')']"
2325,"['find', 'number', 'row', 'column', 'given', 'matrix', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'matrix', '=', 'np', '.', 'arange', '(', '1', ',', '9', ')', '.', 'reshape', '(', '(', '3', ',', '3', ')', ')', 'print', '(', 'matrix', ')', 'print', '(', 'matrix', '.', 'shape', ')']"
2326,"['write', 'python', 'program', 'group', 'sublists', 'another', 'list']","['def', 'grp_ele', '(', 'test_list1', ',', 'test_list2', ')', ':', 'temp', '=', '[', ']', 'for', 'i', 'in', 'test_list1', ':', 'if', 'i', 'in', 'test_list2', ':', 'if', 'temp', ':', 'yield', 'temp', 'temp', '=', '[', ']', 'yield', 'i', 'else', ':', 'temp', '.', 'append', '(', 'i', ')', 'if', 'temp', ':', 'yield', 'temp', 'test_list1', '=', '[', '8', ',', '5', ',', '9', ',', '11', ',', '3', ',', '7', ']', 'test_list2', '=', '[', '9', ',', '11', ']', 'print', '(', '""The original list 1 is : ""', '+', 'str', '(', 'test_list1', ')', ')', 'print', '(', '""The original list 2 is : ""', '+', 'str', '(', 'test_list2', ')', ')', 'res', '=', 'list', '(', 'grp_ele', '(', 'test_list1', ',', 'test_list2', ')', ')', 'print', '(', '""The Grouped list is : ""', '+', 'str', '(', 'res', ')', ')']"
2327,"['kill', 'process', 'name', 'using', 'python']","['import', 'os', ',', 'signal', 'def', 'process', '(', ')', ':', 'name', '=', 'input', '(', '""Enter process Name: ""', ')', 'try', ':', 'for', 'line', 'in', 'os', '.', 'popen', '(', '""ps ax | grep ""', '+', 'name', '+', '"" | grep -v grep""', ')', ':', 'fields', '=', 'line', '.', 'split', '(', ')', 'pid', '=', 'fields', '[', '0', ']', 'os', '.', 'kill', '(', 'int', '(', 'pid', ')', ',', 'signal', '.', 'SIGKILL', ')', 'print', '(', '""Process Successfully terminated""', ')', 'except', ':', 'print', '(', '""Error Encountered while running script""', ')', 'process', '(', ')']"
2328,"['write', 'python', 'program', 'print', 'inverted', 'star', 'pattern']","['n', '=', '11', 'for', 'i', 'in', 'range', '(', 'n', ',', '0', ',', '-', '1', ')', ':', 'print', '(', '(', 'n', '-', 'i', ')', '*', ""' '"", '+', 'i', '*', ""'*'"", ')']"
2329,"['combining', 'one', 'twodimensional', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'num_1d', '=', 'np', '.', 'arange', '(', '5', ')', 'print', '(', '""One dimensional array:""', ')', 'print', '(', 'num_1d', ')', 'num_2d', '=', 'np', '.', 'arange', '(', '10', ')', '.', 'reshape', '(', '2', ',', '5', ')', 'print', '(', '""\\nTwo dimensional array:""', ')', 'print', '(', 'num_2d', ')', 'for', 'a', ',', 'b', 'in', 'np', '.', 'nditer', '(', '[', 'num_1d', ',', 'num_2d', ']', ')', ':', 'print', '(', '""%d:%d""', '%', '(', 'a', ',', 'b', ')', ',', ')']"
2330,"['write', 'python', 'program', 'way', 'find', 'length', 'list']","['test_list', '=', '[', '1', ',', '4', ',', '5', ',', '7', ',', '8', ']', 'print', '(', '""The list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'counter', '=', '0', 'for', 'i', 'in', 'test_list', ':', 'counter', '=', 'counter', '+', '1', 'print', '(', '""Length of list using naive method is : ""', '+', 'str', '(', 'counter', ')', ')']"
2331,"['write', 'python', 'program', 'sorting', 'string', 'using', 'order', 'defined', 'another', 'string']","['def', 'sortbyPattern', '(', 'pat', ',', 'str', ')', ':', 'priority', '=', 'list', '(', 'pat', ')', 'myDict', '=', '{', 'priority', '[', 'i', ']', ':', 'i', 'for', 'i', 'in', 'range', '(', 'len', '(', 'priority', ')', ')', '}', 'str', '=', 'list', '(', 'str', ')', 'str', '.', 'sort', '(', 'key', '=', 'lambda', 'ele', ':', 'myDict', '[', 'ele', ']', ')', 'str', '.', 'reverse', '(', ')', 'new_str', '=', ""''"", '.', 'join', '(', 'str', ')', 'return', 'new_str', 'if', '__name__', '==', ""'__main__'"", ':', 'pat', '=', '""asbcklfdmegnot""', 'str', '=', '""eksge""', 'new_str', '=', 'sortbyPattern', '(', 'pat', ',', 'str', ')', 'print', '(', 'new_str', ')']"
2332,"['way', 'convert', 'string', 'dictionary', 'python']","['str', '=', '"" Jan = January; Feb = February; Mar = March""', 'dictionary', '=', 'dict', '(', 'subString', '.', 'split', '(', '""=""', ')', 'for', 'subString', 'in', 'str', '.', 'split', '(', '"";""', ')', ')', 'print', '(', 'dictionary', ')']"
2333,"['function', 'accept', 'variable', 'length', 'key', 'value', 'pair', 'argument', 'python']","['def', 'printKwargs', '(', '**', 'kwargs', ')', ':', 'print', '(', 'kwargs', ')', 'if', '__name__', '==', '""__main__""', ':', 'printKwargs', '(', 'Argument_1', '=', ""'gfg'"", ',', 'Argument_2', '=', ""'GFG'"", ')']"
2334,"['lambda', 'without', 'else', 'python']","['square', '=', 'lambda', 'x', ':', 'x', '*', 'x', 'if', '(', 'x', '>', '0', ')', 'print', '(', 'square', '(', '6', ')', ')']"
2335,"['counting', 'frequency', 'list', 'using', 'dictionary', 'python']","['def', 'CountFrequency', '(', 'my_list', ')', ':', 'freq', '=', '{', '}', 'for', 'item', 'in', 'my_list', ':', 'if', '(', 'item', 'in', 'freq', ')', ':', 'freq', '[', 'item', ']', '+=', '1', 'else', ':', 'freq', '[', 'item', ']', '=', '1', 'for', 'key', ',', 'value', 'in', 'freq', '.', 'items', '(', ')', ':', 'print', '(', '""% d : % d""', '%', '(', 'key', ',', 'value', ')', ')', 'if', '__name__', '==', '""__main__""', ':', 'my_list', '=', '[', '1', ',', '1', ',', '1', ',', '5', ',', '5', ',', '3', ',', '1', ',', '3', ',', '3', ',', '1', ',', '4', ',', '4', ',', '4', ',', '2', ',', '2', ',', '2', ',', '2', ']', 'CountFrequency', '(', 'my_list', ')']"
2336,"['sorting', 'object', 'user', 'defined', 'class', 'python']","['print', '(', 'sorted', '(', '[', '1', ',', '26', ',', '3', ',', '9', ']', ')', ')', 'print', '(', 'sorted', '(', '""Geeks foR gEEks""', '.', 'split', '(', ')', ',', 'key', '=', 'str', '.', 'lower', ')', ')']"
2337,"['write', 'python', 'program', 'numpy', 'matrixtolist']","['import', 'numpy', 'as', 'np', 'gfg', '=', 'np', '.', 'matrix', '(', ""'[4, 1, 12, 3]'"", ')', 'geek', '=', 'gfg', '.', 'tolist', '(', ')', 'print', '(', 'geek', ')']"
2338,"['write', 'python', 'program', 'maximum', 'record', 'value', 'key', 'dictionary']","['test_dict', '=', '{', ""'gfg'"", ':', '{', ""'Manjeet'"", ':', '5', ',', ""'Himani'"", ':', '10', '}', ',', ""'is'"", ':', '{', ""'Manjeet'"", ':', '8', ',', ""'Himani'"", ':', '9', '}', ',', ""'best'"", ':', '{', ""'Manjeet'"", ':', '10', ',', ""'Himani'"", ':', '15', '}', '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'key', '=', ""'Himani'"", 'res', '=', 'None', 'res_max', '=', '0', 'for', 'sub', 'in', 'test_dict', ':', 'if', 'test_dict', '[', 'sub', ']', '[', 'key', ']', '>', 'res_max', ':', 'res_max', '=', 'test_dict', '[', 'sub', ']', '[', 'key', ']', 'res', '=', 'sub', 'print', '(', '""The required key is : ""', '+', 'str', '(', 'res', ')', ')']"
2339,"['build', 'array', 'combination', 'two', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'array_1', '=', 'np', '.', 'array', '(', '[', '1', ',', '2', ']', ')', 'array_2', '=', 'np', '.', 'array', '(', '[', '4', ',', '6', ']', ')', 'print', '(', '""Array-1""', ')', 'print', '(', 'array_1', ')', 'print', '(', '""\\nArray-2""', ')', 'print', '(', 'array_2', ')', 'comb_array', '=', 'np', '.', 'array', '(', 'np', '.', 'meshgrid', '(', 'array_1', ',', 'array_2', ')', ')', '.', 'T', '.', 'reshape', '(', '-', '1', ',', '2', ')', 'print', '(', '""\\nCombine array:""', ')', 'print', '(', 'comb_array', ')']"
2340,"['write', 'python', 'program', 'sum', 'tuple', 'element']","['test_tup', '=', '(', '7', ',', '8', ',', '9', ',', '1', ',', '10', ',', '7', ')', 'print', '(', '""The original tuple is : ""', '+', 'str', '(', 'test_tup', ')', ')', 'res', '=', 'sum', '(', 'list', '(', 'test_tup', ')', ')', 'print', '(', '""The summation of tuple elements are : ""', '+', 'str', '(', 'res', ')', ')']"
2341,"['print', 'anagram', 'together', 'python', 'using', 'list', 'dictionary']","['def', 'allAnagram', '(', 'input', ')', ':', 'dict', '=', '{', '}', 'for', 'strVal', 'in', 'input', ':', 'key', '=', ""''"", '.', 'join', '(', 'sorted', '(', 'strVal', ')', ')', 'if', 'key', 'in', 'dict', '.', 'keys', '(', ')', ':', 'dict', '[', 'key', ']', '.', 'append', '(', 'strVal', ')', 'else', ':', 'dict', '[', 'key', ']', '=', '[', ']', 'dict', '[', 'key', ']', '.', 'append', '(', 'strVal', ')', 'output', '=', '""""', 'for', 'key', ',', 'value', 'in', 'dict', '.', 'items', '(', ')', ':', 'output', '=', 'output', '+', ""' '"", '.', 'join', '(', 'value', ')', '+', ""' '"", 'return', 'output', 'if', '__name__', '==', '""__main__""', ':', 'input', '=', '[', ""'cat'"", ',', ""'dog'"", ',', ""'tac'"", ',', ""'god'"", ',', ""'act'"", ']', 'print', '(', 'allAnagram', '(', 'input', ')', ')']"
2342,"['write', 'python', 'program', 'check', 'substring', 'present', 'given', 'string']","['def', 'check', '(', 'string', ',', 'sub_str', ')', ':', 'if', '(', 'string', '.', 'find', '(', 'sub_str', ')', '==', '-', '1', ')', ':', 'print', '(', '""NO""', ')', 'else', ':', 'print', '(', '""YES""', ')', 'string', '=', '""geeks for geeks""', 'sub_str', '=', '""geek""', 'check', '(', 'string', ',', 'sub_str', ')']"
2343,"['numpy', 'fibonacci', 'series', 'using', 'binet', 'formula', 'python']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'arange', '(', '1', ',', '11', ')', 'lengthA', '=', 'len', '(', 'a', ')', 'sqrtFive', '=', 'np', '.', 'sqrt', '(', '5', ')', 'alpha', '=', '(', '1', '+', 'sqrtFive', ')', '/', '2', 'beta', '=', '(', '1', '-', 'sqrtFive', ')', '/', '2', 'Fn', '=', 'np', '.', 'rint', '(', '(', '(', 'alpha', '**', 'a', ')', '-', '(', 'beta', '**', 'a', ')', ')', '/', '(', 'sqrtFive', ')', ')', 'print', '(', '""The first {} numbers of Fibonacci series are {} . ""', '.', 'format', '(', 'lengthA', ',', 'Fn', ')', ')']"
2344,"['count', 'distinct', 'substring', 'string', 'using', 'rabin', 'karp', 'algorithm', 'python']","['import', 'sys', 'import', 'math', 'as', 'mt', 't', '=', '1', 'mod', '=', '9007199254740881', 'for', '___', 'in', 'range', '(', 't', ')', ':', 's', '=', ""'abcd'"", 'l', '=', '[', ']', 'd', '=', '{', '}', 'for', 'i', 'in', 'range', '(', 'len', '(', 's', ')', ')', ':', 'suma', '=', '0', 'pre', '=', '0', 'D', '=', '256', 'for', 'j', 'in', 'range', '(', 'i', ',', 'len', '(', 's', ')', ')', ':', 'pre', '=', '(', 'pre', '*', 'D', '+', 'ord', '(', 's', '[', 'j', ']', ')', ')', '%', 'mod', 'if', 'd', '.', 'get', '(', 'pre', ',', '-', '1', ')', '==', '-', '1', ':', 'l', '.', 'append', '(', '[', 'i', ',', 'j', ']', ')', 'd', '[', 'pre', ']', '=', '1', 'print', '(', 'len', '(', 'l', ')', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'l', ')', ')', ':', 'print', '(', 's', '[', 'l', '[', 'i', ']', '[', '0', ']', ':', 'l', '[', 'i', ']', '[', '1', ']', '+', '1', ']', ',', 'end', '=', '"" ""', ')']"
2345,"['write', 'python', 'program', 'check', 'two', 'list', 'atleast', 'one', 'element', 'common']","['def', 'common_data', '(', 'list1', ',', 'list2', ')', ':', 'result', '=', 'False', 'for', 'x', 'in', 'list1', ':', 'for', 'y', 'in', 'list2', ':', 'if', 'x', '==', 'y', ':', 'result', '=', 'True', 'return', 'result', 'return', 'result', 'a', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', 'b', '=', '[', '5', ',', '6', ',', '7', ',', '8', ',', '9', ']', 'print', '(', 'common_data', '(', 'a', ',', 'b', ')', ')', 'a', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ']', 'b', '=', '[', '6', ',', '7', ',', '8', ',', '9', ']', 'print', '(', 'common_data', '(', 'a', ',', 'b', ')', ')']"
2346,"['find', 'length', 'string', 'python', 'way']","['str', '=', '""geeks""', 'print', '(', 'len', '(', 'str', ')', ')']"
2347,"['write', 'python', 'program', 'convert', 'list', 'dictionary', 'list', 'list']","['test_list', '=', '[', '{', ""'Nikhil'"", ':', '17', ',', ""'Akash'"", ':', '18', ',', ""'Akshat'"", ':', '20', '}', ',', '{', ""'Nikhil'"", ':', '21', ',', ""'Akash'"", ':', '30', ',', ""'Akshat'"", ':', '10', '}', ',', '{', ""'Nikhil'"", ':', '31', ',', ""'Akash'"", ':', '12', ',', ""'Akshat'"", ':', '19', '}', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', ']', 'for', 'idx', ',', 'sub', 'in', 'enumerate', '(', 'test_list', ',', 'start', '=', '0', ')', ':', 'if', 'idx', '==', '0', ':', 'res', '.', 'append', '(', 'list', '(', 'sub', '.', 'keys', '(', ')', ')', ')', 'res', '.', 'append', '(', 'list', '(', 'sub', '.', 'values', '(', ')', ')', ')', 'else', ':', 'res', '.', 'append', '(', 'list', '(', 'sub', '.', 'values', '(', ')', ')', ')', 'print', '(', '""The converted list : ""', '+', 'str', '(', 'res', ')', ')']"
2348,"['write', 'python', 'program', 'extract', 'key', 'value', 'key', 'present', 'list', 'dictionary']","['test_list', '=', '[', '""Gfg""', ',', '""is""', ',', '""Good""', ',', '""for""', ',', '""Geeks""', ']', 'test_dict', '=', '{', '""Gfg""', ':', '2', ',', '""is""', ':', '4', ',', '""Best""', ':', '6', '}', 'K', '=', '""Gfg""', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'print', '(', '""The original Dictionary : ""', '+', 'str', '(', 'test_dict', ')', ')', 'res', '=', 'None', 'if', 'all', '(', 'K', 'in', 'sub', 'for', 'sub', 'in', '[', 'test_dict', ',', 'test_list', ']', ')', ':', 'res', '=', 'test_dict', '[', 'K', ']', 'print', '(', '""Extracted Value : ""', '+', 'str', '(', 'res', ')', ')']"
2349,"['write', 'python', 'program', 'print', 'digit', 'pattern']","['def', 'pattern', '(', 'n', ')', ':', 'for', 'i', 'in', 'n', ':', 'print', '(', '""|""', ',', 'end', '=', '""""', ')', 'print', '(', '""*""', '*', 'int', '(', 'i', ')', ')', 'n', '=', '""41325""', 'pattern', '(', 'n', ')']"
2350,"['finding', 'k', 'smallest', 'value', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'arr', '=', 'np', '.', 'array', '(', '[', '23', ',', '12', ',', '1', ',', '3', ',', '4', ',', '5', ',', '6', ']', ')', 'print', '(', '""The Original Array Content""', ')', 'print', '(', 'arr', ')', 'k', '=', '4', 'arr1', '=', 'np', '.', 'sort', '(', 'arr', ')', 'print', '(', 'k', ',', '""smallest elements of the array""', ')', 'print', '(', 'arr1', '[', ':', 'k', ']', ')']"
2351,"['build', 'simple', 'autologin', 'bot', 'python']","['from', 'selenium', 'import', 'webdriver', 'import', 'os', 'def', 'startBot', '(', 'username', ',', 'password', ',', 'url', ')', ':', 'path', '=', '""C:\\\\Users\\\\hp\\\\Downloads\\\\chromedriver""', 'driver', '=', 'webdriver', '.', 'Chrome', '(', 'path', ')', 'driver', '.', 'get', '(', 'url', ')', 'driver', '.', 'find_element_by_name', '(', '""id/class/name of username""', ')', '.', 'send_keys', '(', 'username', ')', 'driver', '.', 'find_element_by_name', '(', '""id/class/name of password""', ')', '.', 'send_keys', '(', 'password', ')', 'driver', '.', 'find_element_by_css_selector', '(', '""id/class/name/css selector of login button""', ')', '.', 'click', '(', ')', 'username', '=', '""Enter your username""', 'password', '=', '""Enter your password""', 'url', '=', '""Enter the URL of login page of website""', 'startBot', '(', 'username', ',', 'password', ',', 'url', ')']"
2352,"['write', 'python', 'program', 'print', 'heart', 'pattern']","['n', '=', '8', 'm', '=', 'n', '+', '1', 'for', 'i', 'in', 'range', '(', 'n', '//', '2', '-', '1', ')', ':', 'for', 'j', 'in', 'range', '(', 'm', ')', ':', 'if', 'i', '==', 'n', '//', '2', '-', '2', 'and', '(', 'j', '==', '0', 'or', 'j', '==', 'm', '-', '1', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '"" ""', ')', 'elif', 'j', '<=', 'm', '//', '2', 'and', '(', '(', 'i', '+', 'j', '==', 'n', '//', '2', '-', '3', 'and', 'j', '<=', 'm', '//', '4', ')', 'or', '(', 'j', '-', 'i', '==', 'm', '//', '2', '-', 'n', '//', '2', '+', '3', 'and', 'j', '>', 'm', '//', '4', ')', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '"" ""', ')', 'elif', 'j', '>', 'm', '//', '2', 'and', '(', '(', 'i', '+', 'j', '==', 'n', '//', '2', '-', '3', '+', 'm', '//', '2', 'and', 'j', '<', '3', '*', 'm', '//', '4', ')', 'or', '(', 'j', '-', 'i', '==', 'm', '//', '2', '-', 'n', '//', '2', '+', '3', '+', 'm', '//', '2', 'and', 'j', '>=', '3', '*', 'm', '//', '4', ')', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '"" ""', ')', 'else', ':', 'print', '(', '"" ""', ',', 'end', '=', '"" ""', ')', 'print', '(', ')', 'for', 'i', 'in', 'range', '(', 'n', '//', '2', '-', '1', ',', 'n', ')', ':', 'for', 'j', 'in', 'range', '(', 'm', ')', ':', 'if', '(', 'i', '-', 'j', '==', 'n', '//', '2', '-', '1', ')', 'or', '(', 'i', '+', 'j', '==', 'n', '-', '1', '+', 'm', '//', '2', ')', ':', 'print', '(', ""'*'"", ',', 'end', '=', '"" ""', ')', 'elif', 'i', '==', 'n', '//', '2', '-', '1', ':', 'if', 'j', '==', 'm', '//', '2', '-', '1', 'or', 'j', '==', 'm', '//', '2', '+', '1', ':', 'print', '(', ""'G'"", ',', 'end', '=', '"" ""', ')', 'elif', 'j', '==', 'm', '//', '2', ':', 'print', '(', ""'F'"", ',', 'end', '=', '"" ""', ')', 'else', ':', 'print', '(', ""' '"", ',', 'end', '=', '"" ""', ')', 'else', ':', 'print', '(', ""' '"", ',', 'end', '=', '"" ""', ')', 'print', '(', ')']"
2353,"['open', 'two', 'file', 'together', 'python']","['with', 'open', '(', '""file1.txt""', ')', 'as', 'f1', ',', 'open', '(', '""file2.txt""', ')', 'as', 'f2', ':', 'line1', '=', 'f1', '.', 'readline', '(', ')', 'line2', '=', 'f2', '.', 'readline', '(', ')', 'print', '(', 'line1', ',', 'line2', ')']"
2354,"['access', 'element', 'series', 'panda', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', '""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv""', ')', 'ser', '=', 'pd', '.', 'Series', '(', 'df', '[', ""'Name'"", ']', ')', 'ser', '.', 'head', '(', '10', ')']"
2355,"['write', 'python', 'program', 'numpy', 'matrixmin']","['import', 'numpy', 'as', 'np', 'gfg', '=', 'np', '.', 'matrix', '(', ""'[64, 1; 12, 3]'"", ')', 'geeks', '=', 'gfg', '.', 'min', '(', ')', 'print', '(', 'geeks', ')']"
2356,"['write', 'python', 'library', 'linked', 'list']","['import', 'collections', 'linked_lst', '=', 'collections', '.', 'deque', '(', ')', 'linked_lst', '.', 'append', '(', ""'first'"", ')', 'linked_lst', '.', 'append', '(', ""'second'"", ')', 'linked_lst', '.', 'append', '(', ""'third'"", ')', 'print', '(', '""elements in the linked_list:""', ')', 'print', '(', 'linked_lst', ')', 'linked_lst', '.', 'insert', '(', '1', ',', ""'fourth'"", ')', 'print', '(', '""elements in the linked_list:""', ')', 'print', '(', 'linked_lst', ')', 'linked_lst', '.', 'pop', '(', ')', 'print', '(', '""elements in the linked_list:""', ')', 'print', '(', 'linked_lst', ')', 'linked_lst', '.', 'remove', '(', ""'fourth'"", ')', 'print', '(', '""elements in the linked_list:""', ')', 'print', '(', 'linked_lst', ')']"
2357,"['creating', 'panda', 'series', 'list', 'python']","['import', 'pandas', 'as', 'pd', 'x', '=', 'pd', '.', 'Series', '(', '[', ""'Geeks'"", ',', ""'for'"", ',', ""'Geeks'"", ']', ')', 'print', '(', 'x', ')']"
2358,"['write', 'python', 'program', 'substring', 'frequency', 'string']","['test_str', '=', '""abababa""', 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'temp', '=', '[', 'test_str', '[', 'idx', ':', 'j', ']', 'for', 'idx', 'in', 'range', '(', 'len', '(', 'test_str', ')', ')', 'for', 'j', 'in', 'range', '(', 'idx', '+', '1', ',', 'len', '(', 'test_str', ')', '+', '1', ')', ']', 'res', '=', '{', '}', 'for', 'idx', 'in', 'temp', ':', 'if', 'idx', 'not', 'in', 'res', '.', 'keys', '(', ')', ':', 'res', '[', 'idx', ']', '=', '1', 'else', ':', 'res', '[', 'idx', ']', '+=', '1', 'print', '(', '""Extracted frequency dictionary : ""', '+', 'str', '(', 'res', ')', ')']"
2359,"['write', 'python', 'program', 'join', 'tuples', 'similar', 'initial', 'element']","['test_list', '=', '[', '(', '5', ',', '6', ')', ',', '(', '5', ',', '7', ')', ',', '(', '6', ',', '8', ')', ',', '(', '6', ',', '10', ')', ',', '(', '7', ',', '13', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', ']', 'for', 'sub', 'in', 'test_list', ':', 'if', 'res', 'and', 'res', '[', '-', '1', ']', '[', '0', ']', '==', 'sub', '[', '0', ']', ':', 'res', '[', '-', '1', ']', '.', 'extend', '(', 'sub', '[', '1', ':', ']', ')', 'else', ':', 'res', '.', 'append', '(', '[', 'ele', 'for', 'ele', 'in', 'sub', ']', ')', 'res', '=', 'list', '(', 'map', '(', 'tuple', ',', 'res', ')', ')', 'print', '(', '""The extracted elements : ""', '+', 'str', '(', 'res', ')', ')']"
2360,"['write', 'python', 'set', 'pair', 'complete', 'string', 'two', 'set']","['def', 'completePair', '(', 'set1', ',', 'set2', ')', ':', 'count', '=', '0', 'for', 'str1', 'in', 'set1', ':', 'for', 'str2', 'in', 'set2', ':', 'result', '=', 'str1', '+', 'str2', 'tmpSet', '=', 'set', '(', '[', 'ch', 'for', 'ch', 'in', 'result', 'if', '(', 'ord', '(', 'ch', ')', '>=', 'ord', '(', ""'a'"", ')', 'and', 'ord', '(', 'ch', ')', '<=', 'ord', '(', ""'z'"", ')', ')', ']', ')', 'if', 'len', '(', 'tmpSet', ')', '==', '26', ':', 'count', '=', 'count', '+', '1', 'print', '(', 'count', ')', 'if', '__name__', '==', '""__main__""', ':', 'set1', '=', '[', ""'abcdefgh'"", ',', ""'geeksforgeeks'"", ',', ""'lmnopqrst'"", ',', ""'abc'"", ']', 'set2', '=', '[', ""'ijklmnopqrstuvwxyz'"", ',', ""'abcdefghijklmnopqrstuvwxyz'"", ',', ""'defghijklmnopqrstuvwxyz'"", ']', 'completePair', '(', 'set1', ',', 'set2', ')']"
2361,"['write', 'python', 'selenium', 'find', 'button', 'text']","['from', 'selenium', 'import', 'webdriver', 'import', 'time', 'driver', '=', 'webdriver', '.', 'Chrome', '(', 'executable_path', '=', 'r""C:\\\\chromedriver.exe""', ')', 'driver', '.', 'get', '(', ""'https://html.com/tags/button/'"", ')', 'time', '.', 'sleep', '(', '5', ')', 'driver', '.', 'find_element_by_xpath', '(', '\'//button[normalize-space()=""Click me!""]\'', ')', '.', 'click', '(', ')', 'time', '.', 'sleep', '(', '5', ')', 'driver', '.', 'close', '(', ')']"
2362,"['check', 'element', 'exists', 'list', 'python']","['test_list', '=', '[', '1', ',', '6', ',', '3', ',', '5', ',', '3', ',', '4', ']', 'print', '(', '""Checking if 4 exists in list ( using loop ) : ""', ')', 'for', 'i', 'in', 'test_list', ':', 'if', '(', 'i', '==', '4', ')', ':', 'print', '(', '""Element Exists""', ')', 'print', '(', '""Checking if 4 exists in list ( using in ) : ""', ')', 'if', '(', '4', 'in', 'test_list', ')', ':', 'print', '(', '""Element Exists""', ')']"
2363,"['box', 'blur', 'algorithm', 'python', 'implementation']","['def', 'square_matrix', '(', 'square', ')', ':', '"""""" This function will calculate the value x\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0(i.e. blurred pixel value) for each 3 * 3 blur image.\n\xa0\xa0\xa0\xa0""""""', 'tot_sum', '=', '0', 'for', 'i', 'in', 'range', '(', '3', ')', ':', 'for', 'j', 'in', 'range', '(', '3', ')', ':', 'tot_sum', '+=', 'square', '[', 'i', ']', '[', 'j', ']', 'return', 'tot_sum', '//', '9', 'def', 'boxBlur', '(', 'image', ')', ':', '""""""\n\xa0\xa0\xa0\xa0This function will calculate the blurred\xa0\n\xa0\xa0\xa0\xa0image for given n * n image.\xa0\n\xa0\xa0\xa0\xa0""""""', 'square', '=', '[', ']', 'square_row', '=', '[', ']', 'blur_row', '=', '[', ']', 'blur_img', '=', '[', ']', 'n_rows', '=', 'len', '(', 'image', ')', 'n_col', '=', 'len', '(', 'image', '[', '0', ']', ')', 'rp', ',', 'cp', '=', '0', ',', '0', 'while', 'rp', '<=', 'n_rows', '-', '3', ':', 'while', 'cp', '<=', 'n_col', '-', '3', ':', 'for', 'i', 'in', 'range', '(', 'rp', ',', 'rp', '+', '3', ')', ':', 'for', 'j', 'in', 'range', '(', 'cp', ',', 'cp', '+', '3', ')', ':', 'square_row', '.', 'append', '(', 'image', '[', 'i', ']', '[', 'j', ']', ')', 'square', '.', 'append', '(', 'square_row', ')', 'square_row', '=', '[', ']', 'blur_row', '.', 'append', '(', 'square_matrix', '(', 'square', ')', ')', 'square', '=', '[', ']', 'cp', '=', 'cp', '+', '1', 'blur_img', '.', 'append', '(', 'blur_row', ')', 'blur_row', '=', '[', ']', 'rp', '=', 'rp', '+', '1', 'cp', '=', '0', 'return', 'blur_img', 'image', '=', '[', '[', '7', ',', '4', ',', '0', ',', '1', ']', ',', '[', '5', ',', '6', ',', '2', ',', '2', ']', ',', '[', '6', ',', '10', ',', '7', ',', '8', ']', ',', '[', '1', ',', '4', ',', '2', ',', '0', ']', ']', 'print', '(', 'boxBlur', '(', 'image', ')', ')']"
2364,"['get', 'elementwise', 'true', 'division', 'array', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'arange', '(', '5', ')', 'print', '(', '""Original array:""', ',', 'x', ')', 'rslt', '=', 'np', '.', 'true_divide', '(', 'x', ',', '4', ')', 'print', '(', '""After the element-wise division:""', ',', 'rslt', ')']"
2365,"['evaluate', 'einstein', 'summation', 'convention', 'two', 'multidimensional', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'matrix1', '=', 'np', '.', 'array', '(', '[', '[', '1', ',', '2', ']', ',', '[', '0', ',', '2', ']', ']', ')', 'matrix2', '=', 'np', '.', 'array', '(', '[', '[', '0', ',', '1', ']', ',', '[', '3', ',', '4', ']', ']', ')', 'print', '(', '""Original matrix:""', ')', 'print', '(', 'matrix1', ')', 'print', '(', 'matrix2', ')', 'result', '=', 'np', '.', 'einsum', '(', '""mk,kn""', ',', 'matrix1', ',', 'matrix2', ')', 'print', '(', '""Einstein’s summation convention of the two matrix:""', ')', 'print', '(', 'result', ')']"
2366,"['numpysearchsorted', 'python']","['import', 'numpy', 'as', 'geek', 'in_arr', '=', '[', '2', ',', '3', ',', '4', ',', '5', ',', '6', ']', 'print', '(', '""Input array : ""', ',', 'in_arr', ')', 'num', '=', '4', 'print', '(', '""The number which we want to insert : ""', ',', 'num', ')', 'out_ind', '=', 'geek', '.', 'searchsorted', '(', 'in_arr', ',', 'num', ')', 'print', '(', '""Output indices to maintain sorted array : ""', ',', 'out_ind', ')']"
2367,"['write', 'python', 'program', 'merging', 'two', 'dictionary']","['def', 'Merge', '(', 'dict1', ',', 'dict2', ')', ':', 'return', '(', 'dict2', '.', 'update', '(', 'dict1', ')', ')', 'dict1', '=', '{', ""'a'"", ':', '10', ',', ""'b'"", ':', '8', '}', 'dict2', '=', '{', ""'d'"", ':', '6', ',', ""'c'"", ':', '4', '}', 'print', '(', 'Merge', '(', 'dict1', ',', 'dict2', ')', ')', 'print', '(', 'dict2', ')']"
2368,"['pretty', 'print', 'linked', 'list', 'python']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'val', '=', 'None', ')', ':', 'self', '.', 'val', '=', 'val', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ',', 'head', '=', 'None', ')', ':', 'self', '.', 'head', '=', 'head', 'def', '__str__', '(', 'self', ')', ':', 'res', '=', '""""', 'ptr', '=', 'self', '.', 'head', 'while', 'ptr', ':', 'res', '+=', 'str', '(', 'ptr', '.', 'val', ')', '+', '"", ""', 'ptr', '=', 'ptr', '.', 'next', 'res', '=', 'res', '.', 'strip', '(', '"", ""', ')', 'if', 'len', '(', 'res', ')', ':', 'return', '""[""', '+', 'res', '+', '""]""', 'else', ':', 'return', '""[]""', 'if', '__name__', '==', '""__main__""', ':', 'll', '=', 'LinkedList', '(', ')', 'node1', '=', 'Node', '(', '10', ')', 'node2', '=', 'Node', '(', '15', ')', 'node3', '=', 'Node', '(', '20', ')', 'll', '.', 'head', '=', 'node1', 'node1', '.', 'next', '=', 'node2', 'node2', '.', 'next', '=', 'node3', 'print', '(', 'll', ')']"
2369,"['numpyvar', 'python']","['import', 'numpy', 'as', 'np', 'arr', '=', '[', '20', ',', '2', ',', '7', ',', '1', ',', '34', ']', 'print', '(', '""arr : ""', ',', 'arr', ')', 'print', '(', '""var of arr : ""', ',', 'np', '.', 'var', '(', 'arr', ')', ')', 'print', '(', '""\\nvar of arr : ""', ',', 'np', '.', 'var', '(', 'arr', ',', 'dtype', '=', 'np', '.', 'float32', ')', ')', 'print', '(', '""\\nvar of arr : ""', ',', 'np', '.', 'var', '(', 'arr', ',', 'dtype', '=', 'np', '.', 'float64', ')', ')']"
2370,"['add', 'time', 'onto', 'datetime', 'object', 'python']","['import', 'datetime', 'date_and_time', '=', 'datetime', '.', 'datetime', '(', '2021', ',', '8', ',', '22', ',', '11', ',', '2', ',', '5', ')', 'print', '(', '""Original time:""', ')', 'print', '(', 'date_and_time', ')', 'time_change', '=', 'datetime', '.', 'timedelta', '(', 'minutes', '=', '75', ')', 'new_time', '=', 'date_and_time', '+', 'time_change', 'print', '(', '""changed time:""', ')', 'print', '(', 'new_time', ')']"
2371,"['convert', 'json', 'csv', 'python']","['import', 'json', 'import', 'csv', 'with', 'open', '(', ""'data.json'"", ')', 'as', 'json_file', ':', 'data', '=', 'json', '.', 'load', '(', 'json_file', ')', 'employee_data', '=', 'data', '[', ""'emp_details'"", ']', 'data_file', '=', 'open', '(', ""'data_file.csv'"", ',', ""'w'"", ')', 'csv_writer', '=', 'csv', '.', 'writer', '(', 'data_file', ')', 'count', '=', '0', 'for', 'emp', 'in', 'employee_data', ':', 'if', 'count', '==', '0', ':', 'header', '=', 'emp', '.', 'keys', '(', ')', 'csv_writer', '.', 'writerow', '(', 'header', ')', 'count', '+=', '1', 'csv_writer', '.', 'writerow', '(', 'emp', '.', 'values', '(', ')', ')', 'data_file', '.', 'close', '(', ')']"
2372,"['extract', 'ip', 'address', 'file', 'using', 'python']","['import', 're', 'with', 'open', '(', ""'C:/Users/user/Desktop/New Text Document.txt'"", ')', 'as', 'fh', ':', 'fstring', '=', 'fh', '.', 'readlines', '(', ')', 'pattern', '=', 're', '.', 'compile', '(', ""r'(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'"", ')', 'lst', '=', '[', ']', 'for', 'line', 'in', 'fstring', ':', 'lst', '.', 'append', '(', 'pattern', '.', 'search', '(', 'line', ')', '[', '0', ']', ')', 'print', '(', 'lst', ')']"
2373,"['write', 'python', 'program', 'sort', 'string', 'custom', 'integer', 'substring']","['import', 're', 'test_list', '=', '[', '""Good at 4""', ',', '""Wake at 7""', ',', '""Work till 6""', ',', '""Sleep at 11""', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'subord_list', '=', '[', '""6""', ',', '""7""', ',', '""4""', ',', '""11""', ']', 'temp_dict', '=', '{', 'val', ':', 'key', 'for', 'key', ',', 'val', 'in', 'enumerate', '(', 'subord_list', ')', '}', 'temp_list', '=', 'sorted', '(', '[', '[', 'ele', ',', 'temp_dict', '[', 're', '.', 'search', '(', '""(\\d+)$""', ',', 'ele', ')', '.', 'group', '(', ')', ']', ']', 'for', 'ele', 'in', 'test_list', ']', ',', 'key', '=', 'lambda', 'x', ':', 'x', '[', '1', ']', ')', 'res', '=', '[', 'ele', 'for', 'ele', 'in', 'list', '(', 'zip', '(', '*', 'temp_list', ')', ')', '[', '0', ']', ']', 'print', '(', '""The sorted list : ""', '+', 'str', '(', 'res', ')', ')']"
2374,"['numpyvar', 'python']","['import', 'numpy', 'as', 'np', 'arr', '=', '[', '20', ',', '2', ',', '7', ',', '1', ',', '34', ']', 'print', '(', '""arr : ""', ',', 'arr', ')', 'print', '(', '""var of arr : ""', ',', 'np', '.', 'var', '(', 'arr', ')', ')', 'print', '(', '""\\nvar of arr : ""', ',', 'np', '.', 'var', '(', 'arr', ',', 'dtype', '=', 'np', '.', 'float32', ')', ')', 'print', '(', '""\\nvar of arr : ""', ',', 'np', '.', 'var', '(', 'arr', ',', 'dtype', '=', 'np', '.', 'float64', ')', ')']"
2375,"['numpyloadtxt', 'python']","['import', 'numpy', 'as', 'geek', 'from', 'io', 'import', 'StringIO', 'c', '=', 'StringIO', '(', '""0 1 2 \\n3 4 5""', ')', 'd', '=', 'geek', '.', 'loadtxt', '(', 'c', ')', 'print', '(', 'd', ')']"
2376,"['retweet', 'tweet', 'using', 'selenium', 'python']","['from', 'selenium', 'import', 'webdriver', 'from', 'selenium', '.', 'webdriver', '.', 'support', '.', 'ui', 'import', 'Select', 'from', 'selenium', '.', 'webdriver', '.', 'support', '.', 'ui', 'import', 'WebDriverWait', 'import', 'time', 'from', 'selenium', '.', 'common', '.', 'exceptions', 'import', 'NoSuchElementException', 'from', 'selenium', '.', 'common', '.', 'exceptions', 'import', 'ElementClickInterceptedException', 'from', 'selenium', '.', 'common', '.', 'exceptions', 'import', 'StaleElementReferenceException', 'from', 'selenium', '.', 'webdriver', '.', 'common', '.', 'keys', 'import', 'Keys', 'from', 'selenium', '.', 'webdriver', 'import', 'ActionChains', 'import', 'getpass']"
2377,"['write', 'python', 'lambda']","['string', '=', ""'GeeksforGeeks'"", 'print', '(', 'lambda', 'string', ':', 'string', ')']"
2378,"['write', 'python', 'program', 'replace', 'string', 'kth', 'dictionary', 'value']","['test_list', '=', '[', '""Gfg""', ',', '""is""', ',', '""Best""', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'subs_dict', '=', '{', '""Gfg""', ':', '[', '5', ',', '6', ',', '7', ']', ',', '""is""', ':', '[', '7', ',', '4', ',', '2', ']', ',', '}', 'K', '=', '2', 'res', '=', '[', 'ele', 'if', 'ele', 'not', 'in', 'subs_dict', 'else', 'subs_dict', '[', 'ele', ']', '[', 'K', ']', 'for', 'ele', 'in', 'test_list', ']', 'print', '(', '""The list after substitution : ""', '+', 'str', '(', 'res', ')', ')']"
2379,"['lambda', 'filter', 'python', 'example']","['my_list', '=', '[', '12', ',', '65', ',', '54', ',', '39', ',', '102', ',', '339', ',', '221', ',', '50', ',', '70', ',', ']', 'result', '=', 'list', '(', 'filter', '(', 'lambda', 'x', ':', '(', 'x', '%', '13', '==', '0', ')', ',', 'my_list', ')', ')', 'print', '(', 'result', ')']"
2380,"['get', 'nlargest', 'value', 'particular', 'column', 'panda', 'dataframe', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'read_csv', '(', '""https://media.geeksforgeeks.org/wp-content/uploads/nba.csv""', ')', 'df', '.', 'head', '(', '10', ')']"
2381,"['write', 'python', 'program', 'replace', 'different', 'character', 'string']","['test_str', '=', ""'geeksforgeeks is best'"", 'print', '(', '""The original string is : ""', '+', 'str', '(', 'test_str', ')', ')', 'map_dict', '=', '{', ""'e'"", ':', ""'1'"", ',', ""'b'"", ':', ""'6'"", ',', ""'i'"", ':', ""'4'"", '}', 'res', '=', ""''"", '.', 'join', '(', 'idx', 'if', 'idx', 'not', 'in', 'map_dict', 'else', 'map_dict', '[', 'idx', ']', 'for', 'idx', 'in', 'test_str', ')', 'print', '(', '""The converted string : ""', '+', 'str', '(', 'res', ')', ')']"
2382,"['write', 'python', 'program', 'replace', 'character', 'list', 'except', 'given', 'character']","['test_list', '=', '[', ""'G'"", ',', ""'F'"", ',', ""'G'"", ',', ""'I'"", ',', ""'S'"", ',', ""'B'"", ',', ""'E'"", ',', ""'S'"", ',', ""'T'"", ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'repl_chr', '=', ""'$'"", 'ret_chr', '=', ""'G'"", 'res', '=', '[', 'ele', 'if', 'ele', '==', 'ret_chr', 'else', 'repl_chr', 'for', 'ele', 'in', 'test_list', ']', 'print', '(', '""List after replacement : ""', '+', 'str', '(', 'res', ')', ')']"
2383,"['write', 'python', 'program', 'group', 'similar', 'item', 'dictionary', 'value', 'list']","['from', 'collections', 'import', 'defaultdict', 'test_list', '=', '[', '4', ',', '6', ',', '6', ',', '4', ',', '2', ',', '2', ',', '4', ',', '4', ',', '8', ',', '5', ',', '8', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', 'defaultdict', '(', 'list', ')', 'for', 'ele', 'in', 'test_list', ':', 'res', '[', 'ele', ']', '.', 'append', '(', 'ele', ')', 'print', '(', '""Similar grouped dictionary : ""', '+', 'str', '(', 'dict', '(', 'res', ')', ')', ')']"
2384,"['write', 'python', 'program', 'extract', 'value', 'particular', 'key', 'nested', 'value']","['test_dict', '=', '{', ""'Gfg'"", ':', '{', '""a""', ':', '7', ',', '""b""', ':', '9', ',', '""c""', ':', '12', '}', ',', ""'is'"", ':', '{', '""a""', ':', '15', ',', '""b""', ':', '19', ',', '""c""', ':', '20', '}', ',', ""'best'"", ':', '{', '""a""', ':', '5', ',', '""b""', ':', '10', ',', '""c""', ':', '2', '}', '}', 'print', '(', '""The original dictionary is : ""', '+', 'str', '(', 'test_dict', ')', ')', 'temp', '=', '""c""', 'res', '=', '[', 'val', '[', 'temp', ']', 'for', 'key', ',', 'val', 'in', 'test_dict', '.', 'items', '(', ')', 'if', 'temp', 'in', 'val', ']', 'print', '(', '""The extracted values : ""', '+', 'str', '(', 'res', ')', ')']"
2385,"['panda', 'basic', 'time', 'series', 'manipulation', 'python']","['import', 'pandas', 'as', 'pd', 'from', 'datetime', 'import', 'datetime', 'import', 'numpy', 'as', 'np', 'range_date', '=', 'pd', '.', 'date_range', '(', 'start', '=', ""'1/1/2019'"", ',', 'end', '=', ""'1/08/2019'"", ',', 'freq', '=', ""'Min'"", ')', 'print', '(', 'range_date', ')']"
2386,"['write', 'python', 'program', 'print', 'even', 'number', 'range']","['start', ',', 'end', '=', '4', ',', '19', 'for', 'num', 'in', 'range', '(', 'start', ',', 'end', '+', '1', ')', ':', 'if', 'num', '%', '2', '==', '0', ':', 'print', '(', 'num', ',', 'end', '=', '"" ""', ')']"
2387,"['numpy', 'string', 'operation', 'swapcase', 'function', 'python']","['import', 'numpy', 'as', 'geek', 'in_arr', '=', 'geek', '.', 'array', '(', '[', ""'P4Q R'"", ',', ""'4q Rp'"", ',', ""'Q Rp4'"", ',', ""'rp4q'"", ']', ')', 'print', '(', '""input array : ""', ',', 'in_arr', ')', 'out_arr', '=', 'geek', '.', 'char', '.', 'swapcase', '(', 'in_arr', ')', 'print', '(', '""output swapcasecased array :""', ',', 'out_arr', ')']"
2388,"['write', 'python', 'program', 'find', 'tuples', 'element', 'divisible', 'k', 'list', 'tuples']","['test_list', '=', '[', '(', '6', ',', '24', ',', '12', ')', ',', '(', '7', ',', '9', ',', '6', ')', ',', '(', '12', ',', '18', ',', '21', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '6', 'res', '=', '[', 'sub', 'for', 'sub', 'in', 'test_list', 'if', 'all', '(', 'ele', '%', 'K', '==', '0', 'for', 'ele', 'in', 'sub', ')', ']', 'print', '(', '""K Multiple elements tuples : ""', '+', 'str', '(', 'res', ')', ')']"
2389,"['write', 'python', 'program', 'convert', 'tuple', 'tuple', 'pair']","['from', 'itertools', 'import', 'product', 'test_tuple', '=', '(', ""'G'"", ',', ""'F'"", ',', ""'G'"", ')', 'print', '(', '""The original tuple : ""', '+', 'str', '(', 'test_tuple', ')', ')', 'test_tuple', '=', 'iter', '(', 'test_tuple', ')', 'res', '=', 'list', '(', 'product', '(', 'next', '(', 'test_tuple', ')', ',', 'test_tuple', ')', ')', 'print', '(', '""The paired records : ""', '+', 'str', '(', 'res', ')', ')']"
2390,"['write', 'python', 'program', 'remove', 'reduntant', 'substring', 'string', 'list']","['test_list', '=', '[', '""Gfg""', ',', '""Gfg is best""', ',', '""Geeks""', ',', '""Gfg is for Geeks""', ']', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'test_list', '.', 'sort', '(', 'key', '=', 'len', ')', 'res', '=', '[', ']', 'for', 'idx', ',', 'val', 'in', 'enumerate', '(', 'test_list', ')', ':', 'if', 'val', 'not', 'in', ""', '"", '.', 'join', '(', 'test_list', '[', 'idx', '+', '1', ':', ']', ')', ':', 'res', '.', 'append', '(', 'val', ')', 'print', '(', '""The filtered list : ""', '+', 'str', '(', 'res', ')', ')']"
2391,"['compute', 'numerical', 'negative', 'value', 'element', 'given', 'numpy', 'array', 'python']","['import', 'numpy', 'as', 'np', 'x', '=', 'np', '.', 'array', '(', '[', '-', '1', ',', '-', '2', ',', '-', '3', ',', '1', ',', '2', ',', '3', ',', '0', ']', ')', 'print', '(', '""Printing the Original array:""', ',', 'x', ')', 'r1', '=', 'np', '.', 'negative', '(', 'x', ')', 'print', '(', '""Printing the negative value of the given array:""', ',', 'r1', ')']"
2392,"['convert', 'binary', 'string', 'using', 'python']","['def', 'BinaryToDecimal', '(', 'binary', ')', ':', 'binary1', '=', 'binary', 'decimal', ',', 'i', ',', 'n', '=', '0', ',', '0', ',', '0', 'while', '(', 'binary', '!=', '0', ')', ':', 'dec', '=', 'binary', '%', '10', 'decimal', '=', 'decimal', '+', 'dec', '*', 'pow', '(', '2', ',', 'i', ')', 'binary', '=', 'binary', '//', '10', 'i', '+=', '1', 'return', '(', 'decimal', ')', 'bin_data', '=', ""'10001111100101110010111010111110011'"", 'print', '(', '""The binary value is:""', ',', 'bin_data', ')', 'str_data', '=', ""' '"", 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'bin_data', ')', ',', '7', ')', ':', 'temp_data', '=', 'int', '(', 'bin_data', '[', 'i', ':', 'i', '+', '7', ']', ')', 'decimal_data', '=', 'BinaryToDecimal', '(', 'temp_data', ')', 'str_data', '=', 'str_data', '+', 'chr', '(', 'decimal_data', ')', 'print', '(', '""The Binary value after string conversion is:""', ',', 'str_data', ')']"
2393,"['working', 'large', 'csv', 'file', 'python']","['import', 'pandas', 'as', 'pd', 'import', 'numpy', 'as', 'np', 'import', 'time', 's_time', '=', 'time', '.', 'time', '(', ')', 'df', '=', 'pd', '.', 'read_csv', '(', '""gender_voice_dataset.csv""', ')', 'e_time', '=', 'time', '.', 'time', '(', ')', 'print', '(', '""Read without chunks: ""', ',', '(', 'e_time', '-', 's_time', ')', ',', '""seconds""', ')', 'df', '.', 'sample', '(', '10', ')']"
2394,"['write', 'python', 'program', 'find', 'strongest', 'neighbour']","['def', 'maximumAdjacent', '(', 'arr1', ',', 'n', ')', ':', 'arr2', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', ')', ':', 'r', '=', 'max', '(', 'arr1', '[', 'i', ']', ',', 'arr1', '[', 'i', '-', '1', ']', ')', 'arr2', '.', 'append', '(', 'r', ')', 'for', 'ele', 'in', 'arr2', ':', 'print', '(', 'ele', ',', 'end', '=', '"" ""', ')', 'if', '__name__', '==', '""__main__""', ':', 'n', '=', '6', 'arr1', '=', '[', '1', ',', '2', ',', '2', ',', '3', ',', '4', ',', '5', ']', 'maximumAdjacent', '(', 'arr1', ',', 'n', ')']"
2395,"['write', 'python', 'program', 'bogosort', 'permutation', 'sort']","['import', 'random', 'def', 'bogoSort', '(', 'a', ')', ':', 'n', '=', 'len', '(', 'a', ')', 'while', '(', 'is_sorted', '(', 'a', ')', '==', 'False', ')', ':', 'shuffle', '(', 'a', ')', 'def', 'is_sorted', '(', 'a', ')', ':', 'n', '=', 'len', '(', 'a', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', '-', '1', ')', ':', 'if', '(', 'a', '[', 'i', ']', '>', 'a', '[', 'i', '+', '1', ']', ')', ':', 'return', 'False', 'return', 'True', 'def', 'shuffle', '(', 'a', ')', ':', 'n', '=', 'len', '(', 'a', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'r', '=', 'random', '.', 'randint', '(', '0', ',', 'n', '-', '1', ')', 'a', '[', 'i', ']', ',', 'a', '[', 'r', ']', '=', 'a', '[', 'r', ']', ',', 'a', '[', 'i', ']', 'a', '=', '[', '3', ',', '2', ',', '4', ',', '1', ',', '0', ',', '5', ']', 'bogoSort', '(', 'a', ')', 'print', '(', '""Sorted array :""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'a', ')', ')', ':', 'print', '(', '""%d""', '%', 'a', '[', 'i', ']', ')', ',']"
2396,"['write', 'python', 'program', 'convert', 'character', 'matrix', 'single', 'string']","['test_list', '=', '[', '[', ""'g'"", ',', ""'f'"", ',', ""'g'"", ']', ',', '[', ""'i'"", ',', ""'s'"", ']', ',', '[', ""'b'"", ',', ""'e'"", ',', ""'s'"", ',', ""'t'"", ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', ""''"", '.', 'join', '(', 'ele', 'for', 'sub', 'in', 'test_list', 'for', 'ele', 'in', 'sub', ')', 'print', '(', '""The String after join : ""', '+', 'res', ')']"
2397,"['write', 'python', 'program', 'flatten', 'tuple', 'list', 'tuple']","['test_tuple', '=', '(', '[', '5', ',', '6', ']', ',', '[', '6', ',', '7', ',', '8', ',', '9', ']', ',', '[', '3', ']', ')', 'print', '(', '""The original tuple : ""', '+', 'str', '(', 'test_tuple', ')', ')', 'res', '=', 'tuple', '(', 'sum', '(', 'test_tuple', ',', '[', ']', ')', ')', 'print', '(', '""The flattened tuple : ""', '+', 'str', '(', 'res', ')', ')']"
2398,"['program', 'reverse', 'linked', 'list', 'using', 'stack', 'python']","['//', 'C', '/', 'C', '+', '+', 'program', 'to', 'reverse', 'linked', 'list', '//', 'using', 'stack', 'using', 'namespace', 'std', ';', '/', '*', 'Link', 'list', 'node', '*', '/', 'struct', 'Node', '{', 'int', 'data', ';', 'struct', 'Node', '*', 'next', ';', '}', ';', '/', '*', 'Given', 'a', 'reference', '(', 'pointer', 'to', 'pointer', ')', 'to', 'the', 'head', 'of', 'a', 'list', 'and', 'an', 'int', ',', 'push', 'a', 'new', 'node', 'on', 'the', 'front', 'of', 'the', 'list', '.', '*', '/', 'void', 'push', '(', 'struct', 'Node', '**', 'head_ref', ',', 'int', 'new_data', ')', '{', 'struct', 'Node', '*', 'new_node', '=', 'new', 'Node', ';', 'new_node', '->', 'data', '=', 'new_data', ';', 'new_node', '->', 'next', '=', '(', '*', 'head_ref', ')', ';', '(', '*', 'head_ref', ')', '=', 'new_node', ';', '}', '//', 'Function', 'to', 'reverse', 'linked', 'list', 'Node', '*', 'reverseList', '(', 'Node', '*', 'head', ')', '{', '//', 'Stack', 'to', 'store', 'elements', 'of', 'list', 'stack', '<', 'Node', '*', '>', 'stk', ';', '//', 'Push', 'the', 'elements', 'of', 'list', 'to', 'stack', 'Node', '*', 'ptr', '=', 'head', ';', 'while', '(', 'ptr', '->', 'next', '!=', 'NULL', ')', '{', 'stk', '.', 'push', '(', 'ptr', ')', ';', 'ptr', '=', 'ptr', '->', 'next', ';', '}', '//', 'Pop', 'from', 'stack', 'and', 'replace', '//', 'current', 'nodes', 'value', 'head', '=', 'ptr', ';', 'while', '(', 'stk', '.', 'empty', '(', ')', ')', '{', 'ptr', '->', 'next', '=', 'stk', '.', 'top', '(', ')', ';', 'ptr', '=', 'ptr', '->', 'next', ';', 'stk', '.', 'pop', '(', ')', ';', '}', 'ptr', '->', 'next', '=', 'NULL', ';', 'return', 'head', ';', '}', '//', 'Function', 'to', 'print', 'the', 'Linked', 'list', 'void', 'printList', '(', 'Node', '*', 'head', ')', '{', 'while', '(', 'head', ')', '{', 'cout', '<<', 'head', '->', 'data', '<<', '"" ""', ';', 'head', '=', 'head', '->', 'next', ';', '}', '}', '//', 'Driver', 'Code', 'int', 'main', '(', ')', '{', '/', '*', 'Start', 'with', 'the', 'empty', 'list', '*', '/', 'struct', 'Node', '*', 'head', '=', 'NULL', ';', '/', '*', 'Use', 'push', '(', ')', 'to', 'construct', 'below', 'list', '1', '->', '2', '->', '3', '->', '4', '->', '5', '*', '/', 'push', '(', '&', 'head', ',', '5', ')', ';', 'push', '(', '&', 'head', ',', '4', ')', ';', 'push', '(', '&', 'head', ',', '3', ')', ';', 'push', '(', '&', 'head', ',', '2', ')', ';', 'push', '(', '&', 'head', ',', '1', ')', ';', 'head', '=', 'reverseList', '(', 'head', ')', ';', 'printList', '(', 'head', ')', ';', 'return', '0', ';', '}']"
2399,"['write', 'python', 'program', 'unique', 'tuple', 'frequency', 'order', 'irrespective']","['test_list', '=', '[', '(', '3', ',', '4', ')', ',', '(', '1', ',', '2', ')', ',', '(', '4', ',', '3', ')', ',', '(', '5', ',', '6', ')', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', 'len', '(', 'list', '(', 'set', '(', 'tuple', '(', 'sorted', '(', 'sub', ')', ')', 'for', 'sub', 'in', 'test_list', ')', ')', ')', 'print', '(', '""Unique tuples Frequency : ""', '+', 'str', '(', 'res', ')', ')']"
2400,"['write', 'python', 'program', 'find', 'character', 'position', 'kth', 'word', 'list', 'string']","['test_list', '=', '[', '""geekforgeeks""', ',', '""is""', ',', '""best""', ',', '""for""', ',', '""geeks""', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '20', 'res', '=', '[', 'ele', '[', '0', ']', 'for', 'sub', 'in', 'enumerate', '(', 'test_list', ')', 'for', 'ele', 'in', 'enumerate', '(', 'sub', '[', '1', ']', ')', ']', 'res', '=', 'res', '[', 'K', ']', 'print', '(', '""Index of character at Kth position word : ""', '+', 'str', '(', 'res', ')', ')']"
2401,"['way', 'remove', 'ith', 'character', 'string', 'python']","['test_str', '=', '""GeeksForGeeks""', 'print', '(', '""The original string is : ""', '+', 'test_str', ')', 'new_str', '=', '""""', 'for', 'i', 'in', 'range', '(', 'len', '(', 'test_str', ')', ')', ':', 'if', 'i', '!=', '2', ':', 'new_str', '=', 'new_str', '+', 'test_str', '[', 'i', ']', 'print', '(', '""The string after removal of i\'th character : ""', '+', 'new_str', ')']"
2402,"['way', 'sort', 'list', 'dictionary', 'value', 'write', 'python', 'program', 'using', 'lambda', 'function']","['lis', '=', '[', '{', '""name""', ':', '""Nandini""', ',', '""age""', ':', '20', '}', ',', '{', '""name""', ':', '""Manjeet""', ',', '""age""', ':', '20', '}', ',', '{', '""name""', ':', '""Nikhil""', ',', '""age""', ':', '19', '}', ']', 'print', '""The list printed sorting by age: ""', 'print', 'sorted', '(', 'lis', ',', 'key', '=', 'lambda', 'i', ':', 'i', '[', ""'age'"", ']', ')', 'print', '(', '""\\r""', ')', 'print', '""The list printed sorting by age and name: ""', 'print', 'sorted', '(', 'lis', ',', 'key', '=', 'lambda', 'i', ':', '(', 'i', '[', ""'age'"", ']', ',', 'i', '[', ""'name'"", ']', ')', ')', 'print', '(', '""\\r""', ')', 'print', '""The list printed sorting by age in descending order: ""', 'print', 'sorted', '(', 'lis', ',', 'key', '=', 'lambda', 'i', ':', 'i', '[', ""'age'"", ']', ',', 'reverse', '=', 'True', ')']"
2403,"['read', 'number', 'csv', 'file', 'python']","['import', 'csv', 'marks', '=', '[', '[', '""RollNo""', ',', '""Maths""', ',', '""Python""', ']', ',', '[', '1000', ',', '80', ',', '85', ']', ',', '[', '2000', ',', '85', ',', '89', ']', ',', '[', '3000', ',', '82', ',', '90', ']', ',', '[', '4000', ',', '83', ',', '98', ']', ',', '[', '5000', ',', '82', ',', '90', ']', ']', 'with', 'open', '(', ""'my_csv.csv'"", ',', ""'w'"", ',', 'newline', '=', ""''"", ')', 'as', 'file', ':', 'writer', '=', 'csv', '.', 'writer', '(', 'file', ',', 'quoting', '=', 'csv', '.', 'QUOTE_NONNUMERIC', ',', 'delimiter', '=', ""' '"", ')', 'writer', '.', 'writerows', '(', 'marks', ')', 'with', 'open', '(', ""'my_csv.csv'"", ',', 'newline', '=', ""''"", ')', 'as', 'file', ':', 'reader', '=', 'csv', '.', 'reader', '(', 'file', ',', 'quoting', '=', 'csv', '.', 'QUOTE_NONNUMERIC', ',', 'delimiter', '=', ""' '"", ')', 'output', '=', '[', ']', 'for', 'row', 'in', 'reader', ':', 'output', '.', 'append', '(', 'row', '[', ':', ']', ')', 'for', 'rows', 'in', 'output', ':', 'print', '(', 'rows', ')']"
2404,"['find', 'root', 'polynomial', 'using', 'numpy', 'python']","['import', 'numpy', 'as', 'np', 'coeff', '=', '[', '1', ',', '2', ',', '1', ']', 'print', '(', 'np', '.', 'roots', '(', 'coeff', ')', ')']"
2405,"['write', 'python', 'program', 'find', 'sum', 'item', 'dictionary']","['def', 'returnSum', '(', 'myDict', ')', ':', 'list', '=', '[', ']', 'for', 'i', 'in', 'myDict', ':', 'list', '.', 'append', '(', 'myDict', '[', 'i', ']', ')', 'final', '=', 'sum', '(', 'list', ')', 'return', 'final', 'dict', '=', '{', ""'a'"", ':', '100', ',', ""'b'"", ':', '200', ',', ""'c'"", ':', '300', '}', 'print', '(', '""Sum :""', ',', 'returnSum', '(', 'dict', ')', ')']"
2406,"['write', 'python', 'program', 'extract', 'word', 'starting', 'k', 'string', 'list']","['test_list', '=', '[', '""Gfg is best""', ',', '""Gfg is for geeks""', ',', '""I love G4G""', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'K', '=', '""g""', 'res', '=', '[', ']', 'for', 'sub', 'in', 'test_list', ':', 'temp', '=', 'sub', '.', 'split', '(', ')', 'for', 'ele', 'in', 'temp', ':', 'if', 'ele', '[', '0', ']', '.', 'lower', '(', ')', '==', 'K', '.', 'lower', '(', ')', ':', 'res', '.', 'append', '(', 'ele', ')', 'print', '(', '""The filtered elements : ""', '+', 'str', '(', 'res', ')', ')']"
2407,"['write', 'python', 'program', 'find', 'mean', 'list', 'numpy', 'array']","['import', 'numpy', 'as', 'np', 'Input', '=', '[', 'np', '.', 'array', '(', '[', '1', ',', '2', ',', '3', ']', ')', ',', 'np', '.', 'array', '(', '[', '4', ',', '5', ',', '6', ']', ')', ',', 'np', '.', 'array', '(', '[', '7', ',', '8', ',', '9', ']', ')', ']', 'Output', '=', '[', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'Input', ')', ')', ':', 'Output', '.', 'append', '(', 'np', '.', 'mean', '(', 'Input', '[', 'i', ']', ')', ')', 'print', '(', 'Output', ')']"
2408,"['write', 'python', 'program', 'numpy', 'npcharendswith', 'method']","['import', 'numpy', 'as', 'np', 'a', '=', 'np', '.', 'array', '(', '[', ""'geeks'"", ',', ""'for'"", ',', ""'geeks'"", ']', ')', 'gfg', '=', 'np', '.', 'char', '.', 'endswith', '(', 'a', ',', ""'ks'"", ')', 'print', '(', 'gfg', ')']"
2409,"['write', 'python', 'program', 'find', 'common', 'element', 'three', 'sorted', 'array', 'dictionary', 'intersection']","['from', 'collections', 'import', 'Counter', 'def', 'commonElement', '(', 'ar1', ',', 'ar2', ',', 'ar3', ')', ':', 'ar1', '=', 'Counter', '(', 'ar1', ')', 'ar2', '=', 'Counter', '(', 'ar2', ')', 'ar3', '=', 'Counter', '(', 'ar3', ')', 'resultDict', '=', 'dict', '(', 'ar1', '.', 'items', '(', ')', '&', 'ar2', '.', 'items', '(', ')', '&', 'ar3', '.', 'items', '(', ')', ')', 'common', '=', '[', ']', 'for', '(', 'key', ',', 'val', ')', 'in', 'resultDict', '.', 'items', '(', ')', ':', 'for', 'i', 'in', 'range', '(', '0', ',', 'val', ')', ':', 'common', '.', 'append', '(', 'key', ')', 'print', '(', 'common', ')', 'if', '__name__', '==', '""__main__""', ':', 'ar1', '=', '[', '1', ',', '5', ',', '10', ',', '20', ',', '40', ',', '80', ']', 'ar2', '=', '[', '6', ',', '7', ',', '20', ',', '80', ',', '100', ']', 'ar3', '=', '[', '3', ',', '4', ',', '15', ',', '20', ',', '30', ',', '70', ',', '80', ',', '120', ']', 'commonElement', '(', 'ar1', ',', 'ar2', ',', 'ar3', ')']"
2410,"['write', 'python', 'program', 'remove', 'duplicate', 'list', 'tuples', 'preserving', 'order']","['test_tup', '=', '(', '[', '4', ',', '7', ',', '8', ']', ',', '[', '1', ',', '2', ',', '3', ']', ',', '[', '4', ',', '7', ',', '8', ']', ',', '[', '9', ',', '10', ',', '11', ']', ',', '[', '1', ',', '2', ',', '3', ']', ')', 'print', '(', '""The original tuple is : ""', '+', 'str', '(', 'test_tup', ')', ')', 'temp', '=', 'set', '(', ')', 'res', '=', '[', 'ele', 'for', 'ele', 'in', 'test_tup', 'if', 'not', '(', 'tuple', '(', 'ele', ')', 'in', 'temp', 'or', 'temp', '.', 'add', '(', 'tuple', '(', 'ele', ')', ')', ')', ']', 'print', '(', '""The unique lists tuple is : ""', '+', 'str', '(', 'res', ')', ')']"
2411,"['program', 'print', 'diamond', 'shape', 'python']","['//', 'C', '+', '+', 'program', 'to', 'print', 'diamond', 'shape', '//', 'with', '2', 'n', 'rows', 'using', 'namespace', 'std', ';', '//', 'Prints', 'diamond', 'pattern', 'with', '2', 'n', 'rows', 'void', 'printDiamond', '(', 'int', 'n', ')', '{', 'int', 'space', '=', 'n', '-', '1', ';', '//', 'run', 'loop', '(', 'parent', 'loop', ')', '//', 'till', 'number', 'of', 'rows', 'for', '(', 'int', 'i', '=', '0', ';', 'i', '<', 'n', ';', 'i', '+', '+', ')', '{', '//', 'loop', 'for', 'initially', 'space', ',', '//', 'before', 'star', 'printing', 'for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'space', ';', 'j', '+', '+', ')', 'cout', '<<', '"" ""', ';', '//', 'Print', 'i', '+', '1', 'stars', 'for', '(', 'int', 'j', '=', '0', ';', 'j', '<=', 'i', ';', 'j', '+', '+', ')', 'cout', '<<', '""* ""', ';', 'cout', '<<', 'endl', ';', 'space', '-', '-', ';', '}', '//', 'Repeat', 'again', 'in', 'reverse', 'order', 'space', '=', '0', ';', '//', 'run', 'loop', '(', 'parent', 'loop', ')', '//', 'till', 'number', 'of', 'rows', 'for', '(', 'int', 'i', '=', 'n', ';', 'i', '>', '0', ';', 'i', '-', '-', ')', '{', '//', 'loop', 'for', 'initially', 'space', ',', '//', 'before', 'star', 'printing', 'for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'space', ';', 'j', '+', '+', ')', 'cout', '<<', '"" ""', ';', '//', 'Print', 'i', 'stars', 'for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'i', ';', 'j', '+', '+', ')', 'cout', '<<', '""* ""', ';', 'cout', '<<', 'endl', ';', 'space', '+', '+', ';', '}', '}', '//', 'Driver', 'code', 'int', 'main', '(', ')', '{', 'printDiamond', '(', '5', ')', ';', 'return', '0', ';', '}', '//', 'This', 'is', 'code', 'is', 'contributed', '//', 'by', 'rathbhupendra']"
2412,"['write', 'python', 'program', 'extract', 'index', 'substring', 'match']","['test_list', '=', '[', '""Gfg is good""', ',', '""for Geeks""', ',', '""I love Gfg""', ',', '""Its useful""', ']', 'K', '=', '""Gfg""', 'print', '(', '""The original list : ""', '+', 'str', '(', 'test_list', ')', ')', 'res', '=', '[', ']', 'for', 'idx', ',', 'ele', 'in', 'enumerate', '(', 'test_list', ')', ':', 'if', 'K', 'in', 'ele', ':', 'res', '.', 'append', '(', 'idx', ')', 'print', '(', '""The indices list : ""', '+', 'str', '(', 'res', ')', ')']"
2413,"['write', 'python', 'program', 'test', 'tuple', 'distinct']","['test_tup', '=', '(', '1', ',', '4', ',', '5', ',', '6', ',', '1', ',', '4', ')', 'print', '(', '""The original tuple is : ""', '+', 'str', '(', 'test_tup', ')', ')', 'res', '=', 'True', 'temp', '=', 'set', '(', ')', 'for', 'ele', 'in', 'test_tup', ':', 'if', 'ele', 'in', 'temp', ':', 'res', '=', 'False', 'break', 'temp', '.', 'add', '(', 'ele', ')', 'print', '(', '""Is tuple distinct ? : ""', '+', 'str', '(', 'res', ')', ')']"
2414,"['write', 'python', 'program', 'creating', 'dataframe', 'dict', 'narraylists']","['import', 'pandas', 'as', 'pd', 'data', '=', '{', ""'Category'"", ':', '[', ""'Array'"", ',', ""'Stack'"", ',', ""'Queue'"", ']', ',', ""'Marks'"", ':', '[', '20', ',', '21', ',', '19', ']', '}', 'df', '=', 'pd', '.', 'DataFrame', '(', 'data', ')', 'print', '(', 'df', ')']"
2415,"['create', 'list', 'row', 'panda', 'dataframe', 'set', 'python']","['import', 'pandas', 'as', 'pd', 'df', '=', 'pd', '.', 'DataFrame', '(', '{', ""'Date'"", ':', '[', ""'10/2/2011'"", ',', ""'11/2/2011'"", ',', ""'12/2/2011'"", ',', ""'13/2/11'"", ']', ',', ""'Event'"", ':', '[', ""'Music'"", ',', ""'Poetry'"", ',', ""'Theatre'"", ',', ""'Comedy'"", ']', ',', ""'Cost'"", ':', '[', '10000', ',', '5000', ',', '15000', ',', '2000', ']', '}', ')', 'print', '(', 'df', ')']"
2416,"['selenium', 'search', 'text', 'page', 'python']","['from', 'selenium', 'import', 'webdriver', 'driver', '=', 'webdriver', '.', 'Chrome', '(', ')', 'url', '=', '""https://www.geeksforgeeks.org/""', 'driver', '.', 'get', '(', 'url', ')', 'get_source', '=', 'driver', '.', 'page_source', 'search_text', '=', '""Floor""', 'print', '(', 'search_text', 'in', 'get_source', ')']"
2417,"['write', 'python', 'program', 'reverse', 'row', 'sort', 'list', 'list']","['test_list', '=', '[', '[', '4', ',', '1', ',', '6', ']', ',', '[', '7', ',', '8', ']', ',', '[', '4', ',', '10', ',', '8', ']', ']', 'print', '(', '""The original list is : ""', '+', 'str', '(', 'test_list', ')', ')', 'for', 'ele', 'in', 'test_list', ':', 'ele', '.', 'sort', '(', 'reverse', '=', 'True', ')', 'print', '(', '""The reverse sorted Matrix is : ""', '+', 'str', '(', 'test_list', ')', ')']"
2418,"['print', 'font', 'using', 'python']","['name', '=', '""GEEK""', 'length', '=', 'len', '(', 'name', ')', 'l', '=', '""""', 'for', 'x', 'in', 'range', '(', '0', ',', 'length', ')', ':', 'c', '=', 'name', '[', 'x', ']', 'c', '=', 'c', '.', 'upper', '(', ')', 'if', '(', 'c', '==', '""A""', ')', ':', 'print', '(', '""..######..\\n..#....#..\\n..######..""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#....#..\\n..#....#..\\n\\n""', ')', 'elif', '(', 'c', '==', '""B""', ')', ':', 'print', '(', '""..######..\\n..#....#..\\n..#####...""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#....#..\\n..######..\\n\\n""', ')', 'elif', '(', 'c', '==', '""C""', ')', ':', 'print', '(', '""..######..\\n..#.......\\n..#.......""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#.......\\n..######..\\n\\n""', ')', 'elif', '(', 'c', '==', '""D""', ')', ':', 'print', '(', '""..#####...\\n..#....#..\\n..#....#..""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#....#..\\n..#####...\\n\\n""', ')', 'elif', '(', 'c', '==', '""E""', ')', ':', 'print', '(', '""..######..\\n..#.......\\n..#####...""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#.......\\n..######..\\n\\n""', ')', 'elif', '(', 'c', '==', '""F""', ')', ':', 'print', '(', '""..######..\\n..#.......\\n..#####...""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#.......\\n..#.......\\n\\n""', ')', 'elif', '(', 'c', '==', '""G""', ')', ':', 'print', '(', '""..######..\\n..#.......\\n..#.####..""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#....#..\\n..#####...\\n\\n""', ')', 'elif', '(', 'c', '==', '""H""', ')', ':', 'print', '(', '""..#....#..\\n..#....#..\\n..######..""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#....#..\\n..#....#..\\n\\n""', ')', 'elif', '(', 'c', '==', '""I""', ')', ':', 'print', '(', '""..######..\\n....##....\\n....##....""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n....##....\\n..######..\\n\\n""', ')', 'elif', '(', 'c', '==', '""J""', ')', ':', 'print', '(', '""..######..\\n....##....\\n....##....""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#.##....\\n..####....\\n\\n""', ')', 'elif', '(', 'c', '==', '""K""', ')', ':', 'print', '(', '""..#...#...\\n..#..#....\\n..##......""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#..#....\\n..#...#...\\n\\n""', ')', 'elif', '(', 'c', '==', '""L""', ')', ':', 'print', '(', '""..#.......\\n..#.......\\n..#.......""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#.......\\n..######..\\n\\n""', ')', 'elif', '(', 'c', '==', '""M""', ')', ':', 'print', '(', '""..#....#..\\n..##..##..\\n..#.##.#..""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#....#..\\n..#....#..\\n\\n""', ')', 'elif', '(', 'c', '==', '""N""', ')', ':', 'print', '(', '""..#....#..\\n..##...#..\\n..#.#..#..""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#..#.#..\\n..#...##..\\n\\n""', ')', 'elif', '(', 'c', '==', '""O""', ')', ':', 'print', '(', '""..######..\\n..#....#..\\n..#....#..""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#....#..\\n..######..\\n\\n""', ')', 'elif', '(', 'c', '==', '""P""', ')', ':', 'print', '(', '""..######..\\n..#....#..\\n..######..""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#.......\\n..#.......\\n\\n""', ')', 'elif', '(', 'c', '==', '""Q""', ')', ':', 'print', '(', '""..######..\\n..#....#..\\n..#.#..#..""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#..#.#..\\n..######..\\n\\n""', ')', 'elif', '(', 'c', '==', '""R""', ')', ':', 'print', '(', '""..######..\\n..#....#..\\n..#.##...""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#...#...\\n..#....#..\\n\\n""', ')', 'elif', '(', 'c', '==', '""S""', ')', ':', 'print', '(', '""..######..\\n..#.......\\n..######..""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n.......#..\\n..######..\\n\\n""', ')', 'elif', '(', 'c', '==', '""T""', ')', ':', 'print', '(', '""..######..\\n....##....\\n....##....""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n....##....\\n....##....\\n\\n""', ')', 'elif', '(', 'c', '==', '""U""', ')', ':', 'print', '(', '""..#....#..\\n..#....#..\\n..#....#..""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..#....#..\\n..######..\\n\\n""', ')', 'elif', '(', 'c', '==', '""V""', ')', ':', 'print', '(', '""..#....#..\\n..#....#..\\n..#....#..""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n...#..#...\\n....##....\\n\\n""', ')', 'elif', '(', 'c', '==', '""W""', ')', ':', 'print', '(', '""..#....#..\\n..#....#..\\n..#.##.#..""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..##..##..\\n..#....#..\\n\\n""', ')', 'elif', '(', 'c', '==', '""X""', ')', ':', 'print', '(', '""..#....#..\\n...#..#...\\n....##....""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n...#..#...\\n..#....#..\\n\\n""', ')', 'elif', '(', 'c', '==', '""Y""', ')', ':', 'print', '(', '""..#....#..\\n...#..#...\\n....##....""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n....##....\\n....##....\\n\\n""', ')', 'elif', '(', 'c', '==', '""Z""', ')', ':', 'print', '(', '""..######..\\n......#...\\n.....#....""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n....#.....\\n..######..\\n\\n""', ')', 'elif', '(', 'c', '==', '"" ""', ')', ':', 'print', '(', '""..........\\n..........\\n..........""', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\n..........\\n\\n""', ')', 'elif', '(', 'c', '==', '"".""', ')', ':', 'print', '(', '""----..----\\n\\n""', ')']"
2419,"['write', 'python', 'program', 'generate', 'random', 'binary', 'string']","['import', 'random', 'def', 'rand_key', '(', 'p', ')', ':', 'key1', '=', '""""', 'for', 'i', 'in', 'range', '(', 'p', ')', ':', 'temp', '=', 'str', '(', 'random', '.', 'randint', '(', '0', ',', '1', ')', ')', 'key1', '+=', 'temp', 'return', '(', 'key1', ')', 'n', '=', '7', 'str1', '=', 'rand_key', '(', 'n', ')', 'print', '(', '""Desired length random binary string is: ""', ',', 'str1', ')']"
2420,"['write', 'python', 'program', 'count', 'uppercase', 'lowercase', 'special', 'character', 'numeric', 'value', 'using', 'regex']","['import', 're', 'string', '=', '""ThisIsGeeksforGeeks !, 123""', 'uppercase_characters', '=', 're', '.', 'findall', '(', 'r""[A-Z]""', ',', 'string', ')', 'lowercase_characters', '=', 're', '.', 'findall', '(', 'r""[a-z]""', ',', 'string', ')', 'numerical_characters', '=', 're', '.', 'findall', '(', 'r""[0-9]""', ',', 'string', ')', 'special_characters', '=', 're', '.', 'findall', '(', 'r""[, .!?]""', ',', 'string', ')', 'print', '(', '""The no. of uppercase characters is""', ',', 'len', '(', 'uppercase_characters', ')', ')', 'print', '(', '""The no. of lowercase characters is""', ',', 'len', '(', 'lowercase_characters', ')', ')', 'print', '(', '""The no. of numerical characters is""', ',', 'len', '(', 'numerical_characters', ')', ')', 'print', '(', '""The no. of special characters is""', ',', 'len', '(', 'special_characters', ')', ')']"
2421,"['count', 'number', 'white', 'space', 'sentence']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'count', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '==', ""' '"", ':', 'count', '+=', '1', 'print', '(', '""Number of white space in a string are ""', ',', 'count', ')']"
2422,"['find', 'nth', 'term', 'fibonacci', 'series', 'using', 'recursion']","['def', 'NthFibonacciNumber', '(', 'n', ')', ':', 'if', 'n', '==', '0', ':', 'return', '0', 'elif', '(', 'n', '==', '1', ')', ':', 'return', '1', 'else', ':', 'return', 'NthFibonacciNumber', '(', 'n', '-', '1', ')', '+', 'NthFibonacciNumber', '(', 'n', '-', '2', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter the N value:""', ')', ')', 'print', '(', '""Nth Fibonacci Number is:""', ',', 'NthFibonacciNumber', '(', 'n', ')', ')']"
2423,"['search', 'specified', 'integer', 'array']","['arr', '=', '[', ']', 'temp', '=', '0', 'pos', '=', '0', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Enter the search element:""', ')', 'ele', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Array elements are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '==', 'ele', ':', 'temp', '=', '1', 'if', 'temp', '==', '1', ':', 'print', '(', '""\\nElement found....""', ')', 'else', ':', 'print', '(', '""\\nElement not found....""', ')']"
2424,"['convert', 'lowercase', 'uppercase', 'using', 'inbuilt', 'function']","['str', '=', 'input', '(', '""Enter the String(Lower case):""', ')', 'print', '(', '""Upper case String is:""', ',', 'str', '.', 'upper', '(', ')', ')']"
2425,"['please', 'write', 'program', 'using', 'generator', 'print', 'number', 'divisible', 'n', 'comma', 'separated', 'form', 'n', 'input', 'console']","['def', 'NumGenerator', '(', 'n', ')', ':', 'for', 'i', 'in', 'range', '(', 'n', '+', '1', ')', ':', 'if', 'i', '%', '5', '==', '0', 'and', 'i', '%', '7', '==', '0', ':', 'yield', 'i', 'n', '=', 'int', '(', 'raw_input', '(', ')', ')', 'values', '=', '[', ']', 'for', 'i', 'in', 'NumGenerator', '(', 'n', ')', ':', 'values', '.', 'append', '(', 'str', '(', 'i', ')', ')', 'print', '"",""', '.', 'join', '(', 'values', ')']"
2426,"['python', 'program', 'search', 'element', 'linked', 'list', 'without', 'using', 'recursion']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', 'is', 'not', 'None', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'def', 'find_index', '(', 'self', ',', 'key', ')', ':', 'current', '=', 'self', '.', 'head', 'index', '=', '0', 'while', 'current', ':', 'if', 'current', '.', 'data', '==', 'key', ':', 'return', 'index', 'current', '=', 'current', '.', 'next', 'index', '=', 'index', '+', '1', 'return', '-', '1', 'a_llist', '=', 'LinkedList', '(', ')', 'for', 'data', 'in', '[', '4', ',', '-', '3', ',', '1', ',', '0', ',', '9', ',', '11', ']', ':', 'a_llist', '.', 'append', '(', 'data', ')', 'print', '(', ""'The linked list: '"", ',', 'end', '=', ""''"", ')', 'a_llist', '.', 'display', '(', ')', 'print', '(', ')', 'key', '=', 'int', '(', 'input', '(', ""'What data item would you like to search for? '"", ')', ')', 'index', '=', 'a_llist', '.', 'find_index', '(', 'key', ')', 'if', 'index', '==', '-', '1', ':', 'print', '(', 'str', '(', 'key', ')', '+', ""' was not found.'"", ')', 'else', ':', 'print', '(', 'str', '(', 'key', ')', '+', ""' is at index '"", '+', 'str', '(', 'index', ')', '+', ""'.'"", ')']"
2427,"['find', 'minimum', 'element', 'matrix']","['import', 'sys', 'row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'min', '=', 'sys', '.', 'maxsize', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '<=', 'min', ':', 'min', '=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""The Minimum element of the Given 2d array is: ""', ',', 'min', ')']"
2428,"['program', 'convert', 'octal', 'hexadecimal']","['i', '=', '0', 'octal', '=', 'int', '(', 'input', '(', '""Enter Octal number:""', ')', ')', 'Hex', '=', '[', ""'0'"", ']', '*', '50', 'decimal', '=', '0', 'sem', '=', '0', 'while', 'octal', '!=', '0', ':', 'decimal', '=', 'decimal', '+', '(', 'octal', '%', '10', ')', '*', 'pow', '(', '8', ',', 'sem', ')', ';', 'sem', '+=', '1', 'octal', '=', 'octal', '//', '10', 'while', 'decimal', '!=', '0', ':', 'rem', '=', 'decimal', '%', '16', 'if', 'rem', '<', '10', ':', 'Hex', '[', 'i', ']', '=', 'chr', '(', 'rem', '+', '48', ')', 'i', '+=', '1', 'else', ':', 'Hex', '[', 'i', ']', '=', 'chr', '(', 'rem', '+', '55', ')', 'i', '+=', '1', 'decimal', '//=', '16', 'print', '(', '""Hexadecimal number is:""', ')', 'for', 'j', 'in', 'range', '(', 'i', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'print', '(', 'Hex', '[', 'j', ']', ',', 'end', '=', '""""', ')']"
2429,"['program', 'find', 'square', 'root', 'number']","['import', 'math', 'num', '=', 'int', '(', 'input', '(', '""Enter the Number:""', ')', ')', 'print', '(', '""Square root of ""', ',', 'num', ',', '"" is : ""', ',', 'math', '.', 'sqrt', '(', 'num', ')', ')']"
2430,"['find', 'power', 'number', 'using', 'recursion']","['def', 'Power', '(', 'num1', ',', 'num2', ')', ':', 'if', 'num2', '==', '0', ':', 'return', '1', 'return', 'num1', '*', 'Power', '(', 'num1', ',', 'num2', '-', '1', ')', 'num1', '=', 'int', '(', 'input', '(', '""Enter the base value:""', ')', ')', 'num2', '=', 'int', '(', 'input', '(', '""Enter the power value:""', ')', ')', 'print', '(', '""Power of Number Using Recursion is:""', ',', 'Power', '(', 'num1', ',', 'num2', ')', ')']"
2431,"['convert', 'decimal', 'number', 'hexadecimal', 'using', 'recursion']","['str3', '=', '""""', 'def', 'DecimalToHexadecimal', '(', 'n', ')', ':', 'global', 'str3', 'if', '(', 'n', '!=', '0', ')', ':', 'rem', '=', 'n', '%', '16', 'if', '(', 'rem', '<', '10', ')', ':', 'str3', '+=', '(', 'chr', ')', '(', 'rem', '+', '48', ')']"
2432,"['python', 'program', 'generate', 'gray', 'code', 'using', 'recursion']","['def', 'get_gray_codes', '(', 'n', ')', ':', '""""""Return n-bit Gray code in a list.""""""', 'if', 'n', '==', '0', ':', 'return', '[', ""''"", ']', 'first_half', '=', 'get_gray_codes', '(', 'n', '-', '1', ')', 'second_half', '=', 'first_half', '.', 'copy', '(', ')', 'first_half', '=', '[', ""'0'"", '+', 'code', 'for', 'code', 'in', 'first_half', ']', 'second_half', '=', '[', ""'1'"", '+', 'code', 'for', 'code', 'in', 'reversed', '(', 'second_half', ')', ']', 'return', 'first_half', '+', 'second_half', 'n', '=', 'int', '(', 'input', '(', ""'Enter the number of bits: '"", ')', ')', 'codes', '=', 'get_gray_codes', '(', 'n', ')', 'print', '(', ""'All {}-bit Gray Codes:'"", '.', 'format', '(', 'n', ')', ')', 'print', '(', 'codes', ')']"
2433,"['write', 'program', 'print', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', ';', 'row_size', '=', 'int', '(', 'input', '(', ')', ')', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'print', '(', 'out', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2434,"['python', 'program', 'remove', 'character', 'odd', 'index', 'value', 'string']","['def', 'modify', '(', 'string', ')', ':', 'final', '=', '""""', 'for', 'i', 'in', 'range', '(', 'len', '(', 'string', ')', ')', ':', 'if', 'i', '%', '2', '==', '0', ':', 'final', '=', 'final', '+', 'string', '[', 'i', ']', 'return', 'final', 'string', '=', 'raw_input', '(', '""Enter string:""', ')', 'print', '(', '""Modified string is:""', ')', 'print', '(', 'modify', '(', 'string', ')', ')']"
2435,"['python', 'program', 'generate', 'divisor', 'integer']","['n', '=', 'int', '(', 'input', '(', '""Enter an integer:""', ')', ')', 'print', '(', '""The divisors of the number are:""', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'if', '(', 'n', '%', 'i', '==', '0', ')', ':', 'print', '(', 'i', ')']"
2436,"['program', 'print', 'series', 'n']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number(Limit):""', ')', ')', 'i', '=', '1', 'while', 'i', '<=', 'n', ':', 'print', '(', '(', 'i', '*', 'i', ')', '-', 'i', ',', 'end', '=', '"" ""', ')', 'i', '+=', '1']"
2437,"['python', 'program', 'reverse', 'string', 'using', 'recursion']","['def', 'reverse', '(', 'string', ')', ':', 'if', 'len', '(', 'string', ')', '==', '0', ':', 'return', 'string', 'else', ':', 'return', 'reverse', '(', 'string', '[', '1', ':', ']', ')', '+', 'string', '[', '0', ']', 'a', '=', 'str', '(', 'input', '(', '""Enter the string to be reversed: ""', ')', ')', 'print', '(', 'reverse', '(', 'a', ')', ')']"
2438,"['python', 'program', 'find', 'smallest', 'largest', 'element', 'binary', 'search', 'tree']","['class', 'BSTNode', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'self', '.', 'parent', '=', 'None', 'def', 'insert', '(', 'self', ',', 'node', ')', ':', 'if', 'self', '.', 'key', '>', 'node', '.', 'key', ':', 'if', 'self', '.', 'left', 'is', 'None', ':', 'self', '.', 'left', '=', 'node', 'node', '.', 'parent', '=', 'self', 'else', ':', 'self', '.', 'left', '.', 'insert', '(', 'node', ')', 'elif', 'self', '.', 'key', '<', 'node', '.', 'key', ':', 'if', 'self', '.', 'right', 'is', 'None', ':', 'self', '.', 'right', '=', 'node', 'node', '.', 'parent', '=', 'self', 'else', ':', 'self', '.', 'right', '.', 'insert', '(', 'node', ')', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '>', 'key', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'return', 'self', '.', 'left', '.', 'search', '(', 'key', ')', 'else', ':', 'return', 'None', 'elif', 'self', '.', 'key', '<', 'key', ':', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'return', 'self', '.', 'right', '.', 'search', '(', 'key', ')', 'else', ':', 'return', 'None', 'return', 'self', 'class', 'BSTree', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'root', '=', 'None', 'def', 'add', '(', 'self', ',', 'key', ')', ':', 'new_node', '=', 'BSTNode', '(', 'key', ')', 'if', 'self', '.', 'root', 'is', 'None', ':', 'self', '.', 'root', '=', 'new_node', 'else', ':', 'self', '.', 'root', '.', 'insert', '(', 'new_node', ')', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'root', 'is', 'not', 'None', ':', 'return', 'self', '.', 'root', '.', 'search', '(', 'key', ')', 'def', 'get_smallest', '(', 'self', ')', ':', 'if', 'self', '.', 'root', 'is', 'not', 'None', ':', 'current', '=', 'self', '.', 'root', 'while', 'current', '.', 'left', 'is', 'not', 'None', ':', 'current', '=', 'current', '.', 'left', 'return', 'current', '.', 'key', 'def', 'get_largest', '(', 'self', ')', ':', 'if', 'self', '.', 'root', 'is', 'not', 'None', ':', 'current', '=', 'self', '.', 'root', 'while', 'current', '.', 'right', 'is', 'not', 'None', ':', 'current', '=', 'current', '.', 'right', 'return', 'current', '.', 'key', 'bstree', '=', 'BSTree', '(', ')', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'add <key>'"", ')', 'print', '(', ""'smallest'"", ')', 'print', '(', ""'largest'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'add'"", ':', 'key', '=', 'int', '(', 'do', '[', '1', ']', ')', 'bstree', '.', 'add', '(', 'key', ')', 'if', 'operation', '==', ""'smallest'"", ':', 'smallest', '=', 'bstree', '.', 'get_smallest', '(', ')', 'print', '(', ""'Smallest element: {}'"", '.', 'format', '(', 'smallest', ')', ')', 'if', 'operation', '==', ""'largest'"", ':', 'largest', '=', 'bstree', '.', 'get_largest', '(', ')', 'print', '(', ""'Largest element: {}'"", '.', 'format', '(', 'largest', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2439,"['python', 'program', 'implement', 'comb', 'sort']","['def', 'comb_sort', '(', 'alist', ')', ':', 'def', 'swap', '(', 'i', ',', 'j', ')', ':', 'alist', '[', 'i', ']', ',', 'alist', '[', 'j', ']', '=', 'alist', '[', 'j', ']', ',', 'alist', '[', 'i', ']', 'gap', '=', 'len', '(', 'alist', ')', 'shrink', '=', '1.3', 'no_swap', '=', 'False', 'while', 'not', 'no_swap', ':', 'gap', '=', 'int', '(', 'gap', '/', 'shrink', ')', 'if', 'gap', '<', '1', ':', 'gap', '=', '1', 'no_swap', '=', 'True', 'else', ':', 'no_swap', '=', 'False', 'i', '=', '0', 'while', 'i', '+', 'gap', '<', 'len', '(', 'alist', ')', ':', 'if', 'alist', '[', 'i', ']', '>', 'alist', '[', 'i', '+', 'gap', ']', ':', 'swap', '(', 'i', ',', 'i', '+', 'gap', ')', 'no_swap', '=', 'False', 'i', '=', 'i', '+', '1', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'comb_sort', '(', 'alist', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'alist', ')']"
2440,"['check', 'whether', 'given', 'matrix', 'identity', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'point', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '==', 'j', 'and', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', '1', ':', 'point', '=', '1', 'break', 'elif', 'i', '!=', 'j', 'and', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', '0', ':', 'point', '=', '1', 'break', 'if', 'point', '==', '1', ':', 'print', '(', '""Given Matrix is not an identity matrix.""', ')', 'else', ':', 'print', '(', '""Given Matrix is an identity matrix.""', ')']"
2441,"['program', 'print', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number(Limit):""', ')', ')', 'for', 'out', 'in', 'range', '(', 'n', '+', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'out', ')', ':', 'print', '(', 'out', ',', 'end', '=', '""""', ')', 'print', '(', 'end', '=', '"" ""', ')']"
2442,"['multiply', 'two', 'number', 'without', 'using', 'multiplication', 'operator']","['num1', '=', 'int', '(', 'input', '(', '""Enter the First numbers :""', ')', ')', 'num2', '=', 'int', '(', 'input', '(', '""Enter the Second number:""', ')', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'num1', '+', '1', ')', ':', 'sum', '=', 'sum', '+', 'num2', 'print', '(', '""The multiplication of ""', ',', 'num1', ',', '"" and ""', ',', 'num2', ',', '"" is ""', ',', 'sum', ')']"
2443,"['program', 'count', 'number', 'digit', 'integer']","[""'''\xa0Write\na Python program\xa0to count the number of digits in an integer. or\xa0\n\n\xa0 Write a program\xa0to\xa0count the\nnumber of digits in an integer using\nPython '''"", 'n', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'count', '=', '0', 'while', 'n', '>', '0', ':', 'n', '=', 'int', '(', 'n', '/', '10', ')', 'count', '+=', '1', 'print', '(', '""The number of digits in the number is""', ',', 'count', ')']"
2444,"['define', 'function', 'generate', 'dictionary', 'key', 'number', 'included', 'value', 'square', 'key', 'function', 'print', 'key']","['Solution', 'def', 'printDict', '(', ')', ':', 'd', '=', 'dict', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '21', ')', ':', 'd', '[', 'i', ']', '=', 'i', '**', '2', 'for', 'k', 'in', 'd', '.', 'keys', '(', ')', ':', 'print', 'k', 'printDict', '(', ')']"
2445,"['assuming', 'email', 'address', 'usernamecompanynamecom', 'format', 'please', 'write', 'program', 'print', 'company', 'name', 'given', 'email', 'address', 'user', 'name', 'company', 'name', 'composed', 'letter']","['import', 're', 'emailAddress', '=', 'raw_input', '(', ')', 'pat2', '=', '""(\\w+)@(\\w+)\\.(com)""', 'r2', '=', 're', '.', 'match', '(', 'pat2', ',', 'emailAddress', ')', 'print', 'r2', '.', 'group', '(', '2', ')']"
2446,"['remove', 'duplicate', 'element', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'arr', '.', 'sort', '(', ')', 'j', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', '-', '1', ')', ':', 'if', 'arr', '[', 'i', ']', '!=', 'arr', '[', 'i', '+', '1', ']', ':', 'arr', '[', 'j', ']', '=', 'arr', '[', 'i', ']', 'j', '+=', '1', 'arr', '[', 'j', ']', '=', 'arr', '[', 'size', '-', '1', ']', 'j', '+=', '1', 'print', '(', '""After removing duplicate element array is""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'j', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')']"
2447,"['python', 'program', 'find', 'binary', 'equivalent', 'number', 'without', 'using', 'recursion']","['n', '=', 'int', '(', 'input', '(', '""Enter a number: ""', ')', ')', 'a', '=', '[', ']', 'while', '(', 'n', '>', '0', ')', ':', 'dig', '=', 'n', '%', '2', 'a', '.', 'append', '(', 'dig', ')', 'n', '=', 'n', '//', '2', 'a', '.', 'reverse', '(', ')', 'print', '(', '""Binary Equivalent is: ""', ')', 'for', 'i', 'in', 'a', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
2448,"['define', 'function', 'generate', 'list', 'value', 'square', 'number', 'included', 'function', 'need', 'print', 'value', 'except', 'first', 'element', 'list']","['Solution', 'def', 'printList', '(', ')', ':', 'li', '=', 'list', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '21', ')', ':', 'li', '.', 'append', '(', 'i', '**', '2', ')', 'print', 'li', '[', '5', ':', ']', 'printList', '(', ')']"
2449,"['python', 'program', 'find', 'gcd', 'two', 'number']","['import', 'fractions', 'a', '=', 'int', '(', 'input', '(', '""Enter the first number:""', ')', ')', 'b', '=', 'int', '(', 'input', '(', '""Enter the second number:""', ')', ')', 'print', '(', '""The GCD of the two numbers is""', ',', 'fractions', '.', 'gcd', '(', 'a', ',', 'b', ')', ')']"
2450,"['python', 'program', 'implement', 'floydwarshall', 'algorithm']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__len__', '(', 'self', ')', ':', 'return', 'len', '(', 'self', '.', 'vertices', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'floyd_warshall', '(', 'g', ')', ':', '""""""Return dictionaries distance and next_v.\n\xa0\n    distance[u][v] is the shortest distance from vertex u to v.\n    next_v[u][v] is the next vertex after vertex v in the shortest path from u\n    to v. It is None if there is no path between them. next_v[u][u] should be\n    None for all u.\n\xa0\n    g is a Graph object which can have negative edge weights.\n    """"""', 'distance', '=', '{', 'v', ':', 'dict', '.', 'fromkeys', '(', 'g', ',', 'float', '(', ""'inf'"", ')', ')', 'for', 'v', 'in', 'g', '}', 'next_v', '=', '{', 'v', ':', 'dict', '.', 'fromkeys', '(', 'g', ',', 'None', ')', 'for', 'v', 'in', 'g', '}', 'for', 'v', 'in', 'g', ':', 'for', 'n', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'distance', '[', 'v', ']', '[', 'n', ']', '=', 'v', '.', 'get_weight', '(', 'n', ')', 'next_v', '[', 'v', ']', '[', 'n', ']', '=', 'n', 'for', 'v', 'in', 'g', ':', 'distance', '[', 'v', ']', '[', 'v', ']', '=', '0', 'next_v', '[', 'v', ']', '[', 'v', ']', '=', 'None', 'for', 'p', 'in', 'g', ':', 'for', 'v', 'in', 'g', ':', 'for', 'w', 'in', 'g', ':', 'if', 'distance', '[', 'v', ']', '[', 'w', ']', '>', 'distance', '[', 'v', ']', '[', 'p', ']', '+', 'distance', '[', 'p', ']', '[', 'w', ']', ':', 'distance', '[', 'v', ']', '[', 'w', ']', '=', 'distance', '[', 'v', ']', '[', 'p', ']', '+', 'distance', '[', 'p', ']', '[', 'w', ']', 'next_v', '[', 'v', ']', '[', 'w', ']', '=', 'next_v', '[', 'v', ']', '[', 'p', ']', 'return', 'distance', ',', 'next_v', 'def', 'print_path', '(', 'next_v', ',', 'u', ',', 'v', ')', ':', '""""""Print shortest path from vertex u to v.\n\xa0\n    next_v is a dictionary where next_v[u][v] is the next vertex after vertex u\n    in the shortest path from u to v. It is None if there is no path between\n    them. next_v[u][u] should be None for all u.\n\xa0\n    u and v are Vertex objects.\n    """"""', 'p', '=', 'u', 'while', '(', 'next_v', '[', 'p', ']', '[', 'v', ']', ')', ':', 'print', '(', ""'{} -> '"", '.', 'format', '(', 'p', '.', 'get_key', '(', ')', ')', ',', 'end', '=', ""''"", ')', 'p', '=', 'next_v', '[', 'p', ']', '[', 'v', ']', 'print', '(', ""'{} '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ')', ',', 'end', '=', ""''"", ')', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest> <weight>'"", ')', 'print', '(', ""'floyd-warshall'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'weight', '=', 'int', '(', 'do', '[', '4', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ',', 'weight', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'floyd-warshall'"", ':', 'distance', ',', 'next_v', '=', 'floyd_warshall', '(', 'g', ')', 'print', '(', ""'Shortest distances:'"", ')', 'for', 'start', 'in', 'g', ':', 'for', 'end', 'in', 'g', ':', 'if', 'next_v', '[', 'start', ']', '[', 'end', ']', ':', 'print', '(', ""'From {} to {}: '"", '.', 'format', '(', 'start', '.', 'get_key', '(', ')', ',', 'end', '.', 'get_key', '(', ')', ')', ',', 'end', '=', ""''"", ')', 'print_path', '(', 'next_v', ',', 'start', ',', 'end', ')', 'print', '(', ""'(distance {})'"", '.', 'format', '(', 'distance', '[', 'start', ']', '[', 'end', ']', ')', ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2451,"['find', 'maximum', 'element', 'matrix']","['import', 'sys', 'row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'max', '=', '-', 'sys', '.', 'maxsize', '-', '1', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '>=', 'max', ':', 'max', '=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""The Maximum element of the Given 2d array is: ""', ',', 'max', ')']"
2452,"['program', 'remove', 'number', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'str2', '=', '[', ']', 'i', '=', '0', 'while', 'i', '<', 'len', '(', 'str', ')', ':', 'ch', '=', 'str', '[', 'i', ']', 'if', 'not', '(', 'ch', '>=', ""'0'"", 'and', 'ch', '<=', ""'9'"", ')', ':', 'str2', '.', 'append', '(', 'ch', ')', 'i', '+=', '1', 'Final_String', '=', ""''"", '.', 'join', '(', 'str2', ')', 'print', '(', '""After removing numbers string is:""', ',', 'Final_String', ')']"
2453,"['write', 'program', 'display', 'name', 'message']","['print', '(', '""Sourav Patra""', ')', 'print', '(', '""Welcome to Python""', ')', 'print', '(', '""Welcome to our page www.csinfo360.com""', ')', 'print', '(', '""Programming Practice""', ')', 'print', '(', '""Thank you!""', ')']"
2454,"['program', 'check', 'two', 'matrix', 'equal']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the 1st Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the 1st Matrix:""', ')', ')', 'row_size1', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the 1st Matrix:""', ')', ')', 'col_size1', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the 2nd Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the 1st Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'matrix1', '=', '[', ']', 'print', '(', '""Enter the 2nd Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix1', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'point', '=', '0', 'if', 'row_size', '==', 'row_size1', 'and', 'col_size', '==', 'col_size1', ':', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', 'matrix1', '[', 'i', ']', '[', 'j', ']', ':', 'point', '=', '1', 'break', 'else', ':', 'print', '(', '""Two matrices are not equal.""', ')', 'exit', '(', '0', ')', 'if', 'point', '==', '1', ':', 'print', '(', '""Two matrices are not equal.""', ')', 'else', ':', 'print', '(', '""Two matrices are equal.""', ')']"
2455,"['program', 'find', 'nth', 'hashed', 'number']","['print', '(', '""Enter the Nth value:""', ')', 'rangenumber', '=', 'int', '(', 'input', '(', ')', ')', 'num', '=', '1', 'c', '=', '0', 'letest', '=', '0', 'while', '(', 'c', '!=', 'rangenumber', ')', ':', 'num2', '=', 'num', 'num1', '=', 'num', 'sum', '=', '0', 'while', '(', 'num1', '!=', '0', ')', ':', 'rem', '=', 'num1', '%', '10', 'num1', '=', 'num1', '//', '10', 'sum', '=', 'sum', '+', 'rem', 'if', '(', 'num2', '%', 'sum', '==', '0', ')', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Harshad number is ""', ',', 'letest', ')', ';']"
2456,"['program', 'print', 'series', 'n']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number(Limit):""', ')', ')', 'i', '=', '1', 'pr', '=', '0', 'while', 'i', '<=', 'n', ':', 'if', '(', 'i', '%', '2', '==', '0', ')', ':', 'pr', '=', '2', '*', 'pow', '(', 'i', ',', '2', ')', '+', '1', 'print', '(', 'pr', ',', 'end', '=', '"" ""', ')', 'else', ':', 'pr', '=', '2', '*', 'pow', '(', 'i', ',', '2', ')', '-', '1', 'print', '(', 'pr', ',', 'end', '=', '"" ""', ')', 'i', '+=', '1']"
2457,"['program', 'convert', 'decimal', 'hexadecimal']","['i', '=', '0', 'dec', '=', 'int', '(', 'input', '(', '""Enter Decimal number: ""', ')', ')', 'Hex', '=', '[', ""'0'"", ']', '*', '50', 'while', 'dec', '!=', '0', ':', 'rem', '=', 'dec', '%', '16', ';', 'if', 'rem', '<', '10', ':', 'Hex', '[', 'i', ']', '=', 'chr', '(', 'rem', '+', '48', ')', 'i', '+=', '1', 'else', ':', 'Hex', '[', 'i', ']', '=', 'chr', '(', 'rem', '+', '55', ')', 'i', '+=', '1', 'dec', '//=', '16', 'print', '(', '""Hexadecimal number is:""', ')', 'for', 'j', 'in', 'range', '(', 'i', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'print', '(', 'Hex', '[', 'j', ']', ',', 'end', '=', '""""', ')']"
2458,"['python', 'program', 'print', 'largest', 'even', 'largest', 'odd', 'number', 'list']","['n', '=', 'int', '(', 'input', '(', '""Enter the number of elements to be in the list:""', ')', ')', 'b', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'a', '=', 'int', '(', 'input', '(', '""Element: ""', ')', ')', 'b', '.', 'append', '(', 'a', ')', 'c', '=', '[', ']', 'd', '=', '[', ']', 'for', 'i', 'in', 'b', ':', 'if', '(', 'i', '%', '2', '==', '0', ')', ':', 'c', '.', 'append', '(', 'i', ')', 'else', ':', 'd', '.', 'append', '(', 'i', ')', 'c', '.', 'sort', '(', ')', 'd', '.', 'sort', '(', ')', 'count1', '=', '0', 'count2', '=', '0', 'for', 'k', 'in', 'c', ':', 'count1', '=', 'count1', '+', '1', 'for', 'j', 'in', 'd', ':', 'count2', '=', 'count2', '+', '1', 'print', '(', '""Largest even number:""', ',', 'c', '[', 'count1', '-', '1', ']', ')', 'print', '(', '""Largest odd number""', ',', 'd', '[', 'count2', '-', '1', ']', ')']"
2459,"['program', 'print', 'series']","['print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'i', '=', '1', 'value', '=', '2', 'while', '(', 'i', '<=', 'n', ')', ':', 'print', '(', 'value', ',', 'end', '=', '"" ""', ')', 'value', '+=', 'i', '*', '13', 'i', '+=', '1']"
2460,"['python', 'program', 'construct', 'tree', 'perform', 'insertion', 'deletion', 'display']","['class', 'Tree', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ',', 'parent', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'data', 'self', '.', 'children', '=', '[', ']', 'self', '.', 'parent', '=', 'parent', 'def', 'set_root', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'key', '=', 'data', 'def', 'add', '(', 'self', ',', 'node', ')', ':', 'self', '.', 'children', '.', 'append', '(', 'node', ')', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'for', 'child', 'in', 'self', '.', 'children', ':', 'temp', '=', 'child', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'return', 'None', 'def', 'remove', '(', 'self', ')', ':', 'parent', '=', 'self', '.', 'parent', 'index', '=', 'parent', '.', 'children', '.', 'index', '(', 'self', ')', 'parent', '.', 'children', '.', 'remove', '(', 'self', ')', 'for', 'child', 'in', 'reversed', '(', 'self', '.', 'children', ')', ':', 'parent', '.', 'children', '.', 'insert', '(', 'index', ',', 'child', ')', 'child', '.', 'parent', '=', 'parent', 'def', 'bfs_display', '(', 'self', ')', ':', 'queue', '=', '[', 'self', ']', 'while', 'queue', '!=', '[', ']', ':', 'popped', '=', 'queue', '.', 'pop', '(', '0', ')', 'for', 'child', 'in', 'popped', '.', 'children', ':', 'queue', '.', 'append', '(', 'child', ')', 'print', '(', 'popped', '.', 'key', ',', 'end', '=', ""' '"", ')', 'tree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'add <data> at root'"", ')', 'print', '(', ""'add <data> below <data>'"", ')', 'print', '(', ""'remove <data>'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'add'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'Tree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'tree', '=', 'new_node', 'elif', 'suboperation', '==', ""'below'"", ':', 'position', '=', 'do', '[', '3', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'tree', 'is', 'not', 'None', ':', 'ref_node', '=', 'tree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'new_node', '.', 'parent', '=', 'ref_node', 'ref_node', '.', 'add', '(', 'new_node', ')', 'elif', 'operation', '==', ""'remove'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'to_remove', '=', 'tree', '.', 'search', '(', 'data', ')', 'if', 'tree', '==', 'to_remove', ':', 'if', 'tree', '.', 'children', '==', '[', ']', ':', 'tree', '=', 'None', 'else', ':', 'leaf', '=', 'tree', '.', 'children', '[', '0', ']', 'while', 'leaf', '.', 'children', '!=', '[', ']', ':', 'leaf', '=', 'leaf', '.', 'children', '[', '0', ']', 'leaf', '.', 'parent', '.', 'children', '.', 'remove', '(', 'leaf', ')', 'leaf', '.', 'parent', '=', 'None', 'leaf', '.', 'children', '=', 'tree', '.', 'children', 'tree', '=', 'leaf', 'else', ':', 'to_remove', '.', 'remove', '(', ')', 'elif', 'operation', '==', ""'display'"", ':', 'if', 'tree', 'is', 'not', 'None', ':', 'print', '(', ""'BFS traversal display: '"", ',', 'end', '=', ""''"", ')', 'tree', '.', 'bfs_display', '(', ')', 'print', '(', ')', 'else', ':', 'print', '(', ""'Tree is empty.'"", ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2461,"['python', 'program', 'reverse', 'first', 'n', 'element', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'def', 'reverse_llist', '(', 'llist', ',', 'n', ')', ':', 'if', 'n', '==', '0', ':', 'return', 'before', '=', 'None', 'current', '=', 'llist', '.', 'head', 'if', 'current', 'is', 'None', ':', 'return', 'after', '=', 'current', '.', 'next', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'current', '.', 'next', '=', 'before', 'before', '=', 'current', 'current', '=', 'after', 'if', 'after', 'is', 'None', ':', 'break', 'after', '=', 'after', '.', 'next', 'llist', '.', 'head', '.', 'next', '=', 'current', 'llist', '.', 'head', '=', 'before', 'a_llist', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_llist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'n', '=', 'int', '(', 'input', '(', ""'Enter the number of elements you want to reverse in the list: '"", ')', ')', 'reverse_llist', '(', 'a_llist', ',', 'n', ')', 'print', '(', ""'The new list: '"", ')', 'a_llist', '.', 'display', '(', ')']"
2462,"['python', 'program', 'solve', 'rod', 'cutting', 'problem', 'using', 'dynamic', 'programming', 'memoization']","['def', 'cut_rod', '(', 'p', ',', 'n', ')', ':', '""""""Take a list p of prices and the rod length n and return lists r and s.\n    r[i] is the maximum revenue that you can get and s[i] is the length of the\n    first piece to cut from a rod of length i.""""""', 'r', '=', '[', '-', '1', ']', '*', '(', 'n', '+', '1', ')', 's', '=', '[', '-', '1', ']', '*', '(', 'n', '+', '1', ')', 'cut_rod_helper', '(', 'p', ',', 'n', ',', 'r', ',', 's', ')', 'return', 'r', ',', 's', 'def', 'cut_rod_helper', '(', 'p', ',', 'n', ',', 'r', ',', 's', ')', ':', '""""""Take a list p of prices, the rod length n, a list r of maximum revenues\n    and a list s of initial cuts and return the maximum revenue that you can get\n    from a rod of length n.\n\xa0\n    Also, populate r and s based on which subproblems need to be solved.\n    """"""', 'if', 'r', '[', 'n', ']', '>=', '0', ':', 'return', 'r', '[', 'n', ']', 'if', 'n', '==', '0', ':', 'q', '=', '0', 'else', ':', 'q', '=', '-', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'temp', '=', 'p', '[', 'i', ']', '+', 'cut_rod_helper', '(', 'p', ',', 'n', '-', 'i', ',', 'r', ',', 's', ')', 'if', 'q', '<', 'temp', ':', 'q', '=', 'temp', 's', '[', 'n', ']', '=', 'i', 'r', '[', 'n', ']', '=', 'q', 'return', 'q', 'n', '=', 'int', '(', 'input', '(', ""'Enter the length of the rod in inches: '"", ')', ')', 'p', '=', '[', 'None', ']', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'price', '=', 'input', '(', ""'Enter the price of a rod of length {} in: '"", '.', 'format', '(', 'i', ')', ')', 'p', '.', 'append', '(', 'int', '(', 'price', ')', ')', 'r', ',', 's', '=', 'cut_rod', '(', 'p', ',', 'n', ')', 'print', '(', ""'The maximum revenue that can be obtained:'"", ',', 'r', '[', 'n', ']', ')', 'print', '(', ""'The rod needs to be cut into length(s) of '"", ',', 'end', '=', ""''"", ')', 'while', 'n', '>', '0', ':', 'print', '(', 's', '[', 'n', ']', ',', 'end', '=', ""' '"", ')', 'n', '-=', 's', '[', 'n', ']']"
2463,"['python', 'program', 'count', 'number', 'vowel', 'present', 'string', 'using', 'set']","['s', '=', 'raw_input', '(', '""Enter string:""', ')', 'count', '=', '0', 'vowels', '=', 'set', '(', '""aeiou""', ')', 'for', 'letter', 'in', 's', ':', 'if', 'letter', 'in', 'vowels', ':', 'count', '+=', '1', 'print', '(', '""Count of the vowels is:""', ')', 'print', '(', 'count', ')']"
2464,"['find', 'disarium', 'number', 'present', 'within', 'given', 'range']","['import', 'math', 'print', '(', '""Enter a range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Disarium numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'num', '=', 'i', 'c', '=', '0', 'while', 'num', '!=', '0', ':', 'num', '//=', '10', 'c', '+=', '1', 'num', '=', 'i', 'sum', '=', '0', 'while', 'num', '!=', '0', ':', 'rem', '=', 'num', '%', '10', 'sum', '+=', 'math', '.', 'pow', '(', 'rem', ',', 'c', ')', 'num', '//=', '10', 'c', '-=', '1', 'if', 'sum', '==', 'i', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
2465,"['python', 'program', 'modify', 'linked', 'list', 'even', 'number', 'appear', 'odd', 'number', 'modified', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'def', 'get_node', '(', 'self', ',', 'index', ')', ':', 'current', '=', 'self', '.', 'head', 'for', 'i', 'in', 'range', '(', 'index', ')', ':', 'if', 'current', 'is', 'None', ':', 'return', 'None', 'current', '=', 'current', '.', 'next', 'return', 'current', 'def', 'get_prev_node', '(', 'self', ',', 'ref_node', ')', ':', 'current', '=', 'self', '.', 'head', 'while', '(', 'current', 'and', 'current', '.', 'next', '!=', 'ref_node', ')', ':', 'current', '=', 'current', '.', 'next', 'return', 'current', 'def', 'insert_at_beg', '(', 'self', ',', 'new_node', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_node', 'else', ':', 'new_node', '.', 'next', '=', 'self', '.', 'head', 'self', '.', 'head', '=', 'new_node', 'def', 'remove', '(', 'self', ',', 'node', ')', ':', 'prev_node', '=', 'self', '.', 'get_prev_node', '(', 'node', ')', 'if', 'prev_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'self', '.', 'head', '.', 'next', 'else', ':', 'prev_node', '.', 'next', '=', 'node', '.', 'next', 'def', 'move_even_before_odd', '(', 'llist', ')', ':', 'current', '=', 'llist', '.', 'head', 'while', 'current', ':', 'temp', '=', 'current', '.', 'next', 'if', 'current', '.', 'data', '%', '2', '==', '0', ':', 'llist', '.', 'remove', '(', 'current', ')', 'llist', '.', 'insert_at_beg', '(', 'current', ')', 'current', '=', 'temp', 'a_llist', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_llist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'move_even_before_odd', '(', 'a_llist', ')', 'print', '(', ""'The new list: '"", ')', 'a_llist', '.', 'display', '(', ')']"
2466,"['program', 'display', 'lower', 'triangular', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'print', '(', '""Lower Triangular Matrix is:\\n""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '<', 'j', ':', 'print', '(', '""0 ""', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', 'matrix', '[', 'i', ']', '[', 'j', ']', ',', 'end', '=', '"" ""', ')', 'print', '(', ')']"
2467,"['print', 'inverted', 'full', 'pyramid', 'star', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'star_print', '=', 'row_size', '*', '2', '-', '1', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '0', ',', '-', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', 'row_size', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', '0', ',', 'star_print', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'star_print', '-=', '2', 'print', '(', '""\\r""', ')']"
2468,"['program', 'print', 'butterfly', 'shape', 'star', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'print_control_x', '=', '1', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'if', 'inn', '<=', 'print_control_x', 'or', 'inn', '>=', 'row_size', '-', 'print_control_x', '+', '1', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'if', 'out', '<=', 'row_size', '//', '2', ':', 'print_control_x', '+=', '1', 'else', ':', 'print_control_x', '-=', '1', 'print', '(', '""\\r""', ')']"
2469,"['python', 'program', 'implement', 'fibonacci', 'heap']","['import', 'math', 'class', 'FibonacciTree', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'children', '=', '[', ']', 'self', '.', 'order', '=', '0', 'def', 'add_at_end', '(', 'self', ',', 't', ')', ':', 'self', '.', 'children', '.', 'append', '(', 't', ')', 'self', '.', 'order', '=', 'self', '.', 'order', '+', '1', 'class', 'FibonacciHeap', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'trees', '=', '[', ']', 'self', '.', 'least', '=', 'None', 'self', '.', 'count', '=', '0', 'def', 'insert', '(', 'self', ',', 'key', ')', ':', 'new_tree', '=', 'FibonacciTree', '(', 'key', ')', 'self', '.', 'trees', '.', 'append', '(', 'new_tree', ')', 'if', '(', 'self', '.', 'least', 'is', 'None', 'or', 'key', '<', 'self', '.', 'least', '.', 'key', ')', ':', 'self', '.', 'least', '=', 'new_tree', 'self', '.', 'count', '=', 'self', '.', 'count', '+', '1', 'def', 'get_min', '(', 'self', ')', ':', 'if', 'self', '.', 'least', 'is', 'None', ':', 'return', 'None', 'return', 'self', '.', 'least', '.', 'key', 'def', 'extract_min', '(', 'self', ')', ':', 'smallest', '=', 'self', '.', 'least', 'if', 'smallest', 'is', 'not', 'None', ':', 'for', 'child', 'in', 'smallest', '.', 'children', ':', 'self', '.', 'trees', '.', 'append', '(', 'child', ')', 'self', '.', 'trees', '.', 'remove', '(', 'smallest', ')', 'if', 'self', '.', 'trees', '==', '[', ']', ':', 'self', '.', 'least', '=', 'None', 'else', ':', 'self', '.', 'least', '=', 'self', '.', 'trees', '[', '0', ']', 'self', '.', 'consolidate', '(', ')', 'self', '.', 'count', '=', 'self', '.', 'count', '-', '1', 'return', 'smallest', '.', 'key', 'def', 'consolidate', '(', 'self', ')', ':', 'aux', '=', '(', 'floor_log2', '(', 'self', '.', 'count', ')', '+', '1', ')', '*', '[', 'None', ']', 'while', 'self', '.', 'trees', '!=', '[', ']', ':', 'x', '=', 'self', '.', 'trees', '[', '0', ']', 'order', '=', 'x', '.', 'order', 'self', '.', 'trees', '.', 'remove', '(', 'x', ')', 'while', 'aux', '[', 'order', ']', 'is', 'not', 'None', ':', 'y', '=', 'aux', '[', 'order', ']', 'if', 'x', '.', 'key', '>', 'y', '.', 'key', ':', 'x', ',', 'y', '=', 'y', ',', 'x', 'x', '.', 'add_at_end', '(', 'y', ')', 'aux', '[', 'order', ']', '=', 'None', 'order', '=', 'order', '+', '1', 'aux', '[', 'order', ']', '=', 'x', 'self', '.', 'least', '=', 'None', 'for', 'k', 'in', 'aux', ':', 'if', 'k', 'is', 'not', 'None', ':', 'self', '.', 'trees', '.', 'append', '(', 'k', ')', 'if', '(', 'self', '.', 'least', 'is', 'None', 'or', 'k', '.', 'key', '<', 'self', '.', 'least', '.', 'key', ')', ':', 'self', '.', 'least', '=', 'k', 'def', 'floor_log2', '(', 'x', ')', ':', 'return', 'math', '.', 'frexp', '(', 'x', ')', '[', '1', ']', '-', '1', 'fheap', '=', 'FibonacciHeap', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'insert <data>'"", ')', 'print', '(', ""'min get'"", ')', 'print', '(', ""'min extract'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'fheap', '.', 'insert', '(', 'data', ')', 'elif', 'operation', '==', ""'min'"", ':', 'suboperation', '=', 'do', '[', '1', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'get'"", ':', 'print', '(', ""'Minimum value: {}'"", '.', 'format', '(', 'fheap', '.', 'get_min', '(', ')', ')', ')', 'elif', 'suboperation', '==', ""'extract'"", ':', 'print', '(', ""'Minimum value removed: {}'"", '.', 'format', '(', 'fheap', '.', 'extract_min', '(', ')', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2470,"['program', 'find', 'sum', 'series']","['print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'i', '=', '1', 'sum', '=', '0', 'while', '(', 'i', '<=', 'n', ')', ':', 'for', 'j', 'in', 'range', '(', '1', ',', 'i', '+', '1', ',', '2', ')', ':', 'sum', '+=', 'j', 'i', '+=', '2', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
2471,"['program', 'find', 'nth', 'neon', 'number']","['rangenumber', '=', 'int', '(', 'input', '(', '""Enter a Nth Number:""', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', 'c', '!=', 'rangenumber', ':', 'sqr', '=', 'num', '*', 'num', 'sum', '=', '0', 'while', 'sqr', '!=', '0', ':', 'rem', '=', 'sqr', '%', '10', 'sum', '+=', 'rem', 'sqr', '//=', '10', 'if', 'sum', '==', 'num', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Magic number is ""', ',', 'latest', ')']"
2472,"['python', 'program', 'take', 'temperature', 'celcius', 'covert', 'farenheit']","['celsius', '=', 'int', '(', 'input', '(', '""Enter the temperature in celcius:""', ')', ')', 'f', '=', '(', 'celsius', '*', '1.8', ')', '+', '32', 'print', '(', '""Temperature in farenheit is:""', ',', 'f', ')']"
2473,"['find', 'non', 'repeated', 'character', 'string']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'arr', '=', '[', '0', ']', '*', '256', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '!=', ""' '"", ':', 'num', '=', 'ord', '(', 'str', '[', 'i', ']', ')', 'arr', '[', 'num', ']', '+=', '1', 'ch', '=', ""' '"", 'print', '(', '""All Non-repeating character in a given string is: ""', ',', 'end', '=', '""""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'arr', '[', 'ord', '(', 'str', '[', 'i', ']', ')', ']', '==', '1', ':', 'ch', '=', 'str', '[', 'i', ']', 'print', '(', 'ch', ',', 'end', '=', '"" ""', ')']"
2474,"['print', 'fibonacci', 'series', 'using', 'recursion']","['def', 'FibonacciSeries', '(', 'n', ')', ':', 'if', 'n', '==', '0', ':', 'return', '0', 'elif', '(', 'n', '==', '1', ')', ':', 'return', '1', 'else', ':', 'return', 'FibonacciSeries', '(', 'n', '-', '1', ')', '+', 'FibonacciSeries', '(', 'n', '-', '2', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter the Limit:""', ')', ')', 'print', '(', '""All Fibonacci Numbers in the given Range are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'print', '(', 'FibonacciSeries', '(', 'i', ')', ',', 'end', '=', '"" ""', ')']"
2475,"['write', 'program', 'computes', 'value', 'aaaaaaaaaa', 'given', 'digit', 'value']","['a', '=', 'raw_input', '(', ')', 'n1', '=', 'int', '(', '""%s""', '%', 'a', ')', 'n2', '=', 'int', '(', '""%s%s""', '%', '(', 'a', ',', 'a', ')', ')', 'n3', '=', 'int', '(', '""%s%s%s""', '%', '(', 'a', ',', 'a', ',', 'a', ')', ')', 'n4', '=', 'int', '(', '""%s%s%s%s""', '%', '(', 'a', ',', 'a', ',', 'a', ',', 'a', ')', ')', 'print', 'n1', '+', 'n2', '+', 'n3', '+', 'n4']"
2476,"['python', 'program', 'find', 'lcm', 'two', 'number']","['a', '=', 'int', '(', 'input', '(', '""Enter the first number:""', ')', ')', 'b', '=', 'int', '(', 'input', '(', '""Enter the second number:""', ')', ')', 'if', '(', 'a', '>', 'b', ')', ':', 'min1', '=', 'a', 'else', ':', 'min1', '=', 'b', 'while', '(', '1', ')', ':', 'if', '(', 'min1', '%', 'a', '==', '0', 'and', 'min1', '%', 'b', '==', '0', ')', ':', 'print', '(', '""LCM is:""', ',', 'min1', ')', 'break', 'min1', '=', 'min1', '+', '1']"
2477,"['convert', 'temperature', 'fahrenheit', 'celsius']","['fahrenheit', '=', 'int', '(', 'input', '(', '""Enter degree in fahrenheit: ""', ')', ')', 'celsius', '=', '(', 'fahrenheit', '-', '32', ')', '*', '5', '/', '9', ';', 'print', '(', '""Degree in celsius is""', ',', 'celsius', ')']"
2478,"['write', 'program', 'accepts', 'sentence', 'calculate', 'number', 'upper', 'case', 'letter', 'lower', 'case', 'letter']","['s', '=', 'raw_input', '(', ')', 'd', '=', '{', '""UPPER CASE""', ':', '0', ',', '""LOWER CASE""', ':', '0', '}', 'for', 'c', 'in', 's', ':', 'if', 'c', '.', 'isupper', '(', ')', ':', 'd', '[', '""UPPER CASE""', ']', '+=', '1', 'elif', 'c', '.', 'islower', '(', ')', ':', 'd', '[', '""LOWER CASE""', ']', '+=', '1', 'else', ':', 'pass', 'print', '""UPPER CASE""', ',', 'd', '[', '""UPPER CASE""', ']', 'print', '""LOWER CASE""', ',', 'd', '[', '""LOWER CASE""', ']']"
2479,"['program', 'find', 'subtraction', 'two', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'matrix1', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix1', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sub_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'sub_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'i', ']', '[', 'j', ']', '-', 'matrix1', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Subtraction of the two Matrices is:""', ')', 'for', 'm', 'in', 'sub_matrix', ':', 'print', '(', 'm', ')']"
2480,"['python', 'program', 'find', 'length', 'list', 'using', 'recursion']","['def', 'length', '(', 'lst', ')', ':', 'if', 'not', 'lst', ':', 'return', '0', 'return', '1', '+', 'length', '(', 'lst', '[', '1', ':', ':', '2', ']', ')', '+', 'length', '(', 'lst', '[', '2', ':', ':', '2', ']', ')', 'a', '=', '[', '1', ',', '2', ',', '3', ']', 'print', '(', '""Length of the string is: ""', ')', 'print', '(', 'a', ')']"
2481,"['write', 'program', 'accepts', 'sequence', 'commaseparated', 'number', 'console', 'generate', 'list', 'tuple', 'contains', 'every', 'number']","['values', '=', 'raw_input', '(', ')', 'l', '=', 'values', '.', 'split', '(', '"",""', ')', 't', '=', 'tuple', '(', 'l', ')', 'print', 'l', 'print', 't']"
2482,"['find', 'sum', 'n', 'number', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'float', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'sum', '=', '0.0', 'for', 'j', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'sum', '+=', 'arr', '[', 'j', ']', 'print', '(', '""sum of ""', ',', 'size', ',', '"" number : ""', ',', 'sum', ')']"
2483,"['program', 'check', 'whether', 'matrix', 'diagonal']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'point', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '!=', 'j', 'and', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', '0', ':', 'point', '=', '1', 'break', 'if', 'point', '==', '1', ':', 'print', '(', '""Given Matrix is not a diagonal Matrix.""', ')', 'else', ':', 'print', '(', '""Given Matrix is a diagonal Matrix.""', ')']"
2484,"['program', 'check', 'whether', 'matrix', 'symmetric']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'if', 'row_size', '!=', 'col_size', ':', 'print', '(', '""Given Matrix is not a Square Matrix.""', ')', 'else', ':', 'tran_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'tran_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'j', ']', '[', 'i', ']', 'flag', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', 'tran_matrix', '[', 'i', ']', '[', 'j', ']', ':', 'flag', '=', '1', 'break', 'if', 'flag', '==', '1', ':', 'print', '(', '""Given Matrix is not a symmetric Matrix.""', ')', 'else', ':', 'print', '(', '""Given Matrix is a symmetric Matrix.""', ')']"
2485,"['program', 'find', 'nth', 'evil', 'number']","['rangenumber', '=', 'int', '(', 'input', '(', '""Enter a Nth Number:""', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', 'c', '!=', 'rangenumber', ':', 'one_c', '=', '0', 'num1', '=', 'num', 'while', 'num1', '!=', '0', ':', 'if', 'num1', '%', '2', '==', '1', ':', 'one_c', '+=', '1', 'num1', '//=', '2', 'if', 'one_c', '%', '2', '==', '0', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Evil number is ""', ',', 'latest', ')']"
2486,"['python', 'program', 'print', 'table', 'given', 'number']","['n', '=', 'int', '(', 'input', '(', '""Enter the number to print the tables for:""', ')', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '11', ')', ':', 'print', '(', 'n', ',', '""x""', ',', 'i', ',', '""=""', ',', 'n', '*', 'i', ')']"
2487,"['python', 'program', 'implement', 'heapsort']","['def', 'heapsort', '(', 'alist', ')', ':', 'build_max_heap', '(', 'alist', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'alist', ')', '-', '1', ',', '0', ',', '-', '1', ')', ':', 'alist', '[', '0', ']', ',', 'alist', '[', 'i', ']', '=', 'alist', '[', 'i', ']', ',', 'alist', '[', '0', ']', 'max_heapify', '(', 'alist', ',', 'index', '=', '0', ',', 'size', '=', 'i', ')', 'def', 'parent', '(', 'i', ')', ':', 'return', '(', 'i', '-', '1', ')', '//', '2', 'def', 'left', '(', 'i', ')', ':', 'return', '2', '*', 'i', '+', '1', 'def', 'right', '(', 'i', ')', ':', 'return', '2', '*', 'i', '+', '2', 'def', 'build_max_heap', '(', 'alist', ')', ':', 'length', '=', 'len', '(', 'alist', ')', 'start', '=', 'parent', '(', 'length', '-', '1', ')', 'while', 'start', '>=', '0', ':', 'max_heapify', '(', 'alist', ',', 'index', '=', 'start', ',', 'size', '=', 'length', ')', 'start', '=', 'start', '-', '1', 'def', 'max_heapify', '(', 'alist', ',', 'index', ',', 'size', ')', ':', 'l', '=', 'left', '(', 'index', ')', 'r', '=', 'right', '(', 'index', ')', 'if', '(', 'l', '<', 'size', 'and', 'alist', '[', 'l', ']', '>', 'alist', '[', 'index', ']', ')', ':', 'largest', '=', 'l', 'else', ':', 'largest', '=', 'index', 'if', '(', 'r', '<', 'size', 'and', 'alist', '[', 'r', ']', '>', 'alist', '[', 'largest', ']', ')', ':', 'largest', '=', 'r', 'if', '(', 'largest', '!=', 'index', ')', ':', 'alist', '[', 'largest', ']', ',', 'alist', '[', 'index', ']', '=', 'alist', '[', 'index', ']', ',', 'alist', '[', 'largest', ']', 'max_heapify', '(', 'alist', ',', 'largest', ',', 'size', ')', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'heapsort', '(', 'alist', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'alist', ')']"
2488,"['python', 'program', 'count', 'number', 'non', 'leaf', 'node', 'given', 'tree']","['class', 'Tree', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'data', 'self', '.', 'children', '=', '[', ']', 'def', 'set_root', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'key', '=', 'data', 'def', 'add', '(', 'self', ',', 'node', ')', ':', 'self', '.', 'children', '.', 'append', '(', 'node', ')', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'for', 'child', 'in', 'self', '.', 'children', ':', 'temp', '=', 'child', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'return', 'None', 'def', 'count_nonleaf_nodes', '(', 'self', ')', ':', 'nonleaf_count', '=', '0', 'if', 'self', '.', 'children', '!=', '[', ']', ':', 'nonleaf_count', '=', '1', 'for', 'child', 'in', 'self', '.', 'children', ':', 'nonleaf_count', '=', 'nonleaf_count', '+', 'child', '.', 'count_nonleaf_nodes', '(', ')', 'return', 'nonleaf_count', 'tree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'add <data> at root'"", ')', 'print', '(', ""'add <data> below <data>'"", ')', 'print', '(', ""'count'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'add'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'Tree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'tree', '=', 'new_node', 'elif', 'suboperation', '==', ""'below'"", ':', 'position', '=', 'do', '[', '3', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'tree', 'is', 'not', 'None', ':', 'ref_node', '=', 'tree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'ref_node', '.', 'add', '(', 'new_node', ')', 'elif', 'operation', '==', ""'count'"", ':', 'if', 'tree', 'is', 'None', ':', 'print', '(', ""'Tree is empty.'"", ')', 'else', ':', 'count', '=', 'tree', '.', 'count_nonleaf_nodes', '(', ')', 'print', '(', ""'Number of nonleaf nodes: {}'"", '.', 'format', '(', 'count', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2489,"['python', 'program', 'count', 'number', 'line', 'text', 'file']","['fname', '=', 'input', '(', '""Enter file name: ""', ')', 'num_lines', '=', '0', 'with', 'open', '(', 'fname', ',', ""'r'"", ')', 'as', 'f', ':', 'for', 'line', 'in', 'f', ':', 'num_lines', '+=', '1', 'print', '(', '""Number of lines:""', ')', 'print', '(', 'num_lines', ')']"
2490,"['check', 'two', 'array', 'disjoint']","['arr', '=', '[', ']', 'arr2', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the 1st array: ""', ')', ')', 'size2', '=', 'int', '(', 'input', '(', '""Enter the size of the 2nd array: ""', ')', ')', 'print', '(', '""Enter the Element of the 1st array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Enter the Element of the 2nd array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size2', ')', ':', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'arr2', '.', 'append', '(', 'num2', ')', 'count', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'size2', ')', ':', 'if', 'arr', '[', 'i', ']', '==', 'arr2', '[', 'j', ']', ':', 'count', '+=', '1', 'if', 'count', '>=', '1', ':', 'print', '(', '""Arrays are not disjoint.""', ')', 'else', ':', 'print', '(', '""Arrays are disjoint.""', ')']"
2491,"['print', 'every', 'character', 'string', 'twice']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'for', 'inn', 'in', 'range', '(', '0', ',', 'len', '(', 'str', ')', ')', ':', 'print', '(', 'str', '[', 'inn', ']', '+', 'str', '[', 'inn', ']', ',', 'end', '=', '""""', ')']"
2492,"['write', 'program', 'accepts', 'sequence', 'whitespace', 'separated', 'word', 'input', 'print', 'word', 'removing', 'duplicate', 'word', 'sorting', 'alphanumerically']","['s', '=', 'raw_input', '(', ')', 'words', '=', '[', 'word', 'for', 'word', 'in', 's', '.', 'split', '(', '"" ""', ')', ']', 'print', '"" ""', '.', 'join', '(', 'sorted', '(', 'list', '(', 'set', '(', 'words', ')', ')', ')', ')']"
2493,"['python', 'program', 'generate', 'random', 'number', 'append', 'list']","['import', 'random', 'a', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter number of elements:""', ')', ')', 'for', 'j', 'in', 'range', '(', 'n', ')', ':', 'a', '.', 'append', '(', 'random', '.', 'randint', '(', '1', ',', '20', ')', ')', 'print', '(', ""'Randomised list is: '"", ',', 'a', ')']"
2494,"['write', 'program', 'calculate', 'compound', 'interest']","['principle', '=', 'float', '(', 'input', '(', '""Enter principle:""', ')', ')', 'rate', '=', 'float', '(', 'input', '(', '""Enter rate(%):""', ')', ')', 'n', '=', 'float', '(', 'input', '(', '""Enter n:""', ')', ')', 'time', '=', 'float', '(', 'input', '(', '""Enter time:""', ')', ')', 'amount', '=', 'principle', '*', 'pow', '(', '1', '+', '(', 'rate', '/', '100.0', ')', '/', 'n', ',', 'n', '*', 'time', ')', 'print', '(', '""The compound interest is""', ',', 'amount', ')']"
2495,"['define', 'class', 'named', 'american', 'subclass', 'newyorker']","['class', 'American', '(', 'object', ')', ':', 'pass', 'class', 'NewYorker', '(', 'American', ')', ':', 'pass', 'anAmerican', '=', 'American', '(', ')', 'aNewYorker', '=', 'NewYorker', '(', ')', 'print', 'anAmerican', 'print', 'aNewYorker']"
2496,"['program', 'compute', 'area', 'perimeter', 'rhombus']","['print', '(', '""Enter the two Diagonals Value:""', ')', 'p', '=', 'int', '(', 'input', '(', ')', ')', 'q', '=', 'int', '(', 'input', '(', ')', ')', 'a', '=', 'int', '(', 'input', '(', '""Enter the length of the side value:""', ')', ')', 'area', '=', '(', 'p', '*', 'q', ')', '/', '2.0', 'perimeter', '=', '(', '4', '*', 'a', ')', 'print', '(', '""Area of the Rhombus = ""', ',', 'area', ')', 'print', '(', '""Perimeter of the Rhombus = ""', ',', 'perimeter', ')']"
2497,"['program', 'print', 'hollow', 'diamond', 'star', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'print_control_x', '=', 'row_size', '//', '2', '+', '1', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'if', 'inn', '==', 'print_control_x', 'or', 'inn', '==', 'row_size', '-', 'print_control_x', '+', '1', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'if', 'out', '<=', 'row_size', '//', '2', ':', 'print_control_x', '-=', '1', 'else', ':', 'print_control_x', '+=', '1', 'print', '(', '""\\r""', ')']"
2498,"['remove', 'duplicate', 'word', 'string']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'sub_str', '=', 'str', '.', 'split', '(', '"" ""', ')', 'len1', '=', 'len', '(', 'sub_str', ')', 'print', '(', '""After removing duplicate words from a given String is:""', ')', 'for', 'inn', 'in', 'range', '(', 'len1', ')', ':', 'out', '=', 'inn', '+', '1', 'while', 'out', '<', 'len1', ':', 'if', 'sub_str', '[', 'out', ']', '.', '__eq__', '(', 'sub_str', '[', 'inn', ']', ')', ':', 'for', 'p', 'in', 'range', '(', 'out', ',', 'len1', '+', '1', ')', ':', 'if', 'p', '>=', 'p', '+', '1', ':', 'sub_str', '[', 'p', ']', '=', 'sub_str', '[', 'p', '+', '1', ']', 'len1', '-=', '1', 'else', ':', 'out', '+=', '1', 'for', 'inn', 'in', 'range', '(', 'len1', ')', ':', 'print', '(', 'sub_str', '[', 'inn', ']', ',', 'end', '=', '"" ""', ')']"
2499,"['please', 'write', 'program', 'shuffle', 'print', 'list']","['from', 'random', 'import', 'shuffle', 'li', '=', '[', '3', ',', '6', ',', '7', ',', '8', ']', 'shuffle', '(', 'li', ')', 'print', 'li']"
2500,"['write', 'program', 'find', 'nth', 'perfect', 'number']","[""'''Write a Python\nprogram\xa0to\xa0find the nth perfect number. or\xa0Write a\nprogram\xa0to\xa0find the nth perfect number using Python '''"", 'print', '(', '""Enter a Nth Number:""', ')', 'rangenumber', '=', 'int', '(', 'input', '(', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', '(', 'c', '!=', 'rangenumber', ')', ':', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', 'num', ')', ':', 'if', '(', 'num', '%', 'i', '==', '0', ')', ':', 'sum', '=', 'sum', '+', 'i', 'if', '(', 'sum', '==', 'num', ')', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th perfect number is ""', ',', 'letest', ')']"
2501,"['python', 'program', 'count', 'number', 'leaf', 'node', 'tree']","['class', 'Tree', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'data', 'self', '.', 'children', '=', '[', ']', 'def', 'set_root', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'key', '=', 'data', 'def', 'add', '(', 'self', ',', 'node', ')', ':', 'self', '.', 'children', '.', 'append', '(', 'node', ')', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'for', 'child', 'in', 'self', '.', 'children', ':', 'temp', '=', 'child', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'return', 'None', 'def', 'count_leaf_nodes', '(', 'self', ')', ':', 'leaf_nodes', '=', '[', ']', 'self', '.', 'count_leaf_nodes_helper', '(', 'leaf_nodes', ')', 'return', 'len', '(', 'leaf_nodes', ')', 'def', 'count_leaf_nodes_helper', '(', 'self', ',', 'leaf_nodes', ')', ':', 'if', 'self', '.', 'children', '==', '[', ']', ':', 'leaf_nodes', '.', 'append', '(', 'self', ')', 'else', ':', 'for', 'child', 'in', 'self', '.', 'children', ':', 'child', '.', 'count_leaf_nodes_helper', '(', 'leaf_nodes', ')', 'tree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'add <data> at root'"", ')', 'print', '(', ""'add <data> below <data>'"", ')', 'print', '(', ""'count'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'add'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'Tree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'tree', '=', 'new_node', 'elif', 'suboperation', '==', ""'below'"", ':', 'position', '=', 'do', '[', '3', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'tree', 'is', 'not', 'None', ':', 'ref_node', '=', 'tree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'ref_node', '.', 'add', '(', 'new_node', ')', 'elif', 'operation', '==', ""'count'"", ':', 'if', 'tree', 'is', 'None', ':', 'print', '(', ""'Tree is empty.'"", ')', 'else', ':', 'count', '=', 'tree', '.', 'count_leaf_nodes', '(', ')', 'print', '(', ""'Number of leaf nodes: {}'"", '.', 'format', '(', 'count', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2502,"['python', 'program', 'create', 'class', 'compute', 'area', 'perimeter', 'circle']","['import', 'math', 'class', 'circle', '(', ')', ':', 'def', '__init__', '(', 'self', ',', 'radius', ')', ':', 'self', '.', 'radius', '=', 'radius', 'def', 'area', '(', 'self', ')', ':', 'return', 'math', '.', 'pi', '*', '(', 'self', '.', 'radius', '**', '2', ')', 'def', 'perimeter', '(', 'self', ')', ':', 'return', '2', '*', 'math', '.', 'pi', '*', 'self', '.', 'radius', 'r', '=', 'int', '(', 'input', '(', '""Enter radius of circle: ""', ')', ')', 'obj', '=', 'circle', '(', 'r', ')', 'print', '(', '""Area of circle:""', ',', 'round', '(', 'obj', '.', 'area', '(', ')', ',', '2', ')', ')', 'print', '(', '""Perimeter of circle:""', ',', 'round', '(', 'obj', '.', 'perimeter', '(', ')', ',', '2', ')', ')']"
2503,"['find', 'minimum', 'element', 'matrix']","['import', 'sys', 'row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'min', '=', 'sys', '.', 'maxsize', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '<=', 'min', ':', 'min', '=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""The Minimum element of the Given 2d array is: ""', ',', 'min', ')']"
2504,"['python', 'program', 'count', 'path', 'grid', 'hole', 'using', 'dynamic', 'programming', 'memoization']","['def', 'count_paths', '(', 'm', ',', 'n', ',', 'holes', ')', ':', '""""""Return number of paths from (0, 0) to (m, n) in an m x n grid.\n\xa0\n    holes is a list of tuples (x, y) where each tuple is a coordinate which is\n    blocked for a path.\n    """"""', 'paths', '=', '[', '[', '-', '1', ']', '*', '(', 'm', '+', '1', ')', 'for', '_', 'in', 'range', '(', 'n', '+', '1', ')', ']', 'return', 'count_paths_helper', '(', 'm', ',', 'n', ',', 'holes', ',', 'paths', ',', 'n', ',', 'm', ')', 'def', 'count_paths_helper', '(', 'm', ',', 'n', ',', 'holes', ',', 'paths', ',', 'x', ',', 'y', ')', ':', '""""""Return number of paths from (0, 0) to (x, y) in an m x n grid.\n\xa0\n    holes is a list of tuples (x, y) where each tuple is a coordinate which is\n    blocked for a path.\n\xa0\n    The function uses the table paths (implemented as a list of lists) where\n    paths[a][b] will store the number of paths from (0, 0) to (a, b).\n    """"""', 'if', 'paths', '[', 'x', ']', '[', 'y', ']', '>=', '0', ':', 'return', 'paths', '[', 'x', ']', '[', 'y', ']', 'if', '(', 'x', ',', 'y', ')', 'in', 'holes', ':', 'q', '=', '0', 'elif', 'x', '==', '0', 'and', 'y', '==', '0', ':', 'q', '=', '1', 'elif', 'x', '==', '0', ':', 'q', '=', 'count_paths_helper', '(', 'm', ',', 'n', ',', 'holes', ',', 'paths', ',', 'x', ',', 'y', '-', '1', ')', 'elif', 'y', '==', '0', ':', 'q', '=', 'count_paths_helper', '(', 'm', ',', 'n', ',', 'holes', ',', 'paths', ',', 'x', '-', '1', ',', 'y', ')', 'else', ':', 'q', '=', 'count_paths_helper', '(', 'm', ',', 'n', ',', 'holes', ',', 'paths', ',', 'x', '-', '1', ',', 'y', ')', '+', 'count_paths_helper', '(', 'm', ',', 'n', ',', 'holes', ',', 'paths', ',', 'x', ',', 'y', '-', '1', ')', 'paths', '[', 'x', ']', '[', 'y', ']', '=', 'q', 'return', 'q', 'm', ',', 'n', '=', 'input', '(', ""'Enter m, n for the size of the m x n grid (m rows and n columns): '"", ')', '.', 'split', '(', ""','"", ')', 'm', '=', 'int', '(', 'm', ')', 'n', '=', 'int', '(', 'n', ')', 'print', '(', ""'Enter the coordinates of holes on each line (empty line to stop): '"", ')', 'holes', '=', '[', ']', 'while', 'True', ':', 'hole', '=', 'input', '(', ""''"", ')', 'if', 'not', 'hole', '.', 'strip', '(', ')', ':', 'break', 'hole', '=', 'hole', '.', 'split', '(', ""','"", ')', 'hole', '=', '(', 'int', '(', 'hole', '[', '0', ']', ')', ',', 'int', '(', 'hole', '[', '1', ']', ')', ')', 'holes', '.', 'append', '(', 'hole', ')', 'count', '=', 'count_paths', '(', 'm', ',', 'n', ',', 'holes', ')', 'print', '(', ""'Number of paths from (0, 0) to ({}, {}): {}.'"", '.', 'format', '(', 'n', ',', 'm', ',', 'count', ')', ')']"
2505,"['check', 'whether', 'alphabet', 'vowel', 'consonant']","['alphabet', '=', 'input', '(', '""Enter an alphabet:""', ')', 'if', '(', 'alphabet', '==', ""'a'"", 'or', 'alphabet', '==', ""'A'"", 'or', 'alphabet', '==', ""'e'"", 'or', 'alphabet', '==', ""'E'"", 'or', 'alphabet', '==', ""'i'"", 'or', 'alphabet', '==', ""'I'"", 'or', 'alphabet', '==', ""'o'"", 'or', 'alphabet', '==', ""'O'"", 'or', 'alphabet', '==', ""'u'"", 'or', 'alphabet', '==', ""'U'"", ')', ':', 'print', '(', '""It is Vowel""', ')', 'else', ':', 'print', '(', '""It is Consonant""', ')']"
2506,"['program', 'check', 'whether', 'matrix', 'diagonal']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'point', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '!=', 'j', 'and', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', '0', ':', 'point', '=', '1', 'break', 'if', 'point', '==', '1', ':', 'print', '(', '""Given Matrix is not a diagonal Matrix.""', ')', 'else', ':', 'print', '(', '""Given Matrix is a diagonal Matrix.""', ')']"
2507,"['define', 'class', 'class', 'parameter', 'instance', 'parameter']","['class', 'Person', ':', 'name', '=', '""Person""', 'def', '__init__', '(', 'self', ',', 'name', '=', 'None', ')', ':', 'self', '.', 'name', '=', 'name', 'jeffrey', '=', 'Person', '(', '""Jeffrey""', ')', 'print', '""%s name is %s""', '%', '(', 'Person', '.', 'name', ',', 'jeffrey', '.', 'name', ')', 'nico', '=', 'Person', '(', ')', 'nico', '.', 'name', '=', '""Nico""', 'print', '""%s name is %s""', '%', '(', 'Person', '.', 'name', ',', 'nico', '.', 'name', ')']"
2508,"['find', 'smallest', 'digit', 'given', 'number']","[""'''Write a Python\nprogram\xa0to\xa0Find 2nd smallest digit in a given number. or\xa0Write a\nprogram\xa0to\xa0Find 2nd smallest digit in a given number using Python '''"", 'import', 'sys', 'print', '(', '""Enter the Number :""', ')', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'smallest', '=', 'sys', '.', 'maxsize', 'sec_smallest', '=', 'sys', '.', 'maxsize', 'while', 'num', '>', '0', ':', 'reminder', '=', 'num', '%', '10', 'if', 'smallest', '>=', 'reminder', ':', 'sec_smallest', '=', 'smallest', 'smallest', '=', 'reminder', 'elif', 'reminder', '<=', 'sec_smallest', ':', 'sec_smallest', '=', 'reminder', 'num', '=', 'num', '//', '10', 'print', '(', '""The Second Smallest Digit is ""', ',', 'sec_smallest', ')']"
2509,"['find', 'largest', 'digit', 'given', 'number']","[""'''Write a Python\nprogram\xa0to\xa0Find the 2nd largest digit in a given number. or\xa0Write a\nprogram\xa0to\xa0Find 2nd largest digit in a given number using Python '''"", 'print', '(', '""Enter the Number :""', ')', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'Largest', '=', '0', 'Sec_Largest', '=', '0', 'while', 'num', '>', '0', ':', 'reminder', '=', 'num', '%', '10', 'if', 'Largest', '<', 'reminder', ':', 'Sec_Largest', '=', 'Largest', 'Largest', '=', 'reminder', 'elif', 'reminder', '>=', 'Sec_Largest', ':', 'Sec_Largest', '=', 'reminder', 'num', '=', 'num', '//', '10', 'print', '(', '""The Second Largest Digit is :""', ',', 'Sec_Largest', ')']"
2510,"['division', 'two', 'number', 'operator', 'without', 'using', 'division', 'operator']","['num1', '=', 'int', '(', 'input', '(', '""Enter first number:""', ')', ')', 'num2', '=', 'int', '(', 'input', '(', '""Enter\xa0 second number:""', ')', ')', 'div', '=', '0', 'while', 'num1', '>=', 'num2', ':', 'num1', '=', 'num1', '-', 'num2', 'div', '+=', '1', 'print', '(', '""Division of two number is ""', ',', 'div', ')']"
2511,"['program', 'check', 'whether', 'matrix', 'symmetric']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'if', 'row_size', '!=', 'col_size', ':', 'print', '(', '""Given Matrix is not a Square Matrix.""', ')', 'else', ':', 'tran_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'tran_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'j', ']', '[', 'i', ']', 'flag', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', 'tran_matrix', '[', 'i', ']', '[', 'j', ']', ':', 'flag', '=', '1', 'break', 'if', 'flag', '==', '1', ':', 'print', '(', '""Given Matrix is not a symmetric Matrix.""', ')', 'else', ':', 'print', '(', '""Given Matrix is a symmetric Matrix.""', ')']"
2512,"['python', 'program', 'find', 'directed', 'graph', 'contains', 'cycle', 'using', 'dfs']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'is_cycle_present', '(', 'graph', ')', ':', '""""""Return True if cycle is present in the graph.""""""', 'on_stack', '=', 'set', '(', ')', 'visited', '=', 'set', '(', ')', 'for', 'v', 'in', 'graph', ':', 'if', 'v', 'not', 'in', 'visited', ':', 'if', 'is_cycle_present_helper', '(', 'v', ',', 'visited', ',', 'on_stack', ')', ':', 'return', 'True', 'return', 'False', 'def', 'is_cycle_present_helper', '(', 'v', ',', 'visited', ',', 'on_stack', ')', ':', '""""""Return True if the DFS traversal starting at vertex v detects a\n    cycle. Uses set visited to keep track of nodes that have been visited. Uses\n    set on_stack to keep track of nodes that are \'on the stack\' of the recursive\n    calls.""""""', 'if', 'v', 'in', 'on_stack', ':', 'return', 'True', 'on_stack', '.', 'add', '(', 'v', ')', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'if', 'dest', 'not', 'in', 'visited', ':', 'if', 'is_cycle_present_helper', '(', 'dest', ',', 'visited', ',', 'on_stack', ')', ':', 'return', 'True', 'on_stack', '.', 'remove', '(', 'v', ')', 'visited', '.', 'add', '(', 'v', ')', 'return', 'False', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <vertex1> <vertex2>'"", ')', 'print', '(', ""'cycle'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'v1', '=', 'int', '(', 'do', '[', '2', ']', ')', 'v2', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'v1', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'v1', ')', ')', 'elif', 'v2', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'v2', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'v1', ',', 'v2', ')', ':', 'g', '.', 'add_edge', '(', 'v1', ',', 'v2', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'cycle'"", ':', 'if', 'is_cycle_present', '(', 'g', ')', ':', 'print', '(', ""'Cycle present.'"", ')', 'else', ':', 'print', '(', ""'Cycle not present.'"", ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2513,"['check', 'one', 'array', 'subset', 'another', 'array']","['arr', '=', '[', ']', 'arr2', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the 1st array: ""', ')', ')', 'size2', '=', 'int', '(', 'input', '(', '""Enter the size of the 2nd array: ""', ')', ')', 'print', '(', '""Enter the Element of the 1st array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Enter the Element of the 2nd array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size2', ')', ':', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'arr2', '.', 'append', '(', 'num2', ')', 'count', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'size2', ')', ':', 'if', 'arr', '[', 'i', ']', '==', 'arr2', '[', 'j', ']', ':', 'count', '+=', '1', 'if', 'count', '==', 'size2', ':', 'print', '(', '""Array two is a subset of array one.""', ')', 'else', ':', 'print', '(', '""Array two is not a subset of array one.""', ')']"
2514,"['selection', 'sort', 'program', 'python', 'java', 'c', 'c']","['size', '=', 'int', '(', 'input', '(', '""Enter the size of the array:""', ')', ')', ';', 'arr', '=', '[', ']', 'print', '(', '""Enter the element of the array:""', ')', ';', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Before Sorting Array Elements are: ""', ',', 'arr', ')', 'for', 'out', 'in', 'range', '(', '0', ',', 'size', '-', '1', ')', ':', 'min', '=', 'out', 'for', 'inn', 'in', 'range', '(', 'out', '+', '1', ',', 'size', ')', ':', 'if', 'arr', '[', 'inn', ']', '<', 'arr', '[', 'min', ']', ':', 'min', '=', 'inn', 'temp', '=', 'arr', '[', 'out', ']', 'arr', '[', 'out', ']', '=', 'arr', '[', 'min', ']', 'arr', '[', 'min', ']', '=', 'temp', 'print', '(', '""\\nAfter Sorting Array Elements are: ""', ',', 'arr', ')']"
2515,"['program', 'print', 'half', 'pyramid', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', '+', '1', ')', ':', 'for', 'i', 'in', 'range', '(', '1', ',', 'out', '+', '1', ')', ':', 'print', '(', 'i', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2516,"['longest', 'palindromic', 'substring', 'string']","['def', 'reverse', '(', 's', ')', ':', 'str', '=', '""""', 'for', 'i', 'in', 's', ':', 'str', '=', 'i', '+', 'str', 'return', 'strstr', '=', 'input', '(', '""Enter Your String:""', ')', 'sub_str', '=', 'str', '.', 'split', '(', '"" ""', ')', 'sub_str1', '=', '[', ']', 'p', '=', '0', 'flag', '=', '0', 'maxInd', '=', '0', 'max', '=', '0', 'str_rev', '=', '""""', 'print', '(', '""Palindrome Substring are:""', ')', 'for', 'inn', 'in', 'range', '(', 'len', '(', 'sub_str', ')', ')', ':', 'str_rev', '=', 'sub_str', '[', 'inn', ']', 'if', 'reverse', '(', 'str_rev', ')', '.', '__eq__', '(', 'sub_str', '[', 'inn', ']', ')', ':', 'sub_str1', '.', 'append', '(', 'sub_str', '[', 'inn', ']', ')', 'print', '(', 'sub_str1', '[', 'p', ']', ')', 'p', '+=', '1', 'flag', '=', '1', 'len2', '=', 'pif', 'flag', '==', '1', ':', 'max', '=', 'len', '(', 'sub_str1', '[', '0', ']', ')', 'for', 'inn', 'in', 'range', '(', '0', ',', 'len2', ')', ':', 'len1', '=', 'len', '(', 'sub_str1', '[', 'inn', ']', ')', 'if', 'len1', '>', 'max', ':', 'max', '=', 'len1', 'maxInd', '=', 'inn', 'print', '(', '""Longest palindrome Substring is ""', ',', 'sub_str1', '[', 'maxInd', ']', ')', 'else', ':', 'print', '(', '""No palindrome Found""', ')']"
2517,"['program', 'convert', 'binary', 'hexadecimal']","['print', '(', '""Enter a binary number:""', ')', 'binary', '=', 'input', '(', ')', 'if', '(', 'len', '(', 'binary', ')', '%', '4', '==', '1', ')', ':', 'binary', '=', '""000""', '+', 'binary', 'if', '(', 'len', '(', 'binary', ')', '%', '4', '==', '2', ')', ':', 'binary', '=', '""00""', '+', 'binary', 'if', '(', 'len', '(', 'binary', ')', '%', '4', '==', '3', ')', ':', 'binary', '=', '""0""', '+', 'binary', 'hex', '=', '""""', 'len', '=', 'int', '(', 'len', '(', 'binary', ')', '/', '4', ')', 'print', '(', '""len:""', ',', 'len', ')', 'i', '=', '0', 'j', '=', '0', 'k', '=', '4', 'decimal', '=', '0', 'while', '(', 'i', '<', 'len', ')', ':', 'st', '=', 'binary', '[', 'j', ':', 'k', ']', 'bin', '=', 'int', '(', 'st', ')', 'temp', '=', '0', 'remainder', '=', '0', 'decimal', '=', '0', 'while', '(', 'bin', '!=', '0', ')', ':', 'remainder', '=', 'bin', '%', '10', 'bin', '=', 'bin', '//', '10', 'decimal', '=', 'decimal', '+', 'remainder', '*', 'pow', '(', '2', ',', 'temp', ')', 'temp', '=', 'temp', '+', '1', 'if', 'decimal', '==', '15', ':', 'hex', '=', 'hex', '+', '""F""', 'elif', 'decimal', '==', '14', ':', 'hex', '=', 'hex', '+', '""E""', 'elif', 'decimal', '==', '13', ':', 'hex', '=', 'hex', '+', '""D""', 'elif', 'decimal', '==', '12', ':', 'hex', '=', 'hex', '+', '""C""', 'elif', 'decimal', '==', '11', ':', 'hex', '=', 'hex', '+', '""B""', 'elif', 'decimal', '==', '10', ':', 'hex', '=', 'hex', '+', '""A""', 'else', ':', 'hex', '=', 'hex', '+', 'str', '(', 'decimal', ')', 'j', '=', 'k', 'k', '=', 'k', '+', '4', 'i', '=', 'i', '+', '1', 'print', '(', '""Binary to HexaDecimal is ""', ',', 'hex', ')']"
2518,"['program', 'print', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number(Limit):""', ')', ')', 'i', '=', '1', 'pr', '=', '0', 'while', 'i', '<=', 'n', ':', 'pr', '=', '(', 'pr', '*', '2', ')', '+', '1', 'print', '(', 'pr', ',', 'end', '=', '"" ""', ')', 'i', '+=', '1']"
2519,"['program', 'print', 'series', 'n']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number(Limit):""', ')', ')', 'i', '=', '1', 'pr', '=', '0', 'while', 'i', '<=', 'n', ':', 'if', '(', 'i', '%', '2', '==', '0', ')', ':', 'pr', '=', 'pow', '(', 'i', ',', '2', ')', '-', '2', 'print', '(', 'pr', ',', 'end', '=', '"" ""', ')', 'else', ':', 'pr', '=', 'pow', '(', 'i', ',', '2', ')', '-', '1', 'print', '(', 'pr', ',', 'end', '=', '"" ""', ')', 'i', '+=', '1']"
2520,"['binary', 'decimal', 'conversion', 'using', 'recursion']","['def', 'BinaryToDecimal', '(', 'n', ')', ':', 'if', 'n', '==', '0', ':', 'return', '0', 'else', ':', 'return', '(', 'n', '%', '10', '+', '2', '*', 'BinaryToDecimal', '(', 'n', '//', '10', ')', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter the Binary Value:""', ')', ')', 'print', '(', '""Decimal Value of Binary number is:""', ',', 'BinaryToDecimal', '(', 'n', ')', ')']"
2521,"['maximum', 'difference', 'two', 'element', 'array']","['import', 'sysarr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'Max_diff', '=', '-', 'sys', '.', 'maxsize', '-', '1', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', '-', '1', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ',', 'size', ')', ':', 'if', 'abs', '(', 'arr', '[', 'j', ']', '-', 'arr', '[', 'i', ']', ')', '>', 'Max_diff', ':', 'Max_diff', '=', 'abs', '(', 'arr', '[', 'j', ']', '-', 'arr', '[', 'i', ']', ')', 'print', '(', '""Maximum difference between two Element is ""', ',', 'Max_diff', ')']"
2522,"['python', 'program', 'illustrate', 'operation', 'singly', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'def', 'get_node', '(', 'self', ',', 'index', ')', ':', 'current', '=', 'self', '.', 'head', 'for', 'i', 'in', 'range', '(', 'index', ')', ':', 'if', 'current', 'is', 'None', ':', 'return', 'None', 'current', '=', 'current', '.', 'next', 'return', 'current', 'def', 'get_prev_node', '(', 'self', ',', 'ref_node', ')', ':', 'current', '=', 'self', '.', 'head', 'while', '(', 'current', 'and', 'current', '.', 'next', '!=', 'ref_node', ')', ':', 'current', '=', 'current', '.', 'next', 'return', 'current', 'def', 'insert_after', '(', 'self', ',', 'ref_node', ',', 'new_node', ')', ':', 'new_node', '.', 'next', '=', 'ref_node', '.', 'next', 'ref_node', '.', 'next', '=', 'new_node', 'def', 'insert_before', '(', 'self', ',', 'ref_node', ',', 'new_node', ')', ':', 'prev_node', '=', 'self', '.', 'get_prev_node', '(', 'ref_node', ')', 'self', '.', 'insert_after', '(', 'prev_node', ',', 'new_node', ')', 'def', 'insert_at_beg', '(', 'self', ',', 'new_node', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_node', 'else', ':', 'new_node', '.', 'next', '=', 'self', '.', 'head', 'self', '.', 'head', '=', 'new_node', 'def', 'insert_at_end', '(', 'self', ',', 'new_node', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_node', 'else', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', '.', 'next', 'is', 'not', 'None', ':', 'current', '=', 'current', '.', 'next', 'current', '.', 'next', '=', 'new_node', 'def', 'remove', '(', 'self', ',', 'node', ')', ':', 'prev_node', '=', 'self', '.', 'get_prev_node', '(', 'node', ')', 'if', 'prev_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'self', '.', 'head', '.', 'next', 'else', ':', 'prev_node', '.', 'next', '=', 'node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'a_llist', '=', 'LinkedList', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'insert <data> after <index>'"", ')', 'print', '(', ""'insert <data> before <index>'"", ')', 'print', '(', ""'insert <data> at beg'"", ')', 'print', '(', ""'insert <data> at end'"", ')', 'print', '(', ""'remove <index>'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'print', '(', ""'The list: '"", ',', 'end', '=', ""''"", ')', 'a_llist', '.', 'display', '(', ')', 'print', '(', ')', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'position', '=', 'do', '[', '3', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'new_node', '=', 'Node', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'if', 'position', '==', ""'beg'"", ':', 'a_llist', '.', 'insert_at_beg', '(', 'new_node', ')', 'elif', 'position', '==', ""'end'"", ':', 'a_llist', '.', 'insert_at_end', '(', 'new_node', ')', 'else', ':', 'index', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'a_llist', '.', 'get_node', '(', 'index', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such index.'"", ')', 'continue', 'if', 'suboperation', '==', ""'after'"", ':', 'a_llist', '.', 'insert_after', '(', 'ref_node', ',', 'new_node', ')', 'elif', 'suboperation', '==', ""'before'"", ':', 'a_llist', '.', 'insert_before', '(', 'ref_node', ',', 'new_node', ')', 'elif', 'operation', '==', ""'remove'"", ':', 'index', '=', 'int', '(', 'do', '[', '1', ']', ')', 'node', '=', 'a_llist', '.', 'get_node', '(', 'index', ')', 'if', 'node', 'is', 'None', ':', 'print', '(', ""'No such index.'"", ')', 'continue', 'a_llist', '.', 'remove', '(', 'node', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2523,"['program', 'print', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number(Limit):""', ')', ')', 'i', '=', '1', 'pr', '=', '6', 'diff', '=', '5', 'while', 'i', '<=', 'n', ':', 'print', '(', 'pr', ',', 'end', '=', '"" ""', ')', 'pr', '=', 'pr', '+', 'diff', 'diff', '=', 'diff', '+', '5', 'i', '+=', '1']"
2524,"['python', 'program', 'find', 'total', 'sum', 'nested', 'list', 'using', 'recursion']","['def', 'sum1', '(', 'lst', ')', ':', 'total', '=', '0', 'for', 'element', 'in', 'lst', ':', 'if', '(', 'type', '(', 'element', ')', '==', 'type', '(', '[', ']', ')', ')', ':', 'total', '=', 'total', '+', 'sum1', '(', 'element', ')', 'else', ':', 'total', '=', 'total', '+', 'element', 'return', 'total', 'print', '(', '""Sum is:""', ',', 'sum1', '(', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', ')', ')']"
2525,"['program', 'print', 'full', 'pyramid', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'np', '=', '1', 'for', 'out', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'in1', 'in', 'range', '(', 'row_size', '-', '1', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'in2', 'in', 'range', '(', '0', ',', 'np', ')', ':', 'print', '(', 'np', ',', 'end', '=', '""""', ')', 'np', '+=', '2', 'print', '(', '""\\r""', ')']"
2526,"['write', 'program', 'find', 'number', 'included', 'digit', 'number', 'even', 'number', 'number', 'obtained', 'printed', 'commaseparated', 'sequence', 'single', 'line']","['values', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '1000', ',', '3001', ')', ':', 's', '=', 'str', '(', 'i', ')', 'if', '(', 'int', '(', 's', '[', '0', ']', ')', '%', '2', '==', '0', ')', 'and', '(', 'int', '(', 's', '[', '1', ']', ')', '%', '2', '==', '0', ')', 'and', '(', 'int', '(', 's', '[', '2', ']', ')', '%', '2', '==', '0', ')', 'and', '(', 'int', '(', 's', '[', '3', ']', ')', '%', '2', '==', '0', ')', ':', 'values', '.', 'append', '(', 's', ')', 'print', '"",""', '.', 'join', '(', 'values', ')']"
2527,"['check', 'whether', 'two', 'string', 'equal']","['str', '=', 'input', '(', '""Enter the 1st String:""', ')', 'str1', '=', 'input', '(', '""Enter the 2nd String:""', ')', 'if', '(', 'len', '(', 'str', ')', '==', 'len', '(', 'str1', ')', ')', ':', 'print', '(', '""Two strings are equal.""', ')', 'else', ':', 'print', '(', '""Two strings are not equal.""', ')']"
2528,"['program', 'print', 'alphabet', 'inverted', 'half', 'pyramid', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', 'row_size', '=', 'input', '(', ')', 'for', 'out', 'in', 'range', '(', 'ord', '(', 'row_size', ')', ',', 'ord', '(', ""'A'"", ')', '-', '1', ',', '-', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'ord', '(', 'row_size', ')', '-', '1', ',', 'out', '-', '1', ',', '-', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'out', '+', '1', ')', ':', 'print', '(', 'chr', '(', 'p', ')', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2529,"['please', 'write', 'program', 'randomly', 'print', 'integer', 'number', 'inclusive']","['import', 'random', 'print', 'random', '.', 'randrange', '(', '7', ',', '16', ')']"
2530,"['python', 'program', 'check', 'whether', 'given', 'year', 'leap', 'year']","['year', '=', 'int', '(', 'input', '(', '""Enter year to be checked:""', ')', ')', 'if', '(', 'year', '%', '4', '==', '0', 'and', 'year', '%', '100', '!=', '0', 'or', 'year', '%', '400', '==', '0', ')', ':', 'print', '(', 'The', 'year', 'is', 'a', 'leap', 'year', ')', 'else', ':', 'print', '(', 'The', 'year', 'isn', 't', 'a', 'leap', 'year', ')']"
2531,"['python', 'program', 'find', 'longest', 'common', 'subsequence', 'using', 'dynamic', 'programming', 'bottomup', 'approach']","['def', 'lcs', '(', 'u', ',', 'v', ')', ':', '""""""Return c where c[i][j] contains length of LCS of u[i:] and v[j:].""""""', 'c', '=', '[', '[', '-', '1', ']', '*', '(', 'len', '(', 'v', ')', '+', '1', ')', 'for', '_', 'in', 'range', '(', 'len', '(', 'u', ')', '+', '1', ')', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'u', ')', '+', '1', ')', ':', 'c', '[', 'i', ']', '[', 'len', '(', 'v', ')', ']', '=', '0', 'for', 'j', 'in', 'range', '(', 'len', '(', 'v', ')', ')', ':', 'c', '[', 'len', '(', 'u', ')', ']', '[', 'j', ']', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'u', ')', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'v', ')', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'if', 'u', '[', 'i', ']', '==', 'v', '[', 'j', ']', ':', 'c', '[', 'i', ']', '[', 'j', ']', '=', '1', '+', 'c', '[', 'i', '+', '1', ']', '[', 'j', '+', '1', ']', 'else', ':', 'c', '[', 'i', ']', '[', 'j', ']', '=', 'max', '(', 'c', '[', 'i', '+', '1', ']', '[', 'j', ']', ',', 'c', '[', 'i', ']', '[', 'j', '+', '1', ']', ')', 'return', 'c', 'def', 'print_lcs', '(', 'u', ',', 'v', ',', 'c', ')', ':', '""""""Print one LCS of u and v using table c.""""""', 'i', '=', 'j', '=', '0', 'while', 'not', '(', 'i', '==', 'len', '(', 'u', ')', 'or', 'j', '==', 'len', '(', 'v', ')', ')', ':', 'if', 'u', '[', 'i', ']', '==', 'v', '[', 'j', ']', ':', 'print', '(', 'u', '[', 'i', ']', ',', 'end', '=', ""''"", ')', 'i', '+=', '1', 'j', '+=', '1', 'elif', 'c', '[', 'i', ']', '[', 'j', '+', '1', ']', '>', 'c', '[', 'i', '+', '1', ']', '[', 'j', ']', ':', 'j', '+=', '1', 'else', ':', 'i', '+=', '1', 'u', '=', 'input', '(', ""'Enter first string: '"", ')', 'v', '=', 'input', '(', ""'Enter second string: '"", ')', 'c', '=', 'lcs', '(', 'u', ',', 'v', ')', 'print', '(', ""'Longest Common Subsequence: '"", ',', 'end', '=', ""''"", ')', 'print_lcs', '(', 'u', ',', 'v', ',', 'c', ')']"
2532,"['write', 'program', 'print', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', 'row_size', '=', 'int', '(', 'input', '(', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '0', ',', '-', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'row_size', ',', '0', ',', '-', '1', ')', ':', 'print', '(', 'i', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2533,"['python', 'program', 'determine', 'many', 'time', 'given', 'letter', 'occurs', 'string', 'recursively']","['def', 'check', '(', 'string', ',', 'ch', ')', ':', 'if', 'not', 'string', ':', 'return', '0', 'elif', 'string', '[', '0', ']', '==', 'ch', ':', 'return', '1', '+', 'check', '(', 'string', '[', '1', ':', ']', ',', 'ch', ')', 'else', ':', 'return', 'check', '(', 'string', '[', '1', ':', ']', ',', 'ch', ')', 'string', '=', 'raw_input', '(', '""Enter string:""', ')', 'ch', '=', 'raw_input', '(', '""Enter character to check:""', ')', 'print', '(', '""Count is:""', ')', 'print', '(', 'check', '(', 'string', ',', 'ch', ')', ')']"
2534,"['check', 'whether', 'given', 'character', 'upper', 'case', 'lower', 'case', 'number', 'special', 'character']","['ch', '=', 'input', '(', '""Enter a character:""', ')', 'if', '(', 'ch', '>=', ""'a'"", 'and', 'ch', '<=', ""'z'"", ')', ':', 'print', '(', '""The character is lower case""', ')', 'elif', '(', 'ch', '>=', ""'A'"", 'and', 'ch', '<=', ""'Z'"", ')', ':', 'print', '(', '""The character is upper case""', ')', 'elif', '(', 'ch', '>=', ""'0'"", 'and', 'ch', '<=', ""'9'"", ')', ':', 'print', '(', '""The character is number""', ')', 'else', ':', 'print', '(', '""It is a special character""', ')']"
2535,"['write', 'program', 'map', 'filter', 'make', 'list', 'whose', 'element', 'square', 'even', 'number']","['Solution', 'li', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', 'evenNumbers', '=', 'map', '(', 'lambda', 'x', ':', 'x', '**', '2', ',', 'filter', '(', 'lambda', 'x', ':', 'x', '%', '2', '==', '0', ',', 'li', ')', ')', 'print', 'evenNumbers']"
2536,"['program', 'find', 'gcd', 'hcf', 'two', 'number']","['print', '(', '""Enter two number to find G.C.D""', ')', 'num1', '=', 'int', '(', 'input', '(', ')', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'while', '(', 'num1', '!=', 'num2', ')', ':', 'if', '(', 'num1', '>', 'num2', ')', ':', 'num1', '=', 'num1', '-', 'num2', 'else', ':', 'num2', '=', 'num2', '-', 'num1', 'print', '(', '""G.C.D is""', ',', 'num1', ')']"
2537,"['python', 'program', 'solve', 'fractional', 'knapsack', 'problem', 'using', 'greedy', 'algorithm']","['def', 'fractional_knapsack', '(', 'value', ',', 'weight', ',', 'capacity', ')', ':', '""""""Return maximum value of items and their fractional amounts.\n\xa0\n    (max_value, fractions) is returned where max_value is the maximum value of\n    items with total weight not more than capacity.\n    fractions is a list where fractions[i] is the fraction that should be taken\n    of item i, where 0 <= i < total number of items.\n\xa0\n    value[i] is the value of item i and weight[i] is the weight of item i\n    for 0 <= i < n where n is the number of items.\n\xa0\n    capacity is the maximum weight.\n    """"""', 'index', '=', 'list', '(', 'range', '(', 'len', '(', 'value', ')', ')', ')', 'ratio', '=', '[', 'v', '/', 'w', 'for', 'v', ',', 'w', 'in', 'zip', '(', 'value', ',', 'weight', ')', ']', 'index', '.', 'sort', '(', 'key', '=', 'lambda', 'i', ':', 'ratio', '[', 'i', ']', ',', 'reverse', '=', 'True', ')', 'max_value', '=', '0', 'fractions', '=', '[', '0', ']', '*', 'len', '(', 'value', ')', 'for', 'i', 'in', 'index', ':', 'if', 'weight', '[', 'i', ']', '<=', 'capacity', ':', 'fractions', '[', 'i', ']', '=', '1', 'max_value', '+=', 'value', '[', 'i', ']', 'capacity', '-=', 'weight', '[', 'i', ']', 'else', ':', 'fractions', '[', 'i', ']', '=', 'capacity', '/', 'weight', '[', 'i', ']', 'max_value', '+=', 'value', '[', 'i', ']', '*', 'capacity', '/', 'weight', '[', 'i', ']', 'break', 'return', 'max_value', ',', 'fractions', 'n', '=', 'int', '(', 'input', '(', ""'Enter number of items: '"", ')', ')', 'value', '=', 'input', '(', ""'Enter the values of the {} item(s) in order: '"", '.', 'format', '(', 'n', ')', ')', '.', 'split', '(', ')', 'value', '=', '[', 'int', '(', 'v', ')', 'for', 'v', 'in', 'value', ']', 'weight', '=', 'input', '(', ""'Enter the positive weights of the {} item(s) in order: '"", '.', 'format', '(', 'n', ')', ')', '.', 'split', '(', ')', 'weight', '=', '[', 'int', '(', 'w', ')', 'for', 'w', 'in', 'weight', ']', 'capacity', '=', 'int', '(', 'input', '(', ""'Enter maximum weight: '"", ')', ')', 'max_value', ',', 'fractions', '=', 'fractional_knapsack', '(', 'value', ',', 'weight', ',', 'capacity', ')', 'print', '(', ""'The maximum value of items that can be carried:'"", ',', 'max_value', ')', 'print', '(', ""'The fractions in which the items should be taken:'"", ',', 'fractions', ')']"
2538,"['shortest', 'palindromic', 'substring', 'string']","['def', 'reverse', '(', 's', ')', ':', 'str', '=', '""""', 'for', 'i', 'in', 's', ':', 'str', '=', 'i', '+', 'str', 'return', 'strstr', '=', 'input', '(', '""Enter Your String:""', ')', 'sub_str', '=', 'str', '.', 'split', '(', '"" ""', ')', 'sub_str1', '=', '[', ']', 'p', '=', '0', 'flag', '=', '0', 'minInd', '=', '0', 'min', '=', '0', 'str_rev', '=', '""""', 'print', '(', '""Palindrome Substrings are:""', ')', 'for', 'inn', 'in', 'range', '(', 'len', '(', 'sub_str', ')', ')', ':', 'str_rev', '=', 'sub_str', '[', 'inn', ']', 'if', 'reverse', '(', 'str_rev', ')', '.', '__eq__', '(', 'sub_str', '[', 'inn', ']', ')', ':', 'sub_str1', '.', 'append', '(', 'sub_str', '[', 'inn', ']', ')', 'print', '(', 'sub_str1', '[', 'p', ']', ')', 'p', '+=', '1', 'flag', '=', '1', 'len2', '=', 'pif', 'flag', '==', '1', ':', 'min', '=', 'len', '(', 'sub_str1', '[', '0', ']', ')', 'for', 'inn', 'in', 'range', '(', '0', ',', 'len2', ')', ':', 'len1', '=', 'len', '(', 'sub_str1', '[', 'inn', ']', ')', 'if', 'len1', '<', 'min', ':', 'min', '=', 'len1', 'minInd', '=', 'inn', 'print', '(', '""Smallest palindrome Substring is ""', ',', 'sub_str1', '[', 'minInd', ']', ')', 'else', ':', 'print', '(', '""No palindrome Found""', ')']"
2539,"['count', 'number', 'uppercase', 'letter', 'string', 'using', 'recursion']","['count', '=', '0', 'def', 'NumberOfUpperCase', '(', 'str', ',', 'i', ')', ':', 'global', 'count', 'if', '(', 'str', '[', 'i', ']', '>=', ""'A'"", 'and', 'str', '[', 'i', ']', '<=', ""'Z'"", ')', ':', 'count', '+=', '1', 'if', '(', 'i', '>', '0', ')', ':', 'NumberOfUpperCase', '(', 'str', ',', 'i', '-', '1', ')', 'return', 'countstr', '=', 'input', '(', '""Enter your String:""', ')', 'NoOfUppercase', '=', 'NumberOfUpperCase', '(', 'str', ',', 'len', '(', 'str', ')', '-', '1', ')', 'if', '(', 'NoOfUppercase', '==', '0', ')', ':', 'print', '(', '""No UpperCase Letter present in a given string.""', ')', 'else', ':', 'print', '(', '""Number Of UpperCase Letter Present in a given String is:""', ',', 'NoOfUppercase', ')']"
2540,"['bidirectional', 'bubble', 'sort', 'program', 'python', 'java', 'c', 'c']","['size', '=', 'int', '(', 'input', '(', '""Enter the size of the array:""', ')', ')', ';', 'arr', '=', '[', ']', 'print', '(', '""Enter the element of the array:""', ')', ';', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Before Sorting Array Element are: ""', ',', 'arr', ')', 'low', '=', '0', 'high', '=', 'size', '-', '1', 'while', 'low', '<', 'high', ':', 'for', 'inn', 'in', 'range', '(', 'low', ',', 'high', ')', ':', 'if', 'arr', '[', 'inn', ']', '>', 'arr', '[', 'inn', '+', '1', ']', ':', 'temp', '=', 'arr', '[', 'inn', ']', 'arr', '[', 'inn', ']', '=', 'arr', '[', 'inn', '+', '1', ']', 'arr', '[', 'inn', '+', '1', ']', '=', 'temp', 'high', '-=', '1', 'for', 'inn', 'in', 'range', '(', 'high', ',', 'low', ',', '-', '1', ')', ':', 'if', 'arr', '[', 'inn', ']', '<', 'arr', '[', 'inn', '-', '1', ']', ':', 'temp', '=', 'arr', '[', 'inn', ']', 'arr', '[', 'inn', ']', '=', 'arr', '[', 'inn', '-', '1', ']', 'arr', '[', 'inn', '-', '1', ']', '=', 'temp', 'low', '+=', '1', 'print', '(', '""\\nAfter Sorting Array Element are: ""', ',', 'arr', ')']"
2541,"['print', 'mark', 'obtained', 'student', 'five', 'test']","['import', 'arrayarr', '=', 'array', '.', 'array', '(', ""'i'"", ',', '[', '95', ',', '88', ',', '77', ',', '45', ',', '69', ']', ')', 'print', '(', '""Marks obtained by a student in five tests are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', '5', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')']"
2542,"['check', 'two', 'array', 'equal']","['arr', '=', '[', ']', 'arr2', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the 1st array: ""', ')', ')', 'size2', '=', 'int', '(', 'input', '(', '""Enter the size of the 2nd array: ""', ')', ')', 'print', '(', '""Enter the Element of the 1st array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Enter the Element of the 2nd array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size2', ')', ':', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'arr2', '.', 'append', '(', 'num2', ')', 'arr', '.', 'sort', '(', ')', 'arr2', '.', 'sort', '(', ')', 'flag', '=', '1', 'if', 'size', '!=', 'size2', ':', 'flag', '=', '0', 'else', ':', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '!=', 'arr2', '[', 'i', ']', ':', 'flag', '=', '0', 'if', 'flag', '==', '0', ':', 'print', '(', '""Not same....""', ')', 'else', ':', 'print', '(', '""same....""', ')']"
2543,"['python', 'program', 'print', 'nth', 'fibonacci', 'number', 'using', 'dynamic', 'programming', 'memoization']","['def', 'fibonacci', '(', 'n', ')', ':', '""""""Return the nth Fibonacci number.""""""', 'r', '=', '[', '-', '1', ']', '*', '(', 'n', '+', '1', ')', 'return', 'fibonacci_helper', '(', 'n', ',', 'r', ')', 'def', 'fibonacci_helper', '(', 'n', ',', 'r', ')', ':', '""""""Return the nth Fibonacci number and store the ith Fibonacci number in\n    r[i] for 0 <= i <= n.""""""', 'if', 'r', '[', 'n', ']', '>=', '0', ':', 'return', 'r', '[', 'n', ']', 'if', '(', 'n', '==', '0', 'or', 'n', '==', '1', ')', ':', 'q', '=', 'n', 'else', ':', 'q', '=', 'fibonacci_helper', '(', 'n', '-', '1', ',', 'r', ')', '+', 'fibonacci_helper', '(', 'n', '-', '2', ',', 'r', ')', 'r', '[', 'n', ']', '=', 'q', 'return', 'q', 'n', '=', 'int', '(', 'input', '(', ""'Enter n: '"", ')', ')', 'ans', '=', 'fibonacci', '(', 'n', ')', 'print', '(', ""'The nth Fibonacci number:'"", ',', 'ans', ')']"
2544,"['convert', 'decimal', 'binary', 'using', 'recursion']","['def', 'DecimalToBinary', '(', 'n', ')', ':', 'if', 'n', '==', '0', ':', 'return', '0', 'else', ':', 'return', '(', 'n', '%', '2', '+', '10', '*', 'DecimalToBinary', '(', 'n', '//', '2', ')', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter the Decimal Value:""', ')', ')', 'print', '(', '""Binary Value of Decimal number is:""', ',', 'DecimalToBinary', '(', 'n', ')', ')']"
2545,"['python', 'program', 'read', 'number', 'n', 'compute', 'nnnnnn']","['n', '=', 'int', '(', 'input', '(', '""Enter a number n: ""', ')', ')', 'temp', '=', 'str', '(', 'n', ')', 't1', '=', 'temp', '+', 'temp', 't2', '=', 'temp', '+', 'temp', '+', 'temp', 'comp', '=', 'n', '+', 'int', '(', 't1', ')', '+', 'int', '(', 't2', ')', 'print', '(', '""The value is:""', ',', 'comp', ')']"
2546,"['python', 'program', 'print', 'number', 'range', 'divisible', 'given', 'number']","['lower', '=', 'int', '(', 'input', '(', '""Enter lower range limit:""', ')', ')', 'upper', '=', 'int', '(', 'input', '(', '""Enter upper range limit:""', ')', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter the number to be divided by:""', ')', ')', 'for', 'i', 'in', 'range', '(', 'lower', ',', 'upper', '+', '1', ')', ':', 'if', '(', 'i', '%', 'n', '==', '0', ')', ':', 'print', '(', 'i', ')']"
2547,"['program', 'convert', 'decimal', 'octal', 'using', 'loop']","['sem', '=', '1', 'octal', '=', '0', 'print', '(', '""Enter the Decimal Number:""', ')', 'number', '=', 'int', '(', 'input', '(', ')', ')', 'while', '(', 'number', '!=', '0', ')', ':', 'octal', '=', 'octal', '+', '(', 'number', '%', '8', ')', '*', 'sem', 'number', '=', 'number', '//', '8', 'sem', '=', 'int', '(', 'sem', '*', '10', ')', 'print', '(', '""Octal Number is ""', ',', 'octal', ')']"
2548,"['python', 'program', 'determine', 'pythagorean', 'triplet', 'range']","['limit', '=', 'int', '(', 'input', '(', '""Enter upper limit:""', ')', ')', 'c', '=', '0', 'm', '=', '2', 'while', '(', 'c', '<', 'limit', ')', ':', 'for', 'n', 'in', 'range', '(', '1', ',', 'm', '+', '1', ')', ':', 'a', '=', 'm', '*', 'm', '-', 'n', '*', 'n', 'b', '=', '2', '*', 'm', '*', 'n', 'c', '=', 'm', '*', 'm', '+', 'n', '*', 'n', 'if', '(', 'c', '>', 'limit', ')', ':', 'break', 'if', '(', 'a', '==', '0', 'or', 'b', '==', '0', 'or', 'c', '==', '0', ')', ':', 'break', 'print', '(', 'a', ',', 'b', ',', 'c', ')', 'm', '=', 'm', '+', '1']"
2549,"['program', 'print', 'solid', 'half', 'diamond', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '-', '(', 'row_size', '+', '1', ')', ',', '-', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', 'row_size', ',', 'abs', '(', 'out', ')', '-', '1', ',', '-', '1', ')', ':', 'print', '(', 'inn', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2550,"['check', 'whether', 'number', 'evil', 'number']","['num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'one_c', '=', '0', 'while', 'num', '!=', '0', ':', 'if', 'num', '%', '2', '==', '1', ':', 'one_c', '+=', '1', 'num', '//=', '2', 'if', 'one_c', '%', '2', '==', '0', ':', 'print', '(', '""It is an Evil Number.""', ')', 'else', ':', 'print', '(', '""It is Not an Evil Number.""', ')']"
2551,"['check', 'given', 'number', 'automorphic', 'number', 'using', 'recursion']","['def', 'check_AutomorphicNumber', '(', 'num', ')', ':', 'sqr', '=', 'num', '*', 'num', 'if', '(', 'num', '>', '0', ')', ':', 'if', '(', 'num', '%', '10', '!=', 'sqr', '%', '10', ')', ':', 'return', '-', '1', 'else', ':', 'check_AutomorphicNumber', '(', 'num', '//', '10', ')', 'return', '0', 'return', '0', 'num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'if', '(', 'check_AutomorphicNumber', '(', 'num', ')', '==', '0', ')', ':', 'print', '(', '""It is an Automorphic Number.""', ')', 'else', ':', 'print', '(', '""It is not an Automorphic Number.""', ')']"
2552,"['python', 'program', 'read', 'text', 'file', 'print', 'number', 'present', 'text', 'file']","['fname', '=', 'input', '(', '""Enter file name: ""', ')', 'with', 'open', '(', 'fname', ',', ""'r'"", ')', 'as', 'f', ':', 'for', 'line', 'in', 'f', ':', 'words', '=', 'line', '.', 'split', '(', ')', 'for', 'i', 'in', 'words', ':', 'for', 'letter', 'in', 'i', ':', 'if', '(', 'letter', '.', 'isdigit', '(', ')', ')', ':', 'print', '(', 'letter', ')']"
2553,"['python', 'program', 'find', 'number', 'divisible', 'multiple', 'given', 'range', 'number']","['lower', '=', 'int', '(', 'input', '(', '""Enter the lower range:""', ')', ')', 'upper', '=', 'int', '(', 'input', '(', '""Enter the upper range:""', ')', ')', 'for', 'i', 'in', 'range', '(', 'lower', ',', 'upper', '+', '1', ')', ':', 'if', '(', 'i', '%', '7', '==', '0', 'and', 'i', '%', '5', '==', '0', ')', ':', 'print', '(', 'i', ')']"
2554,"['python', 'program', 'check', 'whether', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'is_equal', '(', 'llist1', ',', 'llist2', ')', ':', 'current1', '=', 'llist1', '.', 'head', 'current2', '=', 'llist2', '.', 'head', 'while', '(', 'current1', 'and', 'current2', ')', ':', 'if', 'current1', '.', 'data', '!=', 'current2', '.', 'data', ':', 'return', 'False', 'current1', '=', 'current1', '.', 'next', 'current2', '=', 'current2', '.', 'next', 'if', 'current1', 'is', 'None', 'and', 'current2', 'is', 'None', ':', 'return', 'True', 'else', ':', 'return', 'False', 'llist1', '=', 'LinkedList', '(', ')', 'llist2', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the first linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'llist1', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the second linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'llist2', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'if', 'is_equal', '(', 'llist1', ',', 'llist2', ')', ':', 'print', '(', ""'The two linked lists are the same.'"", ')', 'else', ':', 'print', '(', ""'The two linked list are not the same.'"", ',', 'end', '=', ""''"", ')']"
2555,"['python', 'program', 'implement', 'binary', 'tree', 'using', 'linked', 'list']","['class', 'BinaryTree', ':', 'def', '__init__', '(', 'self', ',', 'key', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'def', 'set_root', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'def', 'inorder', '(', 'self', ')', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'inorder', '(', ')', 'print', '(', 'self', '.', 'key', ',', 'end', '=', ""' '"", ')', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'right', '.', 'inorder', '(', ')', 'def', 'insert_left', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'left', '=', 'new_node', 'def', 'insert_right', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'right', '=', 'new_node', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'left', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'right', '.', 'search', '(', 'key', ')', 'return', 'temp', 'return', 'None', 'btree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'insert <data> at root'"", ')', 'print', '(', ""'insert <data> left of <data>'"", ')', 'print', '(', ""'insert <data> right of <data>'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'print', '(', ""'inorder traversal of binary tree: '"", ',', 'end', '=', ""''"", ')', 'if', 'btree', 'is', 'not', 'None', ':', 'btree', '.', 'inorder', '(', ')', 'print', '(', ')', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'BinaryTree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'btree', '=', 'new_node', 'else', ':', 'position', '=', 'do', '[', '4', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'btree', 'is', 'not', 'None', ':', 'ref_node', '=', 'btree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'if', 'suboperation', '==', ""'left'"", ':', 'ref_node', '.', 'insert_left', '(', 'new_node', ')', 'elif', 'suboperation', '==', ""'right'"", ':', 'ref_node', '.', 'insert_right', '(', 'new_node', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2556,"['program', 'compute', 'area', 'perimeter', 'hexagon']","['import', 'math', 'print', '(', '""Enter the length of the side:""', ')', 'a', '=', 'int', '(', 'input', '(', ')', ')', 'area', '=', '(', '3', '*', 'math', '.', 'sqrt', '(', '3', ')', '*', 'math', '.', 'pow', '(', 'a', ',', '2', ')', ')', '/', '2.0', 'perimeter', '=', '(', '6', '*', 'a', ')', 'print', '(', '""Area of the Hexagon = ""', ',', 'area', ')', 'print', '(', '""Perimeter of the Hexagon = ""', ',', 'perimeter', ')']"
2557,"['write', 'program', 'compute', 'given', 'n', 'input', 'console']","['def', 'f', '(', 'n', ')', ':', 'if', 'n', '==', '0', ':', 'return', '0', 'else', ':', 'return', 'f', '(', 'n', '-', '1', ')', '+', '100', 'n', '=', 'int', '(', 'raw_input', '(', ')', ')', 'print', 'f', '(', 'n', ')']"
2558,"['program', 'find', 'sum', 'upper', 'triangular', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '>', 'j', ':', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Sum of Upper Triangular Matrix Elements is: ""', ',', 'sum', ')']"
2559,"['bubble', 'sort', 'using', 'recursion']","['def', 'BubbleSort', '(', 'arr', ',', 'n', ')', ':', 'if', '(', 'n', '>', '0', ')', ':', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'if', '(', 'arr', '[', 'i', ']', '>', 'arr', '[', 'i', '+', '1', ']', ')', ':', 'temp', '=', 'arr', '[', 'i', ']', 'arr', '[', 'i', ']', '=', 'arr', '[', 'i', '+', '1', ']', 'arr', '[', 'i', '+', '1', ']', '=', 'temp', 'BubbleSort', '(', 'arr', ',', 'n', '-', '1', ')', 'arr', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'BubbleSort', '(', 'arr', ',', 'n', '-', '1', ')', 'print', '(', '""After Sorting Array Elements are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')']"
2560,"['program', 'convert', 'octal', 'hexadecimal']","['i', '=', '0', 'octal', '=', 'int', '(', 'input', '(', '""Enter Octal number:""', ')', ')', 'Hex', '=', '[', ""'0'"", ']', '*', '50', 'decimal', '=', '0', 'sem', '=', '0', 'while', 'octal', '!=', '0', ':', 'decimal', '=', 'decimal', '+', '(', 'octal', '%', '10', ')', '*', 'pow', '(', '8', ',', 'sem', ')', ';', 'sem', '+=', '1', 'octal', '=', 'octal', '//', '10', 'while', 'decimal', '!=', '0', ':', 'rem', '=', 'decimal', '%', '16', 'if', 'rem', '<', '10', ':', 'Hex', '[', 'i', ']', '=', 'chr', '(', 'rem', '+', '48', ')', 'i', '+=', '1', 'else', ':', 'Hex', '[', 'i', ']', '=', 'chr', '(', 'rem', '+', '55', ')', 'i', '+=', '1', 'decimal', '//=', '16', 'print', '(', '""Hexadecimal number is:""', ')', 'for', 'j', 'in', 'range', '(', 'i', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'print', '(', 'Hex', '[', 'j', ']', ',', 'end', '=', '""""', ')']"
2561,"['program', 'print', 'mirrored', 'right', 'triangle', 'star', 'pattern']","['print', '(', '""Enter the row size:""', ')', 'row_size', '=', 'int', '(', 'input', '(', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', '+', '1', ')', ':', 'for', 'j', 'in', 'range', '(', 'row_size', '-', 'out', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', 'out', '+', '1', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2562,"['please', 'generate', 'random', 'float', 'value', 'using', 'python', 'math', 'module']","['import', 'random', 'print', 'random', '.', 'random', '(', ')', '*', '100']"
2563,"['find', 'pair', 'given', 'sum', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'sum', '=', 'int', '(', 'input', '(', '""Enter the Sum Value:""', ')', ')', 'flag', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', '-', '1', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '+', 'arr', '[', 'j', ']', '==', 'sum', ':', 'flag', '=', '1', 'print', '(', '""Given sum pairs of elements are ""', ',', 'arr', '[', 'i', ']', ',', '"" and ""', ',', 'arr', '[', 'j', ']', ',', '"".\\n""', ')', 'if', 'flag', '==', '0', ':', 'print', '(', '""Given sum Pair is not Present.""', ')']"
2564,"['minimum', 'difference', 'two', 'element', 'array']","['import', 'sysarr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'Min_diff', '=', 'sys', '.', 'maxsizefor', 'i', 'in', 'range', '(', '0', ',', 'size', '-', '1', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ',', 'size', ')', ':', 'if', 'abs', '(', 'arr', '[', 'j', ']', '-', 'arr', '[', 'i', ']', ')', '<', 'Min_diff', ':', 'Min_diff', '=', 'abs', '(', 'arr', '[', 'j', ']', '-', 'arr', '[', 'i', ']', ')', 'print', '(', '""Minimum difference between two Element is ""', ',', 'Min_diff', ')']"
2565,"['python', 'program', 'implement', 'bucket', 'sort']","['def', 'bucket_sort', '(', 'alist', ')', ':', 'largest', '=', 'max', '(', 'alist', ')', 'length', '=', 'len', '(', 'alist', ')', 'size', '=', 'largest', '/', 'length', 'buckets', '=', '[', '[', ']', 'for', '_', 'in', 'range', '(', 'length', ')', ']', 'for', 'i', 'in', 'range', '(', 'length', ')', ':', 'j', '=', 'int', '(', 'alist', '[', 'i', ']', '/', 'size', ')', 'if', 'j', '!=', 'length', ':', 'buckets', '[', 'j', ']', '.', 'append', '(', 'alist', '[', 'i', ']', ')', 'else', ':', 'buckets', '[', 'length', '-', '1', ']', '.', 'append', '(', 'alist', '[', 'i', ']', ')', 'for', 'i', 'in', 'range', '(', 'length', ')', ':', 'insertion_sort', '(', 'buckets', '[', 'i', ']', ')', 'result', '=', '[', ']', 'for', 'i', 'in', 'range', '(', 'length', ')', ':', 'result', '=', 'result', '+', 'buckets', '[', 'i', ']', 'return', 'result', 'def', 'insertion_sort', '(', 'alist', ')', ':', 'for', 'i', 'in', 'range', '(', '1', ',', 'len', '(', 'alist', ')', ')', ':', 'temp', '=', 'alist', '[', 'i', ']', 'j', '=', 'i', '-', '1', 'while', '(', 'j', '>=', '0', 'and', 'temp', '<', 'alist', '[', 'j', ']', ')', ':', 'alist', '[', 'j', '+', '1', ']', '=', 'alist', '[', 'j', ']', 'j', '=', 'j', '-', '1', 'alist', '[', 'j', '+', '1', ']', '=', 'temp', 'alist', '=', 'input', '(', ""'Enter the list of (nonnegative) numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'sorted_list', '=', 'bucket_sort', '(', 'alist', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'sorted_list', ')']"
2566,"['python', 'program', 'minimize', 'lateness', 'using', 'greedy', 'algorithm']","['def', 'minimize_lateness', '(', 'ttimes', ',', 'dtimes', ')', ':', '""""""Return minimum max lateness and the schedule to obtain it.\n\xa0\n    (min_lateness, schedule) is returned.\n\xa0\n    Lateness of a request i is L(i) = finish time of i - deadline of if\n    request i finishes after its deadline.\n    The maximum lateness is the maximum value of L(i) over all i.\n    min_lateness is the minimum value of the maximum lateness that can be\n    achieved by optimally scheduling the requests.\n\xa0\n    schedule is a list that contains the indexes of the requests ordered such\n    that minimum maximum lateness is achieved.\n\xa0\n    ttime[i] is the time taken to complete request i.\n    dtime[i] is the deadline of request i.\n    """"""', 'index', '=', 'list', '(', 'range', '(', 'len', '(', 'dtimes', ')', ')', ')', 'index', '.', 'sort', '(', 'key', '=', 'lambda', 'i', ':', 'dtimes', '[', 'i', ']', ')', 'min_lateness', '=', '0', 'start_time', '=', '0', 'for', 'i', 'in', 'index', ':', 'min_lateness', '=', 'max', '(', 'min_lateness', ',', '(', 'ttimes', '[', 'i', ']', '+', 'start_time', ')', '-', 'dtimes', '[', 'i', ']', ')', 'start_time', '+=', 'ttimes', '[', 'i', ']', 'return', 'min_lateness', ',', 'index', 'n', '=', 'int', '(', 'input', '(', ""'Enter number of requests: '"", ')', ')', 'ttimes', '=', 'input', '(', ""'Enter the time taken to complete the {} request(s) in order: '"", '.', 'format', '(', 'n', ')', ')', '.', 'split', '(', ')', 'ttimes', '=', '[', 'int', '(', 'tt', ')', 'for', 'tt', 'in', 'ttimes', ']', 'dtimes', '=', 'input', '(', ""'Enter the deadlines of the {} request(s) in order: '"", '.', 'format', '(', 'n', ')', ')', '.', 'split', '(', ')', 'dtimes', '=', '[', 'int', '(', 'dt', ')', 'for', 'dt', 'in', 'dtimes', ']', 'min_lateness', ',', 'schedule', '=', 'minimize_lateness', '(', 'ttimes', ',', 'dtimes', ')', 'print', '(', ""'The minimum maximum lateness:'"", ',', 'min_lateness', ')', 'print', '(', ""'The order in which the requests should be scheduled:'"", ',', 'schedule', ')']"
2567,"['print', 'full', 'pyramid', 'alphabet', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'np', '=', '1', 'for', 'out', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'inn', 'in', 'range', '(', 'row_size', '-', '1', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', '0', ',', 'np', ')', ':', 'print', '(', 'chr', '(', 'out', '+', '65', ')', ',', 'end', '=', '""""', ')', 'np', '+=', '2', 'print', '(', '""\\r""', ')']"
2568,"['program', 'find', 'nth', 'magic', 'number']","['rangenumber', '=', 'int', '(', 'input', '(', '""Enter a Nth Number:""', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', 'c', '!=', 'rangenumber', ':', 'num3', '=', 'num', 'num1', '=', 'num', 'sum', '=', '0', 'while', 'num1', '!=', '0', ':', 'rem', '=', 'num1', '%', '10', 'sum', '+=', 'rem', 'num1', '//=', '10', 'rev', '=', '0', 'num2', '=', 'sum', 'while', 'num2', '!=', '0', ':', 'rem2', '=', 'num2', '%', '10', 'rev', '=', 'rev', '*', '10', '+', 'rem2', 'num2', '//=', '10', 'if', 'sum', '*', 'rev', '==', 'num3', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Magic number is ""', ',', 'letest', ')']"
2569,"['find', 'pair', 'given', 'sum', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'sum', '=', 'int', '(', 'input', '(', '""Enter the Sum Value:""', ')', ')', 'flag', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', '-', '1', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '+', 'arr', '[', 'j', ']', '==', 'sum', ':', 'flag', '=', '1', 'print', '(', '""Given sum pairs of elements are ""', ',', 'arr', '[', 'i', ']', ',', '"" and ""', ',', 'arr', '[', 'j', ']', ',', '"".\\n""', ')', 'if', 'flag', '==', '0', ':', 'print', '(', '""Given sum Pair is not Present.""', ')']"
2570,"['program', 'compute', 'perimeter', 'trapezoid']","['print', '(', '""Enter the value of base:""', ')', 'a', '=', 'int', '(', 'input', '(', ')', ')', 'b', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Enter the value of side:""', ')', 'c', '=', 'int', '(', 'input', '(', ')', ')', 'd', '=', 'int', '(', 'input', '(', ')', ')', 'perimeter', '=', 'a', '+', 'b', '+', 'c', '+', 'd', 'print', '(', '""Perimeter of the Trapezoid = ""', ',', 'perimeter', ')']"
2571,"['given', 'integral', 'number', 'n', 'write', 'program', 'generate', 'dictionary', 'contains', 'ii', 'integral', 'number', 'n', 'included', 'program', 'print', 'dictionary']","['n', '=', 'int', '(', 'raw_input', '(', ')', ')', 'd', '=', 'dict', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'd', '[', 'i', ']', '=', 'i', '*', 'i', 'print', 'd']"
2572,"['find', 'second', 'frequent', 'character', 'given', 'string']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'arr', '=', '[', '0', ']', '*', '256', 'max', '=', '0', 'sec_max', '=', '0', 'i', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '!=', ""' '"", ':', 'num', '=', 'ord', '(', 'str', '[', 'i', ']', ')', 'arr', '[', 'num', ']', '+=', '1', 'for', 'i', 'in', 'range', '(', '256', ')', ':', 'if', 'arr', '[', 'i', ']', '>', 'arr', '[', 'max', ']', ':', 'sec_max', '=', 'max', 'max', '=', 'i', 'elif', 'arr', '[', 'i', ']', '>', 'arr', '[', 'sec_max', ']', 'and', 'arr', '[', 'i', ']', '!=', 'arr', '[', 'max', ']', ':', 'sec_max', '=', 'iprint', '(', '""The Second Most occurring character in a string is ""', '+', '(', 'chr', ')', '(', 'sec_max', ')', ')']"
2573,"['python', 'program', 'implement', 'shell', 'sort']","['def', 'gaps', '(', 'size', ')', ':', 'length', '=', 'size', '.', 'bit_length', '(', ')', 'for', 'k', 'in', 'range', '(', 'length', '-', '1', ',', '0', ',', '-', '1', ')', ':', 'yield', '2', '**', 'k', '-', '1', 'def', 'shell_sort', '(', 'alist', ')', ':', 'def', 'insertion_sort_with_gap', '(', 'gap', ')', ':', 'for', 'i', 'in', 'range', '(', 'gap', ',', 'len', '(', 'alist', ')', ')', ':', 'temp', '=', 'alist', '[', 'i', ']', 'j', '=', 'i', '-', 'gap', 'while', '(', 'j', '>=', '0', 'and', 'temp', '<', 'alist', '[', 'j', ']', ')', ':', 'alist', '[', 'j', '+', 'gap', ']', '=', 'alist', '[', 'j', ']', 'j', '=', 'j', '-', 'gap', 'alist', '[', 'j', '+', 'gap', ']', '=', 'temp', 'for', 'g', 'in', 'gaps', '(', 'len', '(', 'alist', ')', ')', ':', 'insertion_sort_with_gap', '(', 'g', ')', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'shell_sort', '(', 'alist', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'alist', ')']"
2574,"['merge', 'sort', 'program', 'python', 'java', 'c', 'c']","['def', 'merge', '(', 'arr', ',', 'first', ',', 'mid', ',', 'last', ')', ':', 'n1', '=', '(', 'mid', '-', 'first', '+', '1', ')', 'n2', '=', '(', 'last', '-', 'mid', ')', 'Left', '=', '[', '0', ']', '*', 'n1', 'Right', '=', '[', '0', ']', '*', 'n2', 'for', 'i', 'in', 'range', '(', 'n1', ')', ':', 'Left', '[', 'i', ']', '=', 'arr', '[', 'i', '+', 'first', ']', 'for', 'j', 'in', 'range', '(', 'n2', ')', ':', 'Right', '[', 'j', ']', '=', 'arr', '[', 'mid', '+', 'j', '+', '1', ']', ';', 'k', '=', 'first', 'i', '=', '0', 'j', '=', '0', 'while', 'i', '<', 'n1', 'and', 'j', '<', 'n2', ':', 'if', 'Left', '[', 'i', ']', '<=', 'Right', '[', 'j', ']', ':', 'arr', '[', 'k', ']', '=', 'Left', '[', 'i', ']', 'i', '+=', '1', 'else', ':', 'arr', '[', 'k', ']', '=', 'Right', '[', 'j', ']', 'j', '+=', '1', 'k', '+=', '1', 'while', 'i', '<', 'n1', ':', 'arr', '[', 'k', ']', '=', 'Left', '[', 'i', ']', 'i', '+=', '1', 'k', '+=', '1', 'while', 'j', '<', 'n2', ':', 'arr', '[', 'k', ']', '=', 'Right', '[', 'j', ']', 'j', '+=', '1', 'k', '+=', '1', 'def', 'mergesort', '(', 'arr', ',', 'first', ',', 'last', ')', ':', 'if', '(', 'first', '<', 'last', ')', ':', 'mid', '=', 'first', '+', '(', 'last', '-', 'first', ')', '//', '2', 'mergesort', '(', 'arr', ',', 'first', ',', 'mid', ')', 'mergesort', '(', 'arr', ',', 'mid', '+', '1', ',', 'last', ')', 'merge', '(', 'arr', ',', 'first', ',', 'mid', ',', 'last', ')', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array:""', ')', ')', 'arr', '=', '[', ']', 'print', '(', '""Enter the element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Before Sorting Array Element are: ""', ',', 'arr', ')', 'mergesort', '(', 'arr', ',', '0', ',', 'size', '-', '1', ')', 'print', '(', '""\\nAfter Sorting Array Element are: ""', ',', 'arr', ')']"
2575,"['subtract', 'two', 'number', 'operator', 'without', 'using', 'minus', 'operator']","['num1', '=', 'int', '(', 'input', '(', '""Enter first number:""', ')', ')', 'num2', '=', 'int', '(', 'input', '(', '""Enter\xa0 second number:""', ')', ')', 'sub', '=', 'num1', '+', '(', '~', 'num2', '+', '1', ')', 'print', '(', '""Subtraction of two number is ""', ',', 'sub', ')']"
2576,"['define', 'function', 'print', 'dictionary', 'key', 'number', 'included', 'value', 'square', 'key']","['Solution', 'def', 'printDict', '(', ')', ':', 'd', '=', 'dict', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '21', ')', ':', 'd', '[', 'i', ']', '=', 'i', '**', '2', 'print', 'd', 'printDict', '(', ')']"
2577,"['program', 'print', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number(Limit):""', ')', ')', 'i', '=', '1', 'while', 'i', '<=', 'n', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')', 'i', '*=', '2']"
2578,"['python', 'program', 'add', 'keyvalue', 'pair', 'dictionary']","['key', '=', 'int', '(', 'input', '(', '""Enter the key (int) to be added:""', ')', ')', 'value', '=', 'int', '(', 'input', '(', '""Enter the value for the key to be added:""', ')', ')', 'd', '=', '{', '}', 'd', '.', 'update', '(', '{', 'key', ':', 'value', '}', ')', 'print', '(', '""Updated dictionary is:""', ')', 'print', '(', 'd', ')']"
2579,"['program', 'convert', 'binary', 'octal', 'using', 'loop']","['print', '(', '""Enter a binary number: ""', ')', 'binary', '=', 'int', '(', 'input', '(', ')', ')', ';', 'octal', '=', '0', 'decimal', '=', '0', 'i', '=', '0', 'while', '(', 'binary', '!=', '0', ')', ':', 'decimal', '=', 'decimal', '+', '(', 'binary', '%', '10', ')', '*', 'pow', '(', '2', ',', 'i', ')', 'i', '+=', '1', 'binary', '=', 'binary', '//', '10', 'i', '=', '1', 'while', '(', 'decimal', '!=', '0', ')', ':', 'octal', '=', 'octal', '+', '(', 'decimal', '%', '8', ')', '*', 'i', 'decimal', '=', 'decimal', '//', '8', 'i', '=', 'i', '*', '10', 'print', '(', '""octal value: ""', ',', 'octal', ')']"
2580,"['python', 'program', 'count', 'number', 'vowel', 'string']","['string', '=', 'raw_input', '(', '""Enter string:""', ')', 'vowels', '=', '0', 'for', 'i', 'in', 'string', ':', 'if', '(', 'i', '==', ""'a'"", 'or', 'i', '==', ""'e'"", 'or', 'i', '==', ""'i'"", 'or', 'i', '==', ""'o'"", 'or', 'i', '==', ""'u'"", 'or', 'i', '==', ""'A'"", 'or', 'i', '==', ""'E'"", 'or', 'i', '==', ""'I'"", 'or', 'i', '==', ""'O'"", 'or', 'i', '==', ""'U'"", ')', ':', 'vowels', '=', 'vowels', '+', '1', 'print', '(', '""Number of vowels are:""', ')', 'print', '(', 'vowels', ')']"
2581,"['print', 'array', 'element', 'reverse', 'order']","['arr', '=', '[', ']', 'cout', '=', '0', 'sum', '=', '0', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""After reversing array is :""', ')', ';', 'for', 'i', 'in', 'range', '(', 'size', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')']"
2582,"['python', 'program', 'solve', 'josephus', 'problem', 'using', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'CircularLinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'node', '=', 'Node', '(', 'data', ')', 'self', '.', 'insert_at_end', '(', 'node', ')', 'def', 'get_node', '(', 'self', ',', 'index', ',', 'start', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'None', 'current', '=', 'start', 'for', 'i', 'in', 'range', '(', 'index', ')', ':', 'current', '=', 'current', '.', 'next', 'return', 'current', 'def', 'get_prev_node', '(', 'self', ',', 'ref_node', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'None', 'current', '=', 'self', '.', 'head', 'while', 'current', '.', 'next', '!=', 'ref_node', ':', 'current', '=', 'current', '.', 'next', 'return', 'current', 'def', 'insert_after', '(', 'self', ',', 'ref_node', ',', 'new_node', ')', ':', 'new_node', '.', 'next', '=', 'ref_node', '.', 'next', 'ref_node', '.', 'next', '=', 'new_node', 'def', 'insert_before', '(', 'self', ',', 'ref_node', ',', 'new_node', ')', ':', 'prev_node', '=', 'self', '.', 'get_prev_node', '(', 'ref_node', ')', 'self', '.', 'insert_after', '(', 'prev_node', ',', 'new_node', ')', 'def', 'insert_at_end', '(', 'self', ',', 'new_node', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_node', 'new_node', '.', 'next', '=', 'new_node', 'else', ':', 'self', '.', 'insert_before', '(', 'self', '.', 'head', ',', 'new_node', ')', 'def', 'remove', '(', 'self', ',', 'node', ')', ':', 'if', 'self', '.', 'head', '.', 'next', '==', 'self', '.', 'head', ':', 'self', '.', 'head', '=', 'None', 'else', ':', 'prev_node', '=', 'self', '.', 'get_prev_node', '(', 'node', ')', 'prev_node', '.', 'next', '=', 'node', '.', 'next', 'if', 'self', '.', 'head', '==', 'node', ':', 'self', '.', 'head', '=', 'node', '.', 'next', 'def', 'has_one_node', '(', 'cllist', ')', ':', 'if', 'cllist', '.', 'head', '.', 'next', '==', 'cllist', '.', 'head', ':', 'return', 'True', 'else', ':', 'return', 'False', 'def', 'get_josephus_solution', '(', 'cllist', ',', 'k', ')', ':', 'if', 'cllist', '.', 'head', 'is', 'None', ':', 'return', 'None', 'start', '=', 'cllist', '.', 'head', 'while', 'not', 'has_one_node', '(', 'cllist', ')', ':', 'to_remove', '=', 'cllist', '.', 'get_node', '(', 'k', '-', '1', ',', 'start', ')', 'start', '=', 'to_remove', '.', 'next', 'cllist', '.', 'remove', '(', 'to_remove', ')', 'return', 'cllist', '.', 'head', '.', 'data', 'a_cllist', '=', 'CircularLinkedList', '(', ')', 'n', '=', 'int', '(', 'input', '(', ""'Input number of people: '"", ')', ')', 'k', '=', 'int', '(', 'input', '(', ""'The kth person will be executed. Input k: '"", ')', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'a_cllist', '.', 'append', '(', 'i', ')', 'ans', '=', 'get_josephus_solution', '(', 'a_cllist', ',', 'k', ')', 'print', '(', ""'The person at position {} won\\'t be killed.'"", '.', 'format', '(', 'ans', ')', ')']"
2583,"['python', 'program', 'read', 'print', 'prime', 'number', 'range', 'using', 'sieve', 'eratosthenes']","['n', '=', 'int', '(', 'input', '(', '""Enter upper limit of range: ""', ')', ')', 'sieve', '=', 'set', '(', 'range', '(', '2', ',', 'n', '+', '1', ')', ')', 'while', 'sieve', ':', 'prime', '=', 'min', '(', 'sieve', ')', 'print', '(', 'prime', ',', 'end', '=', '""\\t""', ')', 'sieve', '-=', 'set', '(', 'range', '(', 'prime', ',', 'n', '+', '1', ',', 'prime', ')', ')', 'print', '(', ')']"
2584,"['program', 'print', 'half', 'pyramid', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'row_size', '+', '1', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', 'out', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2585,"['write', 'program', 'filter', 'even', 'number', 'list', 'using', 'filter', 'function', 'list']","['Solution', 'li', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', 'evenNumbers', '=', 'filter', '(', 'lambda', 'x', ':', 'x', '%', '2', '==', '0', ',', 'li', ')', 'print', 'evenNumbers']"
2586,"['remove', 'special', 'character', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'str2', '=', '[', ']', 'i', '=', '0', 'while', 'i', '<', 'len', '(', 'str', ')', ':', 'ch', '=', 'str', '[', 'i', ']', 'if', '(', 'ch', '>=', ""'a'"", 'and', 'ch', '<=', ""'z'"", ')', 'or', '(', 'ch', '>=', ""'A'"", 'and', 'ch', '<=', ""'Z'"", ')', 'or', '(', 'ch', '>=', ""'0'"", 'and', 'ch', '<=', ""'9'"", ')', 'or', '(', 'ch', '==', ""'\\0'"", ')', ':', 'str2', '.', 'append', '(', 'ch', ')', 'i', '+=', '1', 'Final_String', '=', ""''"", '.', 'join', '(', 'str2', ')', 'print', '(', '""After removing special character letter string is:""', ',', 'Final_String', ')']"
2587,"['program', 'print', 'series']","['print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'i', '=', '1', 'j', '=', '3', 'value', '=', '6', 'while', '(', 'i', '<=', 'n', ')', ':', 'print', '(', 'value', ',', 'end', '=', '"" ""', ')', 'value', '+=', 'j', 'j', '+=', '2', 'i', '+=', '1']"
2588,"['check', 'whether', 'number', 'neon', 'number']","['num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'sqr', '=', 'num', '*', 'num', 'sum', '=', '0', 'while', 'sqr', '!=', '0', ':', 'rem', '=', 'sqr', '%', '10', 'sum', '+=', 'rem', 'sqr', '//=', '10', 'if', 'sum', '==', 'num', ':', 'print', '(', '""It is a Neon Number.""', ')', 'else', ':', 'print', '(', '""It is not a Neon Number.""', ')']"
2589,"['program', 'print', 'solid', 'inverted', 'half', 'diamond', 'alphabet', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '-', '(', 'row_size', '+', '1', ')', ',', '-', '1', ')', ':', 'for', 'in1', 'in', 'range', '(', '1', ',', 'abs', '(', 'out', ')', '+', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', 'abs', '(', 'out', ')', ',', 'row_size', '+', '1', ')', ':', 'print', '(', '(', 'chr', ')', '(', 'p', '+', '65', ')', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2590,"['print', 'array', 'element', 'reverse', 'order']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'temp', '=', 'size', 'while', '(', 'temp', '>=', '0', ')', ':', 'for', 'k', 'in', 'range', '(', '0', ',', 'temp', '-', '1', ',', '1', ')', ':', 'temp2', '=', 'arr', '[', 'k', ']', 'arr', '[', 'k', ']', '=', 'arr', '[', 'k', '+', '1', ']', 'arr', '[', 'k', '+', '1', ']', '=', 'temp2', 'temp', '-=', '1', 'print', '(', '""After reversing array is :""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')']"
2591,"['python', 'program', 'implement', 'queue', 'using', 'stack']","['class', 'Queue', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'inbox', '=', 'Stack', '(', ')', 'self', '.', 'outbox', '=', 'Stack', '(', ')', 'def', 'is_empty', '(', 'self', ')', ':', 'return', '(', 'self', '.', 'inbox', '.', 'is_empty', '(', ')', 'and', 'self', '.', 'outbox', '.', 'is_empty', '(', ')', ')', 'def', 'enqueue', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'inbox', '.', 'push', '(', 'data', ')', 'def', 'dequeue', '(', 'self', ')', ':', 'if', 'self', '.', 'outbox', '.', 'is_empty', '(', ')', ':', 'while', 'not', 'self', '.', 'inbox', '.', 'is_empty', '(', ')', ':', 'popped', '=', 'self', '.', 'inbox', '.', 'pop', '(', ')', 'self', '.', 'outbox', '.', 'push', '(', 'popped', ')', 'return', 'self', '.', 'outbox', '.', 'pop', '(', ')', 'class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'push', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'pop', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', ')', 'a_queue', '=', 'Queue', '(', ')', 'while', 'True', ':', 'print', '(', ""'enqueue <value>'"", ')', 'print', '(', ""'dequeue'"", ')', 'print', '(', ""'quit'"", ')', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'enqueue'"", ':', 'a_queue', '.', 'enqueue', '(', 'int', '(', 'do', '[', '1', ']', ')', ')', 'elif', 'operation', '==', ""'dequeue'"", ':', 'if', 'a_queue', '.', 'is_empty', '(', ')', ':', 'print', '(', ""'Queue is empty.'"", ')', 'else', ':', 'dequeued', '=', 'a_queue', '.', 'dequeue', '(', ')', 'print', '(', ""'Dequeued element: '"", ',', 'int', '(', 'dequeued', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2592,"['print', 'occurring', 'element', 'array']","['import', 'sys', 'arr', '=', '[', ']', 'freq', '=', '[', ']', 'max', '=', '-', 'sys', '.', 'maxsize', '-', '1', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '>=', 'max', ':', 'max', '=', 'arr', '[', 'i', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'max', '+', '1', ')', ':', 'freq', '.', 'append', '(', '0', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'freq', '[', 'arr', '[', 'i', ']', ']', '+=', '1', 'most_oc', '=', '0', 'most_v', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', 'freq', '[', 'arr', '[', 'i', ']', ']', '>', 'most_oc', ':', 'most_oc', '=', 'freq', '[', 'arr', '[', 'i', ']', ']', 'most_v', '=', 'arr', '[', 'i', ']', 'print', '(', '""The Most occurring Number ""', ',', 'most_v', ',', '"" occurs ""', ',', 'most_oc', ',', '"" times.""', ')']"
2593,"['program', 'find', 'sum', 'series']","['print', '(', '""Enter the range of number:""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Enter the value of x:""', ')', ';', 'x', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '=', '0', 'i', '=', '1', 'while', '(', 'i', '<=', 'n', ')', ':', 'sum', '+=', 'pow', '(', 'x', ',', 'i', ')', 'i', '+=', '2', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
2594,"['python', 'program', 'implement', 'doubly', 'linked', 'list', 'provide', 'insertion', 'deletion', 'display', 'operation']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'self', '.', 'prev', '=', 'None', 'class', 'DoublyLinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'first', '=', 'None', 'self', '.', 'last', '=', 'None', 'def', 'get_node', '(', 'self', ',', 'index', ')', ':', 'current', '=', 'self', '.', 'first', 'for', 'i', 'in', 'range', '(', 'index', ')', ':', 'if', 'current', 'is', 'None', ':', 'return', 'None', 'current', '=', 'current', '.', 'next', 'return', 'current', 'def', 'insert_after', '(', 'self', ',', 'ref_node', ',', 'new_node', ')', ':', 'new_node', '.', 'prev', '=', 'ref_node', 'if', 'ref_node', '.', 'next', 'is', 'None', ':', 'self', '.', 'last', '=', 'new_node', 'else', ':', 'new_node', '.', 'next', '=', 'ref_node', '.', 'next', 'new_node', '.', 'next', '.', 'prev', '=', 'new_node', 'ref_node', '.', 'next', '=', 'new_node', 'def', 'insert_before', '(', 'self', ',', 'ref_node', ',', 'new_node', ')', ':', 'new_node', '.', 'next', '=', 'ref_node', 'if', 'ref_node', '.', 'prev', 'is', 'None', ':', 'self', '.', 'first', '=', 'new_node', 'else', ':', 'new_node', '.', 'prev', '=', 'ref_node', '.', 'prev', 'new_node', '.', 'prev', '.', 'next', '=', 'new_node', 'ref_node', '.', 'prev', '=', 'new_node', 'def', 'insert_at_beg', '(', 'self', ',', 'new_node', ')', ':', 'if', 'self', '.', 'first', 'is', 'None', ':', 'self', '.', 'first', '=', 'new_node', 'self', '.', 'last', '=', 'new_node', 'else', ':', 'self', '.', 'insert_before', '(', 'self', '.', 'first', ',', 'new_node', ')', 'def', 'insert_at_end', '(', 'self', ',', 'new_node', ')', ':', 'if', 'self', '.', 'last', 'is', 'None', ':', 'self', '.', 'last', '=', 'new_node', 'self', '.', 'first', '=', 'new_node', 'else', ':', 'self', '.', 'insert_after', '(', 'self', '.', 'last', ',', 'new_node', ')', 'def', 'remove', '(', 'self', ',', 'node', ')', ':', 'if', 'node', '.', 'prev', 'is', 'None', ':', 'self', '.', 'first', '=', 'node', '.', 'next', 'else', ':', 'node', '.', 'prev', '.', 'next', '=', 'node', '.', 'next', 'if', 'node', '.', 'next', 'is', 'None', ':', 'self', '.', 'last', '=', 'node', '.', 'prev', 'else', ':', 'node', '.', 'next', '.', 'prev', '=', 'node', '.', 'prev', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'first', 'while', 'current', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'a_dllist', '=', 'DoublyLinkedList', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'insert <data> after <index>'"", ')', 'print', '(', ""'insert <data> before <index>'"", ')', 'print', '(', ""'insert <data> at beg'"", ')', 'print', '(', ""'insert <data> at end'"", ')', 'print', '(', ""'remove <index>'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'print', '(', ""'The list: '"", ',', 'end', '=', ""''"", ')', 'a_dllist', '.', 'display', '(', ')', 'print', '(', ')', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'position', '=', 'do', '[', '3', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'new_node', '=', 'Node', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'if', 'position', '==', ""'beg'"", ':', 'a_dllist', '.', 'insert_at_beg', '(', 'new_node', ')', 'elif', 'position', '==', ""'end'"", ':', 'a_dllist', '.', 'insert_at_end', '(', 'new_node', ')', 'else', ':', 'index', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'a_dllist', '.', 'get_node', '(', 'index', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such index.'"", ')', 'continue', 'if', 'suboperation', '==', ""'after'"", ':', 'a_dllist', '.', 'insert_after', '(', 'ref_node', ',', 'new_node', ')', 'elif', 'suboperation', '==', ""'before'"", ':', 'a_dllist', '.', 'insert_before', '(', 'ref_node', ',', 'new_node', ')', 'elif', 'operation', '==', ""'remove'"", ':', 'index', '=', 'int', '(', 'do', '[', '1', ']', ')', 'node', '=', 'a_dllist', '.', 'get_node', '(', 'index', ')', 'if', 'node', 'is', 'None', ':', 'print', '(', ""'No such index.'"", ')', 'continue', 'a_dllist', '.', 'remove', '(', 'node', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2595,"['python', 'program', 'reverse', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'def', 'reverse_llist', '(', 'llist', ')', ':', 'before', '=', 'None', 'current', '=', 'llist', '.', 'head', 'if', 'current', 'is', 'None', ':', 'return', 'after', '=', 'current', '.', 'next', 'while', 'after', ':', 'current', '.', 'next', '=', 'before', 'before', '=', 'current', 'current', '=', 'after', 'after', '=', 'after', '.', 'next', 'current', '.', 'next', '=', 'before', 'llist', '.', 'head', '=', 'current', 'a_llist', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_llist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'reverse_llist', '(', 'a_llist', ')', 'print', '(', ""'The reversed list: '"", ')', 'a_llist', '.', 'display', '(', ')']"
2596,"['python', 'program', 'find', 'length', 'linked', 'list', 'using', 'recursion']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'length', '(', 'self', ')', ':', 'return', 'self', '.', 'length_helper', '(', 'self', '.', 'head', ')', 'def', 'length_helper', '(', 'self', ',', 'current', ')', ':', 'if', 'current', 'is', 'None', ':', 'return', '0', 'return', '1', '+', 'self', '.', 'length_helper', '(', 'current', '.', 'next', ')', 'a_llist', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_llist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'print', '(', ""'The length of the linked list is '"", '+', 'str', '(', 'a_llist', '.', 'length', '(', ')', ')', '+', ""'.'"", ',', 'end', '=', ""''"", ')']"
2597,"['python', 'program', 'sum', 'item', 'dictionary']","['d', '=', '{', ""'A'"", ':', '100', ',', ""'B'"", ':', '540', ',', ""'C'"", ':', '239', '}', 'print', '(', '""Total sum of values in the dictionary:""', ')', 'print', '(', 'sum', '(', 'd', '.', 'values', '(', ')', ')', ')']"
2598,"['program', 'find', 'nth', 'pronic', 'number']","['import', 'math', 'rangenumber', '=', 'int', '(', 'input', '(', '""Enter a Nth Number:""', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', 'c', '!=', 'rangenumber', ':', 'flag', '=', '0', 'for', 'j', 'in', 'range', '(', '0', ',', 'num', '+', '1', ')', ':', 'if', 'j', '*', '(', 'j', '+', '1', ')', '==', 'num', ':', 'flag', '=', '1', 'break', 'if', 'flag', '==', '1', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Pronic number is ""', ',', 'letest', ')']"
2599,"['find', 'word', 'starting', 'given', 'charactersprefix']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'ch', '=', 'input', '(', '""Enter the Character:""', ')', 'sub_str', '=', 'str', '.', 'split', '(', '"" ""', ')', 'print', '(', '""All the words starting with ""', ',', 'ch', ',', '"" are:""', ')', 'for', 'inn', 'in', 'range', '(', '0', ',', 'len', '(', 'sub_str', ')', ')', ':', 'if', 'sub_str', '[', 'inn', ']', '.', 'startswith', '(', 'ch', ')', ':', 'print', '(', 'sub_str', '[', 'inn', ']', ',', 'end', '=', '"" ""', ')']"
2600,"['program', 'find', 'sum', 'series']","['import', 'math', 'print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'i', '=', '2', 'sum', '=', '1', 'while', '(', 'i', '<=', 'n', ')', ':', 'if', '(', 'i', '%', '2', '==', '0', ')', ':', 'sum', '+=', 'pow', '(', 'i', ',', '2', ')', 'else', ':', 'sum', '-=', 'pow', '(', 'i', ',', '2', ')', 'i', '+=', '1', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
2601,"['write', 'program', 'generate', 'print', 'another', 'tuple', 'whose', 'value', 'even', 'number', 'given', 'tuple']","['Solution', 'tp', '=', '(', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ')', 'li', '=', 'list', '(', ')', 'for', 'i', 'in', 'tp', ':', 'if', 'tp', '[', 'i', ']', '%', '2', '==', '0', ':', 'li', '.', 'append', '(', 'tp', '[', 'i', ']', ')', 'tp2', '=', 'tuple', '(', 'li', ')', 'print', 'tp2']"
2602,"['program', 'print', 'solid', 'diamond', 'star', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '-', 'row_size', ',', '-', '1', ')', ':', 'for', 'in1', 'in', 'range', '(', '1', ',', 'abs', '(', 'out', ')', '+', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'in2', 'in', 'range', '(', 'row_size', ',', 'abs', '(', 'out', ')', ',', '-', '1', ')', ':', 'print', '(', '""* ""', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2603,"['python', 'program', 'sort', 'list', 'according', 'second', 'element', 'sublist']","['a', '=', '[', '[', ""'A'"", ',', '34', ']', ',', '[', ""'B'"", ',', '21', ']', ',', '[', ""'C'"", ',', '26', ']', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'a', ')', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'len', '(', 'a', ')', '-', 'i', '-', '1', ')', ':', 'if', '(', 'a', '[', 'j', ']', '[', '1', ']', '>', 'a', '[', 'j', '+', '1', ']', '[', '1', ']', ')', ':', 'temp', '=', 'a', '[', 'j', ']', 'a', '[', 'j', ']', '=', 'a', '[', 'j', '+', '1', ']', 'a', '[', 'j', '+', '1', ']', '=', 'temp', 'print', '(', 'a', ')']"
2604,"['python', 'program', 'check', 'number', 'strong', 'number']","['sum1', '=', '0', 'num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'temp', '=', 'num', 'while', '(', 'num', ')', ':', 'i', '=', '1', 'f', '=', '1', 'r', '=', 'num', '%', '10', 'while', '(', 'i', '<=', 'r', ')', ':', 'f', '=', 'f', '*', 'i', 'i', '=', 'i', '+', '1', 'sum1', '=', 'sum1', '+', 'f', 'num', '=', 'num', '//', '10', 'if', '(', 'sum1', '==', 'temp', ')', ':', 'print', '(', '""The number is a strong number""', ')', 'else', ':', 'print', '(', '""The number is not a strong number""', ')']"
2605,"['please', 'write', 'program', 'randomly', 'generate', 'list', 'even', 'number', 'inclusive']","['import', 'random', 'print', 'random', '.', 'sample', '(', '[', 'i', 'for', 'i', 'in', 'range', '(', '100', ',', '201', ')', 'if', 'i', '%', '2', '==', '0', ']', ',', '5', ')']"
2606,"['find', 'shortest', 'word', 'string']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'sub_str', '=', 'str', '.', 'split', '(', '"" ""', ')', 'minInd', '=', '0', 'min', '=', '0', 'min', '=', 'len', '(', 'sub_str', '[', '0', ']', ')', 'for', 'inn', 'in', 'range', '(', '0', ',', 'len', '(', 'sub_str', ')', ')', ':', 'len1', '=', 'len', '(', 'sub_str', '[', 'inn', ']', ')', 'if', 'len1', '<', 'min', ':', 'min', '=', 'len1', 'minInd', '=', 'innprint', '(', '""Smallest Substring(Word) is ""', ',', 'sub_str', '[', 'minInd', ']', ')']"
2607,"['define', 'class', 'named', 'shape', 'subclass', 'square', 'square', 'class', 'init', 'function', 'take', 'length', 'argument', 'class', 'area', 'function', 'print', 'area', 'shape', 'shape', 'area', 'default']","['class', 'Shape', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'pass', 'def', 'area', '(', 'self', ')', ':', 'return', '0', 'class', 'Square', '(', 'Shape', ')', ':', 'def', '__init__', '(', 'self', ',', 'l', ')', ':', 'Shape', '.', '__init__', '(', 'self', ')', 'self', '.', 'length', '=', 'l', 'def', 'area', '(', 'self', ')', ':', 'return', 'self', '.', 'length', '*', 'self', '.', 'length', 'aSquare', '=', 'Square', '(', '3', ')', 'print', 'aSquare', '.', 'area', '(', ')']"
2608,"['program', 'display', 'lower', 'triangular', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'print', '(', '""Lower Triangular Matrix is:\\n""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '<', 'j', ':', 'print', '(', '""0 ""', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', 'matrix', '[', 'i', ']', '[', 'j', ']', ',', 'end', '=', '"" ""', ')', 'print', '(', ')']"
2609,"['python', 'program', 'sort', 'list', 'according', 'length', 'element']","['a', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter number of elements:""', ')', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'b', '=', 'input', '(', '""Enter element:""', ')', 'a', '.', 'append', '(', 'b', ')', 'a', '.', 'sort', '(', 'key', '=', 'len', ')', 'print', '(', 'a', ')']"
2610,"['assuming', 'email', 'address', 'usernamecompanynamecom', 'format', 'please', 'write', 'program', 'print', 'user', 'name', 'given', 'email', 'address', 'user', 'name', 'company', 'name', 'composed', 'letter']","['import', 're', 'emailAddress', '=', 'raw_input', '(', ')', 'pat2', '=', '""(\\w+)@((\\w+\\.)+(com))""', 'r2', '=', 're', '.', 'match', '(', 'pat2', ',', 'emailAddress', ')', 'print', 'r2', '.', 'group', '(', '1', ')']"
2611,"['python', 'program', 'check', 'substring', 'present', 'given', 'string']","['string', '=', 'raw_input', '(', '""Enter string:""', ')', 'sub_str', '=', 'raw_input', '(', '""Enter word:""', ')', 'if', '(', 'string', '.', 'find', '(', 'sub_str', ')', '==', '-', '1', ')', ':', 'print', '(', '""Substring not found in string!""', ')', 'else', ':', 'print', '(', '""Substring in string!""', ')']"
2612,"['check', 'whether', 'given', 'number', 'prime']","[""'''Write\na Python program\xa0to check whether a given number is a prime or not. or\xa0\n\n\n\n\xa0\xa0 Write a program\xa0to\xa0check whether\na given number is a prime or not using\nPython '''"", 'import', 'math', 'num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'count', '=', '0', 'for', 'i', 'in', 'range', '(', '2', ',', 'int', '(', 'math', '.', 'sqrt', '(', 'num', ')', ')', '+', '1', ')', ':', 'if', 'num', '%', 'i', '==', '0', ':', 'count', '+=', '1', 'if', 'count', '==', '0', ':', 'print', '(', '""It is Prime""', ')', 'else', ':', 'print', '(', '""It is not Prime""', ')']"
2613,"['python', 'program', 'find', 'longest', 'common', 'substring', 'using', 'dynamic', 'programming', 'bottomup', 'approach']","['def', 'lcw', '(', 'u', ',', 'v', ')', ':', '""""""Return length of an LCW of strings u and v and its starting indexes.\n\xa0\n    (l, i, j) is returned where l is the length of an LCW of the strings u, v\n    where the LCW starts at index i in u and index j in v.\n    """"""', 'c', '=', '[', '[', '-', '1', ']', '*', '(', 'len', '(', 'v', ')', '+', '1', ')', 'for', '_', 'in', 'range', '(', 'len', '(', 'u', ')', '+', '1', ')', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'u', ')', '+', '1', ')', ':', 'c', '[', 'i', ']', '[', 'len', '(', 'v', ')', ']', '=', '0', 'for', 'j', 'in', 'range', '(', 'len', '(', 'v', ')', ')', ':', 'c', '[', 'len', '(', 'u', ')', ']', '[', 'j', ']', '=', '0', 'lcw_i', '=', 'lcw_j', '=', '-', '1', 'length_lcw', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'u', ')', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'v', ')', ')', ':', 'if', 'u', '[', 'i', ']', '!=', 'v', '[', 'j', ']', ':', 'c', '[', 'i', ']', '[', 'j', ']', '=', '0', 'else', ':', 'c', '[', 'i', ']', '[', 'j', ']', '=', '1', '+', 'c', '[', 'i', '+', '1', ']', '[', 'j', '+', '1', ']', 'if', 'length_lcw', '<', 'c', '[', 'i', ']', '[', 'j', ']', ':', 'length_lcw', '=', 'c', '[', 'i', ']', '[', 'j', ']', 'lcw_i', '=', 'i', 'lcw_j', '=', 'j', 'return', 'length_lcw', ',', 'lcw_i', ',', 'lcw_j', 'u', '=', 'input', '(', ""'Enter first string: '"", ')', 'v', '=', 'input', '(', ""'Enter second string: '"", ')', 'length_lcw', ',', 'lcw_i', ',', 'lcw_j', '=', 'lcw', '(', 'u', ',', 'v', ')', 'print', '(', ""'Longest Common Subword: '"", ',', 'end', '=', ""''"", ')', 'if', 'length_lcw', '>', '0', ':', 'print', '(', 'u', '[', 'lcw_i', ':', 'lcw_i', '+', 'length_lcw', ']', ')']"
2614,"['python', 'program', 'find', 'longest', 'common', 'substring', 'using', 'dynamic', 'programming', 'memoization']","['def', 'lcw', '(', 'u', ',', 'v', ')', ':', '""""""Return length of an LCW of strings u and v and its starting indexes.\n\xa0\n    (l, i, j) is returned where l is the length of an LCW of the strings u, v\n    where the LCW starts at index i in u and index j in v.\n    """"""', 'c', '=', '[', '[', '-', '1', ']', '*', '(', 'len', '(', 'v', ')', '+', '1', ')', 'for', '_', 'in', 'range', '(', 'len', '(', 'u', ')', '+', '1', ')', ']', 'lcw_i', '=', 'lcw_j', '=', '-', '1', 'length_lcw', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'u', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'v', ')', ')', ':', 'temp', '=', 'lcw_starting_at', '(', 'u', ',', 'v', ',', 'c', ',', 'i', ',', 'j', ')', 'if', 'length_lcw', '<', 'temp', ':', 'length_lcw', '=', 'temp', 'lcw_i', '=', 'i', 'lcw_j', '=', 'j', 'return', 'length_lcw', ',', 'lcw_i', ',', 'lcw_j', 'def', 'lcw_starting_at', '(', 'u', ',', 'v', ',', 'c', ',', 'i', ',', 'j', ')', ':', '""""""Return length of the LCW starting at u[i:] and v[j:] and fill table c.\n\xa0\n    c[i][j] contains the length of the LCW at the start of u[i:] and v[j:].\n    This function fills in c as smaller subproblems for solving c[i][j] are\n    solved.""""""', 'if', 'c', '[', 'i', ']', '[', 'j', ']', '>=', '0', ':', 'return', 'c', '[', 'i', ']', '[', 'j', ']', 'if', 'i', '==', 'len', '(', 'u', ')', 'or', 'j', '==', 'len', '(', 'v', ')', ':', 'q', '=', '0', 'elif', 'u', '[', 'i', ']', '!=', 'v', '[', 'j', ']', ':', 'q', '=', '0', 'else', ':', 'q', '=', '1', '+', 'lcw_starting_at', '(', 'u', ',', 'v', ',', 'c', ',', 'i', '+', '1', ',', 'j', '+', '1', ')', 'c', '[', 'i', ']', '[', 'j', ']', '=', 'q', 'return', 'q', 'u', '=', 'input', '(', ""'Enter first string: '"", ')', 'v', '=', 'input', '(', ""'Enter second string: '"", ')', 'length_lcw', ',', 'lcw_i', ',', 'lcw_j', '=', 'lcw', '(', 'u', ',', 'v', ')', 'print', '(', ""'Longest Common Subword: '"", ',', 'end', '=', ""''"", ')', 'if', 'length_lcw', '>', '0', ':', 'print', '(', 'u', '[', 'lcw_i', ':', 'lcw_i', '+', 'length_lcw', ']', ')']"
2615,"['python', 'program', 'print', 'permutation', 'string', 'lexicographic', 'order', 'without', 'recursion']","['from', 'math', 'import', 'factorial', 'def', 'print_permutations_lexicographic_order', '(', 's', ')', ':', '""""""Print all permutations of string s in lexicographic order.""""""', 'seq', '=', 'list', '(', 's', ')', 'for', '_', 'in', 'range', '(', 'factorial', '(', 'len', '(', 'seq', ')', ')', ')', ':', 'print', '(', ""''"", '.', 'join', '(', 'seq', ')', ')', 'p', '=', 'len', '(', 'seq', ')', '-', '1', 'while', 'p', '>', '0', 'and', 'seq', '[', 'p', '-', '1', ']', '>', 'seq', '[', 'p', ']', ':', 'p', '-=', '1', 'seq', '[', 'p', ':', ']', '=', 'reversed', '(', 'seq', '[', 'p', ':', ']', ')', 'if', 'p', '>', '0', ':', 'q', '=', 'p', 'while', 'seq', '[', 'p', '-', '1', ']', '>', 'seq', '[', 'q', ']', ':', 'q', '+=', '1', 'seq', '[', 'p', '-', '1', ']', ',', 'seq', '[', 'q', ']', '=', 'seq', '[', 'q', ']', ',', 'seq', '[', 'p', '-', '1', ']', 's', '=', 'input', '(', ""'Enter the string: '"", ')', 'print_permutations_lexicographic_order', '(', 's', ')']"
2616,"['find', 'smallest', 'digit', 'number']","[""'''Write a Python\nprogram\xa0to\xa0add find the Smallest digit in a number. or\xa0Write a\nprogram\xa0to\xa0add find the Smallest digit in a number using Python '''"", 'print', '(', '""Enter the Number :""', ')', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'smallest', '=', 'num', '%', '10', 'while', 'num', '>', '0', ':', 'reminder', '=', 'num', '%', '10', 'if', 'smallest', '>', 'reminder', ':', 'smallest', '=', 'reminder', 'num', '=', 'int', '(', 'num', '/', '10', ')', 'print', '(', '""The Smallest Digit is ""', ',', 'smallest', ')']"
2617,"['python', 'program', 'put', 'even', 'odd', 'element', 'list', 'two', 'different', 'list']","['a', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter number of elements:""', ')', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'b', '=', 'int', '(', 'input', '(', '""Enter element:""', ')', ')', 'a', '.', 'append', '(', 'b', ')', 'even', '=', '[', ']', 'odd', '=', '[', ']', 'for', 'j', 'in', 'a', ':', 'if', '(', 'j', '%', '2', '==', '0', ')', ':', 'even', '.', 'append', '(', 'j', ')', 'else', ':', 'odd', '.', 'append', '(', 'j', ')', 'print', '(', '""The even list""', ',', 'even', ')', 'print', '(', '""The odd list""', ',', 'odd', ')']"
2618,"['program', 'find', 'transpose', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'tran_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'tran_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'j', ']', '[', 'i', ']', 'print', '(', '""Transpose of the Given Matrix is:""', ')', 'for', 'm', 'in', 'tran_matrix', ':', 'print', '(', 'm', ')']"
2619,"['add', 'number', 'without', 'using', 'arithmetic', 'operator']","[""'''Write a Python\nprogram\xa0to\xa0add between 2 numbers without using arithmetic operators.\nor\xa0Write a program\xa0to\xa0add between 2 numbers without using\narithmetic operators using Python '''"", 'print', '(', '""Enter first number:""', ')', 'num1', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Enter\xa0 second number:""', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'while', 'num2', '!=', '0', ':', 'carry', '=', 'num1', '&', 'num2', 'num1', '=', 'num1', '^', 'num2', 'num2', '=', 'carry', '<<', '1', 'print', '(', '""Addition of two number is ""', ',', 'num1', ')']"
2620,"['python', 'program', 'find', 'number', 'node', 'binary', 'tree']","['class', 'BinaryTree', ':', 'def', '__init__', '(', 'self', ',', 'key', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'def', 'set_root', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'def', 'inorder', '(', 'self', ')', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'inorder', '(', ')', 'print', '(', 'self', '.', 'key', ',', 'end', '=', ""' '"", ')', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'right', '.', 'inorder', '(', ')', 'def', 'insert_left', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'left', '=', 'new_node', 'def', 'insert_right', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'right', '=', 'new_node', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'left', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'right', '.', 'search', '(', 'key', ')', 'return', 'temp', 'return', 'None', 'def', 'count_nodes', '(', 'node', ')', ':', 'if', 'node', 'is', 'None', ':', 'return', '0', 'return', '1', '+', 'count_nodes', '(', 'node', '.', 'left', ')', '+', 'count_nodes', '(', 'node', '.', 'right', ')', 'btree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'insert <data> at root'"", ')', 'print', '(', ""'insert <data> left of <data>'"", ')', 'print', '(', ""'insert <data> right of <data>'"", ')', 'print', '(', ""'count'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'print', '(', ""'inorder traversal of binary tree: '"", ',', 'end', '=', ""''"", ')', 'if', 'btree', 'is', 'not', 'None', ':', 'btree', '.', 'inorder', '(', ')', 'print', '(', ')', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'BinaryTree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'btree', '=', 'new_node', 'else', ':', 'position', '=', 'do', '[', '4', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'btree', 'is', 'not', 'None', ':', 'ref_node', '=', 'btree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'if', 'suboperation', '==', ""'left'"", ':', 'ref_node', '.', 'insert_left', '(', 'new_node', ')', 'elif', 'suboperation', '==', ""'right'"", ':', 'ref_node', '.', 'insert_right', '(', 'new_node', ')', 'elif', 'operation', '==', ""'count'"", ':', 'print', '(', ""'Number of nodes in tree: {}'"", '.', 'format', '(', 'count_nodes', '(', 'btree', ')', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2621,"['define', 'function', 'generate', 'list', 'value', 'square', 'number', 'included', 'function', 'need', 'print', 'last', 'element', 'list']","['Solution', 'def', 'printList', '(', ')', ':', 'li', '=', 'list', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '21', ')', ':', 'li', '.', 'append', '(', 'i', '**', '2', ')', 'print', 'li', '[', '-', '5', ':', ']', 'printList', '(', ')']"
2622,"['print', 'even', 'number', 'given', 'range', 'using', 'recursion']","['def', 'even', '(', 'num1', ',', 'num2', ')', ':', 'if', 'num1', '>', 'num2', ':', 'return', 'print', '(', 'num1', ',', 'end', '=', '"" ""', ')', 'return', 'even', '(', 'num1', '+', '2', ',', 'num2', ')', 'num1', '=', '2', 'print', '(', '""Enter your Limit:""', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""All Even number given range are:""', ')', 'even', '(', 'num1', ',', 'num2', ')']"
2623,"['python', 'program', 'find', 'connected', 'component', 'using', 'dfs', 'undirected', 'graph']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', 'add_undirected_edge', '(', 'self', ',', 'v1_key', ',', 'v2_key', ',', 'weight', '=', '1', ')', ':', '""""""Add undirected edge (2 directed edges) between v1_key and v2_key with\n        given weight.""""""', 'self', '.', 'add_edge', '(', 'v1_key', ',', 'v2_key', ',', 'weight', ')', 'self', '.', 'add_edge', '(', 'v2_key', ',', 'v1_key', ',', 'weight', ')', 'def', 'does_undirected_edge_exist', '(', 'self', ',', 'v1_key', ',', 'v2_key', ')', ':', '""""""Return True if there is an undirected edge between v1_key and v2_key.""""""', 'return', '(', 'self', '.', 'does_edge_exist', '(', 'v1_key', ',', 'v2_key', ')', 'and', 'self', '.', 'does_edge_exist', '(', 'v1_key', ',', 'v2_key', ')', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'label_all_reachable', '(', 'vertex', ',', 'component', ',', 'label', ')', ':', '""""""Set component[v] = label for all v in the component containing vertex.""""""', 'label_all_reachable_helper', '(', 'vertex', ',', 'set', '(', ')', ',', 'component', ',', 'label', ')', 'def', 'label_all_reachable_helper', '(', 'vertex', ',', 'visited', ',', 'component', ',', 'label', ')', ':', '""""""Set component[v] = label for all v in the component containing\n    vertex. Uses set visited to keep track of nodes alread visited.""""""', 'visited', '.', 'add', '(', 'vertex', ')', 'component', '[', 'vertex', ']', '=', 'label', 'for', 'dest', 'in', 'vertex', '.', 'get_neighbours', '(', ')', ':', 'if', 'dest', 'not', 'in', 'visited', ':', 'label_all_reachable_helper', '(', 'dest', ',', 'visited', ',', 'component', ',', 'label', ')', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Undirected Graph'"", ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest>'"", ')', 'print', '(', ""'components'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_undirected_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_undirected_edge', '(', 'src', ',', 'dest', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'components'"", ':', 'component', '=', 'dict', '.', 'fromkeys', '(', 'g', ',', 'None', ')', 'label', '=', '1', 'for', 'v', 'in', 'g', ':', 'if', 'component', '[', 'v', ']', 'is', 'None', ':', 'label_all_reachable', '(', 'v', ',', 'component', ',', 'label', ')', 'label', '+=', '1', 'max_label', '=', 'label', 'for', 'label', 'in', 'range', '(', '1', ',', 'max_label', ')', ':', 'print', '(', ""'Component {}:'"", '.', 'format', '(', 'label', ')', ',', '[', 'v', '.', 'get_key', '(', ')', 'for', 'v', 'in', 'component', 'if', 'component', '[', 'v', ']', '==', 'label', ']', ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2624,"['program', 'find', 'normal', 'trace', 'matrix']","['import', 'math', 'row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'trace', '=', '0', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'if', 'i', '==', 'j', ':', 'trace', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'normal', '=', 'math', '.', 'sqrt', '(', 'sum', ')', 'print', '(', '""Normal Of the Matrix is: ""', ',', 'normal', ')', 'print', '(', '""Trace Of the Matrix is: ""', ',', 'trace', ')']"
2625,"['check', 'armstrong', 'number', 'using', 'recursion']","['sum', '=', '0', 'def', 'check_ArmstrongNumber', '(', 'num', ')', ':', 'global', 'sum', 'if', '(', 'num', '!=', '0', ')', ':', 'sum', '+=', 'pow', '(', 'num', '%', '10', ',', '3', ')', 'check_ArmstrongNumber', '(', 'num', '//', '10', ')', 'return', 'sumnum', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'if', '(', 'check_ArmstrongNumber', '(', 'num', ')', '==', 'num', ')', ':', 'print', '(', '""It is an Armstrong Number.""', ')', 'else', ':', 'print', '(', '""It is not an Armstrong Number.""', ')']"
2626,"['python', 'program', 'interchange', 'two', 'adjacent', 'node', 'given', 'circular', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'CircularLinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'def', 'get_node', '(', 'self', ',', 'index', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'None', 'current', '=', 'self', '.', 'head', 'for', 'i', 'in', 'range', '(', 'index', ')', ':', 'current', '=', 'current', '.', 'next', 'if', 'current', '==', 'self', '.', 'head', ':', 'return', 'None', 'return', 'current', 'def', 'get_prev_node', '(', 'self', ',', 'ref_node', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'None', 'current', '=', 'self', '.', 'head', 'while', 'current', '.', 'next', '!=', 'ref_node', ':', 'current', '=', 'current', '.', 'next', 'return', 'current', 'def', 'insert_after', '(', 'self', ',', 'ref_node', ',', 'new_node', ')', ':', 'new_node', '.', 'next', '=', 'ref_node', '.', 'next', 'ref_node', '.', 'next', '=', 'new_node', 'def', 'insert_before', '(', 'self', ',', 'ref_node', ',', 'new_node', ')', ':', 'prev_node', '=', 'self', '.', 'get_prev_node', '(', 'ref_node', ')', 'self', '.', 'insert_after', '(', 'prev_node', ',', 'new_node', ')', 'def', 'insert_at_end', '(', 'self', ',', 'new_node', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_node', 'new_node', '.', 'next', '=', 'new_node', 'else', ':', 'self', '.', 'insert_before', '(', 'self', '.', 'head', ',', 'new_node', ')', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'insert_at_end', '(', 'Node', '(', 'data', ')', ')', 'def', 'display', '(', 'self', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'current', '=', 'self', '.', 'head', 'while', 'True', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'if', 'current', '==', 'self', '.', 'head', ':', 'break', 'def', 'interchange', '(', 'llist', ',', 'n', ')', ':', 'current', '=', 'llist', '.', 'get_node', '(', 'n', ')', 'current2', '=', 'current', '.', 'next', 'if', 'current2', '.', 'next', '!=', 'current', ':', 'before', '=', 'llist', '.', 'get_prev_node', '(', 'current', ')', 'after', '=', 'current2', '.', 'next', 'before', '.', 'next', '=', 'current2', 'current2', '.', 'next', '=', 'current', 'current', '.', 'next', '=', 'after', 'if', 'llist', '.', 'head', '==', 'current', ':', 'llist', '.', 'head', '=', 'current2', 'elif', 'llist', '.', 'head', '==', 'current2', ':', 'llist', '.', 'head', '=', 'current', 'a_cllist', '=', 'CircularLinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_cllist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'n', '=', 'int', '(', 'input', '(', ""'The nodes at indices n and n+1 will be interchanged.'"", ""' Please enter n: '"", ')', ')', 'interchange', '(', 'a_cllist', ',', 'n', ')', 'print', '(', ""'The new list: '"", ')', 'a_cllist', '.', 'display', '(', ')']"
2627,"['print', 'frequency', 'number', 'array']","['import', 'sys', 'arr', '=', '[', ']', 'freq', '=', '[', ']', 'max', '=', '-', 'sys', '.', 'maxsize', '-', '1', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', '(', 'arr', '[', 'i', ']', '>=', 'max', ')', ':', 'max', '=', 'arr', '[', 'i', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'max', '+', '1', ')', ':', 'freq', '.', 'append', '(', '0', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'freq', '[', 'arr', '[', 'i', ']', ']', '+=', '1', 'for', 'i', 'in', 'range', '(', '0', ',', 'max', '+', '1', ')', ':', 'if', '(', 'freq', '[', 'i', ']', '!=', '0', ')', ':', 'print', '(', '""occurs ""', ',', 'i', ',', '"" ""', ',', 'freq', '[', 'i', ']', ',', '"" times""', ')']"
2628,"['find', 'sum', 'even', 'number', 'using', 'recursion']","['def', 'SumEven', '(', 'num1', ',', 'num2', ')', ':', 'if', 'num1', '>', 'num2', ':', 'return', '0', 'return', 'num1', '+', 'SumEven', '(', 'num1', '+', '2', ',', 'num2', ')', 'num1', '=', '2', 'print', '(', '""Enter your Limit:""', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Sum of all Even numbers in the given range is:""', ',', 'SumEven', '(', 'num1', ',', 'num2', ')', ')']"
2629,"['find', 'sum', 'odd', 'number', 'using', 'recursion']","['def', 'SumOdd', '(', 'num1', ',', 'num2', ')', ':', 'if', 'num1', '>', 'num2', ':', 'return', '0', 'return', 'num1', '+', 'SumOdd', '(', 'num1', '+', '2', ',', 'num2', ')', 'num1', '=', '1', 'print', '(', '""Enter your Limit:""', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Sum of all odd numbers in the given range is:""', ',', 'SumOdd', '(', 'num1', ',', 'num2', ')', ')']"
2630,"['program', 'print', 'inverted', 'v', 'star', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'print_control_x', '=', 'row_size', 'print_control_y', '=', 'row_size', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'in1', 'in', 'range', '(', '1', ',', 'row_size', '*', '2', '+', '1', ')', ':', 'if', 'in1', '==', 'print_control_x', 'or', 'in1', '==', 'print_control_y', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'print_control_x', '-=', '1', 'print_control_y', '+=', '1', 'print', '(', '""\\r""', ')']"
2631,"['program', 'check', 'given', 'number', 'palindrome']","[""'''Write\na Python program\xa0to check the given number is a palindrome or not. or\xa0\n\n\xa0\xa0 Write a program\xa0to\xa0check the\ngiven number is a palindrome or not\nusing Python '''"", 'num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'num1', '=', 'num', 'num2', '=', '0', 'while', '(', 'num', '!=', '0', ')', ':', 'rem', '=', 'num', '%', '10', 'num', '=', 'int', '(', 'num', '/', '10', ')', 'num2', '=', 'num2', '*', '10', '+', 'rem', 'if', '(', 'num1', '==', 'num2', ')', ':', 'print', '(', '""It is Palindrome""', ')', 'else', ':', 'print', '(', '""It is not Palindrome""', ')']"
2632,"['python', 'program', 'read', 'linked', 'list', 'reverse']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'def', 'insert_at_beg', '(', 'self', ',', 'new_node', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_node', 'else', ':', 'new_node', '.', 'next', '=', 'self', '.', 'head', 'self', '.', 'head', '=', 'new_node', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'a_llist', '=', 'LinkedList', '(', ')', 'n', '=', 'int', '(', 'input', '(', ""'How many elements would you like to add? '"", ')', ')', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'data', '=', 'int', '(', 'input', '(', ""'Enter data item: '"", ')', ')', 'node', '=', 'Node', '(', 'data', ')', 'a_llist', '.', 'insert_at_beg', '(', 'node', ')', 'print', '(', ""'The linked list: '"", ',', 'end', '=', ""''"", ')', 'a_llist', '.', 'display', '(', ')']"
2633,"['program', 'find', 'subtraction', 'two', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'matrix1', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix1', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sub_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'sub_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'i', ']', '[', 'j', ']', '-', 'matrix1', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Subtraction of the two Matrices is:""', ')', 'for', 'm', 'in', 'sub_matrix', ':', 'print', '(', 'm', ')']"
2634,"['write', 'program', 'accepts', 'sentence', 'calculate', 'number', 'letter', 'digit']","['s', '=', 'raw_input', '(', ')', 'd', '=', '{', '""DIGITS""', ':', '0', ',', '""LETTERS""', ':', '0', '}', 'for', 'c', 'in', 's', ':', 'if', 'c', '.', 'isdigit', '(', ')', ':', 'd', '[', '""DIGITS""', ']', '+=', '1', 'elif', 'c', '.', 'isalpha', '(', ')', ':', 'd', '[', '""LETTERS""', ']', '+=', '1', 'else', ':', 'pass', 'print', '""LETTERS""', ',', 'd', '[', '""LETTERS""', ']', 'print', '""DIGITS""', ',', 'd', '[', '""DIGITS""', ']']"
2635,"['program', 'convert', 'day', 'year', 'month', 'week']","['days', '=', 'int', '(', 'input', '(', '""Enter Day:""', ')', ')', 'years', '=', '(', 'int', ')', '(', 'days', '/', '365', ')', 'weeks', '=', '(', 'int', ')', '(', 'days', '/', '7', ')', 'months', '=', '(', 'int', ')', '(', 'days', '/', '30', ')', 'print', '(', '""Days to Years:""', ',', 'years', ')', 'print', '(', '""Days to Weeks:""', ',', 'weeks', ')', 'print', '(', '""Days to Months:""', ',', 'months', ')']"
2636,"['python', 'program', 'sort', 'list', 'tuples', 'increasing', 'order', 'last', 'element', 'tuple']","['def', 'last', '(', 'n', ')', ':', 'return', 'n', '[', '-', '1', ']', 'def', 'sort', '(', 'tuples', ')', ':', 'return', 'sorted', '(', 'tuples', ',', 'key', '=', 'last', ')', 'a', '=', 'input', '(', '""Enter a list of tuples:""', ')', 'print', '(', '""Sorted:""', ')', 'print', '(', 'sort', '(', 'a', ')', ')']"
2637,"['python', 'program', 'implement', 'radix', 'sort']","['def', 'radix_sort', '(', 'alist', ',', 'base', '=', '10', ')', ':', 'if', 'alist', '==', '[', ']', ':', 'return', 'def', 'key_factory', '(', 'digit', ',', 'base', ')', ':', 'def', 'key', '(', 'alist', ',', 'index', ')', ':', 'return', '(', '(', 'alist', '[', 'index', ']', '//', '(', 'base', '**', 'digit', ')', ')', '%', 'base', ')', 'return', 'key', 'largest', '=', 'max', '(', 'alist', ')', 'exp', '=', '0', 'while', 'base', '**', 'exp', '<=', 'largest', ':', 'alist', '=', 'counting_sort', '(', 'alist', ',', 'base', '-', '1', ',', 'key_factory', '(', 'exp', ',', 'base', ')', ')', 'exp', '=', 'exp', '+', '1', 'return', 'alist', 'def', 'counting_sort', '(', 'alist', ',', 'largest', ',', 'key', ')', ':', 'c', '=', '[', '0', ']', '*', '(', 'largest', '+', '1', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'alist', ')', ')', ':', 'c', '[', 'key', '(', 'alist', ',', 'i', ')', ']', '=', 'c', '[', 'key', '(', 'alist', ',', 'i', ')', ']', '+', '1', 'c', '[', '0', ']', '=', 'c', '[', '0', ']', '-', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'largest', '+', '1', ')', ':', 'c', '[', 'i', ']', '=', 'c', '[', 'i', ']', '+', 'c', '[', 'i', '-', '1', ']', 'result', '=', '[', 'None', ']', '*', 'len', '(', 'alist', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'alist', ')', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'result', '[', 'c', '[', 'key', '(', 'alist', ',', 'i', ')', ']', ']', '=', 'alist', '[', 'i', ']', 'c', '[', 'key', '(', 'alist', ',', 'i', ')', ']', '=', 'c', '[', 'key', '(', 'alist', ',', 'i', ')', ']', '-', '1', 'return', 'result', 'alist', '=', 'input', '(', ""'Enter the list of (nonnegative) numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'sorted_list', '=', 'radix_sort', '(', 'alist', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'sorted_list', ')']"
2638,"['python', 'program', 'count', 'set', 'bit', 'number']","['def', 'count_set_bits', '(', 'n', ')', ':', 'count', '=', '0', 'while', 'n', ':', 'n', '&=', 'n', '-', '1', 'count', '+=', '1', 'return', 'count', 'n', '=', 'int', '(', 'input', '(', ""'Enter n: '"", ')', ')', 'print', '(', ""'Number of set bits:'"", ',', 'count_set_bits', '(', 'n', ')', ')']"
2639,"['program', 'check', 'whether', 'matrix', 'sparse']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'count_zero', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '==', '0', ':', 'count_zero', '+=', '1', 'if', 'count_zero', '>', '(', 'row_size', '*', 'col_size', ')', '//', '2', ':', 'print', '(', '""Given Matrix is a sparse Matrix.""', ')', 'else', ':', 'print', '(', '""Given Matrix is not a sparse Matrix.""', ')']"
2640,"['python', 'program', 'find', 'largest', 'number', 'list']","['a', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter number of elements:""', ')', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'b', '=', 'int', '(', 'input', '(', '""Enter element:""', ')', ')', 'a', '.', 'append', '(', 'b', ')', 'a', '.', 'sort', '(', ')', 'print', '(', '""Largest element is:""', ',', 'a', '[', 'n', '-', '1', ']', ')']"
2641,"['program', 'find', 'smallest', 'three', 'number']","['print', '(', '""Enter 3 numbers:""', ')', 'num1', '=', 'int', '(', 'input', '(', ')', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'num3', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""The smallest number is ""', ',', 'min', '(', 'num1', ',', 'num2', ',', 'num3', ')', ')']"
2642,"['python', 'program', 'print', 'number', 'range', 'without', 'using', 'loop']","['def', 'printno', '(', 'upper', ')', ':', 'if', '(', 'upper', '>', '0', ')', ':', 'printno', '(', 'upper', '-', '1', ')', 'print', '(', 'upper', ')', 'upper', '=', 'int', '(', 'input', '(', '""Enter upper limit: ""', ')', ')', 'printno', '(', 'upper', ')']"
2643,"['program', 'print', 'inverted', 'right', 'triangle', 'star', 'pattern']","['print', '(', '""Enter the row size:""', ')', 'row_size', '=', 'int', '(', 'input', '(', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', '+', '1', ')', ':', 'for', 'j', 'in', 'range', '(', 'row_size', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2644,"['python', 'program', 'display', 'node', 'linked', 'list', 'reverse', 'without', 'using', 'recursion']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'display_reversed', '(', 'self', ')', ':', 'end_node', '=', 'None', 'while', 'end_node', '!=', 'self', '.', 'head', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', '.', 'next', '!=', 'end_node', ':', 'current', '=', 'current', '.', 'next', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'end_node', '=', 'current', 'a_llist', '=', 'LinkedList', '(', ')', 'n', '=', 'int', '(', 'input', '(', ""'How many elements would you like to add? '"", ')', ')', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'data', '=', 'int', '(', 'input', '(', ""'Enter data item: '"", ')', ')', 'a_llist', '.', 'append', '(', 'data', ')', 'print', '(', ""'The reversed linked list: '"", ',', 'end', '=', ""''"", ')', 'a_llist', '.', 'display_reversed', '(', ')']"
2645,"['convert', 'decimal', 'number', 'hexadecimal', 'using', 'recursion']","['str3', '=', '""""', 'def', 'DecimalToHexadecimal', '(', 'n', ')', ':', 'global', 'str3', 'if', '(', 'n', '!=', '0', ')', ':', 'rem', '=', 'n', '%', '16', 'if', '(', 'rem', '<', '10', ')', ':', 'str3', '+=', '(', 'chr', ')', '(', 'rem', '+', '48', ')']"
2646,"['program', 'check', 'whether', 'number', 'spy', 'number']","['num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'sum', '=', '0', 'mult', '=', '1', 'while', 'num', '!=', '0', ':', 'rem', '=', 'num', '%', '10', 'sum', '+=', 'rem', 'mult', '*=', 'rem', 'num', '//=', '10', 'if', 'sum', '==', 'mult', ':', 'print', '(', '""It is a spy Number.""', ')', 'else', ':', 'print', '(', '""It is not a spy Number.""', ')']"
2647,"['find', 'maximum', 'element', 'matrix']","['import', 'sys', 'row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'max', '=', '-', 'sys', '.', 'maxsize', '-', '1', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '>=', 'max', ':', 'max', '=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""The Maximum element of the Given 2d array is: ""', ',', 'max', ')']"
2648,"['python', 'program', 'calculate', 'number', 'upper', 'case', 'letter', 'lower', 'case', 'letter', 'string']","['string', '=', 'raw_input', '(', '""Enter string:""', ')', 'count1', '=', '0', 'count2', '=', '0', 'for', 'i', 'in', 'string', ':', 'if', '(', 'i', '.', 'islower', '(', ')', ')', ':', 'count1', '=', 'count1', '+', '1', 'elif', '(', 'i', '.', 'isupper', '(', ')', ')', ':', 'count2', '=', 'count2', '+', '1', 'print', '(', '""The number of lowercase characters is:""', ')', 'print', '(', 'count1', ')', 'print', '(', '""The number of uppercase characters is:""', ')', 'print', '(', 'count2', ')']"
2649,"['program', 'print', 'square', 'star', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', ';', 'row_size', '=', 'int', '(', 'input', '(', ')', ')', 'for', 'out', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'print', '(', '""*""', ')', 'print', '(', '""\\r""', ')']"
2650,"['program', 'print', 'inverted', 'half', 'pyramid', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '0', ',', '-', '1', ')', ':', 'for', 'in1', 'in', 'range', '(', 'row_size', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'in2', 'in', 'range', '(', '1', ',', 'out', '+', '1', ')', ':', 'print', '(', 'in2', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2651,"['count', 'distinct', 'element', 'array']","['import', 'sys', 'arr', '=', '[', ']', 'freq', '=', '[', ']', 'max', '=', '-', 'sys', '.', 'maxsize', '-', '1', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', '(', 'arr', '[', 'i', ']', '>=', 'max', ')', ':', 'max', '=', 'arr', '[', 'i', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'max', '+', '1', ')', ':', 'freq', '.', 'append', '(', '0', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'freq', '[', 'arr', '[', 'i', ']', ']', '+=', '1', 'count', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'max', '+', '1', ')', ':', 'if', 'freq', '[', 'i', ']', '==', '1', ':', 'count', '+=', '1', 'print', '(', '""Numbers of distinct elements are ""', ',', 'count', ')']"
2652,"['sort', 'name', 'alphabetical', 'order']","['size', '=', 'int', '(', 'input', '(', '""Enter number of names:""', ')', ')', 'print', '(', '""Enter ""', ',', 'size', ',', '"" names:""', ')', 'str', '=', '[', ']', 'for', 'i', 'in', 'range', '(', 'size', ')', ':', 'ele', '=', 'input', '(', ')', 'str', '.', 'append', '(', 'ele', ')', 'for', 'i', 'in', 'range', '(', 'size', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ',', 'size', ')', ':', 'if', '(', 'str', '[', 'i', ']', '>', 'str', '[', 'j', ']', ')', '>', '0', ':', 'temp', '=', 'str', '[', 'i', ']', 'str', '[', 'i', ']', '=', 'str', '[', 'j', ']', 'str', '[', 'j', ']', '=', 'temp', 'print', '(', '""After sorting names are:""', ')', 'for', 'i', 'in', 'range', '(', 'size', ')', ':', 'print', '(', 'str', '[', 'i', ']', ')']"
2653,"['define', 'function', 'generate', 'list', 'value', 'square', 'number', 'included', 'function', 'need', 'print', 'first', 'element', 'list']","['Solution', 'def', 'printList', '(', ')', ':', 'li', '=', 'list', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '21', ')', ':', 'li', '.', 'append', '(', 'i', '**', '2', ')', 'print', 'li', '[', ':', '5', ']', 'printList', '(', ')']"
2654,"['python', 'program', 'count', 'number', 'occurrence', 'element', 'linked', 'list', 'using', 'recursion']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'def', 'count', '(', 'self', ',', 'key', ')', ':', 'return', 'self', '.', 'count_helper', '(', 'self', '.', 'head', ',', 'key', ')', 'def', 'count_helper', '(', 'self', ',', 'current', ',', 'key', ')', ':', 'if', 'current', 'is', 'None', ':', 'return', '0', 'if', 'current', '.', 'data', '==', 'key', ':', 'return', '1', '+', 'self', '.', 'count_helper', '(', 'current', '.', 'next', ',', 'key', ')', 'else', ':', 'return', 'self', '.', 'count_helper', '(', 'current', '.', 'next', ',', 'key', ')', 'a_llist', '=', 'LinkedList', '(', ')', 'for', 'data', 'in', '[', '7', ',', '3', ',', '7', ',', '4', ',', '7', ',', '11', ',', '4', ',', '0', ',', '3', ',', '7', ']', ':', 'a_llist', '.', 'append', '(', 'data', ')', 'print', '(', ""'The linked list: '"", ',', 'end', '=', ""''"", ')', 'a_llist', '.', 'display', '(', ')', 'print', '(', ')', 'key', '=', 'int', '(', 'input', '(', ""'Enter data item: '"", ')', ')', 'count', '=', 'a_llist', '.', 'count', '(', 'key', ')', 'print', '(', ""'{0} occurs {1} time(s) in the list.'"", '.', 'format', '(', 'key', ',', 'count', ')', ')']"
2655,"['define', 'class', 'named', 'rectangle', 'constructed', 'length', 'width', 'rectangle', 'class', 'method', 'compute', 'area']","['class', 'Rectangle', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ',', 'l', ',', 'w', ')', ':', 'self', '.', 'length', '=', 'l', 'self', '.', 'width', '=', 'w', 'def', 'area', '(', 'self', ')', ':', 'return', 'self', '.', 'length', '*', 'self', '.', 'width', 'aRectangle', '=', 'Rectangle', '(', '2', ',', '10', ')', 'print', 'aRectangle', '.', 'area', '(', ')']"
2656,"['program', 'find', 'nth', 'disarium', 'number']","['import', 'math', 'rangenumber', '=', 'int', '(', 'input', '(', '""Enter a Nth Number:""', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', 'c', '!=', 'rangenumber', ':', 'num1', '=', 'num', 'c1', '=', '0', 'num2', '=', 'num', 'while', 'num1', '!=', '0', ':', 'num1', '//=', '10', 'c1', '+=', '1', 'num1', '=', 'num', 'sum', '=', '0', 'while', 'num1', '!=', '0', ':', 'rem', '=', 'num1', '%', '10', 'sum', '+=', 'math', '.', 'pow', '(', 'rem', ',', 'c1', ')', 'num1', '//=', '10', 'c1', '-=', '1', 'if', 'sum', '==', 'num2', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Sunny number is ""', ',', 'letest', ')']"
2657,"['python', 'program', 'select', 'ith', 'largest', 'element', 'list', 'expected', 'linear', 'time']","['def', 'select', '(', 'alist', ',', 'start', ',', 'end', ',', 'i', ')', ':', '""""""Find ith largest element in alist[start... end-1].""""""', 'if', 'end', '-', 'start', '<=', '1', ':', 'return', 'alist', '[', 'start', ']', 'pivot', '=', 'partition', '(', 'alist', ',', 'start', ',', 'end', ')', 'k', '=', 'end', '-', 'pivot', 'if', 'i', '<', 'k', ':', 'return', 'select', '(', 'alist', ',', 'pivot', '+', '1', ',', 'end', ',', 'i', ')', 'elif', 'i', '>', 'k', ':', 'return', 'select', '(', 'alist', ',', 'start', ',', 'pivot', ',', 'i', '-', 'k', ')', 'return', 'alist', '[', 'pivot', ']', 'def', 'partition', '(', 'alist', ',', 'start', ',', 'end', ')', ':', 'pivot', '=', 'alist', '[', 'start', ']', 'i', '=', 'start', '+', '1', 'j', '=', 'end', '-', '1', 'while', 'True', ':', 'while', '(', 'i', '<=', 'j', 'and', 'alist', '[', 'i', ']', '<=', 'pivot', ')', ':', 'i', '=', 'i', '+', '1', 'while', '(', 'i', '<=', 'j', 'and', 'alist', '[', 'j', ']', '>=', 'pivot', ')', ':', 'j', '=', 'j', '-', '1', 'if', 'i', '<=', 'j', ':', 'alist', '[', 'i', ']', ',', 'alist', '[', 'j', ']', '=', 'alist', '[', 'j', ']', ',', 'alist', '[', 'i', ']', 'else', ':', 'alist', '[', 'start', ']', ',', 'alist', '[', 'j', ']', '=', 'alist', '[', 'j', ']', ',', 'alist', '[', 'start', ']', 'return', 'j', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', 'alist', '=', 'alist', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'i', '=', 'int', '(', 'input', '(', ""'The ith smallest element will be found. Enter i: '"", ')', ')', 'ith_smallest_item', '=', 'select', '(', 'alist', ',', '0', ',', 'len', '(', 'alist', ')', ',', 'i', ')', 'print', '(', ""'Result: {}.'"", '.', 'format', '(', 'ith_smallest_item', ')', ')']"
2658,"['program', 'find', 'multiplication', 'two', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'matrix1', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix1', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum', '=', '0', 'mul_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'for', 'k', 'in', 'range', '(', 'row_size', ')', ':', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', '*', 'matrix1', '[', 'i', ']', '[', 'j', ']', 'mul_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'sum', 'print', '(', '""Multiplication of the two Matrices is:""', ')', 'for', 'm', 'in', 'mul_matrix', ':', 'print', '(', 'm', ')']"
2659,"['check', 'whether', 'given', 'number', 'strong', 'number']","[""'''Write\na Python program\xa0to check whether a given number is a strong number or\nnot. or\xa0\n\nWrite a program\xa0to\xa0check whether\na given number is a strong number or not\nusing Python '''"", 'num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'num2', '=', 'num', 'sum', '=', '0', 'while', '(', 'num', '!=', '0', ')', ':', 'fact', '=', '1', 'rem', '=', 'num', '%', '10', 'num', '=', 'int', '(', 'num', '/', '10', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'rem', '+', '1', ')', ':', 'fact', '=', 'fact', '*', 'i', 'sum', '=', 'sum', '+', 'fact', 'if', 'sum', '==', 'num2', ':', 'print', '(', '""It is a Strong Number""', ')', 'else', ':', 'print', '(', '""It is not a Strong Number""', ')']"
2660,"['program', 'print', 'solid', 'inverted', 'half', 'diamond', 'star', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '-', 'row_size', ',', '-', '1', ')', ':', 'for', 'in1', 'in', 'range', '(', '1', ',', 'abs', '(', 'out', ')', '+', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', 'row_size', ',', 'abs', '(', 'out', ')', ',', '-', '1', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2661,"['program', 'find', 'sum', 'series']","['print', '(', '""Enter the range of number:""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Enter the value of x:""', ')', 'x', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '=', '1.0', 'i', '=', '1', 'while', '(', 'i', '<=', 'n', ')', ':', 'fact', '=', '1', 'for', 'j', 'in', 'range', '(', '1', ',', 'i', '+', '1', ')', ':', 'fact', '*=', 'j', 'sum', '+=', 'pow', '(', 'x', ',', 'i', ')', '/', 'fact', 'i', '+=', '1', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
2662,"['program', 'find', 'nth', 'automorphic', 'number']","['rangenumber', '=', 'int', '(', 'input', '(', '""Enter an Nth Number:""', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', 'c', '!=', 'rangenumber', ':', 'num1', '=', 'num', 'sqr', '=', 'num1', '*', 'num1', 'flag', '=', '0', 'while', 'num1', '>', '0', ':', 'if', 'num1', '%', '10', '!=', 'sqr', '%', '10', ':', 'flag', '=', '-', '1', 'break', 'num1', '=', 'num1', '//', '10', 'sqr', '=', 'sqr', '//', '10', 'if', 'flag', '==', '0', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Automorphic number is ""', ',', 'letest', ')']"
2663,"['input', 'string', 'keyboard', 'print']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'word', '=', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'word', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '""""', ')']"
2664,"['python', 'program', 'solve', 'knapsack', 'problem', 'using', 'dynamic', 'programming', 'memoization']","['def', 'knapsack', '(', 'value', ',', 'weight', ',', 'capacity', ')', ':', '""""""Return the maximum value of items that doesn\'t exceed capacity.\n\xa0\n    value[i] is the value of item i and weight[i] is the weight of item i\n    for 1 <= i <= n where n is the number of items.\n\xa0\n    capacity is the maximum weight.\n    """"""', 'n', '=', 'len', '(', 'value', ')', '-', '1', 'm', '=', '[', '[', '-', '1', ']', '*', '(', 'capacity', '+', '1', ')', 'for', '_', 'in', 'range', '(', 'n', '+', '1', ')', ']', 'return', 'knapsack_helper', '(', 'value', ',', 'weight', ',', 'm', ',', 'n', ',', 'capacity', ')', 'def', 'knapsack_helper', '(', 'value', ',', 'weight', ',', 'm', ',', 'i', ',', 'w', ')', ':', '""""""Return maximum value of first i items attainable with weight <= w.\n\xa0\n    m[i][w] will store the maximum value that can be attained with a maximum\n    capacity of w and using only the first i items\n    This function fills m as smaller subproblems needed to compute m[i][w] are\n    solved.\n\xa0\n    value[i] is the value of item i and weight[i] is the weight of item i\n    for 1 <= i <= n where n is the number of items.\n    """"""', 'if', 'm', '[', 'i', ']', '[', 'w', ']', '>=', '0', ':', 'return', 'm', '[', 'i', ']', '[', 'w', ']', 'if', 'i', '==', '0', ':', 'q', '=', '0', 'elif', 'weight', '[', 'i', ']', '<=', 'w', ':', 'q', '=', 'max', '(', 'knapsack_helper', '(', 'value', ',', 'weight', ',', 'm', ',', 'i', '-', '1', ',', 'w', '-', 'weight', '[', 'i', ']', ')', '+', 'value', '[', 'i', ']', ',', 'knapsack_helper', '(', 'value', ',', 'weight', ',', 'm', ',', 'i', '-', '1', ',', 'w', ')', ')', 'else', ':', 'q', '=', 'knapsack_helper', '(', 'value', ',', 'weight', ',', 'm', ',', 'i', '-', '1', ',', 'w', ')', 'm', '[', 'i', ']', '[', 'w', ']', '=', 'q', 'return', 'q', 'n', '=', 'int', '(', 'input', '(', ""'Enter number of items: '"", ')', ')', 'value', '=', 'input', '(', ""'Enter the values of the {} item(s) in order: '"", '.', 'format', '(', 'n', ')', ')', '.', 'split', '(', ')', 'value', '=', '[', 'int', '(', 'v', ')', 'for', 'v', 'in', 'value', ']', 'value', '.', 'insert', '(', '0', ',', 'None', ')', 'weight', '=', 'input', '(', ""'Enter the positive weights of the {} item(s) in order: '"", '.', 'format', '(', 'n', ')', ')', '.', 'split', '(', ')', 'weight', '=', '[', 'int', '(', 'w', ')', 'for', 'w', 'in', 'weight', ']', 'weight', '.', 'insert', '(', '0', ',', 'None', ')', 'capacity', '=', 'int', '(', 'input', '(', ""'Enter maximum weight: '"", ')', ')', 'ans', '=', 'knapsack', '(', 'value', ',', 'weight', ',', 'capacity', ')', 'print', '(', ""'The maximum value of items that can be carried:'"", ',', 'ans', ')']"
2665,"['linear', 'search', 'program', 'c', 'c', 'java', 'python']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'search_elm', '=', 'int', '(', 'input', '(', '""Enter the search element: ""', ')', ')', 'found', '=', '0', 'for', 'i', 'in', 'range', '(', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '==', 'search_elm', ':', 'found', '=', '1', 'if', 'found', '==', '1', ':', 'print', '(', '""Search element is found.""', ')', 'else', ':', 'print', '(', '""Search element is not found.""', ')']"
2666,"['sort', 'array', 'descending', 'order', 'using', 'recursion']","['def', 'swap_Element', '(', 'arr', ',', 'i', ',', 'j', ')', ':', 'temp', '=', 'arr', '[', 'i', ']', 'arr', '[', 'i', ']', '=', 'arr', '[', 'j', ']', 'arr', '[', 'j', ']', '=', 'tempdef', 'Decreasing_sort_element', '(', 'arr', ',', 'n', ')', ':', 'if', '(', 'n', '>', '0', ')', ':', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'if', '(', 'arr', '[', 'i', ']', '<=', 'arr', '[', 'n', '-', '1', ']', ')', ':', 'swap_Element', '(', 'arr', ',', 'i', ',', 'n', '-', '1', ')', 'Decreasing_sort_element', '(', 'arr', ',', 'n', '-', '1', ')', 'def', 'printArr', '(', 'arr', ',', 'n', ')', ':', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')', 'arr', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'Decreasing_sort_element', '(', 'arr', ',', 'n', ')', 'print', '(', '""After Decreasing order sort Array Elements are:""', ')', 'printArr', '(', 'arr', ',', 'n', ')']"
2667,"['python', 'program', 'reverse', 'stack', 'using', 'recursion']","['class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'push', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'pop', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', ')', 'def', 'display', '(', 'self', ')', ':', 'for', 'data', 'in', 'reversed', '(', 'self', '.', 'items', ')', ':', 'print', '(', 'data', ')', 'def', 'insert_at_bottom', '(', 's', ',', 'data', ')', ':', 'if', 's', '.', 'is_empty', '(', ')', ':', 's', '.', 'push', '(', 'data', ')', 'else', ':', 'popped', '=', 's', '.', 'pop', '(', ')', 'insert_at_bottom', '(', 's', ',', 'data', ')', 's', '.', 'push', '(', 'popped', ')', 'def', 'reverse_stack', '(', 's', ')', ':', 'if', 'not', 's', '.', 'is_empty', '(', ')', ':', 'popped', '=', 's', '.', 'pop', '(', ')', 'reverse_stack', '(', 's', ')', 'insert_at_bottom', '(', 's', ',', 'popped', ')', 's', '=', 'Stack', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements to push: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 's', '.', 'push', '(', 'int', '(', 'data', ')', ')', 'print', '(', ""'The stack:'"", ')', 's', '.', 'display', '(', ')', 'reverse_stack', '(', 's', ')', 'print', '(', ""'After reversing:'"", ')', 's', '.', 'display', '(', ')']"
2668,"['program', 'print', 'fibonacci', 'series', 'python', 'c', 'c', 'java']","['print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'i', '=', '1', 'a', '=', '0', 'b', '=', '1', 'c', '=', 'a', '+', 'b', 'while', '(', 'i', '<=', 'n', ')', ':', 'print', '(', 'c', ',', 'end', '=', '"" ""', ')', 'c', '=', 'a', '+', 'b', 'a', '=', 'b', 'b', '=', 'c', 'i', '+=', '1']"
2669,"['program', 'find', 'sum', 'lower', 'triangular', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '<', 'j', ':', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Sum of Lower Triangular Matrix Elements is: ""', ',', 'sum', ')']"
2670,"['program', 'find', 'nth', 'trimorphic', 'number']","['rangenumber', '=', 'int', '(', 'input', '(', '""Enter a Nth Number:""', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', 'c', '!=', 'rangenumber', ':', 'flag', '=', '0', 'num1', '=', 'num', 'cube_power', '=', 'num', '*', 'num', '*', 'num', 'while', 'num1', '!=', '0', ':', 'if', 'num1', '%', '10', '!=', 'cube_power', '%', '10', ':', 'flag', '=', '1', 'break', 'num1', '//=', '10', 'cube_power', '//=', '10', 'if', 'flag', '==', '0', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Trimorphic number is ""', ',', 'latest', ')']"
2671,"['count', 'number', 'vowel', 'consonant', 'number', 'special', 'character', 'present', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'v_count', '=', '0', 's_count', '=', '0', 'n_count', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '==', ""'a'"", 'or', 'str', '[', 'i', ']', '==', ""'A'"", 'or', 'str', '[', 'i', ']', '==', ""'e'"", 'or', 'str', '[', 'i', ']', '==', ""'E'"", 'or', 'str', '[', 'i', ']', '==', ""'i'"", 'or', 'str', '[', 'i', ']', '==', ""'I'"", 'or', 'str', '[', 'i', ']', '==', ""'o'"", 'or', 'str', '[', 'i', ']', '==', ""'O'"", 'or', 'str', '[', 'i', ']', '==', ""'u'"", 'or', 'str', '[', 'i', ']', '==', ""'U'"", ':', 'v_count', '+=', '1', 'elif', 'str', '[', 'i', ']', '>=', ""'0'"", 'and', 'str', '[', 'i', ']', '<=', ""'9'"", ':', 'n_count', '+=', '1', 'elif', 'str', '[', 'i', ']', '>=', 'chr', '(', '0', ')', 'and', 'str', '[', 'i', ']', '<=', 'chr', '(', '47', ')', 'or', 'str', '[', 'i', ']', '>=', 'chr', '(', '58', ')', 'and', 'str', '[', 'i', ']', '<=', 'chr', '(', '64', ')', 'or', 'str', '[', 'i', ']', '>=', 'chr', '(', '91', ')', 'and', 'str', '[', 'i', ']', '<=', 'chr', '(', '96', ')', 'or', 'str', '[', 'i', ']', '>=', 'chr', '(', '123', ')', 'and', 'str', '[', 'i', ']', '<=', 'chr', '(', '127', ')', ':', 's_count', '+=', '1', 'print', '(', '""Number of digits: ""', ',', 'n_count', ')', 'print', '(', '""Number of vowels: ""', ',', 'v_count', ')', 'print', '(', '""Number of special character: ""', ',', 's_count', ')', 'print', '(', '""Number of consonants: ""', ',', 'len', '(', 'str', ')', '-', 'n_count', '-', 'v_count', '-', 's_count', ')']"
2672,"['python', 'program', 'implement', 'binary', 'search', 'without', 'recursion']","['def', 'binary_search', '(', 'alist', ',', 'key', ')', ':', '""""""Search key in alist[start... end - 1].""""""', 'start', '=', '0', 'end', '=', 'len', '(', 'alist', ')', 'while', 'start', '<', 'end', ':', 'mid', '=', '(', 'start', '+', 'end', ')', '//', '2', 'if', 'alist', '[', 'mid', ']', '>', 'key', ':', 'end', '=', 'mid', 'elif', 'alist', '[', 'mid', ']', '<', 'key', ':', 'start', '=', 'mid', '+', '1', 'else', ':', 'return', 'mid', 'return', '-', '1', 'alist', '=', 'input', '(', ""'Enter the sorted list of numbers: '"", ')', 'alist', '=', 'alist', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'key', '=', 'int', '(', 'input', '(', ""'The number to search for: '"", ')', ')', 'index', '=', 'binary_search', '(', 'alist', ',', 'key', ')', 'if', 'index', '<', '0', ':', 'print', '(', ""'{} was not found.'"", '.', 'format', '(', 'key', ')', ')', 'else', ':', 'print', '(', ""'{} was found at index {}.'"", '.', 'format', '(', 'key', ',', 'index', ')', ')']"
2673,"['python', 'program', 'compute', 'prime', 'factor', 'integer']","['n', '=', 'int', '(', 'input', '(', '""Enter an integer:""', ')', ')', 'print', '(', '""Factors are:""', ')', 'i', '=', '1', 'while', '(', 'i', '<=', 'n', ')', ':', 'k', '=', '0', 'if', '(', 'n', '%', 'i', '==', '0', ')', ':', 'j', '=', '1', 'while', '(', 'j', '<=', 'i', ')', ':', 'if', '(', 'i', '%', 'j', '==', '0', ')', ':', 'k', '=', 'k', '+', '1', 'j', '=', 'j', '+', '1', 'if', '(', 'k', '==', '2', ')', ':', 'print', '(', 'i', ')', 'i', '=', 'i', '+', '1']"
2674,"['print', 'inverted', 'pant', 'shape', 'star', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', '1', ',', 'row_size', '*', '2', ')', ':', 'if', 'inn', '<=', 'out', 'or', 'inn', '>=', 'row_size', '*', '2', '-', 'out', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2675,"['program', 'print', 'hollow', 'half', 'pyramid', 'star', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'print_control_x', '=', 'row_size', '//', '2', '+', '1', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'if', 'inn', '==', '1', 'or', 'out', '==', 'inn', 'or', 'out', '==', 'row_size', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2676,"['program', 'find', 'transpose', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'tran_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'tran_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'j', ']', '[', 'i', ']', 'print', '(', '""Transpose of the Given Matrix is:""', ')', 'for', 'm', 'in', 'tran_matrix', ':', 'print', '(', 'm', ')']"
2677,"['print', 'consonant', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'print', '(', '""All the consonants in the string are:""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '==', ""'a'"", 'or', 'str', '[', 'i', ']', '==', ""'A'"", 'or', 'str', '[', 'i', ']', '==', ""'e'"", 'or', 'str', '[', 'i', ']', '==', ""'E'"", 'or', 'str', '[', 'i', ']', '==', ""'i'"", 'or', 'str', '[', 'i', ']', '==', ""'I'"", 'or', 'str', '[', 'i', ']', '==', ""'o'"", 'or', 'str', '[', 'i', ']', '==', ""'O'"", 'or', 'str', '[', 'i', ']', '==', ""'u'"", 'or', 'str', '[', 'i', ']', '==', ""'U'"", ':', 'continue', 'else', ':', 'print', '(', 'str', '[', 'i', ']', ',', 'end', '=', '"" ""', ')']"
2678,"['multiply', 'two', 'number', 'without', 'using', 'multiplication', 'operator']","['num1', '=', 'int', '(', 'input', '(', '""Enter the First numbers :""', ')', ')', 'num2', '=', 'int', '(', 'input', '(', '""Enter the Second number:""', ')', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'num1', '+', '1', ')', ':', 'sum', '=', 'sum', '+', 'num2', 'print', '(', '""The multiplication of ""', ',', 'num1', ',', '"" and ""', ',', 'num2', ',', '"" is ""', ',', 'sum', ')']"
2679,"['python', 'program', 'depth', 'first', 'binary', 'tree', 'search', 'without', 'using', 'recursion']","['class', 'BinaryTree', ':', 'def', '__init__', '(', 'self', ',', 'key', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'def', 'set_root', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'def', 'insert_left', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'left', '=', 'new_node', 'def', 'insert_right', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'right', '=', 'new_node', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'left', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'right', '.', 'search', '(', 'key', ')', 'return', 'temp', 'return', 'None', 'def', 'preorder_depth_first', '(', 'self', ')', ':', 's', '=', 'Stack', '(', ')', 's', '.', 'push', '(', 'self', ')', 'while', '(', 'not', 's', '.', 'is_empty', '(', ')', ')', ':', 'node', '=', 's', '.', 'pop', '(', ')', 'print', '(', 'node', '.', 'key', ',', 'end', '=', ""' '"", ')', 'if', 'node', '.', 'right', 'is', 'not', 'None', ':', 's', '.', 'push', '(', 'node', '.', 'right', ')', 'if', 'node', '.', 'left', 'is', 'not', 'None', ':', 's', '.', 'push', '(', 'node', '.', 'left', ')', 'class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'push', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'pop', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', ')', 'btree', '=', 'BinaryTree', '(', ')', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'insert <data> at root'"", ')', 'print', '(', ""'insert <data> left of <data>'"", ')', 'print', '(', ""'insert <data> right of <data>'"", ')', 'print', '(', ""'dfs'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'BinaryTree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'btree', '=', 'new_node', 'else', ':', 'position', '=', 'do', '[', '4', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'btree', 'is', 'not', 'None', ':', 'ref_node', '=', 'btree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'if', 'suboperation', '==', ""'left'"", ':', 'ref_node', '.', 'insert_left', '(', 'new_node', ')', 'elif', 'suboperation', '==', ""'right'"", ':', 'ref_node', '.', 'insert_right', '(', 'new_node', ')', 'elif', 'operation', '==', ""'dfs'"", ':', 'print', '(', ""'pre-order dfs traversal: '"", ',', 'end', '=', ""''"", ')', 'if', 'btree', 'is', 'not', 'None', ':', 'btree', '.', 'preorder_depth_first', '(', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2680,"['print', 'prime', 'number', 'n', 'using', 'recursion']","['def', 'CheckPrime', '(', 'i', ',', 'num', ')', ':', 'if', 'num', '==', 'i', ':', 'return', '0', 'else', ':', 'if', '(', 'num', '%', 'i', '==', '0', ')', ':', 'return', '1', 'else', ':', 'return', 'CheckPrime', '(', 'i', '+', '1', ',', 'num', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter your Number:""', ')', ')', 'print', '(', '""Prime Number Between 1 to n are: ""', ')', 'for', 'i', 'in', 'range', '(', '2', ',', 'n', '+', '1', ')', ':', 'if', '(', 'CheckPrime', '(', '2', ',', 'i', ')', '==', '0', ')', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
2681,"['python', 'program', 'detect', 'two', 'string', 'anagram']","['s1', '=', 'raw_input', '(', '""Enter first string:""', ')', 's2', '=', 'raw_input', '(', '""Enter second string:""', ')', 'if', '(', 'sorted', '(', 's1', ')', '==', 'sorted', '(', 's2', ')', ')', ':', 'print', '(', '""The strings are anagrams.""', ')', 'else', ':', 'print', '(', '""The strings aren\'t anagrams.""', ')']"
2682,"['convert', 'lowercase', 'uppercase', 'using', 'inbuilt', 'function']","['str', '=', 'input', '(', '""Enter the String(Lower case):""', ')', 'print', '(', '""Upper case String is:""', ',', 'str', '.', 'upper', '(', ')', ')']"
2683,"['find', 'sum', 'element', 'array']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Sum of the Given Matrix Elements is: ""', ',', 'sum', ')']"
2684,"['required', 'write', 'program', 'sort', 'name', 'age', 'height', 'tuples', 'ascending', 'order', 'name', 'string', 'age', 'height', 'number', 'tuples', 'input', 'console', 'sort', 'criterion', 'sort', 'based', 'name', 'sort', 'based', 'age', 'sort', 'score', 'priority', 'name', 'age', 'score', 'following', 'tuples', 'given', 'input', 'program', 'output', 'program', 'john', 'jony', 'jony', 'json', 'tom']","['Solutions', ':', 'from', 'operator', 'import', 'itemgetter', ',', 'attrgetter', 'l', '=', '[', ']', 'while', 'True', ':', 's', '=', 'raw_input', '(', ')', 'if', 'not', 's', ':', 'break', 'l', '.', 'append', '(', 'tuple', '(', 's', '.', 'split', '(', '"",""', ')', ')', ')', 'print', 'sorted', '(', 'l', ',', 'key', '=', 'itemgetter', '(', '0', ',', '1', ',', '2', ')', ')']"
2685,"['python', 'program', 'accept', 'hyphen', 'separated', 'sequence', 'word', 'input', 'print', 'word', 'hyphenseparated', 'sequence', 'sorting', 'alphabetically']","['print', '(', '""Enter a hyphen separated sequence of words:""', ')', 'lst', '=', '[', 'n', 'for', 'n', 'in', 'raw_input', '(', ')', '.', 'split', '(', ""'-'"", ')', ']', 'lst', '.', 'sort', '(', ')', 'print', '(', '""Sorted:""', ')', 'print', '(', ""'-'"", '.', 'join', '(', 'lst', ')', ')']"
2686,"['python', 'program', 'calculate', 'number', 'digit', 'letter', 'string']","['string', '=', 'raw_input', '(', '""Enter string:""', ')', 'count1', '=', '0', 'count2', '=', '0', 'for', 'i', 'in', 'string', ':', 'if', '(', 'i', '.', 'isdigit', '(', ')', ')', ':', 'count1', '=', 'count1', '+', '1', 'count2', '=', 'count2', '+', '1', 'print', '(', '""The number of digits is:""', ')', 'print', '(', 'count1', ')', 'print', '(', '""The number of characters is:""', ')', 'print', '(', 'count2', ')']"
2687,"['program', 'print', 'full', 'pyramid', 'star', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'star_print', '=', '1', 'for', 'out', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'inn', 'in', 'range', '(', 'row_size', '-', '1', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', '0', ',', 'star_print', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'star_print', '+=', '2', 'print', '(', '""\\r""', ')']"
2688,"['python', 'program', 'find', 'area', 'rectangle', 'using', 'class']","['class', 'rectangle', '(', ')', ':', 'def', '__init__', '(', 'self', ',', 'breadth', ',', 'length', ')', ':', 'self', '.', 'breadth', '=', 'breadth', 'self', '.', 'length', '=', 'length', 'def', 'area', '(', 'self', ')', ':', 'return', 'self', '.', 'breadth', '*', 'self', '.', 'length', 'a', '=', 'int', '(', 'input', '(', '""Enter length of rectangle: ""', ')', ')', 'b', '=', 'int', '(', 'input', '(', '""Enter breadth of rectangle: ""', ')', ')', 'obj', '=', 'rectangle', '(', 'a', ',', 'b', ')', 'print', '(', '""Area of rectangle:""', ',', 'obj', '.', 'area', '(', ')', ')', 'print', '(', ')']"
2689,"['python', 'program', 'find', 'length', 'linked', 'list', 'without', 'using', 'recursion']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'length', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'length', '=', '0', 'while', 'current', ':', 'length', '=', 'length', '+', '1', 'current', '=', 'current', '.', 'next', 'return', 'length', 'a_llist', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_llist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'print', '(', ""'The length of the linked list is '"", '+', 'str', '(', 'a_llist', '.', 'length', '(', ')', ')', '+', ""'.'"", ',', 'end', '=', ""''"", ')']"
2690,"['convert', 'alternate', 'character', 'capital', 'letter']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'j', '=', '0', 'newStr', '=', '""""', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'j', '%', '2', '==', '1', ':', 'if', 'str', '[', 'i', ']', '>=', ""'A'"", 'and', 'str', '[', 'i', ']', '<=', ""'Z'"", ':', 'ch', '=', 'chr', '(', 'ord', '(', 'str', '[', 'i', ']', ')', '+', '32', ')', 'newStr', '=', 'newStr', '+', 'ch', 'else', ':', 'newStr', '=', 'newStr', '+', 'str', '[', 'i', ']', 'else', ':', 'if', 'str', '[', 'i', ']', '>=', ""'a'"", 'and', 'str', '[', 'i', ']', '<=', ""'z'"", ':', 'ch', '=', 'chr', '(', 'ord', '(', 'str', '[', 'i', ']', ')', '-', '32', ')', 'newStr', '=', 'newStr', '+', 'ch', 'else', ':', 'newStr', '=', 'newStr', '+', 'str', '[', 'i', ']', 'if', 'str', '[', 'i', ']', '==', ""' '"", ':', 'continue', 'j', '=', 'j', '+', '1', 'print', '(', '""After converting Your String is :""', ',', 'newStr', ')']"
2691,"['binary', 'search', 'program', 'c', 'c', 'java', 'python']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'search_elm', '=', 'int', '(', 'input', '(', '""Enter the search element: ""', ')', ')', 'found', '=', '0', 'lowerBound', '=', '0', 'upperBound', '=', 'size', '-', '1', 'while', 'lowerBound', '<=', 'upperBound', 'and', 'not', 'found', ':', 'mid', '=', '(', 'lowerBound', '+', 'upperBound', ')', '//', '2', 'if', 'arr', '[', 'mid', ']', '==', 'search_elm', ':', 'found', '=', '1', 'else', ':', 'if', 'arr', '[', 'mid', ']', '<', 'search_elm', ':', 'lowerBound', '=', 'mid', '+', '1', 'else', ':', 'upperBound', '=', 'mid', '-', '1', 'if', 'found', '==', '1', ':', 'print', '(', '""Search element is found.""', ')', 'else', ':', 'print', '(', '""Search element is not found.""', ')']"
2692,"['python', 'program', 'implement', 'depthfirst', 'search', 'graph', 'using', 'recursion']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'display_dfs', '(', 'v', ')', ':', '""""""Display DFS traversal starting at vertex v.""""""', 'display_dfs_helper', '(', 'v', ',', 'set', '(', ')', ')', 'def', 'display_dfs_helper', '(', 'v', ',', 'visited', ')', ':', '""""""Display DFS traversal starting at vertex v. Uses set visited to keep\n    track of already visited nodes.""""""', 'visited', '.', 'add', '(', 'v', ')', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'if', 'dest', 'not', 'in', 'visited', ':', 'display_dfs_helper', '(', 'dest', ',', 'visited', ')', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest>'"", ')', 'print', '(', ""'dfs <vertex key>'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'dfs'"", ':', 'key', '=', 'int', '(', 'do', '[', '1', ']', ')', 'print', '(', ""'Depth-first Traversal: '"", ',', 'end', '=', ""''"", ')', 'vertex', '=', 'g', '.', 'get_vertex', '(', 'key', ')', 'display_dfs', '(', 'vertex', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2693,"['define', 'function', 'compute', 'sum', 'two', 'number']","['Solution', 'def', 'SumFunction', '(', 'number1', ',', 'number2', ')', ':', 'return', 'number1', '+', 'number2', 'print', 'SumFunction', '(', '1', ',', '2', ')']"
2694,"['print', 'permutation', 'string', 'using', 'recursion']","['import', 'java', '.', 'util', '.', 'Scanner', ';', 'public', 'class', 'AnagramString', '{', 'static', 'void', 'rotate', '(', 'char', 'str', '[', ']', ',', 'int', 'n', ')', '{', 'int', 'j', ',', 'size', '=', 'str', '.', 'length', ';', 'int', 'p', '=', 'size', '-', 'n', ';', 'char', 'temp', '=', 'str', '[', 'p', ']', ';', 'for', '(', 'j', '=', 'p', '+', '1', ';', 'j', '<', 'size', ';', 'j', '+', '+', ')', 'str', '[', 'j', '-', '1', ']', '=', 'str', '[', 'j', ']', ';', 'str', '[', 'j', '-', '1', ']', '=', 'temp', ';', '}', 'static', 'void', 'doAnagram', '(', 'char', 'str', '[', ']', ',', 'int', 'n', ')', '{', 'if', '(', 'n', '==', '1', ')', 'return', ';', 'for', '(', 'int', 'j', '=', '0', ';', 'j', '<', 'n', ';', 'j', '+', '+', ')', '{', 'doAnagram', '(', 'str', ',', 'n', '-', '1', ')', ';', 'if', '(', 'n', '==', '2', ')', '{', 'display', '(', 'str', ')', ';', '}', 'rotate', '(', 'str', ',', 'n', ')', ';', '}', '}', 'static', 'void', 'display', '(', 'char', 'str', '[', ']', ')', '{', 'int', 'size', '=', 'str', '.', 'length', ',', 'j', ';', 'for', '(', 'j', '=', '0', ';', 'j', '<', 'size', ';', 'j', '+', '+', ')', 'System', '.', 'out', '.', 'print', '(', 'str', '[', 'j', ']', ')', ';', 'System', '.', 'out', '.', 'print', '(', '"" ""', ')', ';', '}', 'public', 'static', 'void', 'main', '(', 'String', '[', ']', 'args', ')', '{', 'Scanner', 'cs', '=', 'new', 'Scanner', '(', 'System', '.', 'in', ')', ';', 'String', 'str1', ';', 'System', '.', 'out', '.', 'print', '(', '""Enter your String:""', ')', ';', 'str1', '=', 'cs', '.', 'nextLine', '(', ')', ';', 'char', 'str', '[', ']', '=', 'str1', '.', 'toCharArray', '(', ')', ';', 'System', '.', 'out', '.', 'print', '(', '""All permutations of a Given string are:""', ')', ';', 'doAnagram', '(', 'str', ',', 'str', '.', 'length', ')', ';', 'cs', '.', 'close', '(', ')', ';', '}', '}']"
2695,"['check', 'string', 'contains', 'given', 'substring']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'str1', '=', 'input', '(', '""Enter your Searching word:""', ')', 'out', '=', '0', 'i', '=', '0j', '=', '0', 'while', 'out', '<', 'len', '(', 'str1', ')', ':', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'str1', ')', ')', ':', 'if', '(', 'str', '[', 'i', ']', '==', 'str1', '[', 'j', ']', ')', ':', 'j', '+=', '1', 'else', ':', 'j', '=', '0', 'out', '+=', '1', 'if', '(', 'j', '==', 'out', ')', ':', 'print', '(', '""Searching word is Found.""', ')', 'else', ':', 'print', '(', '""Searching Word is not Found.""', ')']"
2696,"['python', 'program', 'read', 'file', 'capitalize', 'first', 'letter', 'every', 'word', 'file']","['fname', '=', 'input', '(', '""Enter file name: ""', ')', 'with', 'open', '(', 'fname', ',', ""'r'"", ')', 'as', 'f', ':', 'for', 'line', 'in', 'f', ':', 'l', '=', 'line', '.', 'title', '(', ')', 'print', '(', 'l', ')']"
2697,"['define', 'function', 'accept', 'integer', 'number', 'input', 'print', 'even', 'number', 'number', 'even', 'otherwise', 'print', 'odd', 'number']","['Solution', 'def', 'checkValue', '(', 'n', ')', ':', 'if', 'n', '%', '2', '==', '0', ':', 'print', '""It is an even number""', 'else', ':', 'print', '""It is an odd number""', 'checkValue', '(', '7', ')']"
2698,"['insertion', 'sort', 'using', 'recursion']","['def', 'InsertionSort', '(', 'arr', ',', 'n', ')', ':', 'if', '(', 'n', '<=', '1', ')', ':', 'return', 'InsertionSort', '(', 'arr', ',', 'n', '-', '1', ')', 'temp', '=', 'arr', '[', 'n', '-', '1', ']', 'i', '=', 'n', '-', '2', 'while', '(', 'i', '>=', '0', 'and', 'arr', '[', 'i', ']', '>', 'temp', ')', ':', 'arr', '[', 'i', '+', '1', ']', '=', 'arr', '[', 'i', ']', 'i', '=', 'i', '-', '1', 'arr', '[', 'i', '+', '1', ']', '=', 'temparr', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Before Sorting Array Element are: ""', ',', 'arr', ')', 'InsertionSort', '(', 'arr', ',', 'n', ')', 'print', '(', '""After Sorting Array Elements are:""', ',', 'arr', ')']"
2699,"['robot', 'move', 'plane', 'starting', 'original', 'point', 'robot', 'move', 'toward', 'left', 'right', 'given', 'step', 'trace', 'robot', 'movement', 'shown', 'following', 'left', 'right', 'ââ', 'number', 'direction', 'step', 'please', 'write', 'program', 'compute', 'distance', 'current', 'position', 'sequence', 'movement', 'original', 'point', 'distance', 'float', 'print', 'nearest', 'integer']","['import', 'math', 'pos', '=', '[', '0', ',', '0', ']', 'while', 'True', ':', 's', '=', 'raw_input', '(', ')', 'if', 'not', 's', ':', 'break', 'movement', '=', 's', '.', 'split', '(', '"" ""', ')', 'direction', '=', 'movement', '[', '0', ']', 'steps', '=', 'int', '(', 'movement', '[', '1', ']', ')', 'if', 'direction', '==', '""UP""', ':', 'pos', '[', '0', ']', '+=', 'steps', 'elif', 'direction', '==', '""DOWN""', ':', 'pos', '[', '0', ']', '-=', 'steps', 'elif', 'direction', '==', '""LEFT""', ':', 'pos', '[', '1', ']', '-=', 'steps', 'elif', 'direction', '==', '""RIGHT""', ':', 'pos', '[', '1', ']', '+=', 'steps', 'else', ':', 'pass', 'print', 'int', '(', 'round', '(', 'math', '.', 'sqrt', '(', 'pos', '[', '1', ']', '**', '2', '+', 'pos', '[', '0', ']', '**', '2', ')', ')', ')']"
2700,"['python', 'program', 'sort', 'using', 'binary', 'search', 'tree']","['class', 'BSTNode', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'self', '.', 'parent', '=', 'None', 'def', 'insert', '(', 'self', ',', 'node', ')', ':', 'if', 'self', '.', 'key', '>', 'node', '.', 'key', ':', 'if', 'self', '.', 'left', 'is', 'None', ':', 'self', '.', 'left', '=', 'node', 'node', '.', 'parent', '=', 'self', 'else', ':', 'self', '.', 'left', '.', 'insert', '(', 'node', ')', 'elif', 'self', '.', 'key', '<=', 'node', '.', 'key', ':', 'if', 'self', '.', 'right', 'is', 'None', ':', 'self', '.', 'right', '=', 'node', 'node', '.', 'parent', '=', 'self', 'else', ':', 'self', '.', 'right', '.', 'insert', '(', 'node', ')', 'def', 'inorder', '(', 'self', ')', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'inorder', '(', ')', 'print', '(', 'self', '.', 'key', ',', 'end', '=', ""' '"", ')', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'right', '.', 'inorder', '(', ')', 'class', 'BSTree', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'root', '=', 'None', 'def', 'inorder', '(', 'self', ')', ':', 'if', 'self', '.', 'root', 'is', 'not', 'None', ':', 'self', '.', 'root', '.', 'inorder', '(', ')', 'def', 'add', '(', 'self', ',', 'key', ')', ':', 'new_node', '=', 'BSTNode', '(', 'key', ')', 'if', 'self', '.', 'root', 'is', 'None', ':', 'self', '.', 'root', '=', 'new_node', 'else', ':', 'self', '.', 'root', '.', 'insert', '(', 'new_node', ')', 'bstree', '=', 'BSTree', '(', ')', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'for', 'x', 'in', 'alist', ':', 'bstree', '.', 'add', '(', 'x', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'bstree', '.', 'inorder', '(', ')']"
2701,"['given', 'list', 'write', 'program', 'print', 'list', 'removing', 'duplicate', 'value', 'original', 'order', 'reserved']","['def', 'removeDuplicate', '(', 'li', ')', ':', 'newli', '=', '[', ']', 'seen', '=', 'set', '(', ')', 'for', 'item', 'in', 'li', ':', 'if', 'item', 'not', 'in', 'seen', ':', 'seen', '.', 'add', '(', 'item', ')', 'newli', '.', 'append', '(', 'item', ')', 'return', 'newli', 'li', '=', '[', '12', ',', '24', ',', '35', ',', '24', ',', '88', ',', '120', ',', '155', ',', '88', ',', '120', ',', '155', ']', 'print', 'removeDuplicate', '(', 'li', ')']"
2702,"['check', 'whether', 'given', 'number', 'positive', 'negative']","['num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'if', '(', 'num', '<', '0', ')', ':', 'print', '(', '""The number is negative""', ')', 'elif', '(', 'num', '>', '0', ')', ':', 'print', '(', '""The number is positive""', ')', 'else', ':', 'print', '(', '""The number is neither negative nor positive""', ')']"
2703,"['python', 'program', 'create', 'linked', 'list', 'display', 'element', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', 'is', 'not', 'None', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'a_llist', '=', 'LinkedList', '(', ')', 'n', '=', 'int', '(', 'input', '(', ""'How many elements would you like to add? '"", ')', ')', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'data', '=', 'int', '(', 'input', '(', ""'Enter data item: '"", ')', ')', 'a_llist', '.', 'append', '(', 'data', ')', 'print', '(', ""'The linked list: '"", ',', 'end', '=', ""''"", ')', 'a_llist', '.', 'display', '(', ')']"
2704,"['check', 'whether', 'given', 'number', 'friendly', 'pair']","[""'''Write\na Python program\xa0to check whether a given number is Friendly pair or\nnot. or\xa0\n\n\xa0\xa0 Write a program\xa0to\xa0check whether\na given number is Friendly pair or not\nusing Python '''"", 'print', '(', '""Enter two numbers:""', ')', 'num1', '=', 'int', '(', 'input', '(', ')', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'sum1', '=', '0', 'sum2', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'num1', ')', ':', 'if', '(', 'num1', '%', 'i', '==', '0', ')', ':', 'sum1', '=', 'sum1', '+', 'i', 'for', 'i', 'in', 'range', '(', '1', ',', 'num2', ')', ':', 'if', '(', 'num2', '%', 'i', '==', '0', ')', ':', 'sum2', '=', 'sum2', '+', 'i', 'if', 'num1', '/', 'num2', '==', 'sum1', '/', 'sum2', ':', 'print', '(', '""It is a Friendly Pair""', ')', 'else', ':', 'print', '(', '""It is not a Friendly Pair""', ')']"
2705,"['find', 'median', 'two', 'sorted', 'array', 'different', 'size']","['def', 'Find_median', '(', 'arr', ',', 'arr2', ',', 'size', ',', 'size2', ')', ':', 'm_size', '=', 'size', '+', 'size2', 'merge_arr', '=', '[', '0', ']', '*', 'm_size', 'i', '=', '0', 'k', '=', '0', 'j', '=', '0', 'while', 'k', '<', 'm_size', ':', 'if', 'i', '<', 'size', ':', 'merge_arr', '[', 'k', ']', '=', 'arr', '[', 'i', ']', 'i', '+=', '1', 'k', '+=', '1', 'if', 'j', '<', 'size2', ':', 'merge_arr', '[', 'k', ']', '=', 'arr2', '[', 'j', ']', 'j', '+=', '1', 'k', '+=', '1', 'if', 'size', '%', '2', '==', '1', ':', 'median', '=', 'merge_arr', '[', 'size', '//', '2', ']', 'print', '(', '""\\nMedian= ""', ',', 'median', ')', 'else', ':', 'median', '=', '(', 'merge_arr', '[', 'm_size', '//', '2', ']', '+', '(', 'merge_arr', '[', '(', 'm_size', '//', '2', ')', '-', '1', ']', ')', ')', '/', '2.0', 'print', '(', '""\\nMedian= ""', ',', 'median', ')', 'arr', '=', '[', ']', 'arr2', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the 1st array: ""', ')', ')', 'size2', '=', 'int', '(', 'input', '(', '""Enter the size of the 2nd array: ""', ')', ')', 'print', '(', '""Enter the Element of the 1st array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Enter the Element of the 2nd array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size2', ')', ':', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'arr2', '.', 'append', '(', 'num2', ')', 'Find_median', '(', 'arr', ',', 'arr2', ',', 'size', ',', 'size2', ')']"
2706,"['python', 'program', 'find', 'intersection', 'union', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'def', 'get_prev_node', '(', 'self', ',', 'ref_node', ')', ':', 'current', '=', 'self', '.', 'head', 'while', '(', 'current', 'and', 'current', '.', 'next', '!=', 'ref_node', ')', ':', 'current', '=', 'current', '.', 'next', 'return', 'current', 'def', 'duplicate', '(', 'self', ')', ':', 'copy', '=', 'LinkedList', '(', ')', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'node', '=', 'Node', '(', 'current', '.', 'data', ')', 'copy', '.', 'insert_at_end', '(', 'node', ')', 'current', '=', 'current', '.', 'next', 'return', 'copy', 'def', 'insert_at_end', '(', 'self', ',', 'new_node', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_node', 'else', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', '.', 'next', 'is', 'not', 'None', ':', 'current', '=', 'current', '.', 'next', 'current', '.', 'next', '=', 'new_node', 'def', 'remove', '(', 'self', ',', 'node', ')', ':', 'prev_node', '=', 'self', '.', 'get_prev_node', '(', 'node', ')', 'if', 'prev_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'self', '.', 'head', '.', 'next', 'else', ':', 'prev_node', '.', 'next', '=', 'node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'def', 'remove_duplicates', '(', 'llist', ')', ':', 'current1', '=', 'llist', '.', 'head', 'while', 'current1', ':', 'current2', '=', 'current1', '.', 'next', 'data', '=', 'current1', '.', 'data', 'while', 'current2', ':', 'temp', '=', 'current2', 'current2', '=', 'current2', '.', 'next', 'if', 'temp', '.', 'data', '==', 'data', ':', 'llist', '.', 'remove', '(', 'temp', ')', 'current1', '=', 'current1', '.', 'next', 'def', 'find_union', '(', 'llist1', ',', 'llist2', ')', ':', 'if', 'llist1', '.', 'head', 'is', 'None', ':', 'union', '=', 'llist2', '.', 'duplicate', '(', ')', 'remove_duplicates', '(', 'union', ')', 'return', 'union', 'if', 'llist2', '.', 'head', 'is', 'None', ':', 'union', '=', 'llist1', '.', 'duplicate', '(', ')', 'remove_duplicates', '(', 'union', ')', 'return', 'union', 'union', '=', 'llist1', '.', 'duplicate', '(', ')', 'last_node', '=', 'union', '.', 'head', 'while', 'last_node', '.', 'next', 'is', 'not', 'None', ':', 'last_node', '=', 'last_node', '.', 'next', 'llist2_copy', '=', 'llist2', '.', 'duplicate', '(', ')', 'last_node', '.', 'next', '=', 'llist2_copy', '.', 'head', 'remove_duplicates', '(', 'union', ')', 'return', 'union', 'def', 'find_intersection', '(', 'llist1', ',', 'llist2', ')', ':', 'if', '(', 'llist1', '.', 'head', 'is', 'None', 'or', 'llist2', '.', 'head', 'is', 'None', ')', ':', 'return', 'LinkedList', '(', ')', 'intersection', '=', 'LinkedList', '(', ')', 'current1', '=', 'llist1', '.', 'head', 'while', 'current1', ':', 'current2', '=', 'llist2', '.', 'head', 'data', '=', 'current1', '.', 'data', 'while', 'current2', ':', 'if', 'current2', '.', 'data', '==', 'data', ':', 'node', '=', 'Node', '(', 'data', ')', 'intersection', '.', 'insert_at_end', '(', 'node', ')', 'break', 'current2', '=', 'current2', '.', 'next', 'current1', '=', 'current1', '.', 'next', 'remove_duplicates', '(', 'intersection', ')', 'return', 'intersection', 'a_llist1', '=', 'LinkedList', '(', ')', 'a_llist2', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the first linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'node', '=', 'Node', '(', 'int', '(', 'data', ')', ')', 'a_llist1', '.', 'insert_at_end', '(', 'node', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the second linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'node', '=', 'Node', '(', 'int', '(', 'data', ')', ')', 'a_llist2', '.', 'insert_at_end', '(', 'node', ')', 'union', '=', 'find_union', '(', 'a_llist1', ',', 'a_llist2', ')', 'intersection', '=', 'find_intersection', '(', 'a_llist1', ',', 'a_llist2', ')', 'print', '(', ""'Their union: '"", ')', 'union', '.', 'display', '(', ')', 'print', '(', ')', 'print', '(', ""'Their intersection: '"", ')', 'intersection', '.', 'display', '(', ')', 'print', '(', ')']"
2707,"['python', 'program', 'test', 'collatz', 'conjecture', 'given', 'number']","['def', 'collatz', '(', 'n', ')', ':', 'while', 'n', '>', '1', ':', 'print', '(', 'n', ',', 'end', '=', ""' '"", ')', 'if', '(', 'n', '%', '2', ')', ':', 'n', '=', '3', '*', 'n', '+', '1', 'else', ':', 'n', '=', 'n', '//', '2', 'print', '(', '1', ',', 'end', '=', ""''"", ')', 'n', '=', 'int', '(', 'input', '(', ""'Enter n: '"", ')', ')', 'print', '(', ""'Sequence: '"", ',', 'end', '=', ""''"", ')', 'collatz', '(', 'n', ')']"
2708,"['write', 'program', 'compute', 'given', 'n', 'input', 'console']","['n', '=', 'int', '(', 'raw_input', '(', ')', ')', 'sum', '=', '0.0', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum', '+=', 'float', '(', 'float', '(', 'i', ')', '/', '(', 'i', '+', '1', ')', ')', 'print', 'sum']"
2709,"['write', 'program', 'take', 'digit', 'xy', 'input', 'generates', 'array', 'element', 'value', 'ith', 'row', 'jth', 'column', 'array', 'ij', 'note']","['input_str', '=', 'raw_input', '(', ')', 'dimensions', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'input_str', '.', 'split', '(', ""','"", ')', ']', 'rowNum', '=', 'dimensions', '[', '0', ']', 'colNum', '=', 'dimensions', '[', '1', ']', 'multilist', '=', '[', '[', '0', 'for', 'col', 'in', 'range', '(', 'colNum', ')', ']', 'for', 'row', 'in', 'range', '(', 'rowNum', ')', ']', 'for', 'row', 'in', 'range', '(', 'rowNum', ')', ':', 'for', 'col', 'in', 'range', '(', 'colNum', ')', ':', 'multilist', '[', 'row', ']', '[', 'col', ']', '=', 'row', '*', 'col', 'print', 'multilist']"
2710,"['check', 'whether', 'year', 'leap', 'year']","['year', '=', 'int', '(', 'input', '(', '""Enter a Year:""', ')', ')', 'if', '(', '(', 'year', '%', '100', '==', '0', 'and', 'year', '%', '400', '==', '0', ')', 'or', '(', 'year', '%', '100', '!=', '0', 'and', 'year', '%', '4', '==', '0', ')', ')', ':', 'print', '(', '""It is a Leap Year""', ')', 'else', ':', 'print', '(', '""It is not a Leap Year""', ')']"
2711,"['program', 'print', 'pant', 'shape', 'star', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'print_control_x', '=', 'row_size', 'print_control_y', '=', 'row_size', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', '1', ',', 'row_size', '*', '2', ')', ':', 'if', 'inn', '>', 'print_control_x', 'and', 'inn', '<', 'print_control_y', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'print_control_x', '-=', '1', 'print_control_y', '+=', '1', 'print', '(', '""\\r""', ')']"
2712,"['python', 'program', 'compute', 'value', 'euler', 'number', 'e', 'use', 'formula', 'e']","['import', 'math', 'n', '=', 'int', '(', 'input', '(', '""Enter the number of terms: ""', ')', ')', 'sum1', '=', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum1', '=', 'sum1', '+', '(', '1', '/', 'math', '.', 'factorial', '(', 'i', ')', ')', 'print', '(', '""The sum of series is""', ',', 'round', '(', 'sum1', ',', '2', ')', ')']"
2713,"['program', 'find', 'area', 'perimeter', 'circle']","['radius', '=', 'int', '(', 'input', '(', '""Enter the radius of a circle :""', ')', ')', 'area', '=', '3.14', '*', 'radius', '*', 'radius', 'perimeter', '=', '2', '*', '3.14', '*', 'radius', 'print', '(', '""Area =""', ',', 'area', ')', 'print', '(', '""Perimeter =""', ',', 'perimeter', ')']"
2714,"['python', 'program', 'concatenate', 'two', 'dictionary', 'one']","['d1', '=', '{', ""'A'"", ':', '1', ',', ""'B'"", ':', '2', '}', 'd2', '=', '{', ""'C'"", ':', '3', '}', 'd1', '.', 'update', '(', 'd2', ')', 'print', '(', '""Concatenated dictionary is:""', ')', 'print', '(', 'd1', ')']"
2715,"['find', 'reverse', 'number', 'using', 'recursion']","['def', 'reverse', '(', 'num', ')', ':', 'if', 'num', '<', '10', ':', 'print', '(', 'num', ')', 'return', 'else', ':', 'print', '(', 'num', '%', '10', ',', 'end', '=', '""""', ')', 'reverse', '(', 'int', '(', 'num', '/', '10', ')', ')', 'print', '(', '""Enter your number:""', ')', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Reverse of the input number is:""', ')', 'reverse', '(', 'num', ')']"
2716,"['write', 'function', 'compute', 'use', 'tryexcept', 'catch', 'exception']","['def', 'throws', '(', ')', ':', 'return', '5', '/', '0', 'try', ':', 'throws', '(', ')', 'except', 'ZeroDivisionError', ':', 'print', '""division by zero!""', 'except', 'Exception', ',', 'err', ':', 'print', ""'Caught an exception'"", 'finally', ':', 'print', ""'In finally block for cleanup'""]"
2717,"['program', 'find', 'reverse', 'given', 'number']","['num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'num2', '=', '0', 'while', '(', 'num', '!=', '0', ')', ':', 'rem', '=', 'num', '%', '10', 'num', '=', 'int', '(', 'num', '/', '10', ')', 'num2', '=', 'num2', '*', '10', '+', 'rem', 'print', '(', '""The reverse of the number is""', ',', 'num2', ')']"
2718,"['python', 'program', 'find', 'area', 'triangle', 'given', 'three', 'side']","['import', 'math', 'a', '=', 'int', '(', 'input', '(', '""Enter first side: ""', ')', ')', 'b', '=', 'int', '(', 'input', '(', '""Enter second side: ""', ')', ')', 'c', '=', 'int', '(', 'input', '(', '""Enter third side: ""', ')', ')', 's', '=', '(', 'a', '+', 'b', '+', 'c', ')', '/', '2', 'area', '=', 'math', '.', 'sqrt', '(', 's', '*', '(', 's', '-', 'a', ')', '*', '(', 's', '-', 'b', ')', '*', '(', 's', '-', 'c', ')', ')', 'print', '(', '""Area of the triangle is: ""', ',', 'round', '(', 'area', ',', '2', ')', ')']"
2719,"['using', 'list', 'comprehension', 'please', 'write', 'program', 'print', 'list', 'removing', 'number']","['li', '=', '[', '12', ',', '24', ',', '35', ',', '70', ',', '88', ',', '120', ',', '155', ']', 'li', '=', '[', 'x', 'for', '(', 'i', ',', 'x', ')', 'in', 'enumerate', '(', 'li', ')', 'if', 'i', '%', '2', '!=', '0', ']', 'print', 'li']"
2720,"['write', 'program', 'computes', 'net', 'amount', 'bank', 'account', 'based', 'transaction', 'log', 'console', 'input', 'transaction', 'log', 'format', 'shown', 'following', 'w', 'mean', 'deposit', 'w', 'mean', 'withdrawal']","['netAmount', '=', '0', 'while', 'True', ':', 's', '=', 'raw_input', '(', ')', 'if', 'not', 's', ':', 'break', 'values', '=', 's', '.', 'split', '(', '"" ""', ')', 'operation', '=', 'values', '[', '0', ']', 'amount', '=', 'int', '(', 'values', '[', '1', ']', ')', 'if', 'operation', '==', '""D""', ':', 'netAmount', '+=', 'amount', 'elif', 'operation', '==', '""W""', ':', 'netAmount', '-=', 'amount', 'else', ':', 'pass', 'print', 'netAmount']"
2721,"['program', 'print', 'full', 'pyramid', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'np', '=', '1', 'for', 'out', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'in1', 'in', 'range', '(', 'row_size', '-', '1', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'in2', 'in', 'range', '(', '1', ',', 'np', '+', '1', ')', ':', 'print', '(', 'in2', ',', 'end', '=', '""""', ')', 'np', '+=', '2', 'print', '(', '""\\r""', ')']"
2722,"['find', 'two', 'element', 'whose', 'sum', 'closest', 'zero']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'First_element', '=', 'arr', '[', '0', ']', 'Second_element', '=', 'arr', '[', '1', ']', 'Closest_Zero_Sum', '=', 'First_element', '+', 'Second_elementfor', 'i', 'in', 'range', '(', '0', ',', 'size', '-', '1', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ',', 'size', ')', ':', 'sum', '=', 'arr', '[', 'i', ']', '+', 'arr', '[', 'j', ']', 'if', 'abs', '(', 'sum', ')', '<=', 'abs', '(', 'Closest_Zero_Sum', ')', ':', 'Closest_Zero_Sum', '=', 'sum', 'First_element', '=', 'arr', '[', 'i', ']', 'Second_element', '=', 'arr', '[', 'j', ']', 'print', '(', '""Closest to Zero Pair is (""', ',', 'First_element', ',', '"",""', ',', 'Second_element', ',', '"")""', ')']"
2723,"['python', 'program', 'form', 'dictionary', 'object', 'class']","['class', 'A', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'A', '=', '1', 'self', '.', 'B', '=', '2', 'obj', '=', 'A', '(', ')', 'print', '(', 'obj', '.', '__dict__', ')']"
2724,"['insertion', 'sort', 'program', 'python', 'java', 'c', 'c']","['size', '=', 'int', '(', 'input', '(', '""Enter the size of the array:""', ')', ')', ';', 'arr', '=', '[', ']', 'print', '(', '""Enter the element of the array:""', ')', ';', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Before Sorting Array Element are: ""', ',', 'arr', ')', 'for', 'out', 'in', 'range', '(', '1', ',', 'size', '-', '1', ')', ':', 'temp', '=', 'arr', '[', 'out', ']', 'inn', '=', 'out', 'while', 'inn', '>', '0', 'and', 'arr', '[', 'inn', '-', '1', ']', '>=', 'temp', ':', 'arr', '[', 'inn', ']', '=', 'arr', '[', 'inn', '-', '1', ']', 'inn', '-=', '1', 'arr', '[', 'inn', ']', '=', 'temp', 'print', '(', '""\\nAfter Sorting Array Element are: ""', ',', 'arr', ')']"
2725,"['remove', 'element', 'array', 'index']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'pos', '=', 'int', '(', 'input', '(', '""Enter the position of the Element:""', ')', ')', 'print', '(', '""Before deleting array elements are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')', 'arr', '.', 'pop', '(', 'pos', ')', 'print', '(', '""\\nAfter Deleting Array Element are:""', ')', 'print', '(', 'arr', ')']"
2726,"['print', 'alphabet', 'inverted', 'half', 'pyramid', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', 'row_size', '=', 'input', '(', ')', 'for', 'out', 'in', 'range', '(', 'ord', '(', 'row_size', ')', ',', 'ord', '(', ""'A'"", ')', '-', '1', ',', '-', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'ord', '(', 'row_size', ')', '-', '1', ',', 'out', '-', '1', ',', '-', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'out', '+', '1', ')', ':', 'print', '(', 'chr', '(', 'out', ')', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2727,"['find', 'trimorphic', 'number', 'present', 'within', 'given', 'range']","['print', '(', '""Enter a range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Trimorphic numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'flag', '=', '0', 'num', '=', 'i', 'cube_power', '=', 'num', '*', 'num', '*', 'num', 'while', 'num', '!=', '0', ':', 'if', 'num', '%', '10', '!=', 'cube_power', '%', '10', ':', 'flag', '=', '1', 'break', 'num', '//=', '10', 'cube_power', '//=', '10', 'if', 'flag', '==', '0', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
2728,"['check', 'strong', 'number', 'using', 'recursion']","['def', 'Factorial', '(', 'num', ')', ':', 'if', 'num', '<=', '0', ':', 'return', '1', 'else', ':', 'return', 'num', '*', 'Factorial', '(', 'num', '-', '1', ')', 'sum', '=', '0', 'def', 'check_StrongNumber', '(', 'num', ')', ':', 'global', 'sum', 'if', '(', 'num', '>', '0', ')', ':', 'fact', '=', '1', 'rem', '=', 'num', '%', '10', 'check_StrongNumber', '(', 'num', '//', '10', ')', 'fact', '=', 'Factorial', '(', 'rem', ')', 'sum', '+=', 'fact', 'return', 'sumnum', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'if', '(', 'check_StrongNumber', '(', 'num', ')', '==', 'num', ')', ':', 'print', '(', '""It is a strong Number.""', ')', 'else', ':', 'print', '(', '""It is not a strong Number.""', ')']"
2729,"['copy', 'one', 'string', 'another', 'using', 'recursion']","['def', 'Copy_String', '(', 'str', ',', 'str1', ',', 'i', ')', ':', 'str1', '[', 'i', ']', '=', 'str', '[', 'i', ']', 'if', '(', 'str', '[', 'i', ']', '==', ""'\\0'"", ')', ':', 'return', 'Copy_String', '(', 'str', ',', 'str1', ',', 'i', '+', '1', ')', 'str', '=', 'input', '(', '""Enter your String:""', ')', 'str', '+=', ""'\\0'"", 'str1', '=', '[', '0', ']', '*', '(', 'len', '(', 'str', ')', ')', 'Copy_String', '(', 'str', ',', 'str1', ',', '0', ')', 'print', '(', '""Copy Done...""', ')', 'print', '(', '""Copy string is:""', ',', '""""', '.', 'join', '(', 'str1', ')', ')']"
2730,"['program', 'concatenate', 'two', 'string']","['str', '=', 'input', '(', '""Enter the 1st String:""', ')', 'str2', '=', 'input', '(', '""Enter the 2nd String:""', ')', 'print', '(', '""After concatenate string is:""', ')', 'print', '(', 'str', '+', '"" ""', '+', 'str2', ')']"
2731,"['program', 'find', 'sum', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number:""', ')', ')', 'sum', '=', '0', 'p', '=', '3', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum', '+=', 'p', 'p', '=', '(', 'p', '*', '10', ')', '+', '3', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
2732,"['find', 'missing', 'number', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'sum', '+=', 'arr', '[', 'i', ']', 'size2', '=', 'size', '+', '1', 'miss', '=', 'int', '(', '(', 'size2', '*', '(', 'size2', '+', '1', ')', ')', '/', '2', ')', 'print', '(', '""Missing Number is: ""', ',', 'abs', '(', 'miss', '-', 'sum', ')', ')']"
2733,"['enter', 'mark', 'five', 'subject', 'calculate', 'total', 'average', 'percentage']","['print', '(', '""Enter marks of 5 subjects out of 100:""', ')', 'sub1', '=', 'float', '(', 'input', '(', '""Enter sub1 marks:""', ')', ')', 'sub2', '=', 'float', '(', 'input', '(', '""Enter sub2 marks:""', ')', ')', 'sub3', '=', 'float', '(', 'input', '(', '""Enter sub3 marks:""', ')', ')', 'sub4', '=', 'float', '(', 'input', '(', '""Enter sub4 marks:""', ')', ')', 'sub5', '=', 'float', '(', 'input', '(', '""Enter sub5 marks:""', ')', ')', 'total_marks', '=', 'sub1', '+', 'sub2', '+', 'sub3', '+', 'sub4', '+', 'sub5', ';', 'avg', '=', 'total_marks', '/', '5.0', ';', 'percentage', '=', 'total_marks', '/', '500', '*', '100', ';', 'print', '(', '""Total Marks:""', ',', 'total_marks', ')', 'print', '(', '""Average:""', ',', 'avg', ')', 'print', '(', '""Percentage:""', ',', 'percentage', ',', '""%""', ')']"
2734,"['program', 'find', 'sum', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number:""', ')', ')', 'sum', '=', '0', 'p', '=', '3', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum', '+=', 'p', 'p', '=', '(', 'p', '*', '10', ')', '+', '3', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
2735,"['write', 'special', 'comment', 'indicate', 'python', 'source', 'code', 'file', 'unicode']",[]
2736,"['write', 'program', 'accepts', 'sequence', 'comma', 'separated', 'digit', 'binary', 'number', 'input', 'check', 'whether', 'divisible', 'number', 'divisible', 'printed', 'comma', 'separated', 'sequence']","['value', '=', '[', ']', 'items', '=', '[', 'x', 'for', 'x', 'in', 'raw_input', '(', ')', '.', 'split', '(', ""','"", ')', ']', 'for', 'p', 'in', 'items', ':', 'intp', '=', 'int', '(', 'p', ',', '2', ')', 'if', 'not', 'intp', '%', '5', ':', 'value', '.', 'append', '(', 'p', ')', 'print', ""','"", '.', 'join', '(', 'value', ')']"
2737,"['check', 'whether', 'number', 'trimorphic', 'number']","['num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'flag', '=', '0', 'cube_power', '=', 'num', '*', 'num', '*', 'num', 'while', 'num', '!=', '0', ':', 'if', 'num', '%', '10', '!=', 'cube_power', '%', '10', ':', 'flag', '=', '1', 'break', 'num', '//=', '10', 'cube_power', '//=', '10', 'if', 'flag', '==', '0', ':', 'print', '(', '""It is a Trimorphic Number.""', ')', 'else', ':', 'print', '(', '""It is Not a Trimorphic Number.""', ')']"
2738,"['print', 'mirrored', 'right', 'triangle', 'alphabet', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', ';', 'row_size', '=', 'input', '(', ')', 'for', 'out', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'ord', '(', 'row_size', ')', '+', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'out', '+', '1', ')', ':', 'print', '(', 'chr', '(', 'i', ')', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\r""', ')']"
2739,"['program', 'print', 'solid', 'diamond', 'alphabet', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'x', '=', '0', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '-', '(', 'row_size', '+', '1', ')', ',', '-', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', '1', ',', 'abs', '(', 'out', ')', '+', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', 'row_size', ',', 'abs', '(', 'out', ')', '-', '1', ',', '-', '1', ')', ':', 'print', '(', '(', 'chr', ')', '(', 'x', '+', '65', ')', ',', 'end', '=', '"" ""', ')', 'if', 'out', '>', '0', ':', 'x', '+=', '1', 'else', ':', 'x', '-=', '1', 'print', '(', '""\\r""', ')']"
2740,"['write', 'program', 'map', 'make', 'list', 'whose', 'element', 'square', 'element']","['Solution', 'li', '=', '[', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ']', 'squaredNumbers', '=', 'map', '(', 'lambda', 'x', ':', 'x', '**', '2', ',', 'li', ')', 'print', 'squaredNumbers']"
2741,"['please', 'write', 'program', 'print', 'running', 'time', 'execution', 'time']","['from', 'timeit', 'import', 'Timer', 't', '=', 'Timer', '(', '""for i in range(100):1+1""', ')', 'print', 't', '.', 'timeit', '(', ')']"
2742,"['convert', 'temperature', 'degree', 'celsius', 'fahrenheit']","['celsius', '=', 'float', '(', 'input', '(', '""Enter degree in celsius: ""', ')', ')', 'fahrenheit', '=', '(', 'celsius', '*', '(', '9', '/', '5', ')', ')', '+', '32', 'print', '(', '""Degree in Fahrenheit is""', ',', 'fahrenheit', ')']"
2743,"['python', 'program', 'remove', 'tuples', 'list', 'tuples', 'usn', 'outside', 'given', 'range']","['y', '=', '[', '(', ""'a'"", ',', ""'12CS039'"", ')', ',', '(', ""'b'"", ',', ""'12CS320'"", ')', ',', '(', ""'c'"", ',', ""'12CS055'"", ')', ',', '(', ""'d'"", ',', ""'12CS100'"", ')', ']', 'low', '=', 'int', '(', 'input', '(', '""Enter lower roll number (starting with 12CS):""', ')', ')', 'up', '=', 'int', '(', 'input', '(', '""Enter upper roll number (starting with 12CS):""', ')', ')', 'l', '=', ""'12CS0'"", '+', 'str', '(', 'low', ')', 'u', '=', ""'12CS'"", '+', 'str', '(', 'up', ')', 'p', '=', '[', 'x', 'for', 'x', 'in', 'y', 'if', 'x', '[', '1', ']', '>', 'l', 'and', 'x', '[', '1', ']', '<', 'u', ']', 'print', '(', 'p', ')']"
2744,"['program', 'calculate', 'surface', 'area', 'volume', 'hemisphere']","['import', 'math', 'r', '=', 'int', '(', 'input', '(', '""Enter the radius of the Hemisphere:""', ')', ')', 'PI', '=', '3.14', 'surface_area', '=', '3', '*', 'PI', '*', 'math', '.', 'pow', '(', 'r', ',', '2', ')', 'volume', '=', '(', '2.0', '/', '3.0', ')', '*', 'PI', '*', 'math', '.', 'pow', '(', 'r', ',', '3', ')', 'print', '(', '""Surface Area of the Hemisphere = ""', ',', 'surface_area', ')', 'print', '(', '""Volume of the Hemisphere = ""', ',', 'volume', ')']"
2745,"['python', 'program', 'append', 'delete', 'display', 'element', 'list', 'using', 'class']","['class', 'check', '(', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'n', '=', '[', ']', 'def', 'add', '(', 'self', ',', 'a', ')', ':', 'return', 'self', '.', 'n', '.', 'append', '(', 'a', ')', 'def', 'remove', '(', 'self', ',', 'b', ')', ':', 'self', '.', 'n', '.', 'remove', '(', 'b', ')', 'def', 'dis', '(', 'self', ')', ':', 'return', '(', 'self', '.', 'n', ')', 'obj', '=', 'check', '(', ')', 'choice', '=', '1', 'while', 'choice', '!=', '0', ':', 'print', '(', '""0. Exit""', ')', 'print', '(', '""1. Add""', ')', 'print', '(', '""2. Delete""', ')', 'print', '(', '""3. Display""', ')', 'choice', '=', 'int', '(', 'input', '(', '""Enter choice: ""', ')', ')', 'if', 'choice', '==', '1', ':', 'n', '=', 'int', '(', 'input', '(', '""Enter number to append: ""', ')', ')', 'obj', '.', 'add', '(', 'n', ')', 'print', '(', '""List: ""', ',', 'obj', '.', 'dis', '(', ')', ')', 'elif', 'choice', '==', '2', ':', 'n', '=', 'int', '(', 'input', '(', '""Enter number to remove: ""', ')', ')', 'obj', '.', 'remove', '(', 'n', ')', 'print', '(', '""List: ""', ',', 'obj', '.', 'dis', '(', ')', ')', 'elif', 'choice', '==', '3', ':', 'print', '(', '""List: ""', ',', 'obj', '.', 'dis', '(', ')', ')', 'elif', 'choice', '==', '0', ':', 'print', '(', '""Exiting!""', ')', 'else', ':', 'print', '(', '""Invalid choice!!""', ')', 'print', '(', ')']"
2746,"['define', 'function', 'accept', 'two', 'string', 'input', 'print', 'string', 'maximum', 'length', 'console', 'two', 'string', 'length', 'function', 'print', 'al', 'l', 'string', 'line', 'line']","['Solution', 'def', 'printValue', '(', 's1', ',', 's2', ')', ':', 'len1', '=', 'len', '(', 's1', ')', 'len2', '=', 'len', '(', 's2', ')', 'if', 'len1', '>', 'len2', ':', 'print', 's1', 'elif', 'len2', '>', 'len1', ':', 'print', 's2', 'else', ':', 'print', 's1', 'print', 's2', 'printValue', '(', '""one""', ',', '""three""', ')']"
2747,"['python', 'program', 'remove', 'given', 'key', 'dictionary']","['d', '=', '{', ""'a'"", ':', '1', ',', ""'b'"", ':', '2', ',', ""'c'"", ':', '3', ',', ""'d'"", ':', '4', '}', 'print', '(', '""Initial dictionary""', ')', 'print', '(', 'd', ')', 'key', '=', 'raw_input', '(', '""Enter the key to delete(a-d):""', ')', 'if', 'key', 'in', 'd', ':', 'del', 'd', '[', 'key', ']', 'else', ':', 'print', '(', '""Key not found!""', ')', 'exit', '(', '0', ')', 'print', '(', '""Updated dictionary""', ')', 'print', '(', 'd', ')']"
2748,"['python', 'program', 'create', 'dictionary', 'key', 'first', 'character', 'value', 'word', 'starting', 'character']","['test_string', '=', 'raw_input', '(', '""Enter string:""', ')', 'l', '=', 'test_string', '.', 'split', '(', ')', 'd', '=', '{', '}', 'for', 'word', 'in', 'l', ':', 'if', '(', 'word', '[', '0', ']', 'not', 'in', 'd', '.', 'keys', '(', ')', ')', ':', 'd', '[', 'word', '[', '0', ']', ']', '=', '[', ']', 'd', '[', 'word', '[', '0', ']', ']', '.', 'append', '(', 'word', ')', 'else', ':', 'if', '(', 'word', 'not', 'in', 'd', '[', 'word', '[', '0', ']', ']', ')', ':', 'd', '[', 'word', '[', '0', ']', ']', '.', 'append', '(', 'word', ')', 'for', 'k', ',', 'v', 'in', 'd', '.', 'items', '(', ')', ':', 'print', '(', 'k', ',', '"":""', ',', 'v', ')']"
2749,"['python', 'program', 'implement', 'stack', 'using', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'def', 'push', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'else', ':', 'new_node', '=', 'Node', '(', 'data', ')', 'new_node', '.', 'next', '=', 'self', '.', 'head', 'self', '.', 'head', '=', 'new_node', 'def', 'pop', '(', 'self', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'None', 'else', ':', 'popped', '=', 'self', '.', 'head', '.', 'data', 'self', '.', 'head', '=', 'self', '.', 'head', '.', 'next', 'return', 'popped', 'a_stack', '=', 'Stack', '(', ')', 'while', 'True', ':', 'print', '(', ""'push <value>'"", ')', 'print', '(', ""'pop'"", ')', 'print', '(', ""'quit'"", ')', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'push'"", ':', 'a_stack', '.', 'push', '(', 'int', '(', 'do', '[', '1', ']', ')', ')', 'elif', 'operation', '==', ""'pop'"", ':', 'popped', '=', 'a_stack', '.', 'pop', '(', ')', 'if', 'popped', 'is', 'None', ':', 'print', '(', ""'Stack is empty.'"", ')', 'else', ':', 'print', '(', ""'Popped value: '"", ',', 'int', '(', 'popped', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2750,"['python', 'program', 'print', 'odd', 'number', 'within', 'given', 'range']","['lower', '=', 'int', '(', 'input', '(', '""Enter the lower limit for the range:""', ')', ')', 'upper', '=', 'int', '(', 'input', '(', '""Enter the upper limit for the range:""', ')', ')', 'for', 'i', 'in', 'range', '(', 'lower', ',', 'upper', '+', '1', ')', ':', 'if', '(', 'i', '%', '2', '!=', '0', ')', ':', 'print', '(', 'i', ')']"
2751,"['sort', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '>=', 'arr', '[', 'j', ']', ':', 'temp', '=', 'arr', '[', 'i', ']', 'arr', '[', 'i', ']', '=', 'arr', '[', 'j', ']', 'arr', '[', 'j', ']', '=', 'tempprint', '(', '""After segregate 0s, 1s and 2s in an Array, Array is:""', ',', 'arr', ')']"
2752,"['python', 'program', 'find', 'largest', 'value', 'tree', 'using', 'inorder', 'traversal']","['class', 'BinaryTree', ':', 'def', '__init__', '(', 'self', ',', 'key', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'def', 'set_root', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'def', 'inorder_largest', '(', 'self', ')', ':', 'largest', '=', '[', ']', 'self', '.', 'inorder_largest_helper', '(', 'largest', ')', 'return', 'largest', '[', '0', ']', 'def', 'inorder_largest_helper', '(', 'self', ',', 'largest', ')', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'inorder_largest_helper', '(', 'largest', ')', 'if', 'largest', '==', '[', ']', ':', 'largest', '.', 'append', '(', 'self', '.', 'key', ')', 'elif', 'largest', '[', '0', ']', '<', 'self', '.', 'key', ':', 'largest', '[', '0', ']', '=', 'self', '.', 'key', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'right', '.', 'inorder_largest_helper', '(', 'largest', ')', 'def', 'insert_left', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'left', '=', 'new_node', 'def', 'insert_right', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'right', '=', 'new_node', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'left', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'right', '.', 'search', '(', 'key', ')', 'return', 'temp', 'return', 'None', 'btree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'insert <data> at root'"", ')', 'print', '(', ""'insert <data> left of <data>'"", ')', 'print', '(', ""'insert <data> right of <data>'"", ')', 'print', '(', ""'largest'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'BinaryTree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'btree', '=', 'new_node', 'else', ':', 'position', '=', 'do', '[', '4', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'btree', 'is', 'not', 'None', ':', 'ref_node', '=', 'btree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'if', 'suboperation', '==', ""'left'"", ':', 'ref_node', '.', 'insert_left', '(', 'new_node', ')', 'elif', 'suboperation', '==', ""'right'"", ':', 'ref_node', '.', 'insert_right', '(', 'new_node', ')', 'elif', 'operation', '==', ""'largest'"", ':', 'if', 'btree', 'is', 'None', ':', 'print', '(', ""'Tree is empty.'"", ')', 'else', ':', 'print', '(', ""'Largest element: {}'"", '.', 'format', '(', 'btree', '.', 'inorder_largest', '(', ')', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2753,"['program', 'find', 'sum', 'series']","['import', 'math', 'print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'i', '=', '5', 'sum', '=', '0', 'while', '(', 'i', '<=', 'n', ')', ':', 'sum', '+=', 'pow', '(', 'i', ',', '2', ')', 'i', '+=', '5', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
2754,"['python', 'program', 'count', 'number', 'digit', 'number']","['n', '=', 'int', '(', 'input', '(', '""Enter number:""', ')', ')', 'count', '=', '0', 'while', '(', 'n', '>', '0', ')', ':', 'count', '=', 'count', '+', '1', 'n', '=', 'n', '//', '10', 'print', '(', '""The number of digits in the number are:""', ',', 'count', ')']"
2755,"['program', 'print', 'full', 'pyramid', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'np', '=', '1', 'for', 'out', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'in1', 'in', 'range', '(', 'row_size', '-', '1', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'in2', 'in', 'range', '(', 'np', ',', '0', ',', '-', '1', ')', ':', 'print', '(', 'in2', ',', 'end', '=', '""""', ')', 'np', '+=', '2', 'print', '(', '""\\r""', ')']"
2756,"['python', 'program', 'implement', 'counting', 'sort']","['def', 'counting_sort', '(', 'alist', ',', 'largest', ')', ':', 'c', '=', '[', '0', ']', '*', '(', 'largest', '+', '1', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'alist', ')', ')', ':', 'c', '[', 'alist', '[', 'i', ']', ']', '=', 'c', '[', 'alist', '[', 'i', ']', ']', '+', '1', 'c', '[', '0', ']', '=', 'c', '[', '0', ']', '-', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'largest', '+', '1', ')', ':', 'c', '[', 'i', ']', '=', 'c', '[', 'i', ']', '+', 'c', '[', 'i', '-', '1', ']', 'result', '=', '[', 'None', ']', '*', 'len', '(', 'alist', ')', 'for', 'x', 'in', 'reversed', '(', 'alist', ')', ':', 'result', '[', 'c', '[', 'x', ']', ']', '=', 'x', 'c', '[', 'x', ']', '=', 'c', '[', 'x', ']', '-', '1', 'return', 'result', 'alist', '=', 'input', '(', ""'Enter the list of (nonnegative) numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'k', '=', 'max', '(', 'alist', ')', 'sorted_list', '=', 'counting_sort', '(', 'alist', ',', 'k', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'sorted_list', ')']"
2757,"['python', 'program', 'find', 'fibonacci', 'series', 'using', 'recursion']","['def', 'fibonacci', '(', 'n', ')', ':', 'if', '(', 'n', '<=', '1', ')', ':', 'return', 'n', 'else', ':', 'return', '(', 'fibonacci', '(', 'n', '-', '1', ')', '+', 'fibonacci', '(', 'n', '-', '2', ')', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter number of terms:""', ')', ')', 'print', '(', '""Fibonacci sequence:""', ')', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'print', '(', 'fibonacci', '(', 'i', ')', ')']"
2758,"['python', 'program', 'print', 'path', 'root', 'leaf', 'tree']","['class', 'Tree', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'data', 'self', '.', 'children', '=', '[', ']', 'def', 'set_root', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'key', '=', 'data', 'def', 'add', '(', 'self', ',', 'node', ')', ':', 'self', '.', 'children', '.', 'append', '(', 'node', ')', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'for', 'child', 'in', 'self', '.', 'children', ':', 'temp', '=', 'child', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'return', 'None', 'def', 'print_all_paths_to_leaf', '(', 'self', ')', ':', 'self', '.', 'print_all_paths_to_leaf_helper', '(', '[', ']', ')', 'def', 'print_all_paths_to_leaf_helper', '(', 'self', ',', 'path_till_now', ')', ':', 'path_till_now', '.', 'append', '(', 'self', '.', 'key', ')', 'if', 'self', '.', 'children', '==', '[', ']', ':', 'for', 'key', 'in', 'path_till_now', ':', 'print', '(', 'key', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'else', ':', 'for', 'child', 'in', 'self', '.', 'children', ':', 'child', '.', 'print_all_paths_to_leaf_helper', '(', 'path_till_now', '[', ':', ']', ')', 'tree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'add <data> at root'"", ')', 'print', '(', ""'add <data> below <data>'"", ')', 'print', '(', ""'paths'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'add'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'Tree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'tree', '=', 'new_node', 'elif', 'suboperation', '==', ""'below'"", ':', 'position', '=', 'do', '[', '3', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'tree', 'is', 'not', 'None', ':', 'ref_node', '=', 'tree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'ref_node', '.', 'add', '(', 'new_node', ')', 'elif', 'operation', '==', ""'paths'"", ':', 'if', 'tree', 'is', 'None', ':', 'print', '(', ""'Tree is empty.'"", ')', 'else', ':', 'tree', '.', 'print_all_paths_to_leaf', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2759,"['python', 'program', 'find', 'second', 'largest', 'number', 'list', 'using', 'bubble', 'sort']","['a', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter number of elements:""', ')', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'b', '=', 'int', '(', 'input', '(', '""Enter element:""', ')', ')', 'a', '.', 'append', '(', 'b', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'a', ')', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'len', '(', 'a', ')', '-', 'i', '-', '1', ')', ':', 'if', '(', 'a', '[', 'j', ']', '>', 'a', '[', 'j', '+', '1', ']', ')', ':', 'temp', '=', 'a', '[', 'j', ']', 'a', '[', 'j', ']', '=', 'a', '[', 'j', '+', '1', ']', 'a', '[', 'j', '+', '1', ']', '=', 'temp', 'print', '(', ""'Second largest number is:'"", ',', 'a', '[', 'n', '-', '2', ']', ')']"
2760,"['python', 'program', 'solve', 'nqueen', 'problem', 'without', 'recursion']","['class', 'QueenChessBoard', ':', 'def', '__init__', '(', 'self', ',', 'size', ')', ':', 'self', '.', 'size', '=', 'size', 'self', '.', 'columns', '=', '[', ']', 'def', 'place_in_next_row', '(', 'self', ',', 'column', ')', ':', 'self', '.', 'columns', '.', 'append', '(', 'column', ')', 'def', 'remove_in_current_row', '(', 'self', ')', ':', 'return', 'self', '.', 'columns', '.', 'pop', '(', ')', 'def', 'is_this_column_safe_in_next_row', '(', 'self', ',', 'column', ')', ':', 'row', '=', 'len', '(', 'self', '.', 'columns', ')', 'for', 'queen_column', 'in', 'self', '.', 'columns', ':', 'if', 'column', '==', 'queen_column', ':', 'return', 'False', 'for', 'queen_row', ',', 'queen_column', 'in', 'enumerate', '(', 'self', '.', 'columns', ')', ':', 'if', 'queen_column', '-', 'queen_row', '==', 'column', '-', 'row', ':', 'return', 'False', 'for', 'queen_row', ',', 'queen_column', 'in', 'enumerate', '(', 'self', '.', 'columns', ')', ':', 'if', '(', '(', 'self', '.', 'size', '-', 'queen_column', ')', '-', 'queen_row', '==', '(', 'self', '.', 'size', '-', 'column', ')', '-', 'row', ')', ':', 'return', 'False', 'return', 'True', 'def', 'display', '(', 'self', ')', ':', 'for', 'row', 'in', 'range', '(', 'self', '.', 'size', ')', ':', 'for', 'column', 'in', 'range', '(', 'self', '.', 'size', ')', ':', 'if', 'column', '==', 'self', '.', 'columns', '[', 'row', ']', ':', 'print', '(', ""'Q'"", ',', 'end', '=', ""' '"", ')', 'else', ':', 'print', '(', ""'.'"", ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'def', 'solve_queen', '(', 'size', ')', ':', '""""""Display a chessboard for each possible configuration of placing n queens\n    on an n x n chessboard and print the number of such configurations.""""""', 'board', '=', 'QueenChessBoard', '(', 'size', ')', 'number_of_solutions', '=', '0', 'row', '=', '0', 'column', '=', '0', 'while', 'True', ':', 'while', 'column', '<', 'size', ':', 'if', 'board', '.', 'is_this_column_safe_in_next_row', '(', 'column', ')', ':', 'board', '.', 'place_in_next_row', '(', 'column', ')', 'row', '+=', '1', 'column', '=', '0', 'break', 'else', ':', 'column', '+=', '1', 'if', '(', 'column', '==', 'size', 'or', 'row', '==', 'size', ')', ':', 'if', 'row', '==', 'size', ':', 'board', '.', 'display', '(', ')', 'print', '(', ')', 'number_of_solutions', '+=', '1', 'board', '.', 'remove_in_current_row', '(', ')', 'row', '-=', '1', 'try', ':', 'prev_column', '=', 'board', '.', 'remove_in_current_row', '(', ')', 'except', 'IndexError', ':', 'break', 'row', '-=', '1', 'column', '=', '1', '+', 'prev_column', 'print', '(', ""'Number of solutions:'"", ',', 'number_of_solutions', ')', 'n', '=', 'int', '(', 'input', '(', ""'Enter n: '"", ')', ')', 'solve_queen', '(', 'n', ')']"
2761,"['check', 'whether', 'number', 'sunny', 'number']","['import', 'math', 'num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'root', '=', 'math', '.', 'sqrt', '(', 'num', '+', '1', ')', 'if', 'int', '(', 'root', ')', '==', 'root', ':', 'print', '(', '""It is a Sunny Number.""', ')', 'else', ':', 'print', '(', '""It is Not a Sunny Number.""', ')']"
2762,"['count', 'number', 'zero', 'number', 'using', 'recursion']","['count', '=', '0', 'def', 'count_digit', '(', 'num', ')', ':', 'global', 'count', 'if', '(', 'num', '>', '0', ')', ':', 'if', '(', 'num', '%', '10', '==', '0', ')', ':', 'count', '+=', '1', 'count_digit', '(', 'num', '//', '10', ')', 'return', 'countn', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'print', '(', '""The number of Zeros in the Given number is:""', ',', 'count_digit', '(', 'n', ')', ')']"
2763,"['python', 'program', 'build', 'binary', 'tree', 'inorder', 'postorder', 'traversal', 'input']","['class', 'BinaryTree', ':', 'def', '__init__', '(', 'self', ',', 'key', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'def', 'set_root', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'def', 'inorder', '(', 'self', ')', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'inorder', '(', ')', 'print', '(', 'self', '.', 'key', ',', 'end', '=', ""' '"", ')', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'right', '.', 'inorder', '(', ')', 'def', 'postorder', '(', 'self', ')', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'postorder', '(', ')', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'right', '.', 'postorder', '(', ')', 'print', '(', 'self', '.', 'key', ',', 'end', '=', ""' '"", ')', 'def', 'construct_btree', '(', 'postord', ',', 'inord', ')', ':', 'if', 'postord', '==', '[', ']', 'or', 'inord', '==', '[', ']', ':', 'return', 'None', 'key', '=', 'postord', '[', '-', '1', ']', 'node', '=', 'BinaryTree', '(', 'key', ')', 'index', '=', 'inord', '.', 'index', '(', 'key', ')', 'node', '.', 'left', '=', 'construct_btree', '(', 'postord', '[', ':', 'index', ']', ',', 'inord', '[', ':', 'index', ']', ')', 'node', '.', 'right', '=', 'construct_btree', '(', 'postord', '[', 'index', ':', '-', '1', ']', ',', 'inord', '[', 'index', '+', '1', ':', ']', ')', 'return', 'node', 'postord', '=', 'input', '(', ""'Input post-order traversal: '"", ')', '.', 'split', '(', ')', 'postord', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'postord', ']', 'inord', '=', 'input', '(', ""'Input in-order traversal: '"", ')', '.', 'split', '(', ')', 'inord', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'inord', ']', 'btree', '=', 'construct_btree', '(', 'postord', ',', 'inord', ')', 'print', '(', ""'Binary tree constructed.'"", ')', 'print', '(', ""'Verifying:'"", ')', 'print', '(', ""'Post-order traversal: '"", ',', 'end', '=', ""''"", ')', 'btree', '.', 'postorder', '(', ')', 'print', '(', ')', 'print', '(', ""'In-order traversal: '"", ',', 'end', '=', ""''"", ')', 'btree', '.', 'inorder', '(', ')', 'print', '(', ')']"
2764,"['python', 'program', 'solve', 'maximum', 'subarray', 'problem', 'using', 'kadanes', 'algorithm']","['def', 'find_max_subarray', '(', 'alist', ',', 'start', ',', 'end', ')', ':', '""""""Returns (l, r, m) such that alist[l:r] is the maximum subarray in\n    A[start:end] with sum m. Here A[start:end] means all A[x] for start <= x <\n    end.""""""', 'max_ending_at_i', '=', 'max_seen_so_far', '=', 'alist', '[', 'start', ']', 'max_left_at_i', '=', 'max_left_so_far', '=', 'start', 'max_right_so_far', '=', 'start', '+', '1', 'for', 'i', 'in', 'range', '(', 'start', '+', '1', ',', 'end', ')', ':', 'if', 'max_ending_at_i', '>', '0', ':', 'max_ending_at_i', '+=', 'alist', '[', 'i', ']', 'else', ':', 'max_ending_at_i', '=', 'alist', '[', 'i', ']', 'max_left_at_i', '=', 'i', 'if', 'max_ending_at_i', '>', 'max_seen_so_far', ':', 'max_seen_so_far', '=', 'max_ending_at_i', 'max_left_so_far', '=', 'max_left_at_i', 'max_right_so_far', '=', 'i', '+', '1', 'return', 'max_left_so_far', ',', 'max_right_so_far', ',', 'max_seen_so_far', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', 'alist', '=', 'alist', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'start', ',', 'end', ',', 'maximum', '=', 'find_max_subarray', '(', 'alist', ',', '0', ',', 'len', '(', 'alist', ')', ')', 'print', '(', ""'The maximum subarray starts at index {}, ends at index {}'"", ""' and has sum {}.'"", '.', 'format', '(', 'start', ',', 'end', '-', '1', ',', 'maximum', ')', ')']"
2765,"['python', 'program', 'calculate', 'number', 'word', 'number', 'character', 'present', 'string']","['string', '=', 'raw_input', '(', '""Enter string:""', ')', 'char', '=', '0', 'word', '=', '1', 'for', 'i', 'in', 'string', ':', 'char', '=', 'char', '+', '1', 'if', '(', 'i', '==', ""' '"", ')', ':', 'word', '=', 'word', '+', '1', 'print', '(', '""Number of words in the string:""', ')', 'print', '(', 'word', ')', 'print', '(', '""Number of characters in the string:""', ')', 'print', '(', 'char', ')']"
2766,"['program', 'calculate', 'area', 'perimeter', 'rectangle']","['length', '=', 'int', '(', 'input', '(', '""Enter length of a rectangle :""', ')', ')', 'breadth', '=', 'int', '(', 'input', '(', '""Enter breadth of a rectangle :""', ')', ')', 'area', '=', 'length', '*', 'breadth', 'perimeter', '=', '2', '*', '(', 'length', '+', 'breadth', ')', 'print', '(', '""Area =""', ',', 'area', ')', 'print', '(', '""Perimeter =""', ',', 'perimeter', ')']"
2767,"['python', 'program', 'determine', 'whether', 'given', 'number', 'even', 'odd', 'recursively']","['def', 'check', '(', 'n', ')', ':', 'if', '(', 'n', '<', '2', ')', ':', 'return', '(', 'n', '%', '2', '==', '0', ')', 'return', '(', 'check', '(', 'n', '-', '2', ')', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter number:""', ')', ')', 'if', '(', 'check', '(', 'n', ')', '==', 'True', ')', ':', 'print', '(', '""Number is even!""', ')', 'else', ':', 'print', '(', '""Number is odd!""', ')']"
2768,"['python', 'program', 'count', 'occurrence', 'word', 'given', 'string', 'sentence']","['string', '=', 'raw_input', '(', '""Enter string:""', ')', 'word', '=', 'raw_input', '(', '""Enter word:""', ')', 'a', '=', '[', ']', 'count', '=', '0', 'a', '=', 'string', '.', 'split', '(', '"" ""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'a', ')', ')', ':', 'if', '(', 'word', '==', 'a', '[', 'i', ']', ')', ':', 'count', '=', 'count', '+', '1', 'print', '(', '""Count of the word is:""', ')', 'print', '(', 'count', ')']"
2769,"['write', 'program', 'calculate', 'simple', 'interest']","['principle', '=', 'float', '(', 'input', '(', '""Enter a principle:""', ')', ')', 'rate', '=', 'float', '(', 'input', '(', '""Enter a rate:""', ')', ')', 'time', '=', 'float', '(', 'input', '(', '""Enter a time(year):""', ')', ')', 'simple_interest', '=', '(', 'principle', '*', 'rate', '*', 'time', ')', '/', '100', ';', 'print', '(', '""Simple Interest:""', ',', 'simple_interest', ')']"
2770,"['python', 'program', 'implement', 'johnson', 'algorithm']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__len__', '(', 'self', ')', ':', 'return', 'len', '(', 'self', '.', 'vertices', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'set_weight', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Set weight of edge from this vertex to dest.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'johnson', '(', 'g', ')', ':', '""""""Return distance where distance[u][v] is the min distance from u to v.\n\xa0\n    distance[u][v] is the shortest distance from vertex u to v.\n\xa0\n    g is a Graph object which can have negative edge weights.\n    """"""', 'g', '.', 'add_vertex', '(', ""'q'"", ')', 'for', 'v', 'in', 'g', ':', 'g', '.', 'add_edge', '(', ""'q'"", ',', 'v', '.', 'get_key', '(', ')', ',', '0', ')', 'bell_dist', '=', 'bellman_ford', '(', 'g', ',', 'g', '.', 'get_vertex', '(', ""'q'"", ')', ')', 'for', 'v', 'in', 'g', ':', 'for', 'n', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'n', ')', 'v', '.', 'set_weight', '(', 'n', ',', 'w', '+', 'bell_dist', '[', 'v', ']', '-', 'bell_dist', '[', 'n', ']', ')', 'del', 'g', '.', 'vertices', '[', ""'q'"", ']', 'distance', '=', '{', '}', 'for', 'v', 'in', 'g', ':', 'distance', '[', 'v', ']', '=', 'dijkstra', '(', 'g', ',', 'v', ')', 'for', 'v', 'in', 'g', ':', 'for', 'w', 'in', 'g', ':', 'distance', '[', 'v', ']', '[', 'w', ']', '+=', 'bell_dist', '[', 'w', ']', '-', 'bell_dist', '[', 'v', ']', 'for', 'v', 'in', 'g', ':', 'for', 'n', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'n', ')', 'v', '.', 'set_weight', '(', 'n', ',', 'w', '+', 'bell_dist', '[', 'n', ']', '-', 'bell_dist', '[', 'v', ']', ')', 'return', 'distance', 'def', 'bellman_ford', '(', 'g', ',', 'source', ')', ':', '""""""Return distance where distance[v] is min distance from source to v.\n\xa0\n    This will return a dictionary distance.\n\xa0\n    g is a Graph object which can have negative edge weights.\n    source is a Vertex object in g.\n    """"""', 'distance', '=', 'dict', '.', 'fromkeys', '(', 'g', ',', 'float', '(', ""'inf'"", ')', ')', 'distance', '[', 'source', ']', '=', '0', 'for', '_', 'in', 'range', '(', 'len', '(', 'g', ')', '-', '1', ')', ':', 'for', 'v', 'in', 'g', ':', 'for', 'n', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'distance', '[', 'n', ']', '=', 'min', '(', 'distance', '[', 'n', ']', ',', 'distance', '[', 'v', ']', '+', 'v', '.', 'get_weight', '(', 'n', ')', ')', 'return', 'distance', 'def', 'dijkstra', '(', 'g', ',', 'source', ')', ':', '""""""Return distance where distance[v] is min distance from source to v.\n\xa0\n    This will return a dictionary distance.\n\xa0\n    g is a Graph object.\n    source is a Vertex object in g.\n    """"""', 'unvisited', '=', 'set', '(', 'g', ')', 'distance', '=', 'dict', '.', 'fromkeys', '(', 'g', ',', 'float', '(', ""'inf'"", ')', ')', 'distance', '[', 'source', ']', '=', '0', 'while', 'unvisited', '!=', 'set', '(', ')', ':', 'closest', '=', 'min', '(', 'unvisited', ',', 'key', '=', 'lambda', 'v', ':', 'distance', '[', 'v', ']', ')', 'unvisited', '.', 'remove', '(', 'closest', ')', 'for', 'neighbour', 'in', 'closest', '.', 'get_neighbours', '(', ')', ':', 'if', 'neighbour', 'in', 'unvisited', ':', 'new_distance', '=', 'distance', '[', 'closest', ']', '+', 'closest', '.', 'get_weight', '(', 'neighbour', ')', 'if', 'distance', '[', 'neighbour', ']', '>', 'new_distance', ':', 'distance', '[', 'neighbour', ']', '=', 'new_distance', 'return', 'distance', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest> <weight>'"", ')', 'print', '(', ""'johnson'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'weight', '=', 'int', '(', 'do', '[', '4', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ',', 'weight', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'johnson'"", ':', 'distance', '=', 'johnson', '(', 'g', ')', 'print', '(', ""'Shortest distances:'"", ')', 'for', 'start', 'in', 'g', ':', 'for', 'end', 'in', 'g', ':', 'print', '(', ""'{} to {}'"", '.', 'format', '(', 'start', '.', 'get_key', '(', ')', ',', 'end', '.', 'get_key', '(', ')', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ""'distance {}'"", '.', 'format', '(', 'distance', '[', 'start', ']', '[', 'end', ']', ')', ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2771,"['python', 'program', 'flatten', 'list', 'without', 'using', 'recursion']","['a', '=', '[', '[', '1', ',', '[', '[', '2', ']', ']', ',', '[', '[', '[', '3', ']', ']', ']', ']', ',', '[', '[', '4', ']', ',', '5', ']', ']', 'flatten', '=', 'lambda', 'l', ':', 'sum', '(', 'map', '(', 'flatten', ',', 'l', ')', ',', '[', ']', ')', 'if', 'isinstance', '(', 'l', ',', 'list', ')', 'else', '[', 'l', ']', 'print', '(', 'flatten', '(', 'a', ')', ')']"
2772,"['python', 'program', 'implement', 'binomial', 'heap']","['class', 'BinomialTree', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'children', '=', '[', ']', 'self', '.', 'order', '=', '0', 'def', 'add_at_end', '(', 'self', ',', 't', ')', ':', 'self', '.', 'children', '.', 'append', '(', 't', ')', 'self', '.', 'order', '=', 'self', '.', 'order', '+', '1', 'class', 'BinomialHeap', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'trees', '=', '[', ']', 'def', 'extract_min', '(', 'self', ')', ':', 'if', 'self', '.', 'trees', '==', '[', ']', ':', 'return', 'None', 'smallest_node', '=', 'self', '.', 'trees', '[', '0', ']', 'for', 'tree', 'in', 'self', '.', 'trees', ':', 'if', 'tree', '.', 'key', '<', 'smallest_node', '.', 'key', ':', 'smallest_node', '=', 'tree', 'self', '.', 'trees', '.', 'remove', '(', 'smallest_node', ')', 'h', '=', 'BinomialHeap', '(', ')', 'h', '.', 'trees', '=', 'smallest_node', '.', 'children', 'self', '.', 'merge', '(', 'h', ')', 'return', 'smallest_node', '.', 'key', 'def', 'get_min', '(', 'self', ')', ':', 'if', 'self', '.', 'trees', '==', '[', ']', ':', 'return', 'None', 'least', '=', 'self', '.', 'trees', '[', '0', ']', '.', 'key', 'for', 'tree', 'in', 'self', '.', 'trees', ':', 'if', 'tree', '.', 'key', '<', 'least', ':', 'least', '=', 'tree', '.', 'key', 'return', 'least', 'def', 'combine_roots', '(', 'self', ',', 'h', ')', ':', 'self', '.', 'trees', '.', 'extend', '(', 'h', '.', 'trees', ')', 'self', '.', 'trees', '.', 'sort', '(', 'key', '=', 'lambda', 'tree', ':', 'tree', '.', 'order', ')', 'def', 'merge', '(', 'self', ',', 'h', ')', ':', 'self', '.', 'combine_roots', '(', 'h', ')', 'if', 'self', '.', 'trees', '==', '[', ']', ':', 'return', 'i', '=', '0', 'while', 'i', '<', 'len', '(', 'self', '.', 'trees', ')', '-', '1', ':', 'current', '=', 'self', '.', 'trees', '[', 'i', ']', 'after', '=', 'self', '.', 'trees', '[', 'i', '+', '1', ']', 'if', 'current', '.', 'order', '==', 'after', '.', 'order', ':', 'if', '(', 'i', '+', '1', '<', 'len', '(', 'self', '.', 'trees', ')', '-', '1', 'and', 'self', '.', 'trees', '[', 'i', '+', '2', ']', '.', 'order', '==', 'after', '.', 'order', ')', ':', 'after_after', '=', 'self', '.', 'trees', '[', 'i', '+', '2', ']', 'if', 'after', '.', 'key', '<', 'after_after', '.', 'key', ':', 'after', '.', 'add_at_end', '(', 'after_after', ')', 'del', 'self', '.', 'trees', '[', 'i', '+', '2', ']', 'else', ':', 'after_after', '.', 'add_at_end', '(', 'after', ')', 'del', 'self', '.', 'trees', '[', 'i', '+', '1', ']', 'else', ':', 'if', 'current', '.', 'key', '<', 'after', '.', 'key', ':', 'current', '.', 'add_at_end', '(', 'after', ')', 'del', 'self', '.', 'trees', '[', 'i', '+', '1', ']', 'else', ':', 'after', '.', 'add_at_end', '(', 'current', ')', 'del', 'self', '.', 'trees', '[', 'i', ']', 'i', '=', 'i', '+', '1', 'def', 'insert', '(', 'self', ',', 'key', ')', ':', 'g', '=', 'BinomialHeap', '(', ')', 'g', '.', 'trees', '.', 'append', '(', 'BinomialTree', '(', 'key', ')', ')', 'self', '.', 'merge', '(', 'g', ')', 'bheap', '=', 'BinomialHeap', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'insert <data>'"", ')', 'print', '(', ""'min get'"", ')', 'print', '(', ""'min extract'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'bheap', '.', 'insert', '(', 'data', ')', 'elif', 'operation', '==', ""'min'"", ':', 'suboperation', '=', 'do', '[', '1', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'get'"", ':', 'print', '(', ""'Minimum value: {}'"", '.', 'format', '(', 'bheap', '.', 'get_min', '(', ')', ')', ')', 'elif', 'suboperation', '==', ""'extract'"", ':', 'print', '(', ""'Minimum value removed: {}'"", '.', 'format', '(', 'bheap', '.', 'extract_min', '(', ')', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2773,"['program', 'find', 'sum', 'upper', 'triangular', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '>', 'j', ':', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Sum of Upper Triangular Matrix Elements is: ""', ',', 'sum', ')']"
2774,"['find', 'perfect', 'number', 'present', 'within', 'given', 'range']","[""'''Write a Python\nprogram\xa0to\xa0find out all Perfect numbers present within a given range.\nor\xa0Write a program\xa0to\xa0find out all Perfect numbers present\nwithin a given range using Python '''"", 'print', '(', '""Enter a range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Perfect numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'j', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'sum', '=', '0', 'num', '=', 'j', 'for', 'i', 'in', 'range', '(', '1', ',', 'j', ')', ':', 'if', '(', 'j', '%', 'i', '==', '0', ')', ':', 'sum', '=', 'sum', '+', 'i', 'if', 'sum', '==', 'num', ':', 'print', '(', 'j', ',', 'end', '=', '"" ""', ')']"
2775,"['python', 'program', 'read', 'number', 'n', 'print', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter a number: ""', ')', ')', 'a', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'print', '(', 'i', ',', 'sep', '=', '"" ""', ',', 'end', '=', '"" ""', ')', 'if', '(', 'i', '<', 'n', ')', ':', 'print', '(', '""+""', ',', 'sep', '=', '"" ""', ',', 'end', '=', '"" ""', ')', 'a', '.', 'append', '(', 'i', ')', 'print', '(', '""=""', ',', 'sum', '(', 'a', ')', ')', 'print', '(', ')']"
2776,"['find', 'maximum', 'element', 'matrix']","['import', 'sys', 'row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'max', '=', '-', 'sys', '.', 'maxsize', '-', '1', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '>=', 'max', ':', 'max', '=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""The Maximum element of the Given 2d array is: ""', ',', 'max', ')']"
2777,"['python', 'program', 'solve', 'matrixchain', 'multiplication', 'using', 'dynamic', 'programming', 'memoization']","['def', 'matrix_product', '(', 'p', ')', ':', '""""""Return m and s.\n\xa0\n    m[i][j] is the minimum number of scalar multiplications needed to compute the\n    product of matrices A(i), A(i + 1), ..., A(j).\n\xa0\n    s[i][j] is the index of the matrix after which the product is split in an\n    optimal parenthesization of the matrix product.\n\xa0\n    p[0... n] is a list such that matrix A(i) has dimensions p[i - 1] x p[i].\n    """"""', 'length', '=', 'len', '(', 'p', ')', 'm', '=', '[', '[', '-', '1', ']', '*', 'length', 'for', '_', 'in', 'range', '(', 'length', ')', ']', 's', '=', '[', '[', '-', '1', ']', '*', 'length', 'for', '_', 'in', 'range', '(', 'length', ')', ']', 'matrix_product_helper', '(', 'p', ',', '1', ',', 'length', '-', '1', ',', 'm', ',', 's', ')', 'return', 'm', ',', 's', 'def', 'matrix_product_helper', '(', 'p', ',', 'start', ',', 'end', ',', 'm', ',', 's', ')', ':', '""""""Return minimum number of scalar multiplications needed to compute the\n    product of matrices A(start), A(start + 1), ..., A(end).\n\xa0\n    The minimum number of scalar multiplications needed to compute the\n    product of matrices A(i), A(i + 1), ..., A(j) is stored in m[i][j].\n\xa0\n    The index of the matrix after which the above product is split in an optimal\n    parenthesization is stored in s[i][j].\n\xa0\n    p[0... n] is a list such that matrix A(i) has dimensions p[i - 1] x p[i].\n    """"""', 'if', 'm', '[', 'start', ']', '[', 'end', ']', '>=', '0', ':', 'return', 'm', '[', 'start', ']', '[', 'end', ']', 'if', 'start', '==', 'end', ':', 'q', '=', '0', 'else', ':', 'q', '=', 'float', '(', ""'inf'"", ')', 'for', 'k', 'in', 'range', '(', 'start', ',', 'end', ')', ':', 'temp', '=', 'matrix_product_helper', '(', 'p', ',', 'start', ',', 'k', ',', 'm', ',', 's', ')', '+', 'matrix_product_helper', '(', 'p', ',', 'k', '+', '1', ',', 'end', ',', 'm', ',', 's', ')', '+', 'p', '[', 'start', '-', '1', ']', '*', 'p', '[', 'k', ']', '*', 'p', '[', 'end', ']', 'if', 'q', '>', 'temp', ':', 'q', '=', 'temp', 's', '[', 'start', ']', '[', 'end', ']', '=', 'k', 'm', '[', 'start', ']', '[', 'end', ']', '=', 'q', 'return', 'q', 'def', 'print_parenthesization', '(', 's', ',', 'start', ',', 'end', ')', ':', '""""""Print the optimal parenthesization of the matrix product A(start) x\n    A(start + 1) x ... x A(end).\n\xa0\n    s[i][j] is the index of the matrix after which the product is split in an\n    optimal parenthesization of the matrix product.\n    """"""', 'if', 'start', '==', 'end', ':', 'print', '(', ""'A[{}]'"", '.', 'format', '(', 'start', ')', ',', 'end', '=', ""''"", ')', 'return', 'k', '=', 's', '[', 'start', ']', '[', 'end', ']', 'print', '(', ""'('"", ',', 'end', '=', ""''"", ')', 'print_parenthesization', '(', 's', ',', 'start', ',', 'k', ')', 'print_parenthesization', '(', 's', ',', 'k', '+', '1', ',', 'end', ')', 'print', '(', ""')'"", ',', 'end', '=', ""''"", ')', 'n', '=', 'int', '(', 'input', '(', ""'Enter number of matrices: '"", ')', ')', 'p', '=', '[', ']', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'temp', '=', 'int', '(', 'input', '(', ""'Enter number of rows in matrix {}: '"", '.', 'format', '(', 'i', '+', '1', ')', ')', ')', 'p', '.', 'append', '(', 'temp', ')', 'temp', '=', 'int', '(', 'input', '(', ""'Enter number of columns in matrix {}: '"", '.', 'format', '(', 'n', ')', ')', ')', 'p', '.', 'append', '(', 'temp', ')', 'm', ',', 's', '=', 'matrix_product', '(', 'p', ')', 'print', '(', ""'The number of scalar multiplications needed:'"", ',', 'm', '[', '1', ']', '[', 'n', ']', ')', 'print', '(', ""'Optimal parenthesization: '"", ',', 'end', '=', ""''"", ')', 'print_parenthesization', '(', 's', ',', '1', ',', 'n', ')']"
2778,"['program', 'find', 'nth', 'armstrong', 'number']","['rangenumber', '=', 'int', '(', 'input', '(', '""Enter a Nth Number:""', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', 'c', '!=', 'rangenumber', ':', 'num2', '=', 'num', 'num1', '=', 'num', 'sum', '=', '0', 'while', 'num1', '!=', '0', ':', 'rem', '=', 'num1', '%', '10', 'num1', '=', 'num1', '//', '10', 'sum', '=', 'sum', '+', 'rem', '*', 'rem', '*', 'rem', 'if', 'sum', '==', 'num2', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Armstrong Number is ""', ',', 'latest', ')']"
2779,"['python', 'program', 'form', 'new', 'string', 'first', 'character', 'last', 'character', 'exchanged']","['def', 'change', '(', 'string', ')', ':', 'return', 'string', '[', '-', '1', ':', ']', '+', 'string', '[', '1', ':', '-', '1', ']', '+', 'string', '[', ':', '1', ']', 'string', '=', 'raw_input', '(', '""Enter string:""', ')', 'print', '(', '""Modified string:""', ')', 'print', '(', 'change', '(', 'string', ')', ')']"
2780,"['program', 'print', 'half', 'pyramid', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'row_size', '+', '1', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', 'out', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2781,"['convert', 'octal', 'decimal', 'using', 'recursion']","['decimal', '=', '0', 'sem', '=', '0', 'def', 'OctalToDecimal', '(', 'n', ')', ':', 'global', 'sem', ',', 'decimal', 'if', '(', 'n', '!=', '0', ')', ':', 'decimal', '+=', '(', 'n', '%', '10', ')', '*', 'pow', '(', '8', ',', 'sem', ')', 'sem', '+=', '1', 'OctalToDecimal', '(', 'n', '//', '10', ')', 'return', 'decimaln', '=', 'int', '(', 'input', '(', '""Enter the Octal Value:""', ')', ')', 'print', '(', '""Decimal Value of Octal number is:""', ',', 'OctalToDecimal', '(', 'n', ')', ')']"
2782,"['program', 'check', 'whether', 'matrix', 'symmetric']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'if', 'row_size', '!=', 'col_size', ':', 'print', '(', '""Given Matrix is not a Square Matrix.""', ')', 'else', ':', 'tran_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'tran_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'j', ']', '[', 'i', ']', 'flag', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', 'tran_matrix', '[', 'i', ']', '[', 'j', ']', ':', 'flag', '=', '1', 'break', 'if', 'flag', '==', '1', ':', 'print', '(', '""Given Matrix is not a symmetric Matrix.""', ')', 'else', ':', 'print', '(', '""Given Matrix is a symmetric Matrix.""', ')']"
2783,"['python', 'program', 'remove', 'duplicate', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'get_prev_node', '(', 'self', ',', 'ref_node', ')', ':', 'current', '=', 'self', '.', 'head', 'while', '(', 'current', 'and', 'current', '.', 'next', '!=', 'ref_node', ')', ':', 'current', '=', 'current', '.', 'next', 'return', 'current', 'def', 'remove', '(', 'self', ',', 'node', ')', ':', 'prev_node', '=', 'self', '.', 'get_prev_node', '(', 'node', ')', 'if', 'prev_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'self', '.', 'head', '.', 'next', 'else', ':', 'prev_node', '.', 'next', '=', 'node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'def', 'remove_duplicates', '(', 'llist', ')', ':', 'current1', '=', 'llist', '.', 'head', 'while', 'current1', ':', 'data', '=', 'current1', '.', 'data', 'current2', '=', 'current1', '.', 'next', 'while', 'current2', ':', 'if', 'current2', '.', 'data', '==', 'data', ':', 'llist', '.', 'remove', '(', 'current2', ')', 'current2', '=', 'current2', '.', 'next', 'current1', '=', 'current1', '.', 'next', 'a_llist', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_llist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'remove_duplicates', '(', 'a_llist', ')', 'print', '(', ""'The list with duplicates removed: '"", ')', 'a_llist', '.', 'display', '(', ')']"
2784,"['python', 'program', 'find', 'smallest', 'divisor', 'integer']","['n', '=', 'int', '(', 'input', '(', '""Enter an integer:""', ')', ')', 'a', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '2', ',', 'n', '+', '1', ')', ':', 'if', '(', 'n', '%', 'i', '==', '0', ')', ':', 'a', '.', 'append', '(', 'i', ')', 'a', '.', 'sort', '(', ')', 'print', '(', '""Smallest divisor is:""', ',', 'a', '[', '0', ']', ')']"
2785,"['print', 'hollow', 'half', 'pyramid', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'print_control_x', '=', 'row_size', '//', '2', '+', '1', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'if', 'inn', '==', '1', 'or', 'out', '==', 'inn', 'or', 'out', '==', 'row_size', ':', 'print', '(', 'out', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2786,"['program', 'find', 'sum', 'series']","['import', 'math', 'print', '(', '""Enter the range of number:""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '=', '0.0', 'fact', '=', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'fact', '*=', 'i', 'sum', '+=', 'pow', '(', 'i', ',', 'i', ')', '/', 'fact', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
2787,"['program', 'check', 'two', 'matrix', 'equal']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the 1st Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the 1st Matrix:""', ')', ')', 'row_size1', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the 1st Matrix:""', ')', ')', 'col_size1', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the 2nd Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the 1st Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'matrix1', '=', '[', ']', 'print', '(', '""Enter the 2nd Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix1', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'point', '=', '0', 'if', 'row_size', '==', 'row_size1', 'and', 'col_size', '==', 'col_size1', ':', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', 'matrix1', '[', 'i', ']', '[', 'j', ']', ':', 'point', '=', '1', 'break', 'else', ':', 'print', '(', '""Two matrices are not equal.""', ')', 'exit', '(', '0', ')', 'if', 'point', '==', '1', ':', 'print', '(', '""Two matrices are not equal.""', ')', 'else', ':', 'print', '(', '""Two matrices are equal.""', ')']"
2788,"['separate', 'even', 'odd', 'number', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""\\nOdd numbers are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', '(', 'arr', '[', 'i', ']', '%', '2', '!=', '0', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\nEven numbers are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', '(', 'arr', '[', 'i', ']', '%', '2', '==', '0', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')']"
2789,"['find', 'sum', 'n', 'natural', 'number', 'using', 'recursion']","['def', 'SumOfNaturalNumber', '(', 'n', ')', ':', 'if', 'n', '>', '0', ':', 'return', 'n', '+', 'SumOfNaturalNumber', '(', 'n', '-', '1', ')', 'else', ':', 'return', 'nn', '=', 'int', '(', 'input', '(', '""Enter the N Number:""', ')', ')', 'print', '(', '""Sum of N Natural Number Using Recursion is:""', ',', 'SumOfNaturalNumber', '(', 'n', ')', ')']"
2790,"['python', 'program', 'depth', 'first', 'binary', 'tree', 'search', 'using', 'recursion']","['class', 'BinaryTree', ':', 'def', '__init__', '(', 'self', ',', 'key', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'def', 'set_root', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'def', 'insert_left', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'left', '=', 'new_node', 'def', 'insert_right', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'right', '=', 'new_node', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'left', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'right', '.', 'search', '(', 'key', ')', 'return', 'temp', 'return', 'None', 'def', 'depth_first', '(', 'self', ')', ':', 'print', '(', ""'entering {}...'"", '.', 'format', '(', 'self', '.', 'key', ')', ')', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'depth_first', '(', ')', 'print', '(', ""'at {}...'"", '.', 'format', '(', 'self', '.', 'key', ')', ')', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'right', '.', 'depth_first', '(', ')', 'print', '(', ""'leaving {}...'"", '.', 'format', '(', 'self', '.', 'key', ')', ')', 'btree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'insert <data> at root'"", ')', 'print', '(', ""'insert <data> left of <data>'"", ')', 'print', '(', ""'insert <data> right of <data>'"", ')', 'print', '(', ""'dfs'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'BinaryTree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'btree', '=', 'new_node', 'else', ':', 'position', '=', 'do', '[', '4', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'btree', 'is', 'not', 'None', ':', 'ref_node', '=', 'btree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'if', 'suboperation', '==', ""'left'"", ':', 'ref_node', '.', 'insert_left', '(', 'new_node', ')', 'elif', 'suboperation', '==', ""'right'"", ':', 'ref_node', '.', 'insert_right', '(', 'new_node', ')', 'elif', 'operation', '==', ""'dfs'"", ':', 'print', '(', ""'depth-first search traversal:'"", ')', 'if', 'btree', 'is', 'not', 'None', ':', 'btree', '.', 'depth_first', '(', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2791,"['python', 'program', 'check', 'two', 'number', 'amicable', 'number']","['x', '=', 'int', '(', 'input', '(', ""'Enter number 1: '"", ')', ')', 'y', '=', 'int', '(', 'input', '(', ""'Enter number 2: '"", ')', ')', 'sum1', '=', '0', 'sum2', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'x', ')', ':', 'if', 'x', '%', 'i', '==', '0', ':', 'sum1', '+=', 'i', 'for', 'j', 'in', 'range', '(', '1', ',', 'y', ')', ':', 'if', 'y', '%', 'j', '==', '0', ':', 'sum2', '+=', 'j', 'if', '(', 'sum1', '==', 'y', 'and', 'sum2', '==', 'x', ')', ':', 'print', '(', ""'Amicable!'"", ')', 'else', ':', 'print', '(', ""'Not Amicable!'"", ')']"
2792,"['decimal', 'octal', 'conversion', 'using', 'recursion']","['sem', '=', '1', 'octal', '=', '0', 'def', 'DecimalToOctal', '(', 'n', ')', ':', 'global', 'sem', ',', 'octal', 'if', '(', 'n', '!=', '0', ')', ':', 'octal', '=', 'octal', '+', '(', 'n', '%', '8', ')', '*', 'sem', 'sem', '=', 'sem', '*', '10', 'DecimalToOctal', '(', 'n', '//', '8', ')', 'return', 'octaln', '=', 'int', '(', 'input', '(', '""Enter the Decimal Value:""', ')', ')', 'print', '(', '""Octal Value of Decimal number is: ""', ',', 'DecimalToOctal', '(', 'n', ')', ')']"
2793,"['program', 'find', 'normal', 'trace', 'matrix']","['import', 'math', 'row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'trace', '=', '0', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'if', 'i', '==', 'j', ':', 'trace', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'normal', '=', 'math', '.', 'sqrt', '(', 'sum', ')', 'print', '(', '""Normal Of the Matrix is: ""', ',', 'normal', ')', 'print', '(', '""Trace Of the Matrix is: ""', ',', 'trace', ')']"
2794,"['write', 'program', 'print', 'alphabet', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', ';', 'row_size', '=', 'input', '(', ')', 'for', 'out', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'ord', '(', 'row_size', ')', '+', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'ord', '(', 'row_size', ')', '+', '1', ')', ':', 'print', '(', 'chr', '(', 'i', ')', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\r""', ')']"
2795,"['program', 'check', 'whether', 'matrix', 'sparse']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'count_zero', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '==', '0', ':', 'count_zero', '+=', '1', 'if', 'count_zero', '>', '(', 'row_size', '*', 'col_size', ')', '//', '2', ':', 'print', '(', '""Given Matrix is a sparse Matrix.""', ')', 'else', ':', 'print', '(', '""Given Matrix is not a sparse Matrix.""', ')']"
2796,"['please', 'write', 'program', 'output', 'random', 'even', 'number', 'inclusive', 'using', 'random', 'module', 'list', 'comprehension']","['import', 'random', 'print', 'random', '.', 'choice', '(', '[', 'i', 'for', 'i', 'in', 'range', '(', '11', ')', 'if', 'i', '%', '2', '==', '0', ']', ')']"
2797,"['program', 'find', 'nth', 'palindrome', 'number']","['rangenumber', '=', 'int', '(', 'input', '(', '""Enter a Nth Number:""', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', 'c', '!=', 'rangenumber', ':', 'num2', '=', '0', 'num1', '=', 'num', 'while', 'num1', '!=', '0', ':', 'rem', '=', 'num1', '%', '10', 'num1', '//=', '10', 'num2', '=', 'num2', '*', '10', '+', 'rem', 'if', 'num', '==', 'num2', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Palindrome Number is ""', ',', 'letest', ')']"
2798,"['program', 'print', 'right', 'triangle', 'alphabet', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', ';', 'row_size', '=', 'input', '(', ')', 'for', 'out', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'ord', '(', 'row_size', ')', '+', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'out', '+', '1', ')', ':', 'print', '(', 'chr', '(', 'i', ')', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\r""', ')']"
2799,"['python', 'program', 'find', 'gcd', 'two', 'number', 'using', 'recursion']","['def', 'gcd', '(', 'a', ',', 'b', ')', ':', 'if', '(', 'b', '==', '0', ')', ':', 'return', 'a', 'else', ':', 'return', 'gcd', '(', 'b', ',', 'a', '%', 'b', ')', 'a', '=', 'int', '(', 'input', '(', '""Enter first number:""', ')', ')', 'b', '=', 'int', '(', 'input', '(', '""Enter second number:""', ')', ')', 'GCD', '=', 'gcd', '(', 'a', ',', 'b', ')', 'print', '(', '""GCD is: ""', ')', 'print', '(', 'GCD', ')']"
2800,"['python', 'program', 'find', 'transitive', 'closure', 'graph']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__len__', '(', 'self', ')', ':', 'return', 'len', '(', 'self', '.', 'vertices', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'transitive_closure', '(', 'g', ')', ':', '""""""Return dictionary reachable.\n\xa0\n    reachable[u][v] = True iff there is a path from vertex u to v.\n\xa0\n    g is a Graph object which can have negative edge weights.\n    """"""', 'reachable', '=', '{', 'v', ':', 'dict', '.', 'fromkeys', '(', 'g', ',', 'False', ')', 'for', 'v', 'in', 'g', '}', 'for', 'v', 'in', 'g', ':', 'for', 'n', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'reachable', '[', 'v', ']', '[', 'n', ']', '=', 'True', 'for', 'v', 'in', 'g', ':', 'reachable', '[', 'v', ']', '[', 'v', ']', '=', 'True', 'for', 'p', 'in', 'g', ':', 'for', 'v', 'in', 'g', ':', 'for', 'w', 'in', 'g', ':', 'if', 'reachable', '[', 'v', ']', '[', 'p', ']', 'and', 'reachable', '[', 'p', ']', '[', 'w', ']', ':', 'reachable', '[', 'v', ']', '[', 'w', ']', '=', 'True', 'return', 'reachable', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest>'"", ')', 'print', '(', ""'transitive-closure'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'transitive-closure'"", ':', 'reachable', '=', 'transitive_closure', '(', 'g', ')', 'print', '(', ""'All pairs (u, v) such that there is a path from u to v: '"", ')', 'for', 'start', 'in', 'g', ':', 'for', 'end', 'in', 'g', ':', 'if', 'reachable', '[', 'start', ']', '[', 'end', ']', ':', 'print', '(', ""'{}, {}'"", '.', 'format', '(', 'start', '.', 'get_key', '(', ')', ',', 'end', '.', 'get_key', '(', ')', ')', ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2801,"['program', 'find', 'addition', 'two', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'matrix1', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix1', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'sum_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'i', ']', '[', 'j', ']', '+', 'matrix1', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Sum of the two Matrices is:""', ')', 'for', 'm', 'in', 'sum_matrix', ':', 'print', '(', 'm', ')']"
2802,"['remove', 'uppercase', 'character', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'str2', '=', '[', ']', 'i', '=', '0', 'while', 'i', '<', 'len', '(', 'str', ')', ':', 'ch', '=', 'str', '[', 'i', ']', 'if', 'not', 'ch', '.', 'isupper', '(', ')', ':', 'str2', '.', 'append', '(', 'ch', ')', 'i', '+=', '1', 'Final_String', '=', ""''"", '.', 'join', '(', 'str2', ')', 'print', '(', '""After removing uppercase letter string is:""', ',', 'Final_String', ')']"
2803,"['decimal', 'octal', 'conversion', 'using', 'recursion']","['sem', '=', '1', 'octal', '=', '0', 'def', 'DecimalToOctal', '(', 'n', ')', ':', 'global', 'sem', ',', 'octal', 'if', '(', 'n', '!=', '0', ')', ':', 'octal', '=', 'octal', '+', '(', 'n', '%', '8', ')', '*', 'sem', 'sem', '=', 'sem', '*', '10', 'DecimalToOctal', '(', 'n', '//', '8', ')', 'return', 'octaln', '=', 'int', '(', 'input', '(', '""Enter the Decimal Value:""', ')', ')', 'print', '(', '""Octal Value of Decimal number is: ""', ',', 'DecimalToOctal', '(', 'n', ')', ')']"
2804,"['check', 'whether', 'given', 'number', 'positive', 'negative']","['num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'if', '(', 'num', '<', '0', ')', ':', 'print', '(', '""The number is negative""', ')', 'elif', '(', 'num', '>', '0', ')', ':', 'print', '(', '""The number is positive""', ')', 'else', ':', 'print', '(', '""The number is neither negative nor positive""', ')']"
2805,"['python', 'program', 'find', 'sum', 'element', 'list', 'recursively']","['def', 'sum_arr', '(', 'arr', ',', 'size', ')', ':', 'if', '(', 'size', '==', '0', ')', ':', 'return', '0', 'else', ':', 'return', 'arr', '[', 'size', '-', '1', ']', '+', 'sum_arr', '(', 'arr', ',', 'size', '-', '1', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter the number of elements for list:""', ')', ')', 'a', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'element', '=', 'int', '(', 'input', '(', '""Enter element:""', ')', ')', 'a', '.', 'append', '(', 'element', ')', 'print', '(', '""The list is:""', ')', 'print', '(', 'a', ')', 'print', '(', '""Sum of items in list:""', ')', 'b', '=', 'sum_arr', '(', 'a', ',', 'n', ')', 'print', '(', 'b', ')']"
2806,"['python', 'program', 'solve', 'matrixchain', 'multiplication', 'using', 'dynamic', 'programming', 'bottomup', 'approach']","['def', 'matrix_product', '(', 'p', ')', ':', '""""""Return m and s.\n\xa0\n    m[i][j] is the minimum number of scalar multiplications needed to compute the\n    product of matrices A(i), A(i + 1), ..., A(j).\n\xa0\n    s[i][j] is the index of the matrix after which the product is split in an\n    optimal parenthesization of the matrix product.\n\xa0\n    p[0... n] is a list such that matrix A(i) has dimensions p[i - 1] x p[i].\n    """"""', 'length', '=', 'len', '(', 'p', ')', 'm', '=', '[', '[', '-', '1', ']', '*', 'length', 'for', '_', 'in', 'range', '(', 'length', ')', ']', 's', '=', '[', '[', '-', '1', ']', '*', 'length', 'for', '_', 'in', 'range', '(', 'length', ')', ']', 'for', 'i', 'in', 'range', '(', '1', ',', 'length', ')', ':', 'm', '[', 'i', ']', '[', 'i', ']', '=', '0', 'for', 'chain_length', 'in', 'range', '(', '2', ',', 'length', ')', ':', 'for', 'start', 'in', 'range', '(', '1', ',', 'length', '-', 'chain_length', '+', '1', ')', ':', 'end', '=', 'start', '+', 'chain_length', '-', '1', 'q', '=', 'float', '(', ""'inf'"", ')', 'for', 'k', 'in', 'range', '(', 'start', ',', 'end', ')', ':', 'temp', '=', 'm', '[', 'start', ']', '[', 'k', ']', '+', 'm', '[', 'k', '+', '1', ']', '[', 'end', ']', '+', 'p', '[', 'start', '-', '1', ']', '*', 'p', '[', 'k', ']', '*', 'p', '[', 'end', ']', 'if', 'temp', '<', 'q', ':', 'q', '=', 'temp', 's', '[', 'start', ']', '[', 'end', ']', '=', 'k', 'm', '[', 'start', ']', '[', 'end', ']', '=', 'q', 'return', 'm', ',', 's', 'def', 'print_parenthesization', '(', 's', ',', 'start', ',', 'end', ')', ':', '""""""Print the optimal parenthesization of the matrix product A(start) x\n    A(start + 1) x ... x A(end).\n\xa0\n    s[i][j] is the index of the matrix after which the product is split in an\n    optimal parenthesization of the matrix product.\n    """"""', 'if', 'start', '==', 'end', ':', 'print', '(', ""'A[{}]'"", '.', 'format', '(', 'start', ')', ',', 'end', '=', ""''"", ')', 'return', 'k', '=', 's', '[', 'start', ']', '[', 'end', ']', 'print', '(', ""'('"", ',', 'end', '=', ""''"", ')', 'print_parenthesization', '(', 's', ',', 'start', ',', 'k', ')', 'print_parenthesization', '(', 's', ',', 'k', '+', '1', ',', 'end', ')', 'print', '(', ""')'"", ',', 'end', '=', ""''"", ')', 'n', '=', 'int', '(', 'input', '(', ""'Enter number of matrices: '"", ')', ')', 'p', '=', '[', ']', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'temp', '=', 'int', '(', 'input', '(', ""'Enter number of rows in matrix {}: '"", '.', 'format', '(', 'i', '+', '1', ')', ')', ')', 'p', '.', 'append', '(', 'temp', ')', 'temp', '=', 'int', '(', 'input', '(', ""'Enter number of columns in matrix {}: '"", '.', 'format', '(', 'n', ')', ')', ')', 'p', '.', 'append', '(', 'temp', ')', 'm', ',', 's', '=', 'matrix_product', '(', 'p', ')', 'print', '(', ""'The number of scalar multiplications needed:'"", ',', 'm', '[', '1', ']', '[', 'n', ']', ')', 'print', '(', ""'Optimal parenthesization: '"", ',', 'end', '=', ""''"", ')', 'print_parenthesization', '(', 's', ',', '1', ',', 'n', ')']"
2807,"['python', 'program', 'implement', 'binomial', 'tree']","['class', 'BinomialTree', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'children', '=', '[', ']', 'self', '.', 'order', '=', '0', 'def', 'add_at_end', '(', 'self', ',', 't', ')', ':', 'self', '.', 'children', '.', 'append', '(', 't', ')', 'self', '.', 'order', '=', 'self', '.', 'order', '+', '1', 'trees', '=', '[', ']', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'create <key>'"", ')', 'print', '(', ""'combine <index1> <index2>'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'create'"", ':', 'key', '=', 'int', '(', 'do', '[', '1', ']', ')', 'btree', '=', 'BinomialTree', '(', 'key', ')', 'trees', '.', 'append', '(', 'btree', ')', 'print', '(', ""'Binomial tree created.'"", ')', 'elif', 'operation', '==', ""'combine'"", ':', 'index1', '=', 'int', '(', 'do', '[', '1', ']', ')', 'index2', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'trees', '[', 'index1', ']', '.', 'order', '==', 'trees', '[', 'index2', ']', '.', 'order', ':', 'trees', '[', 'index1', ']', '.', 'add_at_end', '(', 'trees', '[', 'index2', ']', ')', 'del', 'trees', '[', 'index2', ']', 'print', '(', ""'Binomial trees combined.'"", ')', 'else', ':', 'print', '(', ""'Orders of the trees need to be the same.'"", ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break', 'print', '(', ""'{:>8}{:>12}{:>8}'"", '.', 'format', '(', ""'Index'"", ',', ""'Root key'"", ',', ""'Order'"", ')', ')', 'for', 'index', ',', 't', 'in', 'enumerate', '(', 'trees', ')', ':', 'print', '(', ""'{:8d}{:12d}{:8d}'"", '.', 'format', '(', 'index', ',', 't', '.', 'key', ',', 't', '.', 'order', ')', ')']"
2808,"['write', 'program', 'find', 'number', 'divisible', 'multiple', 'included', 'number', 'obtained', 'printed', 'commaseparated', 'sequence', 'single', 'line']","['l', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '2000', ',', '3201', ')', ':', 'if', '(', 'i', '%', '7', '==', '0', ')', 'and', '(', 'i', '%', '5', '!=', '0', ')', ':', 'l', '.', 'append', '(', 'str', '(', 'i', ')', ')', 'print', ""','"", '.', 'join', '(', 'l', ')']"
2809,"['python', 'program', 'find', 'smallest', 'set', 'unitlength', 'closed', 'interval', 'contains', 'point', 'using', 'greedy', 'algorithm']","['def', 'smallest_unit_length_intervals', '(', 'points', ')', ':', '""""""Return smallest set with unit-length intervals that includes all points.\n\xa0\n    A smallest set containing closed intervals is returned such that each point\n    is included in some interval.\n    The intervals are in the form of tuples (a, b).\n\xa0\n    points is a list of points on the x-axis.\n    """"""', 'points', '.', 'sort', '(', ')', 'smallest_set', '=', 'set', '(', ')', 'end_of_last_interval', '=', 'float', '(', ""'-inf'"", ')', 'for', 'p', 'in', 'points', ':', 'if', 'end_of_last_interval', '<=', 'p', ':', 'interval', '=', '(', 'p', ',', 'p', '+', '1', ')', 'smallest_set', '.', 'add', '(', 'interval', ')', 'end_of_last_interval', '=', 'p', '+', '1', 'return', 'smallest_set', 'points', '=', 'input', '(', ""'Enter the points: '"", ')', '.', 'split', '(', ')', 'points', '=', '[', 'float', '(', 'p', ')', 'for', 'p', 'in', 'points', ']', 'ans', '=', 'smallest_unit_length_intervals', '(', 'points', ')', 'print', '(', ""'A smallest-size set containing unit-length intervals '"", ""'that contain all of these points is'"", ',', 'ans', ')']"
2810,"['write', 'program', 'print', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', ';', 'row_size', '=', 'int', '(', 'input', '(', ')', ')', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'print', '(', 'out', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2811,"['python', 'program', 'solve', 'knapsack', 'problem', 'using', 'dynamic', 'programming', 'bottomup', 'approach']","['def', 'knapsack', '(', 'value', ',', 'weight', ',', 'capacity', ')', ':', '""""""Return the maximum value of items that doesn\'t exceed capacity.\n\xa0\n    value[i] is the value of item i and weight[i] is the weight of item i\n    for 1 <= i <= n where n is the number of items.\n\xa0\n    capacity is the maximum weight.\n    """"""', 'n', '=', 'len', '(', 'value', ')', '-', '1', 'm', '=', '[', '[', '-', '1', ']', '*', '(', 'capacity', '+', '1', ')', 'for', '_', 'in', 'range', '(', 'n', '+', '1', ')', ']', 'for', 'w', 'in', 'range', '(', 'capacity', '+', '1', ')', ':', 'm', '[', '0', ']', '[', 'w', ']', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'for', 'w', 'in', 'range', '(', 'capacity', '+', '1', ')', ':', 'if', 'weight', '[', 'i', ']', '>', 'w', ':', 'm', '[', 'i', ']', '[', 'w', ']', '=', 'm', '[', 'i', '-', '1', ']', '[', 'w', ']', 'else', ':', 'm', '[', 'i', ']', '[', 'w', ']', '=', 'max', '(', 'm', '[', 'i', '-', '1', ']', '[', 'w', '-', 'weight', '[', 'i', ']', ']', '+', 'value', '[', 'i', ']', ',', 'm', '[', 'i', '-', '1', ']', '[', 'w', ']', ')', 'return', 'm', '[', 'n', ']', '[', 'capacity', ']', 'n', '=', 'int', '(', 'input', '(', ""'Enter number of items: '"", ')', ')', 'value', '=', 'input', '(', ""'Enter the values of the {} item(s) in order: '"", '.', 'format', '(', 'n', ')', ')', '.', 'split', '(', ')', 'value', '=', '[', 'int', '(', 'v', ')', 'for', 'v', 'in', 'value', ']', 'value', '.', 'insert', '(', '0', ',', 'None', ')', 'weight', '=', 'input', '(', ""'Enter the positive weights of the {} item(s) in order: '"", '.', 'format', '(', 'n', ')', ')', '.', 'split', '(', ')', 'weight', '=', '[', 'int', '(', 'w', ')', 'for', 'w', 'in', 'weight', ']', 'weight', '.', 'insert', '(', '0', ',', 'None', ')', 'capacity', '=', 'int', '(', 'input', '(', ""'Enter maximum weight: '"", ')', ')', 'ans', '=', 'knapsack', '(', 'value', ',', 'weight', ',', 'capacity', ')', 'print', '(', ""'The maximum value of items that can be carried:'"", ',', 'ans', ')']"
2812,"['please', 'write', 'program', 'print', 'permutation']","['import', 'itertools', 'print', 'list', '(', 'itertools', '.', 'permutations', '(', '[', '1', ',', '2', ',', '3', ']', ')', ')']"
2813,"['program', 'convert', 'octal', 'decimal']","['print', '(', '""Enter the octal number: ""', ')', ';', 'octal', '=', 'int', '(', 'input', '(', ')', ')', ';', 'decimal', '=', '0', 'sem', '=', '0', 'while', '(', 'octal', '!=', '0', ')', ':', 'decimal', '=', 'decimal', '+', '(', 'octal', '%', '10', ')', '*', 'pow', '(', '8', ',', 'sem', ')', 'sem', '+=', '1', 'octal', '=', 'octal', '//', '10', 'print', '(', '""Decimal number is: ""', ',', 'decimal', ')']"
2814,"['python', 'program', 'demonstrate', 'circular', 'single', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'CircularLinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'def', 'get_node', '(', 'self', ',', 'index', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'None', 'current', '=', 'self', '.', 'head', 'for', 'i', 'in', 'range', '(', 'index', ')', ':', 'current', '=', 'current', '.', 'next', 'if', 'current', '==', 'self', '.', 'head', ':', 'return', 'None', 'return', 'current', 'def', 'get_prev_node', '(', 'self', ',', 'ref_node', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'None', 'current', '=', 'self', '.', 'head', 'while', 'current', '.', 'next', '!=', 'ref_node', ':', 'current', '=', 'current', '.', 'next', 'return', 'current', 'def', 'insert_after', '(', 'self', ',', 'ref_node', ',', 'new_node', ')', ':', 'new_node', '.', 'next', '=', 'ref_node', '.', 'next', 'ref_node', '.', 'next', '=', 'new_node', 'def', 'insert_before', '(', 'self', ',', 'ref_node', ',', 'new_node', ')', ':', 'prev_node', '=', 'self', '.', 'get_prev_node', '(', 'ref_node', ')', 'self', '.', 'insert_after', '(', 'prev_node', ',', 'new_node', ')', 'def', 'insert_at_end', '(', 'self', ',', 'new_node', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'self', '.', 'head', '=', 'new_node', 'new_node', '.', 'next', '=', 'new_node', 'else', ':', 'self', '.', 'insert_before', '(', 'self', '.', 'head', ',', 'new_node', ')', 'def', 'insert_at_beg', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'insert_at_end', '(', 'new_node', ')', 'self', '.', 'head', '=', 'new_node', 'def', 'remove', '(', 'self', ',', 'node', ')', ':', 'if', 'self', '.', 'head', '.', 'next', '==', 'self', '.', 'head', ':', 'self', '.', 'head', '=', 'None', 'else', ':', 'prev_node', '=', 'self', '.', 'get_prev_node', '(', 'node', ')', 'prev_node', '.', 'next', '=', 'node', '.', 'next', 'if', 'self', '.', 'head', '==', 'node', ':', 'self', '.', 'head', '=', 'node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'current', '=', 'self', '.', 'head', 'while', 'True', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'if', 'current', '==', 'self', '.', 'head', ':', 'break', 'a_cllist', '=', 'CircularLinkedList', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'insert <data> after <index>'"", ')', 'print', '(', ""'insert <data> before <index>'"", ')', 'print', '(', ""'insert <data> at beg'"", ')', 'print', '(', ""'insert <data> at end'"", ')', 'print', '(', ""'remove <index>'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'print', '(', ""'The list: '"", ',', 'end', '=', ""''"", ')', 'a_cllist', '.', 'display', '(', ')', 'print', '(', ')', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'position', '=', 'do', '[', '3', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'new_node', '=', 'Node', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'if', 'position', '==', ""'beg'"", ':', 'a_cllist', '.', 'insert_at_beg', '(', 'new_node', ')', 'elif', 'position', '==', ""'end'"", ':', 'a_cllist', '.', 'insert_at_end', '(', 'new_node', ')', 'else', ':', 'index', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'a_cllist', '.', 'get_node', '(', 'index', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such index.'"", ')', 'continue', 'if', 'suboperation', '==', ""'after'"", ':', 'a_cllist', '.', 'insert_after', '(', 'ref_node', ',', 'new_node', ')', 'elif', 'suboperation', '==', ""'before'"", ':', 'a_cllist', '.', 'insert_before', '(', 'ref_node', ',', 'new_node', ')', 'elif', 'operation', '==', ""'remove'"", ':', 'index', '=', 'int', '(', 'do', '[', '1', ']', ')', 'node', '=', 'a_cllist', '.', 'get_node', '(', 'index', ')', 'if', 'node', 'is', 'None', ':', 'print', '(', ""'No such index.'"", ')', 'continue', 'a_cllist', '.', 'remove', '(', 'node', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2815,"['python', 'program', 'reverse', 'given', 'number']","['n', '=', 'int', '(', 'input', '(', '""Enter number: ""', ')', ')', 'rev', '=', '0', 'while', '(', 'n', '>', '0', ')', ':', 'dig', '=', 'n', '%', '10', 'rev', '=', 'rev', '*', '10', '+', 'dig', 'n', '=', 'n', '//', '10', 'print', '(', '""Reverse of the number:""', ',', 'rev', ')']"
2816,"['odd', 'even', 'sort', 'program', 'python', 'java', 'c', 'c']","['size', '=', 'int', '(', 'input', '(', '""Enter the size of the array:""', ')', ')', ';', 'arr', '=', '[', ']', 'print', '(', '""Enter the element of the array:""', ')', ';', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Before Sorting Array Element are: ""', ',', 'arr', ')', 'for', 'out', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'for', 'inn', 'in', 'range', '(', '0', ',', 'size', '-', '1', ',', '+', '2', ')', ':', 'if', 'inn', '!=', 'size', '-', '1', ':', 'if', 'arr', '[', 'inn', ']', '>', 'arr', '[', 'inn', '+', '1', ']', ':', 'temp', '=', 'arr', '[', 'inn', ']', 'arr', '[', 'inn', ']', '=', 'arr', '[', 'inn', '+', '1', ']', 'arr', '[', 'inn', '+', '1', ']', '=', 'temp', 'for', 'inn', 'in', 'range', '(', '1', ',', 'size', '-', '1', ',', '+', '2', ')', ':', 'if', 'inn', '!=', 'size', '-', '1', ':', 'if', 'arr', '[', 'inn', ']', '>', 'arr', '[', 'inn', '+', '1', ']', ':', 'temp', '=', 'arr', '[', 'inn', ']', 'arr', '[', 'inn', ']', '=', 'arr', '[', 'inn', '+', '1', ']', 'arr', '[', 'inn', '+', '1', ']', '=', 'temp', 'print', '(', '""\\nAfter Sorting Array Element are: ""', ',', 'arr', ')']"
2817,"['program', 'compute', 'area', 'perimeter', 'heptagon']","['import', 'math', 'print', '(', '""Enter the length of the side:""', ')', 'a', '=', 'int', '(', 'input', '(', ')', ')', 'area', '=', '3.634', '*', 'pow', '(', 'a', ',', '2', ')', 'perimeter', '=', '(', '7', '*', 'a', ')', 'print', '(', '""Area of the Heptagon = ""', ',', 'area', ')', 'print', '(', '""Perimeter of the Heptagon= ""', ',', 'perimeter', ')']"
2818,"['using', 'list', 'comprehension', 'please', 'write', 'program', 'print', 'list', 'removing', 'delete', 'number', 'divisible']","['li', '=', '[', '12', ',', '24', ',', '35', ',', '70', ',', '88', ',', '120', ',', '155', ']', 'li', '=', '[', 'x', 'for', 'x', 'in', 'li', 'if', 'x', '%', '5', '!=', '0', 'and', 'x', '%', '7', '!=', '0', ']', 'print', 'li']"
2819,"['python', 'program', 'find', 'nth', 'node', 'inorder', 'traversal', 'tree']","['class', 'BinaryTree', ':', 'def', '__init__', '(', 'self', ',', 'key', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'def', 'set_root', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'def', 'inorder_nth', '(', 'self', ',', 'n', ')', ':', 'return', 'self', '.', 'inorder_nth_helper', '(', 'n', ',', '[', ']', ')', 'def', 'inorder_nth_helper', '(', 'self', ',', 'n', ',', 'inord', ')', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'left', '.', 'inorder_nth_helper', '(', 'n', ',', 'inord', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'inord', '.', 'append', '(', 'self', ')', 'if', 'n', '==', 'len', '(', 'inord', ')', ':', 'return', 'self', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'right', '.', 'inorder_nth_helper', '(', 'n', ',', 'inord', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'def', 'insert_left', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'left', '=', 'new_node', 'def', 'insert_right', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'right', '=', 'new_node', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'left', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'right', '.', 'search', '(', 'key', ')', 'return', 'temp', 'return', 'None', 'btree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'insert <data> at root'"", ')', 'print', '(', ""'insert <data> left of <data>'"", ')', 'print', '(', ""'insert <data> right of <data>'"", ')', 'print', '(', ""'inorder <index>'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'BinaryTree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'btree', '=', 'new_node', 'else', ':', 'position', '=', 'do', '[', '4', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'btree', 'is', 'not', 'None', ':', 'ref_node', '=', 'btree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'if', 'suboperation', '==', ""'left'"", ':', 'ref_node', '.', 'insert_left', '(', 'new_node', ')', 'elif', 'suboperation', '==', ""'right'"", ':', 'ref_node', '.', 'insert_right', '(', 'new_node', ')', 'elif', 'operation', '==', ""'inorder'"", ':', 'if', 'btree', 'is', 'not', 'None', ':', 'index', '=', 'int', '(', 'do', '[', '1', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', ')', 'node', '=', 'btree', '.', 'inorder_nth', '(', 'index', ')', 'if', 'node', 'is', 'not', 'None', ':', 'print', '(', ""'nth term of inorder traversal: {}'"", '.', 'format', '(', 'node', '.', 'key', ')', ')', 'else', ':', 'print', '(', ""'index exceeds maximum possible index.'"", ')', 'else', ':', 'print', '(', ""'Tree is empty.'"", ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2820,"['website', 'requires', 'user', 'input', 'username', 'password', 'register', 'write', 'program', 'check', 'validity', 'password', 'input', 'user', 'following', 'criterion', 'checking', 'password', 'least', 'letter', 'az', 'least', 'number', 'least', 'letter', 'az', 'least', 'character', 'minimum', 'length', 'transaction', 'password', 'maximum', 'length', 'transaction', 'password', 'program', 'accept', 'sequence', 'comma', 'separated', 'password', 'check', 'according', 'criterion', 'password', 'match', 'criterion', 'printed', 'separated', 'comma']","['Solutions', ':', 'import', 're', 'value', '=', '[', ']', 'items', '=', '[', 'x', 'for', 'x', 'in', 'raw_input', '(', ')', '.', 'split', '(', ""','"", ')', ']', 'for', 'p', 'in', 'items', ':', 'if', 'len', '(', 'p', ')', '<', '6', 'or', 'len', '(', 'p', ')', '>', '12', ':', 'continue', 'else', ':', 'pass', 'if', 'not', 're', '.', 'search', '(', '""[a-z]""', ',', 'p', ')', ':', 'continue', 'elif', 'not', 're', '.', 'search', '(', '""[0-9]""', ',', 'p', ')', ':', 'continue', 'elif', 'not', 're', '.', 'search', '(', '""[A-Z]""', ',', 'p', ')', ':', 'continue', 'elif', 'not', 're', '.', 'search', '(', '""[$#@]""', ',', 'p', ')', ':', 'continue', 'elif', 're', '.', 'search', '(', '""\\s""', ',', 'p', ')', ':', 'continue', 'else', ':', 'pass', 'value', '.', 'append', '(', 'p', ')', 'print', '"",""', '.', 'join', '(', 'value', ')']"
2821,"['python', 'program', 'accept', 'three', 'digit', 'print', 'possible', 'combination', 'digit']","['a', '=', 'int', '(', 'input', '(', '""Enter first number:""', ')', ')', 'b', '=', 'int', '(', 'input', '(', '""Enter second number:""', ')', ')', 'c', '=', 'int', '(', 'input', '(', '""Enter third number:""', ')', ')', 'd', '=', '[', ']', 'd', '.', 'append', '(', 'a', ')', 'd', '.', 'append', '(', 'b', ')', 'd', '.', 'append', '(', 'c', ')', 'for', 'i', 'in', 'range', '(', '0', ',', '3', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', '3', ')', ':', 'for', 'k', 'in', 'range', '(', '0', ',', '3', ')', ':', 'if', '(', 'i', '!=', 'j', '&', 'j', '!=', 'k', '&', 'k', '!=', 'i', ')', ':', 'print', '(', 'd', '[', 'i', ']', ',', 'd', '[', 'j', ']', ',', 'd', '[', 'k', ']', ')']"
2822,"['define', 'class', 'person', 'two', 'child', 'class', 'male', 'female', 'class', 'method', 'getgender', 'print', 'male', 'male', 'class', 'female', 'female', 'class']","['class', 'Person', '(', 'object', ')', ':', 'def', 'getGender', '(', 'self', ')', ':', 'return', '""Unknown""', 'class', 'Male', '(', 'Person', ')', ':', 'def', 'getGender', '(', 'self', ')', ':', 'return', '""Male""', 'class', 'Female', '(', 'Person', ')', ':', 'def', 'getGender', '(', 'self', ')', ':', 'return', '""Female""', 'aMale', '=', 'Male', '(', ')', 'aFemale', '=', 'Female', '(', ')', 'print', 'aMale', '.', 'getGender', '(', ')', 'print', 'aFemale', '.', 'getGender', '(', ')']"
2823,"['python', 'program', 'find', 'number', 'range', 'perfect', 'square', 'sum', 'digit', 'number', 'le']","['l', '=', 'int', '(', 'input', '(', '""Enter lower range: ""', ')', ')', 'u', '=', 'int', '(', 'input', '(', '""Enter upper range: ""', ')', ')', 'a', '=', '[', ']', 'a', '=', '[', 'x', 'for', 'x', 'in', 'range', '(', 'l', ',', 'u', '+', '1', ')', 'if', '(', 'int', '(', 'x', '**', '0.5', ')', ')', '**', '2', '==', 'x', 'and', 'sum', '(', 'list', '(', 'map', '(', 'int', ',', 'str', '(', 'x', ')', ')', ')', ')', '<', '10', ']', 'print', '(', 'a', ')']"
2824,"['program', 'convert', 'kilometer', 'mile', 'meter']","['kilo_meter', '=', 'int', '(', 'input', '(', '""Enter Kilo Meter: ""', ')', ')', 'miles', '=', 'kilo_meter', '/', '1.609', ';', 'meter', '=', 'kilo_meter', '*', '1000', ';', 'print', '(', '""Kilo Meter to Miles:""', ',', 'miles', ')', 'print', '(', '""Kilo Meter to Meter:""', ',', 'meter', ')']"
2825,"['python', 'program', 'find', 'product', 'two', 'number', 'using', 'recursion']","['def', 'product', '(', 'a', ',', 'b', ')', ':', 'if', '(', 'a', '<', 'b', ')', ':', 'return', 'product', '(', 'b', ',', 'a', ')', 'elif', '(', 'b', '!=', '0', ')', ':', 'return', '(', 'a', '+', 'product', '(', 'a', ',', 'b', '-', '1', ')', ')', 'else', ':', 'return', '0', 'a', '=', 'int', '(', 'input', '(', '""Enter first number: ""', ')', ')', 'b', '=', 'int', '(', 'input', '(', '""Enter second number: ""', ')', ')', 'print', '(', '""Product is: ""', ',', 'product', '(', 'a', ',', 'b', ')', ')']"
2826,"['python', 'program', 'implement', 'ternary', 'heap']","['class', 'TernaryHeap', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'size', '(', 'self', ')', ':', 'return', 'len', '(', 'self', '.', 'items', ')', 'def', 'parent', '(', 'self', ',', 'i', ')', ':', 'return', '(', 'i', '-', '1', ')', '//', '3', 'def', 'left', '(', 'self', ',', 'i', ')', ':', 'return', '3', '*', 'i', '+', '1', 'def', 'mid', '(', 'self', ',', 'i', ')', ':', 'return', '3', '*', 'i', '+', '2', 'def', 'right', '(', 'self', ',', 'i', ')', ':', 'return', '3', '*', 'i', '+', '3', 'def', 'get', '(', 'self', ',', 'i', ')', ':', 'return', 'self', '.', 'items', '[', 'i', ']', 'def', 'get_max', '(', 'self', ')', ':', 'if', 'self', '.', 'size', '(', ')', '==', '0', ':', 'return', 'None', 'return', 'self', '.', 'items', '[', '0', ']', 'def', 'extract_max', '(', 'self', ')', ':', 'if', 'self', '.', 'size', '(', ')', '==', '0', ':', 'return', 'None', 'largest', '=', 'self', '.', 'get_max', '(', ')', 'self', '.', 'items', '[', '0', ']', '=', 'self', '.', 'items', '[', '-', '1', ']', 'del', 'self', '.', 'items', '[', '-', '1', ']', 'self', '.', 'max_heapify', '(', '0', ')', 'return', 'largest', 'def', 'max_heapify', '(', 'self', ',', 'i', ')', ':', 'l', '=', 'self', '.', 'left', '(', 'i', ')', 'r', '=', 'self', '.', 'right', '(', 'i', ')', 'm', '=', 'self', '.', 'mid', '(', 'i', ')', 'if', '(', 'l', '<=', 'self', '.', 'size', '(', ')', '-', '1', 'and', 'self', '.', 'get', '(', 'l', ')', '>', 'self', '.', 'get', '(', 'i', ')', ')', ':', 'largest', '=', 'l', 'else', ':', 'largest', '=', 'i', 'if', '(', 'm', '<=', 'self', '.', 'size', '(', ')', '-', '1', 'and', 'self', '.', 'get', '(', 'm', ')', '>', 'self', '.', 'get', '(', 'largest', ')', ')', ':', 'largest', '=', 'm', 'if', '(', 'r', '<=', 'self', '.', 'size', '(', ')', '-', '1', 'and', 'self', '.', 'get', '(', 'r', ')', '>', 'self', '.', 'get', '(', 'largest', ')', ')', ':', 'largest', '=', 'r', 'if', '(', 'largest', '!=', 'i', ')', ':', 'self', '.', 'swap', '(', 'largest', ',', 'i', ')', 'self', '.', 'max_heapify', '(', 'largest', ')', 'def', 'swap', '(', 'self', ',', 'i', ',', 'j', ')', ':', 'self', '.', 'items', '[', 'i', ']', ',', 'self', '.', 'items', '[', 'j', ']', '=', 'self', '.', 'items', '[', 'j', ']', ',', 'self', '.', 'items', '[', 'i', ']', 'def', 'insert', '(', 'self', ',', 'key', ')', ':', 'index', '=', 'self', '.', 'size', '(', ')', 'self', '.', 'items', '.', 'append', '(', 'key', ')', 'while', '(', 'index', '!=', '0', ')', ':', 'p', '=', 'self', '.', 'parent', '(', 'index', ')', 'if', 'self', '.', 'get', '(', 'p', ')', '<', 'self', '.', 'get', '(', 'index', ')', ':', 'self', '.', 'swap', '(', 'p', ',', 'index', ')', 'index', '=', 'p', 'theap', '=', 'TernaryHeap', '(', ')', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'insert <data>'"", ')', 'print', '(', ""'max get'"", ')', 'print', '(', ""'max extract'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'theap', '.', 'insert', '(', 'data', ')', 'elif', 'operation', '==', ""'max'"", ':', 'suboperation', '=', 'do', '[', '1', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'get'"", ':', 'print', '(', ""'Maximum value: {}'"", '.', 'format', '(', 'theap', '.', 'get_max', '(', ')', ')', ')', 'elif', 'suboperation', '==', ""'extract'"", ':', 'print', '(', ""'Maximum value removed: {}'"", '.', 'format', '(', 'theap', '.', 'extract_max', '(', ')', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2827,"['write', 'program', 'accepts', 'sequence', 'word', 'separated', 'whitespace', 'input', 'print', 'word', 'composed', 'digit']","['import', 're', 's', '=', 'raw_input', '(', ')', 'print', 're', '.', 'findall', '(', '""\\d+""', ',', 's', ')']"
2828,"['program', 'check', 'whether', 'matrix', 'scalar']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'point', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '!=', 'j', 'and', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', '0', ':', 'point', '=', '1', 'break', 'if', 'i', '==', 'j', 'and', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', 'matrix', '[', 'i', ']', '[', 'j', ']', ':', 'point', '=', '1', 'break', 'if', 'point', '==', '1', ':', 'print', '(', '""Given Matrix is not a Scaler Matrix.""', ')', 'else', ':', 'print', '(', '""Given Matrix is a Scaler Matrix.""', ')']"
2829,"['python', 'program', 'check', 'whether', 'tree', 'binary', 'search', 'tree']","['class', 'BinaryTree', ':', 'def', '__init__', '(', 'self', ',', 'key', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'def', 'set_root', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'def', 'insert_left', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'left', '=', 'new_node', 'def', 'insert_right', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'right', '=', 'new_node', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'left', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'right', '.', 'search', '(', 'key', ')', 'return', 'temp', 'return', 'None', 'def', 'is_bst_p', '(', 'self', ')', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'if', 'self', '.', 'key', '<', 'self', '.', 'left', '.', 'key', ':', 'return', 'False', 'elif', 'not', 'self', '.', 'left', '.', 'is_bst_p', '(', ')', ':', 'return', 'False', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'if', 'self', '.', 'key', '>', 'self', '.', 'right', '.', 'key', ':', 'return', 'False', 'elif', 'not', 'self', '.', 'right', '.', 'is_bst_p', '(', ')', ':', 'return', 'False', 'return', 'True', 'btree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'insert <data> at root'"", ')', 'print', '(', ""'insert <data> left of <data>'"", ')', 'print', '(', ""'insert <data> right of <data>'"", ')', 'print', '(', ""'bst'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'BinaryTree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'btree', '=', 'new_node', 'else', ':', 'position', '=', 'do', '[', '4', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'btree', 'is', 'not', 'None', ':', 'ref_node', '=', 'btree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'if', 'suboperation', '==', ""'left'"", ':', 'ref_node', '.', 'insert_left', '(', 'new_node', ')', 'elif', 'suboperation', '==', ""'right'"", ':', 'ref_node', '.', 'insert_right', '(', 'new_node', ')', 'elif', 'operation', '==', ""'bst'"", ':', 'if', 'btree', 'is', 'not', 'None', ':', 'if', 'btree', '.', 'is_bst_p', '(', ')', ':', 'print', '(', ""'Tree is a binary search tree.'"", ')', 'else', ':', 'print', '(', ""'Tree is not a binary search tree.'"", ')', 'else', ':', 'print', '(', ""'Tree is empty.'"", ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2830,"['find', 'palindrome', 'number', 'present', 'within', 'given', 'range']","[""'''Write\na Python program\xa0to find out all palindrome numbers present within a\ngiven range. or\xa0Write a program\xa0to\xa0find out all\npalindrome numbers present within a given range using Python '''"", 'print', '(', '""Enter a range in numbers(num1-num2):""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', 'range1', ',', '"" to ""', ',', 'range2', ',', '"" palindrome numbers are ""', ')', ';', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'num1', '=', 'i', 'num2', '=', '0', 'while', '(', 'num1', '!=', '0', ')', ':', 'rem', '=', 'num1', '%', '10', 'num1', '=', 'int', '(', 'num1', '/', '10', ')', 'num2', '=', 'num2', '*', '10', '+', 'rem', 'if', '(', 'i', '==', 'num2', ')', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
2831,"['reverse', 'word', 'given', 'string']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'sub_str', '=', 'str', '.', 'split', '(', '"" ""', ')', 'print', '(', '""After reversing words in a given string is:""', ')', 'for', 'out', 'in', 'range', '(', 'len', '(', 'sub_str', ')', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'print', '(', 'sub_str', '[', 'out', ']', ',', 'end', '=', '"" ""', ')']"
2832,"['python', 'program', 'check', 'string', 'palindrome', 'using', 'stack']","['class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'push', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'pop', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', ')', 's', '=', 'Stack', '(', ')', 'text', '=', 'input', '(', ""'Please enter the string: '"", ')', 'for', 'character', 'in', 'text', ':', 's', '.', 'push', '(', 'character', ')', 'reversed_text', '=', ""''"", 'while', 'not', 's', '.', 'is_empty', '(', ')', ':', 'reversed_text', '=', 'reversed_text', '+', 's', '.', 'pop', '(', ')', 'if', 'text', '==', 'reversed_text', ':', 'print', '(', ""'The string is a palindrome.'"", ')', 'else', ':', 'print', '(', ""'The string is not a palindrome.'"", ')']"
2833,"['check', 'one', 'array', 'subset', 'another', 'array']","['arr', '=', '[', ']', 'arr2', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the 1st array: ""', ')', ')', 'size2', '=', 'int', '(', 'input', '(', '""Enter the size of the 2nd array: ""', ')', ')', 'print', '(', '""Enter the Element of the 1st array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Enter the Element of the 2nd array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size2', ')', ':', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'arr2', '.', 'append', '(', 'num2', ')', 'count', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'size2', ')', ':', 'if', 'arr', '[', 'i', ']', '==', 'arr2', '[', 'j', ']', ':', 'count', '+=', '1', 'if', 'count', '==', 'size2', ':', 'print', '(', '""Array two is a subset of array one.""', ')', 'else', ':', 'print', '(', '""Array two is not a subset of array one.""', ')']"
2834,"['python', 'program', 'find', 'node', 'reachable', 'node', 'using', 'bfs', 'graph']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'class', 'Queue', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'enqueue', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'dequeue', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', '0', ')', 'def', 'find_all_reachable_nodes', '(', 'vertex', ')', ':', '""""""Return set containing all vertices reachable from vertex.""""""', 'visited', '=', 'set', '(', ')', 'q', '=', 'Queue', '(', ')', 'q', '.', 'enqueue', '(', 'vertex', ')', 'visited', '.', 'add', '(', 'vertex', ')', 'while', 'not', 'q', '.', 'is_empty', '(', ')', ':', 'current', '=', 'q', '.', 'dequeue', '(', ')', 'for', 'dest', 'in', 'current', '.', 'get_neighbours', '(', ')', ':', 'if', 'dest', 'not', 'in', 'visited', ':', 'visited', '.', 'add', '(', 'dest', ')', 'q', '.', 'enqueue', '(', 'dest', ')', 'return', 'visited', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest>'"", ')', 'print', '(', ""'reachable <vertex key>'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'reachable'"", ':', 'key', '=', 'int', '(', 'do', '[', '1', ']', ')', 'vertex', '=', 'g', '.', 'get_vertex', '(', 'key', ')', 'reachable', '=', 'find_all_reachable_nodes', '(', 'vertex', ')', 'print', '(', ""'All nodes reachable from {}:'"", '.', 'format', '(', 'key', ')', ',', '[', 'v', '.', 'get_key', '(', ')', 'for', 'v', 'in', 'reachable', ']', ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2835,"['find', 'smallest', 'element', 'array']","['import', 'sys', 'arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'min', '=', 'sys', '.', 'maxsize', 'sec_min', '=', 'sys', '.', 'maxsize', 'for', 'j', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', '(', 'arr', '[', 'j', ']', '<=', 'min', ')', ':', 'sec_min', '=', 'min', 'min', '=', 'arr', '[', 'j', ']', 'elif', '(', 'arr', '[', 'i', ']', '<=', 'sec_min', ')', ':', 'sec_min', '=', 'arr', '[', 'j', ']', 'print', '(', '""The 2nd smallest element of array: ""', ',', 'sec_min', ')']"
2836,"['python', 'program', 'search', 'element', 'linked', 'list', 'using', 'recursion']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', 'is', 'not', 'None', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'def', 'find_index', '(', 'self', ',', 'key', ')', ':', 'return', 'self', '.', 'find_index_helper', '(', 'key', ',', '0', ',', 'self', '.', 'head', ')', 'def', 'find_index_helper', '(', 'self', ',', 'key', ',', 'start', ',', 'node', ')', ':', 'if', 'node', 'is', 'None', ':', 'return', '-', '1', 'if', 'node', '.', 'data', '==', 'key', ':', 'return', 'start', 'else', ':', 'return', 'self', '.', 'find_index_helper', '(', 'key', ',', 'start', '+', '1', ',', 'node', '.', 'next', ')', 'a_llist', '=', 'LinkedList', '(', ')', 'for', 'data', 'in', '[', '3', ',', '5', ',', '0', ',', '10', ',', '7', ']', ':', 'a_llist', '.', 'append', '(', 'data', ')', 'print', '(', ""'The linked list: '"", ',', 'end', '=', ""''"", ')', 'a_llist', '.', 'display', '(', ')', 'print', '(', ')', 'key', '=', 'int', '(', 'input', '(', ""'What data item would you like to search for? '"", ')', ')', 'index', '=', 'a_llist', '.', 'find_index', '(', 'key', ')', 'if', 'index', '==', '-', '1', ':', 'print', '(', 'str', '(', 'key', ')', '+', ""' was not found.'"", ')', 'else', ':', 'print', '(', 'str', '(', 'key', ')', '+', ""' is at index '"", '+', 'str', '(', 'index', ')', '+', ""'.'"", ')']"
2837,"['python', 'program', 'add', 'corresponding', 'positioned', 'element', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', 'is', 'not', 'None', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'def', 'add_linked_lists', '(', 'llist1', ',', 'llist2', ')', ':', 'sum_llist', '=', 'LinkedList', '(', ')', 'current1', '=', 'llist1', '.', 'head', 'current2', '=', 'llist2', '.', 'head', 'while', '(', 'current1', 'and', 'current2', ')', ':', 'sum', '=', 'current1', '.', 'data', '+', 'current2', '.', 'data', 'sum_llist', '.', 'append', '(', 'sum', ')', 'current1', '=', 'current1', '.', 'next', 'current2', '=', 'current2', '.', 'next', 'if', 'current1', 'is', 'None', ':', 'while', 'current2', ':', 'sum_llist', '.', 'append', '(', 'current2', '.', 'data', ')', 'current2', '=', 'current2', '.', 'next', 'else', ':', 'while', 'current1', ':', 'sum_llist', '.', 'append', '(', 'current1', '.', 'data', ')', 'current1', '=', 'current1', '.', 'next', 'return', 'sum_llist', 'llist1', '=', 'LinkedList', '(', ')', 'llist2', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the first linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'llist1', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the second linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'llist2', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'sum_llist', '=', 'add_linked_lists', '(', 'llist1', ',', 'llist2', ')', 'print', '(', ""'The sum linked list: '"", ',', 'end', '=', ""''"", ')', 'sum_llist', '.', 'display', '(', ')']"
2838,"['python', 'program', 'append', 'content', 'one', 'file', 'another', 'file']","['name1', '=', 'input', '(', '""Enter file to be read from: ""', ')', 'name2', '=', 'input', '(', '""Enter file to be appended to: ""', ')', 'fin', '=', 'open', '(', 'name1', ',', '""r""', ')', 'data2', '=', 'fin', '.', 'read', '(', ')', 'fin', '.', 'close', '(', ')', 'fout', '=', 'open', '(', 'name2', ',', '""a""', ')', 'fout', '.', 'write', '(', 'data2', ')', 'fout', '.', 'close', '(', ')']"
2839,"['please', 'write', 'program', 'accepts', 'string', 'console', 'print', 'character', 'even', 'index']","['s', '=', 'raw_input', '(', ')', 's', '=', 's', '[', ':', ':', '2', ']', 'print', 's']"
2840,"['print', 'odd', 'number', 'given', 'range', 'using', 'recursion']","['def', 'odd', '(', 'num1', ',', 'num2', ')', ':', 'if', 'num1', '>', 'num2', ':', 'return', 'print', '(', 'num1', ',', 'end', '=', '"" ""', ')', 'return', 'odd', '(', 'num1', '+', '2', ',', 'num2', ')', 'num1', '=', '1', 'print', '(', '""Enter your Limit:""', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""All odd number given range are:""', ')', 'odd', '(', 'num1', ',', 'num2', ')']"
2841,"['bubble', 'sort', 'program', 'python', 'java', 'c', 'c']","['size', '=', 'int', '(', 'input', '(', '""Enter the size of the array:""', ')', ')', ';', 'arr', '=', '[', ']', 'print', '(', '""Enter the element of the array:""', ')', ';', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Before Sorting Array Element are: ""', ',', 'arr', ')', 'for', 'out', 'in', 'range', '(', 'size', '-', '1', ',', '0', ',', '-', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', 'out', ')', ':', 'if', 'arr', '[', 'inn', ']', '>', 'arr', '[', 'inn', '+', '1', ']', ':', 'temp', '=', 'arr', '[', 'inn', ']', 'arr', '[', 'inn', ']', '=', 'arr', '[', 'inn', '+', '1', ']', 'arr', '[', 'inn', '+', '1', ']', '=', 'temp', 'print', '(', '""\\nAfter Sorting Array Element are: ""', ',', 'arr', ')']"
2842,"['write', 'program', 'accepts', 'sequence', 'line', 'input', 'print', 'line', 'making', 'character', 'sentence', 'capitalized']","['lines', '=', '[', ']', 'while', 'True', ':', 's', '=', 'raw_input', '(', ')', 'if', 's', ':', 'lines', '.', 'append', '(', 's', '.', 'upper', '(', ')', ')', 'else', ':', 'break', ';', 'for', 'sentence', 'in', 'lines', ':', 'print', 'sentence']"
2843,"['python', 'program', 'implement', 'cocktail', 'shaker', 'sort']","['def', 'cocktail_shaker_sort', '(', 'alist', ')', ':', 'def', 'swap', '(', 'i', ',', 'j', ')', ':', 'alist', '[', 'i', ']', ',', 'alist', '[', 'j', ']', '=', 'alist', '[', 'j', ']', ',', 'alist', '[', 'i', ']', 'upper', '=', 'len', '(', 'alist', ')', '-', '1', 'lower', '=', '0', 'no_swap', '=', 'False', 'while', '(', 'not', 'no_swap', 'and', 'upper', '-', 'lower', '>', '1', ')', ':', 'no_swap', '=', 'True', 'for', 'j', 'in', 'range', '(', 'lower', ',', 'upper', ')', ':', 'if', 'alist', '[', 'j', '+', '1', ']', '<', 'alist', '[', 'j', ']', ':', 'swap', '(', 'j', '+', '1', ',', 'j', ')', 'no_swap', '=', 'False', 'upper', '=', 'upper', '-', '1', 'for', 'j', 'in', 'range', '(', 'upper', ',', 'lower', ',', '-', '1', ')', ':', 'if', 'alist', '[', 'j', '-', '1', ']', '>', 'alist', '[', 'j', ']', ':', 'swap', '(', 'j', '-', '1', ',', 'j', ')', 'no_swap', '=', 'False', 'lower', '=', 'lower', '+', '1', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'cocktail_shaker_sort', '(', 'alist', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'alist', ')']"
2844,"['program', 'find', 'addition', 'two', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'matrix1', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix1', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'sum_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'i', ']', '[', 'j', ']', '+', 'matrix1', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Sum of the two Matrices is:""', ')', 'for', 'm', 'in', 'sum_matrix', ':', 'print', '(', 'm', ')']"
2845,"['find', 'mean', 'median', 'unsorted', 'array']","['def', 'Find_mean', '(', 'arr', ',', 'size', ')', ':', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'sum', '+=', 'arr', '[', 'i', ']', 'mean', '=', 'sum', '/', 'size', 'print', '(', '""Mean = ""', ',', 'mean', ')', 'def', 'Find_median', '(', 'arr', ',', 'size', ')', ':', 'arr', '.', 'sort', '(', ')', 'if', 'size', '%', '2', '==', '1', ':', 'median', '=', 'arr', '[', 'size', '//', '2', ']', 'print', '(', '""\\nMedian= ""', ',', 'median', ')', 'else', ':', 'median', '=', '(', 'arr', '[', 'size', '//', '2', ']', '+', '(', 'arr', '[', '(', 'size', '//', '2', ')', '-', '1', ']', ')', ')', '/', '2.0', 'print', '(', '""\\nMedian= ""', ',', 'median', ')', 'arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'Find_mean', '(', 'arr', ',', 'size', ')', 'Find_median', '(', 'arr', ',', 'size', ')']"
2846,"['python', 'program', 'display', 'letter', 'first', 'string', 'second']","['s1', '=', 'raw_input', '(', '""Enter first string:""', ')', 's2', '=', 'raw_input', '(', '""Enter second string:""', ')', 'a', '=', 'list', '(', 'set', '(', 's1', ')', '-', 'set', '(', 's2', ')', ')', 'print', '(', '""The letters are:""', ')', 'for', 'i', 'in', 'a', ':', 'print', '(', 'i', ')']"
2847,"['python', 'program', 'implement', 'binary', 'search', 'recursion']","['def', 'binary_search', '(', 'alist', ',', 'start', ',', 'end', ',', 'key', ')', ':', '""""""Search key in alist[start... end - 1].""""""', 'if', 'not', 'start', '<', 'end', ':', 'return', '-', '1', 'mid', '=', '(', 'start', '+', 'end', ')', '//', '2', 'if', 'alist', '[', 'mid', ']', '<', 'key', ':', 'return', 'binary_search', '(', 'alist', ',', 'mid', '+', '1', ',', 'end', ',', 'key', ')', 'elif', 'alist', '[', 'mid', ']', '>', 'key', ':', 'return', 'binary_search', '(', 'alist', ',', 'start', ',', 'mid', ',', 'key', ')', 'else', ':', 'return', 'mid', 'alist', '=', 'input', '(', ""'Enter the sorted list of numbers: '"", ')', 'alist', '=', 'alist', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'key', '=', 'int', '(', 'input', '(', ""'The number to search for: '"", ')', ')', 'index', '=', 'binary_search', '(', 'alist', ',', '0', ',', 'len', '(', 'alist', ')', ',', 'key', ')', 'if', 'index', '<', '0', ':', 'print', '(', ""'{} was not found.'"", '.', 'format', '(', 'key', ')', ')', 'else', ':', 'print', '(', ""'{} was found at index {}.'"", '.', 'format', '(', 'key', ',', 'index', ')', ')']"
2848,"['python', 'program', 'detect', 'cycle', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'get_node', '(', 'self', ',', 'index', ')', ':', 'current', '=', 'self', '.', 'head', 'for', 'i', 'in', 'range', '(', 'index', ')', ':', 'current', '=', 'current', '.', 'next', 'if', 'current', 'is', 'None', ':', 'return', 'None', 'return', 'current', 'def', 'has_cycle', '(', 'llist', ')', ':', 'slow', '=', 'llist', '.', 'head', 'fast', '=', 'llist', '.', 'head', 'while', '(', 'fast', '!=', 'None', 'and', 'fast', '.', 'next', '!=', 'None', ')', ':', 'slow', '=', 'slow', '.', 'next', 'fast', '=', 'fast', '.', 'next', '.', 'next', 'if', 'slow', '==', 'fast', ':', 'return', 'True', 'return', 'False', 'a_llist', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_llist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'length', '=', 'len', '(', 'data_list', ')', 'if', 'length', '!=', '0', ':', 'values', '=', ""'0-'"", '+', 'str', '(', 'length', '-', '1', ')', 'last_ptr', '=', 'input', '(', ""'Enter the index ['"", '+', 'values', '+', ""'] of the node'"", ""' to which you want the last node to point'"", ""' (enter nothing to make it point to None): '"", ')', '.', 'strip', '(', ')', 'if', 'last_ptr', '==', ""''"", ':', 'last_ptr', '=', 'None', 'else', ':', 'last_ptr', '=', 'a_llist', '.', 'get_node', '(', 'int', '(', 'last_ptr', ')', ')', 'a_llist', '.', 'last_node', '.', 'next', '=', 'last_ptr', 'if', 'has_cycle', '(', 'a_llist', ')', ':', 'print', '(', ""'The linked list has a cycle.'"", ')', 'else', ':', 'print', '(', ""'The linked list does not have a cycle.'"", ')']"
2849,"['please', 'write', 'program', 'compress', 'decompress', 'string', 'hello', 'worldhello', 'worldhello', 'worldhello', 'world']","['import', 'zlib', 's', '=', ""'hello world!hello world!hello world!hello world!'"", 't', '=', 'zlib', '.', 'compress', '(', 's', ')', 'print', 't', 'print', 'zlib', '.', 'decompress', '(', 't', ')']"
2850,"['python', 'program', 'interchange', 'two', 'element', 'list', 'without', 'touching', 'key', 'field']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'def', 'get_node', '(', 'self', ',', 'index', ')', ':', 'current', '=', 'self', '.', 'head', 'for', 'i', 'in', 'range', '(', 'index', ')', ':', 'if', 'current', 'is', 'None', ':', 'return', 'None', 'current', '=', 'current', '.', 'next', 'return', 'current', 'def', 'get_prev_node', '(', 'self', ',', 'ref_node', ')', ':', 'current', '=', 'self', '.', 'head', 'while', '(', 'current', 'and', 'current', '.', 'next', '!=', 'ref_node', ')', ':', 'current', '=', 'current', '.', 'next', 'return', 'current', 'def', 'interchange', '(', 'llist', ',', 'n', ',', 'm', ')', ':', 'node1', '=', 'llist', '.', 'get_node', '(', 'n', ')', 'node2', '=', 'llist', '.', 'get_node', '(', 'm', ')', 'prev_node1', '=', 'llist', '.', 'get_prev_node', '(', 'node1', ')', 'prev_node2', '=', 'llist', '.', 'get_prev_node', '(', 'node2', ')', 'if', 'prev_node1', 'is', 'not', 'None', ':', 'prev_node1', '.', 'next', '=', 'node2', 'else', ':', 'llist', '.', 'head', '=', 'node2', 'if', 'prev_node2', 'is', 'not', 'None', ':', 'prev_node2', '.', 'next', '=', 'node1', 'else', ':', 'llist', '.', 'head', '=', 'node1', 'temp', '=', 'node2', '.', 'next', 'node2', '.', 'next', '=', 'node1', '.', 'next', 'node1', '.', 'next', '=', 'temp', 'a_llist', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_llist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'ans', '=', 'input', '(', ""'Please enter the two indices of the two elements that'"", ""' you want to exchange: '"", ')', '.', 'split', '(', ')', 'n', '=', 'int', '(', 'ans', '[', '0', ']', ')', 'm', '=', 'int', '(', 'ans', '[', '1', ']', ')', 'interchange', '(', 'a_llist', ',', 'n', ',', 'm', ')', 'print', '(', ""'The new list: '"", ')', 'a_llist', '.', 'display', '(', ')']"
2851,"['write', 'program', 'print', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', 'row_size', '=', 'int', '(', 'input', '(', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '0', ',', '-', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'row_size', ',', '0', ',', '-', '1', ')', ':', 'print', '(', 'i', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2852,"['print', 'strong', 'number', 'given', 'n']","['print', '(', '""Enter a range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Strong numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'num2', '=', 'i', 'num1', '=', 'i', 'sum', '=', '0', 'while', '(', 'num1', '!=', '0', ')', ':', 'fact', '=', '1', 'rem', '=', 'num1', '%', '10', 'num1', '=', 'int', '(', 'num1', '/', '10', ')', 'for', 'j', 'in', 'range', '(', '1', ',', 'rem', '+', '1', ')', ':', 'fact', '=', 'fact', '*', 'j', 'sum', '=', 'sum', '+', 'fact', 'if', 'sum', '==', 'num2', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
2853,"['program', 'convert', 'hexadecimal', 'octal']","['import', 'math', 'hex', '=', 'input', '(', '""Enter Hexadecimal Number:""', ')', 'value', '=', '0', 'decimal', '=', '0', 'j', '=', 'len', '(', 'hex', ')', 'j', '-=', '1', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'hex', ')', ')', ':', 'if', 'hex', '[', 'i', ']', '>=', ""'0'"", 'and', 'hex', '[', 'i', ']', '<=', ""'9'"", ':', 'value', '=', '(', 'int', ')', '(', 'hex', '[', 'i', ']', ')', 'if', 'hex', '[', 'i', ']', '==', ""'A'"", 'or', 'hex', '[', 'i', ']', '==', ""'a'"", ':', 'value', '=', '10', 'if', 'hex', '[', 'i', ']', '==', ""'B'"", 'or', 'hex', '[', 'i', ']', '==', ""'b'"", ':', 'value', '=', '11', 'if', 'hex', '[', 'i', ']', '==', ""'C'"", 'or', 'hex', '[', 'i', ']', '==', ""'c'"", ':', 'value', '=', '12', 'if', 'hex', '[', 'i', ']', '==', ""'D'"", 'or', 'hex', '[', 'i', ']', '==', ""'d'"", ':', 'value', '=', '13', 'if', 'hex', '[', 'i', ']', '==', ""'E'"", 'or', 'hex', '[', 'i', ']', '==', ""'e'"", ':', 'value', '=', '14', 'if', 'hex', '[', 'i', ']', '==', ""'F'"", 'or', 'hex', '[', 'i', ']', '==', ""'f'"", ':', 'value', '=', '15', 'decimal', '=', 'decimal', '+', '(', 'int', ')', '(', 'value', '*', 'math', '.', 'pow', '(', '16', ',', 'j', ')', ')', 'j', '-=', '1', 'sem', '=', '1', 'octal', '=', '0', 'while', '(', 'decimal', '!=', '0', ')', ':', 'octal', '=', 'octal', '+', '(', 'decimal', '%', '8', ')', '*', 'sem', 'decimal', '=', 'decimal', '//', '8', 'sem', '=', 'int', '(', 'sem', '*', '10', ')', 'print', '(', '""Octal Number is:""', ',', 'octal', ')']"
2854,"['count', 'number', 'odd', 'even', 'digit']","['print', '(', '""Enter the number:""', ')', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'odd', '=', '0', 'even', '=', '0', 'while', '(', 'num', '!=', '0', ')', ':', 'rem', '=', 'num', '%', '10', 'if', '(', 'rem', '%', '2', '==', '1', ')', ':', 'odd', '+=', '1', 'else', ':', 'even', '+=', '1', 'num', '//=', '10', 'print', '(', '""Number of even digits = ""', ',', 'even', ')', 'print', '(', '""Number of odd digits = ""', ',', 'odd', ')']"
2855,"['python', 'program', 'solve', 'interval', 'scheduling', 'problem', 'using', 'greedy', 'algorithm']","['def', 'interval_scheduling', '(', 'stimes', ',', 'ftimes', ')', ':', '""""""Return largest set of mutually compatible activities.\n\xa0\n    This will return a maximum-set subset of activities (numbered from 0 to n -\n    1) that are mutually compatible. Two activities are mutually compatible if\n    the start time of one activity is not less then the finish time of the other.\n\xa0\n    stimes[i] is the start time of activity i.\n    ftimes[i] is the finish time of activity i.\n    """"""', 'index', '=', 'list', '(', 'range', '(', 'len', '(', 'stimes', ')', ')', ')', 'index', '.', 'sort', '(', 'key', '=', 'lambda', 'i', ':', 'ftimes', '[', 'i', ']', ')', 'maximal_set', '=', 'set', '(', ')', 'prev_finish_time', '=', '0', 'for', 'i', 'in', 'index', ':', 'if', 'stimes', '[', 'i', ']', '>=', 'prev_finish_time', ':', 'maximal_set', '.', 'add', '(', 'i', ')', 'prev_finish_time', '=', 'ftimes', '[', 'i', ']', 'return', 'maximal_set', 'n', '=', 'int', '(', 'input', '(', ""'Enter number of activities: '"", ')', ')', 'stimes', '=', 'input', '(', ""'Enter the start time of the {} activities in order: '"", '.', 'format', '(', 'n', ')', ')', '.', 'split', '(', ')', 'stimes', '=', '[', 'int', '(', 'st', ')', 'for', 'st', 'in', 'stimes', ']', 'ftimes', '=', 'input', '(', ""'Enter the finish times of the {} activities in order: '"", '.', 'format', '(', 'n', ')', ')', '.', 'split', '(', ')', 'ftimes', '=', '[', 'int', '(', 'ft', ')', 'for', 'ft', 'in', 'ftimes', ']', 'ans', '=', 'interval_scheduling', '(', 'stimes', ',', 'ftimes', ')', 'print', '(', ""'A maximum-size subset of activities that are mutually compatible is'"", ',', 'ans', ')']"
2856,"['python', 'program', 'print', 'prime', 'number', 'within', 'given', 'range']","['r', '=', 'int', '(', 'input', '(', '""Enter upper limit: ""', ')', ')', 'for', 'a', 'in', 'range', '(', '2', ',', 'r', '+', '1', ')', ':', 'k', '=', '0', 'for', 'i', 'in', 'range', '(', '2', ',', 'a', '//', '2', '+', '1', ')', ':', 'if', '(', 'a', '%', 'i', '==', '0', ')', ':', 'k', '=', 'k', '+', '1', 'if', '(', 'k', '<=', '0', ')', ':', 'print', '(', 'a', ')']"
2857,"['find', 'maximum', 'element', 'matrix']","['import', 'sys', 'row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'max', '=', '-', 'sys', '.', 'maxsize', '-', '1', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '>=', 'max', ':', 'max', '=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""The Maximum element of the Given 2d array is: ""', ',', 'max', ')']"
2858,"['find', 'index', 'element', 'array']","['arr', '=', '[', ']', 'temp', '=', '0', 'pos', '=', '0', 'index', '=', '0', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Enter the search element:""', ')', 'ele', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Array elements are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '==', 'ele', ':', 'temp', '=', '1', 'index', '=', 'iif', 'temp', '==', '1', ':', 'print', '(', '""\\nIndex of Search Element ""', ',', 'ele', ',', '"" is ""', ',', 'index', ')', 'else', ':', 'print', '(', '""\\nElement not found....""', ')']"
2859,"['program', 'print', 'half', 'pyramid', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', '+', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'out', ')', ':', 'print', '(', 'out', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2860,"['program', 'check', 'whether', 'matrix', 'symmetric']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'if', 'row_size', '!=', 'col_size', ':', 'print', '(', '""Given Matrix is not a Square Matrix.""', ')', 'else', ':', 'tran_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'tran_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'j', ']', '[', 'i', ']', 'flag', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', 'tran_matrix', '[', 'i', ']', '[', 'j', ']', ':', 'flag', '=', '1', 'break', 'if', 'flag', '==', '1', ':', 'print', '(', '""Given Matrix is not a symmetric Matrix.""', ')', 'else', ':', 'print', '(', '""Given Matrix is a symmetric Matrix.""', ')']"
2861,"['python', 'program', 'implement', 'quicksort']","['def', 'quicksort', '(', 'alist', ',', 'start', ',', 'end', ')', ':', ""'''Sorts the list from indexes start to end - 1 inclusive.'''"", 'if', 'end', '-', 'start', '>', '1', ':', 'p', '=', 'partition', '(', 'alist', ',', 'start', ',', 'end', ')', 'quicksort', '(', 'alist', ',', 'start', ',', 'p', ')', 'quicksort', '(', 'alist', ',', 'p', '+', '1', ',', 'end', ')', 'def', 'partition', '(', 'alist', ',', 'start', ',', 'end', ')', ':', 'pivot', '=', 'alist', '[', 'start', ']', 'i', '=', 'start', '+', '1', 'j', '=', 'end', '-', '1', 'while', 'True', ':', 'while', '(', 'i', '<=', 'j', 'and', 'alist', '[', 'i', ']', '<=', 'pivot', ')', ':', 'i', '=', 'i', '+', '1', 'while', '(', 'i', '<=', 'j', 'and', 'alist', '[', 'j', ']', '>=', 'pivot', ')', ':', 'j', '=', 'j', '-', '1', 'if', 'i', '<=', 'j', ':', 'alist', '[', 'i', ']', ',', 'alist', '[', 'j', ']', '=', 'alist', '[', 'j', ']', ',', 'alist', '[', 'i', ']', 'else', ':', 'alist', '[', 'start', ']', ',', 'alist', '[', 'j', ']', '=', 'alist', '[', 'j', ']', ',', 'alist', '[', 'start', ']', 'return', 'j', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'quicksort', '(', 'alist', ',', '0', ',', 'len', '(', 'alist', ')', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'alist', ')']"
2862,"['python', 'program', 'count', 'frequency', 'word', 'appearing', 'string', 'using', 'dictionary']","['test_string', '=', 'raw_input', '(', '""Enter string:""', ')', 'l', '=', '[', ']', 'l', '=', 'test_string', '.', 'split', '(', ')', 'wordfreq', '=', '[', 'l', '.', 'count', '(', 'p', ')', 'for', 'p', 'in', 'l', ']', 'print', '(', 'dict', '(', 'zip', '(', 'l', ',', 'wordfreq', ')', ')', ')']"
2863,"['program', 'find', 'sum', 'lower', 'triangular', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '<', 'j', ':', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Sum of Lower Triangular Matrix Elements is: ""', ',', 'sum', ')']"
2864,"['program', 'check', 'whether', 'given', 'number', 'even', 'odd']","['num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'if', 'num', '%', '2', '==', '0', ':', 'print', '(', '""It is Even""', ')', 'else', ':', 'print', '(', '""It is Odd""', ')']"
2865,"['python', 'program', 'create', 'class', 'performs', 'basic', 'calculator', 'operation']","['class', 'cal', '(', ')', ':', 'def', '__init__', '(', 'self', ',', 'a', ',', 'b', ')', ':', 'self', '.', 'a', '=', 'a', 'self', '.', 'b', '=', 'b', 'def', 'add', '(', 'self', ')', ':', 'return', 'self', '.', 'a', '+', 'self', '.', 'b', 'def', 'mul', '(', 'self', ')', ':', 'return', 'self', '.', 'a', '*', 'self', '.', 'b', 'def', 'div', '(', 'self', ')', ':', 'return', 'self', '.', 'a', '/', 'self', '.', 'b', 'def', 'sub', '(', 'self', ')', ':', 'return', 'self', '.', 'a', '-', 'self', '.', 'b', 'a', '=', 'int', '(', 'input', '(', '""Enter first number: ""', ')', ')', 'b', '=', 'int', '(', 'input', '(', '""Enter second number: ""', ')', ')', 'obj', '=', 'cal', '(', 'a', ',', 'b', ')', 'choice', '=', '1', 'while', 'choice', '!=', '0', ':', 'print', '(', '""0. Exit""', ')', 'print', '(', '""1. Add""', ')', 'print', '(', '""2. Subtraction""', ')', 'print', '(', '""3. Multiplication""', ')', 'print', '(', '""4. Division""', ')', 'choice', '=', 'int', '(', 'input', '(', '""Enter choice: ""', ')', ')', 'if', 'choice', '==', '1', ':', 'print', '(', '""Result: ""', ',', 'obj', '.', 'add', '(', ')', ')', 'elif', 'choice', '==', '2', ':', 'print', '(', '""Result: ""', ',', 'obj', '.', 'sub', '(', ')', ')', 'elif', 'choice', '==', '3', ':', 'print', '(', '""Result: ""', ',', 'obj', '.', 'mul', '(', ')', ')', 'elif', 'choice', '==', '4', ':', 'print', '(', '""Result: ""', ',', 'round', '(', 'obj', '.', 'div', '(', ')', ',', '2', ')', ')', 'elif', 'choice', '==', '0', ':', 'print', '(', '""Exiting!""', ')', 'else', ':', 'print', '(', '""Invalid choice!!""', ')', 'print', '(', ')']"
2866,"['program', 'print', 'cross', 'sign', 'star', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'print_control_x', '=', 'row_size', '//', '2', '+', '1', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'if', 'inn', '==', 'out', 'or', 'inn', '+', 'out', '==', 'row_size', '+', '1', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2867,"['find', 'spy', 'number', 'present', 'within', 'given', 'range']","['print', '(', '""Enter a range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Spy numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'num', '=', 'i', 'sum', '=', '0', 'mult', '=', '1', 'while', 'num', '!=', '0', ':', 'rem', '=', 'num', '%', '10', 'sum', '+=', 'rem', 'mult', '*=', 'rem', 'num', '//=', '10', 'if', 'sum', '==', 'mult', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
2868,"['python', 'program', 'implement', 'bubble', 'sort']","['def', 'bubble_sort', '(', 'alist', ')', ':', 'for', 'i', 'in', 'range', '(', 'len', '(', 'alist', ')', '-', '1', ',', '0', ',', '-', '1', ')', ':', 'no_swap', '=', 'True', 'for', 'j', 'in', 'range', '(', '0', ',', 'i', ')', ':', 'if', 'alist', '[', 'j', '+', '1', ']', '<', 'alist', '[', 'j', ']', ':', 'alist', '[', 'j', ']', ',', 'alist', '[', 'j', '+', '1', ']', '=', 'alist', '[', 'j', '+', '1', ']', ',', 'alist', '[', 'j', ']', 'no_swap', '=', 'False', 'if', 'no_swap', ':', 'return', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'bubble_sort', '(', 'alist', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'alist', ')']"
2869,"['python', 'program', 'construct', 'binary', 'search', 'tree', 'perform', 'deletion', 'inorder', 'traversal']","['class', 'BSTNode', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'self', '.', 'parent', '=', 'None', 'def', 'insert', '(', 'self', ',', 'node', ')', ':', 'if', 'self', '.', 'key', '>', 'node', '.', 'key', ':', 'if', 'self', '.', 'left', 'is', 'None', ':', 'self', '.', 'left', '=', 'node', 'node', '.', 'parent', '=', 'self', 'else', ':', 'self', '.', 'left', '.', 'insert', '(', 'node', ')', 'elif', 'self', '.', 'key', '<', 'node', '.', 'key', ':', 'if', 'self', '.', 'right', 'is', 'None', ':', 'self', '.', 'right', '=', 'node', 'node', '.', 'parent', '=', 'self', 'else', ':', 'self', '.', 'right', '.', 'insert', '(', 'node', ')', 'def', 'inorder', '(', 'self', ')', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'inorder', '(', ')', 'print', '(', 'self', '.', 'key', ',', 'end', '=', ""' '"", ')', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'right', '.', 'inorder', '(', ')', 'def', 'replace_node_of_parent', '(', 'self', ',', 'new_node', ')', ':', 'if', 'self', '.', 'parent', 'is', 'not', 'None', ':', 'if', 'new_node', 'is', 'not', 'None', ':', 'new_node', '.', 'parent', '=', 'self', '.', 'parent', 'if', 'self', '.', 'parent', '.', 'left', '==', 'self', ':', 'self', '.', 'parent', '.', 'left', '=', 'new_node', 'elif', 'self', '.', 'parent', '.', 'right', '==', 'self', ':', 'self', '.', 'parent', '.', 'right', '=', 'new_node', 'else', ':', 'self', '.', 'key', '=', 'new_node', '.', 'key', 'self', '.', 'left', '=', 'new_node', '.', 'left', 'self', '.', 'right', '=', 'new_node', '.', 'right', 'if', 'new_node', '.', 'left', 'is', 'not', 'None', ':', 'new_node', '.', 'left', '.', 'parent', '=', 'self', 'if', 'new_node', '.', 'right', 'is', 'not', 'None', ':', 'new_node', '.', 'right', '.', 'parent', '=', 'self', 'def', 'find_min', '(', 'self', ')', ':', 'current', '=', 'self', 'while', 'current', '.', 'left', 'is', 'not', 'None', ':', 'current', '=', 'current', '.', 'left', 'return', 'current', 'def', 'remove', '(', 'self', ')', ':', 'if', '(', 'self', '.', 'left', 'is', 'not', 'None', 'and', 'self', '.', 'right', 'is', 'not', 'None', ')', ':', 'successor', '=', 'self', '.', 'right', '.', 'find_min', '(', ')', 'self', '.', 'key', '=', 'successor', '.', 'key', 'successor', '.', 'remove', '(', ')', 'elif', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'replace_node_of_parent', '(', 'self', '.', 'left', ')', 'elif', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'replace_node_of_parent', '(', 'self', '.', 'right', ')', 'else', ':', 'self', '.', 'replace_node_of_parent', '(', 'None', ')', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '>', 'key', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'return', 'self', '.', 'left', '.', 'search', '(', 'key', ')', 'else', ':', 'return', 'None', 'elif', 'self', '.', 'key', '<', 'key', ':', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'return', 'self', '.', 'right', '.', 'search', '(', 'key', ')', 'else', ':', 'return', 'None', 'return', 'self', 'class', 'BSTree', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'root', '=', 'None', 'def', 'inorder', '(', 'self', ')', ':', 'if', 'self', '.', 'root', 'is', 'not', 'None', ':', 'self', '.', 'root', '.', 'inorder', '(', ')', 'def', 'add', '(', 'self', ',', 'key', ')', ':', 'new_node', '=', 'BSTNode', '(', 'key', ')', 'if', 'self', '.', 'root', 'is', 'None', ':', 'self', '.', 'root', '=', 'new_node', 'else', ':', 'self', '.', 'root', '.', 'insert', '(', 'new_node', ')', 'def', 'remove', '(', 'self', ',', 'key', ')', ':', 'to_remove', '=', 'self', '.', 'search', '(', 'key', ')', 'if', '(', 'self', '.', 'root', '==', 'to_remove', 'and', 'self', '.', 'root', '.', 'left', 'is', 'None', 'and', 'self', '.', 'root', '.', 'right', 'is', 'None', ')', ':', 'self', '.', 'root', '=', 'None', 'else', ':', 'to_remove', '.', 'remove', '(', ')', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'root', 'is', 'not', 'None', ':', 'return', 'self', '.', 'root', '.', 'search', '(', 'key', ')', 'bstree', '=', 'BSTree', '(', ')', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'add <key>'"", ')', 'print', '(', ""'remove <key>'"", ')', 'print', '(', ""'inorder'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'add'"", ':', 'key', '=', 'int', '(', 'do', '[', '1', ']', ')', 'bstree', '.', 'add', '(', 'key', ')', 'elif', 'operation', '==', ""'remove'"", ':', 'key', '=', 'int', '(', 'do', '[', '1', ']', ')', 'bstree', '.', 'remove', '(', 'key', ')', 'elif', 'operation', '==', ""'inorder'"", ':', 'print', '(', ""'Inorder traversal: '"", ',', 'end', '=', ""''"", ')', 'bstree', '.', 'inorder', '(', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2870,"['program', 'print', 'z', 'c', 'using', 'ascii', 'value']","['print', '(', '""Printing a-z using ASCII""', ')', 'for', 'i', 'in', 'range', '(', '97', ',', '123', ')', ':', 'print', '(', 'chr', '(', 'i', ')', ',', 'end', '=', '"" ""', ')']"
2871,"['python', 'program', 'implement', 'tower', 'hanoi']","['def', 'hanoi', '(', 'disks', ',', 'source', ',', 'auxiliary', ',', 'target', ')', ':', 'if', 'disks', '==', '1', ':', 'print', '(', ""'Move disk 1 from peg {} to peg {}.'"", '.', 'format', '(', 'source', ',', 'target', ')', ')', 'return', 'hanoi', '(', 'disks', '-', '1', ',', 'source', ',', 'target', ',', 'auxiliary', ')', 'print', '(', ""'Move disk {} from peg {} to peg {}.'"", '.', 'format', '(', 'disks', ',', 'source', ',', 'target', ')', ')', 'hanoi', '(', 'disks', '-', '1', ',', 'auxiliary', ',', 'source', ',', 'target', ')', 'disks', '=', 'int', '(', 'input', '(', ""'Enter number of disks: '"", ')', ')', 'hanoi', '(', 'disks', ',', ""'A'"", ',', ""'B'"", ',', ""'C'"", ')']"
2872,"['division', 'two', 'number', 'operator', 'without', 'using', 'division', 'operator']","['num1', '=', 'int', '(', 'input', '(', '""Enter first number:""', ')', ')', 'num2', '=', 'int', '(', 'input', '(', '""Enter\xa0 second number:""', ')', ')', 'div', '=', '0', 'while', 'num1', '>=', 'num2', ':', 'num1', '=', 'num1', '-', 'num2', 'div', '+=', '1', 'print', '(', '""Division of two number is ""', ',', 'div', ')']"
2873,"['python', 'program', 'convert', 'given', 'singly', 'linked', 'list', 'circular', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'convert_to_circular', '(', 'llist', ')', ':', 'if', 'llist', '.', 'last_node', ':', 'llist', '.', 'last_node', '.', 'next', '=', 'llist', '.', 'head', 'def', 'print_last_node_points_to', '(', 'llist', ')', ':', 'last', '=', 'llist', '.', 'last_node', 'if', 'last', 'is', 'None', ':', 'print', '(', ""'List is empty.'"", ')', 'return', 'if', 'last', '.', 'next', 'is', 'None', ':', 'print', '(', ""'Last node points to None.'"", ')', 'else', ':', 'print', '(', ""'Last node points to element with data {}.'"", '.', 'format', '(', 'last', '.', 'next', '.', 'data', ')', ')', 'a_llist', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_llist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'print_last_node_points_to', '(', 'a_llist', ')', 'print', '(', ""'Converting linked list to a circular linked list...'"", ')', 'convert_to_circular', '(', 'a_llist', ')', 'print_last_node_points_to', '(', 'a_llist', ')']"
2874,"['python', 'program', 'find', 'sum', 'digit', 'number']","['n', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'tot', '=', '0', 'while', '(', 'n', '>', '0', ')', ':', 'dig', '=', 'n', '%', '10', 'tot', '=', 'tot', '+', 'dig', 'n', '=', 'n', '//', '10', 'print', '(', '""The total sum of digits is:""', ',', 'tot', ')']"
2875,"['python', 'program', 'read', 'text', 'file', 'count', 'number', 'time', 'certain', 'letter', 'appears', 'text', 'file']","['fname', '=', 'input', '(', '""Enter file name: ""', ')', 'l', '=', 'input', '(', '""Enter letter to be searched:""', ')', 'k', '=', '0', 'with', 'open', '(', 'fname', ',', ""'r'"", ')', 'as', 'f', ':', 'for', 'line', 'in', 'f', ':', 'words', '=', 'line', '.', 'split', '(', ')', 'for', 'i', 'in', 'words', ':', 'for', 'letter', 'in', 'i', ':', 'if', '(', 'letter', '==', 'l', ')', ':', 'k', '=', 'k', '+', '1', 'print', '(', '""Occurrences of the letter:""', ')', 'print', '(', 'k', ')']"
2876,"['write', 'program', 'calculate', 'amicable', 'pair']","[""'''Write a Python\nprogram\xa0to\xa0Calculate Amicable pairs. or\xa0Write a\nprogram\xa0to\xa0Calculate Amicable pairs using Python '''"", 'print', '(', '""Enter the two number:""', ')', 'num1', '=', 'int', '(', 'input', '(', ')', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'sum1', '=', '0', ';', 'sum2', '=', '0', ';', 'for', 'i', 'in', 'range', '(', '1', ',', 'num1', ')', ':', 'if', 'num1', '%', 'i', '==', '0', ':', 'sum1', '+=', 'i', 'for', 'i', 'in', 'range', '(', '1', ',', 'num2', ')', ':', 'if', 'num2', '%', 'i', '==', '0', ':', 'sum2', '+=', 'i', 'if', 'sum1', '==', 'num2', ':', 'if', 'sum2', '==', 'num1', ':', 'print', '(', '""This is an amicable pair.""', ')', 'else', ':', 'print', '(', '""This is not an amicable pair.""', ')']"
2877,"['python', 'program', 'display', 'node', 'linked', 'list', 'using', 'recursion']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'self', '.', 'display_helper', '(', 'self', '.', 'head', ')', 'def', 'display_helper', '(', 'self', ',', 'current', ')', ':', 'if', 'current', 'is', 'None', ':', 'return', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'self', '.', 'display_helper', '(', 'current', '.', 'next', ')', 'a_llist', '=', 'LinkedList', '(', ')', 'n', '=', 'int', '(', 'input', '(', ""'How many elements would you like to add? '"", ')', ')', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'data', '=', 'int', '(', 'input', '(', ""'Enter data item: '"", ')', ')', 'a_llist', '.', 'append', '(', 'data', ')', 'print', '(', ""'The linked list: '"", ',', 'end', '=', ""''"", ')', 'a_llist', '.', 'display', '(', ')']"
2878,"['sort', 'element', 'array', 'ascending', 'order']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Before sorting array elements are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '>=', 'arr', '[', 'j', ']', ':', 'temp', '=', 'arr', '[', 'i', ']', 'arr', '[', 'i', ']', '=', 'arr', '[', 'j', ']', 'arr', '[', 'j', ']', '=', 'temp', 'print', '(', '""\\nAfter sorting array elements are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')']"
2879,"['print', 'array', 'reverse', 'order', 'using', 'recursion']","['def', 'ReverseArray', '(', 'arr', ',', 'n', ')', ':', 'if', '(', 'n', '>', '0', ')', ':', 'i', '=', 'n', '-', '1', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')', 'ReverseArray', '(', 'arr', ',', 'i', ')', 'arr', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""After reversing Array Element Are:""', ')', 'ReverseArray', '(', 'arr', ',', 'n', ')']"
2880,"['read', 'string', 'space']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'print', '(', '""Your Enter String is:""', ',', 'str', ')']"
2881,"['python', 'program', 'create', 'mirror', 'copy', 'tree', 'display', 'using', 'bfs', 'traversal']","['class', 'BinaryTree', ':', 'def', '__init__', '(', 'self', ',', 'key', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'def', 'set_root', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'def', 'insert_left', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'left', '=', 'new_node', 'def', 'insert_right', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'right', '=', 'new_node', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'left', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'right', '.', 'search', '(', 'key', ')', 'return', 'temp', 'return', 'None', 'def', 'mirror_copy', '(', 'self', ')', ':', 'mirror', '=', 'BinaryTree', '(', 'self', '.', 'key', ')', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'mirror', '.', 'left', '=', 'self', '.', 'right', '.', 'mirror_copy', '(', ')', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'mirror', '.', 'right', '=', 'self', '.', 'left', '.', 'mirror_copy', '(', ')', 'return', 'mirror', 'def', 'bfs', '(', 'self', ')', ':', 'queue', '=', '[', 'self', ']', 'while', 'queue', '!=', '[', ']', ':', 'popped', '=', 'queue', '.', 'pop', '(', '0', ')', 'if', 'popped', '.', 'left', 'is', 'not', 'None', ':', 'queue', '.', 'append', '(', 'popped', '.', 'left', ')', 'if', 'popped', '.', 'right', 'is', 'not', 'None', ':', 'queue', '.', 'append', '(', 'popped', '.', 'right', ')', 'print', '(', 'popped', '.', 'key', ',', 'end', '=', ""' '"", ')', 'btree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'insert <data> at root'"", ')', 'print', '(', ""'insert <data> left of <data>'"", ')', 'print', '(', ""'insert <data> right of <data>'"", ')', 'print', '(', ""'mirror'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'BinaryTree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'btree', '=', 'new_node', 'else', ':', 'position', '=', 'do', '[', '4', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'btree', 'is', 'not', 'None', ':', 'ref_node', '=', 'btree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'if', 'suboperation', '==', ""'left'"", ':', 'ref_node', '.', 'insert_left', '(', 'new_node', ')', 'elif', 'suboperation', '==', ""'right'"", ':', 'ref_node', '.', 'insert_right', '(', 'new_node', ')', 'elif', 'operation', '==', ""'mirror'"", ':', 'if', 'btree', 'is', 'not', 'None', ':', 'print', '(', ""'Creating mirror copy...'"", ')', 'mirror', '=', 'btree', '.', 'mirror_copy', '(', ')', 'print', '(', ""'BFS traversal of original tree: '"", ')', 'btree', '.', 'bfs', '(', ')', 'print', '(', ')', 'print', '(', ""'BFS traversal of mirror: '"", ')', 'mirror', '.', 'bfs', '(', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2882,"['program', 'find', 'sum', 'n', 'natural', 'number']","['n', '=', 'int', '(', 'input', '(', '""Enter the N value:""', ')', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum', '=', 'sum', '+', 'i', 'print', '(', '""The sum of n natural numbers is ""', ',', 'sum', ')']"
2883,"['please', 'write', 'binary', 'search', 'function', 'search', 'item', 'sorted', 'list', 'function', 'return', 'index', 'element', 'searched', 'list']","['import', 'math', 'def', 'bin_search', '(', 'li', ',', 'element', ')', ':', 'bottom', '=', '0', 'top', '=', 'len', '(', 'li', ')', '-', '1', 'index', '=', '-', '1', 'while', 'top', '>=', 'bottom', 'and', 'index', '==', '-', '1', ':', 'mid', '=', 'int', '(', 'math', '.', 'floor', '(', '(', 'top', '+', 'bottom', ')', '/', '2.0', ')', ')', 'if', 'li', '[', 'mid', ']', '==', 'element', ':', 'index', '=', 'mid', 'elif', 'li', '[', 'mid', ']', '>', 'element', ':', 'top', '=', 'mid', '-', '1', 'else', ':', 'bottom', '=', 'mid', '+', '1', 'return', 'index', 'li', '=', '[', '2', ',', '5', ',', '7', ',', '9', ',', '11', ',', '17', ',', '222', ']', 'print', 'bin_search', '(', 'li', ',', '11', ')', 'print', 'bin_search', '(', 'li', ',', '12', ')']"
2884,"['write', 'program', 'swap', 'three', 'number']","['num1', '=', 'int', '(', 'input', '(', '""Enter 1st number:""', ')', ')', 'num2', '=', 'int', '(', 'input', '(', '""Enter 2nd number:""', ')', ')', 'num3', '=', 'int', '(', 'input', '(', '""Enter 3rd number:""', ')', ')', 'num1', '=', 'num1', '+', 'num2', '+', 'num3', 'num2', '=', 'num1', '-', 'num2', '-', 'num3', 'num3', '=', 'num1', '-', 'num2', '-', 'num3', 'num1', '=', 'num1', '-', 'num2', '-', 'num3', 'print', '(', '""***After swapping***""', ')', 'print', '(', '""Number 1: ""', ',', 'num1', ')', 'print', '(', '""Number 2: ""', ',', 'num2', ')', 'print', '(', '""Number 3: ""', ',', 'num3', ')']"
2885,"['python', 'program', 'check', 'number', 'prime', 'number']","['a', '=', 'int', '(', 'input', '(', '""Enter number: ""', ')', ')', 'k', '=', '0', 'for', 'i', 'in', 'range', '(', '2', ',', 'a', '//', '2', '+', '1', ')', ':', 'if', '(', 'a', '%', 'i', '==', '0', ')', ':', 'k', '=', 'k', '+', '1', 'if', '(', 'k', '<=', '0', ')', ':', 'print', '(', '""Number is prime""', ')', 'else', ':', 'print', '(', '""Number isn\'t prime""', ')']"
2886,"['program', 'print', 'cross', 'sign', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'print_control_x', '=', 'row_size', '//', '2', '+', '1', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'if', 'inn', '==', 'out', 'or', 'inn', '+', 'out', '==', 'row_size', '+', '1', ':', 'print', '(', 'out', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2887,"['python', 'program', 'implement', 'stack', 'using', 'two', 'queue']","['class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'queue1', '=', 'Queue', '(', ')', 'self', '.', 'queue2', '=', 'Queue', '(', ')', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'queue2', '.', 'is_empty', '(', ')', 'def', 'push', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'queue1', '.', 'enqueue', '(', 'data', ')', 'while', 'not', 'self', '.', 'queue2', '.', 'is_empty', '(', ')', ':', 'x', '=', 'self', '.', 'queue2', '.', 'dequeue', '(', ')', 'self', '.', 'queue1', '.', 'enqueue', '(', 'x', ')', 'self', '.', 'queue1', ',', 'self', '.', 'queue2', '=', 'self', '.', 'queue2', ',', 'self', '.', 'queue1', 'def', 'pop', '(', 'self', ')', ':', 'return', 'self', '.', 'queue2', '.', 'dequeue', '(', ')', 'class', 'Queue', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'enqueue', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'dequeue', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', '0', ')', 's', '=', 'Stack', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'push <value>'"", ')', 'print', '(', ""'pop'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'push'"", ':', 's', '.', 'push', '(', 'int', '(', 'do', '[', '1', ']', ')', ')', 'elif', 'operation', '==', ""'pop'"", ':', 'if', 's', '.', 'is_empty', '(', ')', ':', 'print', '(', ""'Stack is empty.'"", ')', 'else', ':', 'print', '(', ""'Popped value: '"", ',', 's', '.', 'pop', '(', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2888,"['python', 'program', 'print', 'middle', 'node', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'print_middle', '(', 'llist', ')', ':', 'current', '=', 'llist', '.', 'head', 'length', '=', '0', 'while', 'current', ':', 'current', '=', 'current', '.', 'next', 'length', '=', 'length', '+', '1', 'current', '=', 'llist', '.', 'head', 'for', 'i', 'in', 'range', '(', '(', 'length', '-', '1', ')', '//', '2', ')', ':', 'current', '=', 'current', '.', 'next', 'if', 'current', ':', 'if', 'length', '%', '2', '==', '0', ':', 'print', '(', ""'The two middle elements are {} and {}.'"", '.', 'format', '(', 'current', '.', 'data', ',', 'current', '.', 'next', '.', 'data', ')', ')', 'else', ':', 'print', '(', ""'The middle element is {}.'"", '.', 'format', '(', 'current', '.', 'data', ')', ')', 'else', ':', 'print', '(', ""'The list is empty.'"", ')', 'a_llist', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_llist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'print_middle', '(', 'a_llist', ')']"
2889,"['using', 'list', 'comprehension', 'please', 'write', 'program', 'print', 'list', 'removing', 'value']","['li', '=', '[', '12', ',', '24', ',', '35', ',', '24', ',', '88', ',', '120', ',', '155', ']', 'li', '=', '[', 'x', 'for', 'x', 'in', 'li', 'if', 'x', '!=', '24', ']', 'print', 'li']"
2890,"['python', 'program', 'print', 'alternate', 'node', 'linked', 'list', 'without', 'using', 'recursion']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'alternate', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'if', 'current', '.', 'next', 'is', 'not', 'None', ':', 'current', '=', 'current', '.', 'next', '.', 'next', 'else', ':', 'break', 'a_llist', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_llist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'print', '(', ""'The alternate nodes of the linked list: '"", ',', 'end', '=', ""''"", ')', 'a_llist', '.', 'alternate', '(', ')']"
2891,"['define', 'class', 'named', 'circle', 'constructed', 'radius', 'circle', 'class', 'method', 'compute', 'area']","['class', 'Circle', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ',', 'r', ')', ':', 'self', '.', 'radius', '=', 'r', 'def', 'area', '(', 'self', ')', ':', 'return', 'self', '.', 'radius', '**', '2', '*', '3.14', 'aCircle', '=', 'Circle', '(', '2', ')', 'print', 'aCircle', '.', 'area', '(', ')']"
2892,"['count', 'number', 'word', 'string']","['str1', '=', 'input', '(', '""Enter the String:""', ')', 'str2', '=', 'len', '(', 'str1', '.', 'split', '(', ')', ')', 'print', '(', '""Word present in a string are ""', ',', 'str', '(', 'str2', ')', ')']"
2893,"['write', 'program', 'print', 'alphabet', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', ';', 'row_size', '=', 'input', '(', ')', 'for', 'out', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'ord', '(', 'row_size', ')', '+', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'ord', '(', 'row_size', ')', '+', '1', ')', ':', 'print', '(', 'chr', '(', 'i', ')', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\r""', ')']"
2894,"['convert', 'decimal', 'binary', 'using', 'recursion']","['def', 'DecimalToBinary', '(', 'n', ')', ':', 'if', 'n', '==', '0', ':', 'return', '0', 'else', ':', 'return', '(', 'n', '%', '2', '+', '10', '*', 'DecimalToBinary', '(', 'n', '//', '2', ')', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter the Decimal Value:""', ')', ')', 'print', '(', '""Binary Value of Decimal number is:""', ',', 'DecimalToBinary', '(', 'n', ')', ')']"
2895,"['python', 'program', 'calculate', 'length', 'string', 'without', 'using', 'library', 'function']","['string', '=', 'raw_input', '(', '""Enter string:""', ')', 'count', '=', '0', 'for', 'i', 'in', 'string', ':', 'count', '=', 'count', '+', '1', 'print', '(', '""Length of the string is:""', ')', 'print', '(', 'count', ')']"
2896,"['program', 'calculate', 'surface', 'area', 'volume', 'cylinder']","['import', 'math', 'PI', '=', '3.14', 'r', '=', 'int', '(', 'input', '(', '""Enter the radius of the cylinder:""', ')', ')', 'h', '=', 'int', '(', 'input', '(', '""Enter the height of the cylinder:""', ')', ')', 'surface_area', '=', '(', '2', '*', 'PI', '*', 'r', '*', 'h', ')', '+', '(', '2', '*', 'PI', '*', 'math', '.', 'pow', '(', 'r', ',', '2', ')', ')', 'volume', '=', 'PI', '*', 'math', '.', 'pow', '(', 'r', ',', '2', ')', '*', 'h', 'print', '(', '""Surface Area of the cylinder = ""', ',', 'surface_area', ')', 'print', '(', '""Volume of the cylinder = ""', ',', 'volume', ')']"
2897,"['program', 'find', 'nth', 'sunny', 'number']","['import', 'math', 'rangenumber', '=', 'int', '(', 'input', '(', '""Enter a Nth Number:""', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', 'c', '!=', 'rangenumber', ':', 'num1', '=', 'num', 'root', '=', 'math', '.', 'sqrt', '(', 'num1', '+', '1', ')', 'if', 'int', '(', 'root', ')', '==', 'root', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Sunny number is ""', ',', 'letest', ')']"
2898,"['program', 'find', 'sum', 'series']","['print', '(', '""Enter the range of number:""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum', '+=', 'i', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
2899,"['python', 'program', 'find', 'intersection', 'two', 'list']","['def', 'intersection', '(', 'a', ',', 'b', ')', ':', 'return', 'list', '(', 'set', '(', 'a', ')', '&', 'set', '(', 'b', ')', ')', 'def', 'main', '(', ')', ':', 'alist', '=', '[', ']', 'blist', '=', '[', ']', 'n1', '=', 'int', '(', 'input', '(', '""Enter number of elements for list1:""', ')', ')', 'n2', '=', 'int', '(', 'input', '(', '""Enter number of elements for list2:""', ')', ')', 'print', '(', '""For list1:""', ')', 'for', 'x', 'in', 'range', '(', '0', ',', 'n1', ')', ':', 'element', '=', 'int', '(', 'input', '(', '""Enter element""', '+', 'str', '(', 'x', '+', '1', ')', '+', '"":""', ')', ')', 'alist', '.', 'append', '(', 'element', ')', 'print', '(', '""For list2:""', ')', 'for', 'x', 'in', 'range', '(', '0', ',', 'n2', ')', ':', 'element', '=', 'int', '(', 'input', '(', '""Enter element""', '+', 'str', '(', 'x', '+', '1', ')', '+', '"":""', ')', ')', 'blist', '.', 'append', '(', 'element', ')', 'print', '(', '""The intersection is :""', ')', 'print', '(', 'intersection', '(', 'alist', ',', 'blist', ')', ')', 'main', '(', ')']"
2900,"['program', 'swap', 'two', 'number', 'using', 'third', 'variable']","['num1', '=', 'int', '(', 'input', '(', '""Enter 1st number:""', ')', ')', 'num2', '=', 'int', '(', 'input', '(', '""Enter 2nd number:""', ')', ')', 'temp', '=', 'num1', 'num1', '=', 'num2', 'num2', '=', 'temp', 'print', '(', '""***After swapping***""', ')', 'print', '(', '""Number 1: ""', ',', 'num1', ')', 'print', '(', '""Number 2: ""', ',', 'num2', ')']"
2901,"['print', 'abundant', 'number', 'given', 'n']","['print', '(', '""Enter a range""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Abundant numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'j', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'j', ')', ':', 'if', '(', 'j', '%', 'i', '==', '0', ')', ':', 'sum', '=', 'sum', '+', 'i', 'if', 'sum', '>', 'j', ':', 'print', '(', 'j', ',', 'end', '=', '"" ""', ')']"
2902,"['segregate', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array(only 0s and 1s):""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'c', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '==', '0', ':', 'c', '+=', '1', 'for', 'i', 'in', 'range', '(', '0', ',', 'c', ')', ':', 'arr', '[', 'i', ']', '=', '0', 'for', 'i', 'in', 'range', '(', 'c', ',', 'size', ')', ':', 'arr', '[', 'i', ']', '=', '1', 'print', '(', '""After segregate 0s and 1s in an Array, Array is:""', ')', 'print', '(', 'arr', ')']"
2903,"['write', 'program', 'print', 'alphabet', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', 'row_size', '=', 'input', '(', ')', 'for', 'out', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'ord', '(', 'row_size', ')', '+', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'ord', '(', 'row_size', ')', '+', '1', ')', ':', 'print', '(', 'chr', '(', 'out', ')', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2904,"['python', 'program', 'take', 'mark', 'subject', 'display', 'grade']","['sub1', '=', 'int', '(', 'input', '(', '""Enter marks of the first subject: ""', ')', ')', 'sub2', '=', 'int', '(', 'input', '(', '""Enter marks of the second subject: ""', ')', ')', 'sub3', '=', 'int', '(', 'input', '(', '""Enter marks of the third subject: ""', ')', ')', 'sub4', '=', 'int', '(', 'input', '(', '""Enter marks of the fourth subject: ""', ')', ')', 'sub5', '=', 'int', '(', 'input', '(', '""Enter marks of the fifth subject: ""', ')', ')', 'avg', '=', '(', 'sub1', '+', 'sub2', '+', 'sub3', '+', 'sub4', '+', 'sub4', ')', '/', '5', 'if', '(', 'avg', '>=', '90', ')', ':', 'print', '(', '""Grade: A""', ')', 'elif', '(', 'avg', '>=', '80', '&', 'avg', '<', '90', ')', ':', 'print', '(', '""Grade: B""', ')', 'elif', '(', 'avg', '>=', '70', '&', 'avg', '<', '80', ')', ':', 'print', '(', '""Grade: C""', ')', 'elif', '(', 'avg', '>=', '60', '&', 'avg', '<', '70', ')', ':', 'print', '(', '""Grade: D""', ')', 'else', ':', 'print', '(', '""Grade: F""', ')']"
2905,"['python', 'program', 'create', 'class', 'one', 'method', 'accepts', 'string', 'user', 'another', 'print']","['class', 'print1', '(', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'string', '=', '""""', 'def', 'get', '(', 'self', ')', ':', 'self', '.', 'string', '=', 'input', '(', '""Enter string: ""', ')', 'def', 'put', '(', 'self', ')', ':', 'print', '(', '""String is:""', ')', 'print', '(', 'self', '.', 'string', ')', 'obj', '=', 'print1', '(', ')', 'obj', '.', 'get', '(', ')', 'obj', '.', 'put', '(', ')']"
2906,"['python', 'program', 'implement', 'binary', 'insertion', 'sort']","['def', 'binary_insertion_sort', '(', 'alist', ')', ':', 'for', 'i', 'in', 'range', '(', '1', ',', 'len', '(', 'alist', ')', ')', ':', 'temp', '=', 'alist', '[', 'i', ']', 'pos', '=', 'binary_search', '(', 'alist', ',', 'temp', ',', '0', ',', 'i', ')', '+', '1', 'for', 'k', 'in', 'range', '(', 'i', ',', 'pos', ',', '-', '1', ')', ':', 'alist', '[', 'k', ']', '=', 'alist', '[', 'k', '-', '1', ']', 'alist', '[', 'pos', ']', '=', 'temp', 'def', 'binary_search', '(', 'alist', ',', 'key', ',', 'start', ',', 'end', ')', ':', ""'''If key is in the list at index p, then return p.\n    If there are multiple such keys in the list, then return the index of any one.\n    If key is not in the list and a < key < b where a and b are elements in the list, then return the index of a.\n    If key is not in the list and key < a where a is the first element in the list, then return -1.\n    Only elements with indexes start to end - 1 inclusive are considered.\n    '''"", 'if', 'end', '-', 'start', '<=', '1', ':', 'if', 'key', '<', 'alist', '[', 'start', ']', ':', 'return', 'start', '-', '1', 'else', ':', 'return', 'start', 'mid', '=', '(', 'start', '+', 'end', ')', '//', '2', 'if', 'alist', '[', 'mid', ']', '<', 'key', ':', 'return', 'binary_search', '(', 'alist', ',', 'key', ',', 'mid', ',', 'end', ')', 'elif', 'alist', '[', 'mid', ']', '>', 'key', ':', 'return', 'binary_search', '(', 'alist', ',', 'key', ',', 'start', ',', 'mid', ')', 'else', ':', 'return', 'mid', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'binary_insertion_sort', '(', 'alist', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'alist', ')']"
2907,"['print', 'array', 'element', 'using', 'recursion']","['def', 'PrintArray', '(', 'arr', ',', 'i', ',', 'n', ')', ':', 'if', '(', 'i', '>=', 'n', ')', ':', 'return', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')', 'PrintArray', '(', 'arr', ',', 'i', '+', '1', ',', 'n', ')', 'arr', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Array Element Are:""', ')', 'PrintArray', '(', 'arr', ',', '0', ',', 'n', ')']"
2908,"['python', 'program', 'find', 'element', 'occurring', 'odd', 'number', 'time', 'list']","['def', 'find_odd_occurring', '(', 'alist', ')', ':', '""""""Return the element that occurs odd number of times in alist.\n\xa0\n    alist is a list in which all elements except one element occurs an even\n    number of times.\n    """"""', 'ans', '=', '0', 'for', 'element', 'in', 'alist', ':', 'ans', '^=', 'element', 'return', 'ans', 'alist', '=', 'input', '(', ""'Enter the list: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'i', ')', 'for', 'i', 'in', 'alist', ']', 'ans', '=', 'find_odd_occurring', '(', 'alist', ')', 'print', '(', ""'The element that occurs odd number of times:'"", ',', 'ans', ')']"
2909,"['binary', 'search', 'program', 'using', 'recursion']","['def', 'binary_search', '(', 'arr', ',', 'start', ',', 'end', ',', 'Search_ele', ')', ':', 'if', '(', 'start', '>', 'end', ')', ':', 'return', '-', '1', 'mid', '=', '(', 'int', ')', '(', '(', 'start', '+', 'end', ')', '/', '2', ')', 'if', '(', 'arr', '[', 'mid', ']', '==', 'Search_ele', ')', ':', 'return', 'mid', 'if', '(', 'Search_ele', '<', 'arr', '[', 'mid', ']', ')', ':', 'return', '(', 'binary_search', '(', 'arr', ',', 'start', ',', 'mid', '-', '1', ',', 'Search_ele', ')', ')', 'else', ':', 'return', '(', 'binary_search', '(', 'arr', ',', 'mid', '+', '1', ',', 'end', ',', 'Search_ele', ')', ')', 'arr', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'Search_ele', '=', 'int', '(', 'input', '(', '""Enter the search element:""', ')', ')', 'pos', '=', 'binary_search', '(', 'arr', ',', '0', ',', 'n', ',', 'Search_ele', ')', 'if', '(', 'pos', '==', '-', '1', ')', ':', 'print', '(', 'Search_ele', ',', '"" not found in array""', ')', 'else', ':', 'print', '(', 'Search_ele', ',', '"" found at ""', ',', '""arr[""', ',', 'pos', ',', '""]""', ')']"
2910,"['python', 'program', 'find', 'factorial', 'number', 'without', 'recursion']","['n', '=', 'int', '(', 'input', '(', '""Enter number:""', ')', ')', 'fact', '=', '1', 'while', '(', 'n', '>', '0', ')', ':', 'fact', '=', 'fact', '*', 'n', 'n', '=', 'n', '-', '1', 'print', '(', '""Factorial of the number is: ""', ')', 'print', '(', 'fact', ')']"
2911,"['program', 'check', 'whether', 'two', 'string']","['str', '=', 'input', '(', '""Enter the 1st String:""', ')', 'str2', '=', 'input', '(', '""Enter the 2nd String:""', ')', 'count', '=', '0', 'if', 'len', '(', 'str', ')', '!=', 'len', '(', 'str2', ')', ':', 'print', '(', '""Strings are not the same.""', ')', 'else', ':', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '==', 'str2', '[', 'i', ']', ':', 'count', '=', '1', 'break', 'if', 'count', '!=', '1', ':', 'print', '(', '""Input strings are not the same.""', ')', 'else', ':', 'print', '(', '""Input strings are the same.""', ')']"
2912,"['program', 'find', 'subtraction', 'two', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'matrix1', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix1', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sub_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'sub_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'i', ']', '[', 'j', ']', '-', 'matrix1', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Subtraction of the two Matrices is:""', ')', 'for', 'm', 'in', 'sub_matrix', ':', 'print', '(', 'm', ')']"
2913,"['python', 'program', 'flatten', 'nested', 'list', 'using', 'recursion']","['def', 'flatten', '(', 'S', ')', ':', 'if', 'S', '==', '[', ']', ':', 'return', 'S', 'if', 'isinstance', '(', 'S', '[', '0', ']', ',', 'list', ')', ':', 'return', 'flatten', '(', 'S', '[', '0', ']', ')', '+', 'flatten', '(', 'S', '[', '1', ':', ']', ')', 'return', 'S', '[', ':', '1', ']', '+', 'flatten', '(', 'S', '[', '1', ':', ']', ')', 's', '=', '[', '[', '1', ',', '2', ']', ',', '[', '3', ',', '4', ']', ']', 'print', '(', '""Flattened list is: ""', ',', 'flatten', '(', 's', ')', ')']"
2914,"['python', 'program', 'implement', 'breadthfirst', 'search', 'graph']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'class', 'Queue', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'enqueue', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'dequeue', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', '0', ')', 'def', 'display_bfs', '(', 'vertex', ')', ':', '""""""Display BFS Traversal starting at vertex.""""""', 'visited', '=', 'set', '(', ')', 'q', '=', 'Queue', '(', ')', 'q', '.', 'enqueue', '(', 'vertex', ')', 'visited', '.', 'add', '(', 'vertex', ')', 'while', 'not', 'q', '.', 'is_empty', '(', ')', ':', 'current', '=', 'q', '.', 'dequeue', '(', ')', 'print', '(', 'current', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'for', 'dest', 'in', 'current', '.', 'get_neighbours', '(', ')', ':', 'if', 'dest', 'not', 'in', 'visited', ':', 'visited', '.', 'add', '(', 'dest', ')', 'q', '.', 'enqueue', '(', 'dest', ')', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest>'"", ')', 'print', '(', ""'bfs <vertex key>'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'bfs'"", ':', 'key', '=', 'int', '(', 'do', '[', '1', ']', ')', 'print', '(', ""'Breadth-first Traversal: '"", ',', 'end', '=', ""''"", ')', 'vertex', '=', 'g', '.', 'get_vertex', '(', 'key', ')', 'display_bfs', '(', 'vertex', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2915,"['python', 'program', 'print', 'topological', 'sorting', 'directed', 'acyclic', 'graph', 'using', 'dfs']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'get_topological_sorting', '(', 'graph', ')', ':', '""""""Return a topological sorting of the DAG. Return None if graph is not a DAG.""""""', 'tlist', '=', '[', ']', 'visited', '=', 'set', '(', ')', 'on_stack', '=', 'set', '(', ')', 'for', 'v', 'in', 'graph', ':', 'if', 'v', 'not', 'in', 'visited', ':', 'if', 'not', 'get_topological_sorting_helper', '(', 'v', ',', 'visited', ',', 'on_stack', ',', 'tlist', ')', ':', 'return', 'None', 'return', 'tlist', 'def', 'get_topological_sorting_helper', '(', 'v', ',', 'visited', ',', 'on_stack', ',', 'tlist', ')', ':', '""""""Perform DFS traversal starting at vertex v and store a topological\n    sorting of the DAG in tlist. Return False if it is found that the graph is\n    not a DAG. Uses set visited to keep track of already visited nodes.""""""', 'if', 'v', 'in', 'on_stack', ':', 'return', 'False', 'on_stack', '.', 'add', '(', 'v', ')', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'if', 'dest', 'not', 'in', 'visited', ':', 'if', 'not', 'get_topological_sorting_helper', '(', 'dest', ',', 'visited', ',', 'on_stack', ',', 'tlist', ')', ':', 'return', 'False', 'on_stack', '.', 'remove', '(', 'v', ')', 'visited', '.', 'add', '(', 'v', ')', 'tlist', '.', 'insert', '(', '0', ',', 'v', '.', 'get_key', '(', ')', ')', 'return', 'True', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest>'"", ')', 'print', '(', ""'topological'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'topological'"", ':', 'tlist', '=', 'get_topological_sorting', '(', 'g', ')', 'if', 'tlist', 'is', 'not', 'None', ':', 'print', '(', ""'Topological Sorting: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'tlist', ')', 'else', ':', 'print', '(', ""'Graph is not a DAG.'"", ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2916,"['find', 'maximum', 'occurring', 'character', 'given', 'string']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'max', '=', '-', '1', 'arr', '=', '[', '0', ']', '*', '256', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '==', ""' '"", ':', 'continue', 'num', '=', 'ord', '(', 'str', '[', 'i', ']', ')', 'arr', '[', 'num', ']', '+=', '1', 'ch', '=', ""' '"", 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'arr', '[', 'ord', '(', 'str', '[', 'i', ']', ')', ']', '!=', '0', ':', 'if', 'arr', '[', 'ord', '(', 'str', '[', 'i', ']', ')', ']', '>=', 'max', ':', 'max', '=', 'arr', '[', 'ord', '(', 'str', '[', 'i', ']', ')', ']', 'ch', '=', 'str', '[', 'i', ']', 'print', '(', '""The Maximum occurring character in a string is ""', ',', 'ch', ')']"
2917,"['python', 'program', 'find', 'undirected', 'graph', 'contains', 'cycle', 'using', 'bfs']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'add_undirected_edge', '(', 'self', ',', 'v1_key', ',', 'v2_key', ',', 'weight', '=', '1', ')', ':', '""""""Add undirected edge (2 directed edges) between v1_key and v2_key with\n        given weight.""""""', 'self', '.', 'add_edge', '(', 'v1_key', ',', 'v2_key', ',', 'weight', ')', 'self', '.', 'add_edge', '(', 'v2_key', ',', 'v1_key', ',', 'weight', ')', 'def', 'does_undirected_edge_exist', '(', 'self', ',', 'v1_key', ',', 'v2_key', ')', ':', '""""""Return True if there is an undirected edge between v1_key and v2_key.""""""', 'return', '(', 'self', '.', 'does_edge_exist', '(', 'v1_key', ',', 'v2_key', ')', 'and', 'self', '.', 'does_edge_exist', '(', 'v1_key', ',', 'v2_key', ')', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'class', 'Queue', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'enqueue', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'dequeue', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', '0', ')', 'def', 'is_cycle_present', '(', 'vertex', ',', 'visited', ')', ':', '""""""Return True if cycle is present in component containing vertex and put\n    all vertices in component in set visited.""""""', 'parent', '=', '{', 'vertex', ':', 'None', '}', 'q', '=', 'Queue', '(', ')', 'q', '.', 'enqueue', '(', 'vertex', ')', 'visited', '.', 'add', '(', 'vertex', ')', 'while', 'not', 'q', '.', 'is_empty', '(', ')', ':', 'current', '=', 'q', '.', 'dequeue', '(', ')', 'for', 'dest', 'in', 'current', '.', 'get_neighbours', '(', ')', ':', 'if', 'dest', 'not', 'in', 'visited', ':', 'visited', '.', 'add', '(', 'dest', ')', 'parent', '[', 'dest', ']', '=', 'current', 'q', '.', 'enqueue', '(', 'dest', ')', 'else', ':', 'if', 'parent', '[', 'current', ']', 'is', 'not', 'dest', ':', 'return', 'True', 'return', 'False', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Undirected Graph'"", ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <vertex1> <vertex2>'"", ')', 'print', '(', ""'cycle'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'v1', '=', 'int', '(', 'do', '[', '2', ']', ')', 'v2', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'v1', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'v1', ')', ')', 'elif', 'v2', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'v2', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_undirected_edge_exist', '(', 'v1', ',', 'v2', ')', ':', 'g', '.', 'add_undirected_edge', '(', 'v1', ',', 'v2', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'cycle'"", ':', 'present', '=', 'False', 'visited', '=', 'set', '(', ')', 'for', 'v', 'in', 'g', ':', 'if', 'v', 'not', 'in', 'visited', ':', 'if', 'is_cycle_present', '(', 'v', ',', 'visited', ')', ':', 'present', '=', 'True', 'break', 'if', 'present', ':', 'print', '(', ""'Cycle present.'"", ')', 'else', ':', 'print', '(', ""'Cycle not present.'"", ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2918,"['insert', 'element', 'array', 'specified', 'position']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Enter the element:""', ')', 'ele', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Enter the position:""', ')', 'pos', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Before inserting array elements are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')', 'arr', '.', 'insert', '(', 'pos', '-', '1', ',', 'ele', ')', 'print', '(', '""\\nAfter inserting array elements are:""', ')', 'print', '(', 'arr', ')']"
2919,"['find', 'square', 'number', 'accept', 'user']","['num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'print', '(', '""Square of the number:""', ',', 'num', '*', 'num', ')']"
2920,"['separate', 'positive', 'negative', 'number', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""\\nPositive numbers are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', '(', 'arr', '[', 'i', ']', '>', '0', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\nNegative numbers are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', '(', 'arr', '[', 'i', ']', '<', '0', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')']"
2921,"['count', 'repeated', 'character', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'arr', '=', '[', '0', ']', '*', '256', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '==', ""' '"", ':', 'continue', 'num', '=', 'ord', '(', 'str', '[', 'i', ']', ')', 'arr', '[', 'num', ']', '+=', '1', 'print', '(', '""Repeated character in a string are:""', ')', 'for', 'i', 'in', 'range', '(', '256', ')', ':', 'if', 'arr', '[', 'i', ']', '>', '1', ':', 'print', '(', '(', 'chr', ')', '(', 'i', ')', ',', '"" occurs ""', ',', 'arr', '[', 'i', ']', ',', '"" times""', ')']"
2922,"['python', 'program', 'find', 'first', 'common', 'element', 'given', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'first_common', '(', 'llist1', ',', 'llist2', ')', ':', 'current1', '=', 'llist1', '.', 'head', 'while', 'current1', ':', 'data', '=', 'current1', '.', 'data', 'current2', '=', 'llist2', '.', 'head', 'while', 'current2', ':', 'if', 'data', '==', 'current2', '.', 'data', ':', 'return', 'data', 'current2', '=', 'current2', '.', 'next', 'current1', '=', 'current1', '.', 'next', 'return', 'None', 'llist1', '=', 'LinkedList', '(', ')', 'llist2', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the first linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'llist1', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the second linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'llist2', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'common', '=', 'first_common', '(', 'llist1', ',', 'llist2', ')', 'if', 'common', ':', 'print', '(', ""'The element that appears first in the first linked list that'"", ""' is common to both is {}.'"", '.', 'format', '(', 'common', ')', ')', 'else', ':', 'print', '(', ""'The two lists have no common elements.'"", ')']"
2923,"['python', 'program', 'find', 'connected', 'component', 'using', 'bfs', 'undirected', 'graph']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', 'add_undirected_edge', '(', 'self', ',', 'v1_key', ',', 'v2_key', ',', 'weight', '=', '1', ')', ':', '""""""Add undirected edge (2 directed edges) between v1_key and v2_key with\n        given weight.""""""', 'self', '.', 'add_edge', '(', 'v1_key', ',', 'v2_key', ',', 'weight', ')', 'self', '.', 'add_edge', '(', 'v2_key', ',', 'v1_key', ',', 'weight', ')', 'def', 'does_undirected_edge_exist', '(', 'self', ',', 'v1_key', ',', 'v2_key', ')', ':', '""""""Return True if there is an undirected edge between v1_key and v2_key.""""""', 'return', '(', 'self', '.', 'does_edge_exist', '(', 'v1_key', ',', 'v2_key', ')', 'and', 'self', '.', 'does_edge_exist', '(', 'v1_key', ',', 'v2_key', ')', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'class', 'Queue', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'enqueue', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'dequeue', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', '0', ')', 'def', 'label_all_reachable', '(', 'vertex', ',', 'component', ',', 'label', ')', ':', '""""""Set component[v] = label for all v in the component containing vertex.""""""', 'visited', '=', 'set', '(', ')', 'q', '=', 'Queue', '(', ')', 'q', '.', 'enqueue', '(', 'vertex', ')', 'visited', '.', 'add', '(', 'vertex', ')', 'while', 'not', 'q', '.', 'is_empty', '(', ')', ':', 'current', '=', 'q', '.', 'dequeue', '(', ')', 'component', '[', 'current', ']', '=', 'label', 'for', 'dest', 'in', 'current', '.', 'get_neighbours', '(', ')', ':', 'if', 'dest', 'not', 'in', 'visited', ':', 'visited', '.', 'add', '(', 'dest', ')', 'q', '.', 'enqueue', '(', 'dest', ')', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Undirected Graph'"", ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest>'"", ')', 'print', '(', ""'components'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_undirected_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_undirected_edge', '(', 'src', ',', 'dest', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'components'"", ':', 'component', '=', 'dict', '.', 'fromkeys', '(', 'g', ',', 'None', ')', 'label', '=', '1', 'for', 'v', 'in', 'g', ':', 'if', 'component', '[', 'v', ']', 'is', 'None', ':', 'label_all_reachable', '(', 'v', ',', 'component', ',', 'label', ')', 'label', '+=', '1', 'max_label', '=', 'label', 'for', 'label', 'in', 'range', '(', '1', ',', 'max_label', ')', ':', 'component_vertices', '=', '[', 'v', '.', 'get_key', '(', ')', 'for', 'v', 'in', 'component', 'if', 'component', '[', 'v', ']', '==', 'label', ']', 'print', '(', ""'Component {}:'"", '.', 'format', '(', 'label', ')', ',', 'component_vertices', ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2924,"['program', 'find', 'sum', 'series']","['import', 'math', 'print', '(', '""Enter the range of number:""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum', '+=', 'pow', '(', 'i', ',', 'i', ')', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
2925,"['program', 'find', 'square', 'matrix']","['print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'matrix', '[', 'i', ']', '[', 'j', ']', '=', 'pow', '(', 'matrix', '[', 'i', ']', '[', 'j', ']', ',', '2', ')', 'print', '(', '""Square of the Matrix elements are:""', ')', 'for', 'm', 'in', 'matrix', ':', 'print', '(', 'm', ')']"
2926,"['python', 'program', 'count', 'number', 'lowercase', 'character', 'string']","['string', '=', 'raw_input', '(', '""Enter string:""', ')', 'count', '=', '0', 'for', 'i', 'in', 'string', ':', 'if', '(', 'i', '.', 'islower', '(', ')', ')', ':', 'count', '=', 'count', '+', '1', 'print', '(', '""The number of lowercase characters is:""', ')', 'print', '(', 'count', ')']"
2927,"['capitalize', 'first', 'last', 'letter', 'every', 'word', 'string']","['ch', '=', 'input', '(', '""Enter the String:""', ')', 'j', '=', '0', 'str', '=', 'list', '(', 'ch', ')', 'str', '+=', ""'\\0'"", 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'i', '==', '0', 'or', 'str', '[', 'i', '-', '1', ']', '==', ""' '"", ':', 'str', '[', 'i', ']', '=', 'str', '[', 'i', ']', '.', 'upper', '(', ')', 'elif', 'str', '[', 'i', ']', '==', ""' '"", 'or', 'str', '[', 'i', ']', '==', ""'\\0'"", ':', 'str', '[', 'i', '-', '1', ']', '=', 'str', '[', 'i', '-', '1', ']', '.', 'upper', '(', ')', 'print', '(', '""Your String is:""', ',', '""""', '.', 'join', '(', 'str', ')', ')']"
2928,"['using', 'list', 'comprehension', 'please', 'write', 'program', 'generate', 'array', 'whose', 'element']","['array', '=', '[', '[', '[', '0', 'for', 'col', 'in', 'range', '(', '8', ')', ']', 'for', 'col', 'in', 'range', '(', '5', ')', ']', 'for', 'row', 'in', 'range', '(', '3', ')', ']', 'print', 'array']"
2929,"['find', 'largest', 'digit', 'number']","['print', '(', '""Enter the Number :""', ')', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'Largest', '=', '0', ';', 'while', '(', 'num', '>', '0', ')', ':', 'reminder', '=', 'num', '%', '10', 'if', 'Largest', '<', 'reminder', ':', 'Largest', '=', 'reminder', 'num', '=', 'int', '(', 'num', '/', '10', ')', 'print', '(', '""The Largest Digit is :""', ',', 'Largest', ')']"
2930,"['find', 'largest', 'element', 'array']","['import', 'sys', 'arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'max', '=', '-', 'sys', '.', 'maxsize', '-', '1', 'sec_max', '=', '-', 'sys', '.', 'maxsize', '-', '1', 'for', 'j', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', '(', 'arr', '[', 'j', ']', '>=', 'max', ')', ':', 'sec_max', '=', 'max', 'max', '=', 'arr', '[', 'j', ']', 'elif', '(', 'arr', '[', 'i', ']', '>=', 'sec_max', ')', ':', 'sec_max', '=', 'arr', '[', 'j', ']', 'print', '(', '""The 2nd largest element of array: ""', ',', 'sec_max', ')']"
2931,"['print', 'even', 'number', 'n']","['n', '=', 'int', '(', 'input', '(', '""Enter the n value:""', ')', ')', 'print', '(', '""Printing even numbers between 1 to ""', ',', 'n', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'if', 'i', '%', '2', '==', '0', ':', 'print', '(', 'i', ')']"
2932,"['python', 'program', 'implement', 'queue']","['class', 'Queue', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'enqueue', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'dequeue', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', '0', ')', 'q', '=', 'Queue', '(', ')', 'while', 'True', ':', 'print', '(', ""'enqueue <value>'"", ')', 'print', '(', ""'dequeue'"", ')', 'print', '(', ""'quit'"", ')', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'enqueue'"", ':', 'q', '.', 'enqueue', '(', 'int', '(', 'do', '[', '1', ']', ')', ')', 'elif', 'operation', '==', ""'dequeue'"", ':', 'if', 'q', '.', 'is_empty', '(', ')', ':', 'print', '(', ""'Queue is empty.'"", ')', 'else', ':', 'print', '(', ""'Dequeued value: '"", ',', 'q', '.', 'dequeue', '(', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2933,"['find', 'sum', 'diagonal', 'element', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '==', 'j', ':', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Sum of diagonals Element is: ""', ',', 'sum', ')']"
2934,"['program', 'find', 'subtraction', 'two', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'matrix1', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix1', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sub_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'sub_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'i', ']', '[', 'j', ']', '-', 'matrix1', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Subtraction of the two Matrices is:""', ')', 'for', 'm', 'in', 'sub_matrix', ':', 'print', '(', 'm', ')']"
2935,"['define', 'function', 'convert', 'integer', 'string', 'print', 'console']","['Solution', 'def', 'printValue', '(', 'n', ')', ':', 'print', 'str', '(', 'n', ')', 'printValue', '(', '3', ')']"
2936,"['program', 'compute', 'area', 'trapezoid']","['print', '(', '""Enter the value of base:""', ')', 'a', '=', 'int', '(', 'input', '(', ')', ')', 'b', '=', 'int', '(', 'input', '(', ')', ')', 'h', '=', 'int', '(', 'input', '(', '""Enter the value of height:""', ')', ')', 'area', '=', '(', '(', 'a', '+', 'b', ')', '*', 'h', ')', '/', '2.0', 'print', '(', '""Area of the Trapezoid = ""', ',', 'area', ')']"
2937,"['find', 'gcd', 'two', 'number', 'using', 'recursion']","['def', 'gcd', '(', 'num1', ',', 'num2', ')', ':', 'if', 'num2', '==', '0', ':', 'return', 'num1', 'else', ':', 'return', 'gcd', '(', 'num2', ',', 'num1', '%', 'num2', ')', 'print', '(', '""Enter the two Number:""', ')', 'num1', '=', 'int', '(', 'input', '(', ')', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Gcd of Given Numbers Using Recursion is:""', ',', 'gcd', '(', 'num1', ',', 'num2', ')', ')']"
2938,"['python', 'program', 'implement', 'depth', 'first', 'search', 'traversal', 'using', 'post', 'order']","['class', 'Tree', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'data', 'self', '.', 'children', '=', '[', ']', 'def', 'set_root', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'key', '=', 'data', 'def', 'add', '(', 'self', ',', 'node', ')', ':', 'self', '.', 'children', '.', 'append', '(', 'node', ')', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'for', 'child', 'in', 'self', '.', 'children', ':', 'temp', '=', 'child', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'return', 'None', 'def', 'postorder', '(', 'self', ')', ':', 'for', 'child', 'in', 'self', '.', 'children', ':', 'child', '.', 'postorder', '(', ')', 'print', '(', 'self', '.', 'key', ',', 'end', '=', ""' '"", ')', 'tree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'add <data> at root'"", ')', 'print', '(', ""'add <data> below <data>'"", ')', 'print', '(', ""'dfs'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'add'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'Tree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'tree', '=', 'new_node', 'elif', 'suboperation', '==', ""'below'"", ':', 'position', '=', 'do', '[', '3', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'tree', 'is', 'not', 'None', ':', 'ref_node', '=', 'tree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'ref_node', '.', 'add', '(', 'new_node', ')', 'elif', 'operation', '==', ""'dfs'"", ':', 'print', '(', ""'Post-order traversal: '"", ',', 'end', '=', ""''"", ')', 'tree', '.', 'postorder', '(', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2939,"['program', 'find', 'sum', 'series']","['import', 'math', 'print', '(', '""Enter the range of number:""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum', '+=', 'pow', '(', 'i', ',', 'i', ')', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
2940,"['print', 'average', 'mark', 'obtained', 'student', 'five', 'test']","['arr', '=', '[', ']', 'sum', '=', '0', 'avg', '=', '0.0', 'print', '(', '""Enter the five test Marks:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', '5', ')', ':', 'mark', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '+=', 'mark', 'arr', '.', 'append', '(', 'mark', ')', 'avg', '=', 'sum', '/', '5.0', 'print', '(', '""Average of five tests marks is: ""', ',', 'avg', ')']"
2941,"['python', 'program', 'find', 'node', 'reachable', 'node', 'using', 'dfs', 'graph']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'find_all_reachable_nodes', '(', 'v', ')', ':', '""""""Return set containing all vertices reachable from vertex.""""""', 'reachable', '=', 'set', '(', ')', 'find_all_reachable_nodes_helper', '(', 'v', ',', 'reachable', ')', 'return', 'reachable', 'def', 'find_all_reachable_nodes_helper', '(', 'v', ',', 'visited', ')', ':', '""""""Add all vertices visited by DFS traversal starting at v to the set visited.""""""', 'visited', '.', 'add', '(', 'v', ')', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'if', 'dest', 'not', 'in', 'visited', ':', 'find_all_reachable_nodes_helper', '(', 'dest', ',', 'visited', ')', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest>'"", ')', 'print', '(', ""'reachable <vertex key>'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'reachable'"", ':', 'key', '=', 'int', '(', 'do', '[', '1', ']', ')', 'vertex', '=', 'g', '.', 'get_vertex', '(', 'key', ')', 'reachable', '=', 'find_all_reachable_nodes', '(', 'vertex', ')', 'print', '(', ""'All nodes reachable from {}:'"", '.', 'format', '(', 'key', ')', ',', '[', 'v', '.', 'get_key', '(', ')', 'for', 'v', 'in', 'reachable', ']', ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2942,"['program', 'print', 'series']","['print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'i', '=', '1', 'a', '=', '0', 'b', '=', '6', 'k', '=', '10', 'p', '=', '11', 'while', '(', 'i', '<=', 'n', ')', ':', 'if', '(', 'i', '%', '2', '==', '0', ')', ':', 'print', '(', 'b', ',', 'end', '=', '"" ""', ')', 'b', '+=', 'p', 'p', '+=', '2', 'else', ':', 'print', '(', 'a', ',', 'end', '=', '"" ""', ')', 'a', '+=', 'k', 'k', '+=', '2', 'i', '+=', '1']"
2943,"['program', 'print', 'square', 'pattern', 'number']","['print', '(', '""Enter the row and column size:""', ')', ';', 'row_size', '=', 'int', '(', 'input', '(', ')', ')', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'i', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'print', '(', 'i', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2944,"['program', 'display', 'lower', 'triangular', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'print', '(', '""Lower Triangular Matrix is:\\n""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '<', 'j', ':', 'print', '(', '""0 ""', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', 'matrix', '[', 'i', ']', '[', 'j', ']', ',', 'end', '=', '"" ""', ')', 'print', '(', ')']"
2945,"['python', 'program', 'implement', 'depthfirst', 'search', 'graph', 'without', 'recursion']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'push', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'pop', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', ')', 'def', 'display_dfs', '(', 'v', ')', ':', 'visited', '=', 'set', '(', ')', 's', '=', 'Stack', '(', ')', 's', '.', 'push', '(', 'vertex', ')', 'while', 'not', 's', '.', 'is_empty', '(', ')', ':', 'current', '=', 's', '.', 'pop', '(', ')', 'if', 'current', 'in', 'visited', ':', 'continue', 'print', '(', 'current', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'visited', '.', 'add', '(', 'current', ')', 'for', 'dest', 'in', 'current', '.', 'get_neighbours', '(', ')', ':', 'if', 'dest', 'not', 'in', 'visited', ':', 's', '.', 'push', '(', 'dest', ')', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest>'"", ')', 'print', '(', ""'dfs <vertex key>'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'dfs'"", ':', 'key', '=', 'int', '(', 'do', '[', '1', ']', ')', 'print', '(', ""'Depth-first Traversal: '"", ',', 'end', '=', ""''"", ')', 'vertex', '=', 'g', '.', 'get_vertex', '(', 'key', ')', 'display_dfs', '(', 'vertex', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2946,"['please', 'generate', 'random', 'float', 'value', 'using', 'python', 'math', 'module']","['import', 'random', 'print', 'random', '.', 'random', '(', ')', '*', '100', '-', '5']"
2947,"['python', 'program', 'check', 'whether', 'singly', 'linked', 'list', 'palindrome']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'get_prev_node', '(', 'self', ',', 'ref_node', ')', ':', 'current', '=', 'self', '.', 'head', 'while', '(', 'current', 'and', 'current', '.', 'next', '!=', 'ref_node', ')', ':', 'current', '=', 'current', '.', 'next', 'return', 'current', 'def', 'is_palindrome', '(', 'llist', ')', ':', 'start', '=', 'llist', '.', 'head', 'end', '=', 'llist', '.', 'last_node', 'while', '(', 'start', '!=', 'end', 'and', 'end', '.', 'next', '!=', 'start', ')', ':', 'if', 'start', '.', 'data', '!=', 'end', '.', 'data', ':', 'return', 'False', 'start', '=', 'start', '.', 'next', 'end', '=', 'llist', '.', 'get_prev_node', '(', 'end', ')', 'return', 'True', 'a_llist', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_llist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'if', 'is_palindrome', '(', 'a_llist', ')', ':', 'print', '(', ""'The linked list is palindromic.'"", ')', 'else', ':', 'print', '(', ""'The linked list is not palindromic.'"", ')']"
2948,"['program', 'find', 'sum', 'series']","['import', 'math', 'print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'i', '=', '1', 'while', '(', 'i', '<=', 'n', ')', ':', 'sum', '+=', 'pow', '(', 'i', ',', '2', ')', 'i', '+=', '1', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
2949,"['program', 'find', 'sum', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number:""', ')', ')', 'sum', '=', '0', 'p', '=', '9', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum', '+=', 'p', 'p', '=', '(', 'p', '*', '10', ')', '+', '9', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
2950,"['python', 'program', 'read', 'two', 'number', 'print', 'quotient', 'remainder']","['a', '=', 'int', '(', 'input', '(', '""Enter the first number: ""', ')', ')', 'b', '=', 'int', '(', 'input', '(', '""Enter the second number: ""', ')', ')', 'quotient', '=', 'a', '//', 'b', 'remainder', '=', 'a', '%', 'b', 'print', '(', '""Quotient is:""', ',', 'quotient', ')', 'print', '(', '""Remainder is:""', ',', 'remainder', ')']"
2951,"['python', 'program', 'find', 'sum', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the number of terms: ""', ')', ')', 'sum1', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum1', '=', 'sum1', '+', '(', '1', '/', 'i', ')', 'print', '(', '""The sum of series is""', ',', 'round', '(', 'sum1', ',', '2', ')', ')']"
2952,"['program', 'print', 'solid', 'inverted', 'half', 'diamond', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '-', '(', 'row_size', '+', '1', ')', ',', '-', '1', ')', ':', 'for', 'in1', 'in', 'range', '(', '1', ',', 'abs', '(', 'out', ')', '+', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', 'abs', '(', 'out', ')', ',', 'row_size', '+', '1', ')', ':', 'print', '(', 'p', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
2953,"['remove', 'duplicate', 'character', 'given', 'string']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'arr', '=', '[', '0', ']', '*', '256', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '!=', ""' '"", ':', 'num', '=', 'ord', '(', 'str', '[', 'i', ']', ')', 'arr', '[', 'num', ']', '+=', '1', 'print', '(', '""After Removing Duplicate character from a given string is:""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '!=', ""' '"", ':', 'if', 'arr', '[', 'ord', '(', 'str', '[', 'i', ']', ')', ']', '!=', '0', ':', 'print', '(', 'str', '[', 'i', ']', ',', 'end', '=', '""""', ')', 'arr', '[', 'ord', '(', 'str', '[', 'i', ']', ')', ']', '=', '0', 'else', ':', 'print', '(', 'str', '[', 'i', ']', ',', 'end', '=', '""""', ')']"
2954,"['find', 'lexicographic', 'rank', 'given', 'string']","['def', 'Find_Factorial', '(', 'len1', ')', ':', 'fact', '=', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'len1', '+', '1', ')', ':', 'fact', '=', 'fact', '*', 'i', 'return', 'factdef', 'Find_Lexicographic_Rank', '(', 'str', ',', 'len1', ')', ':', 'rank', '=', '1', 'for', 'inn', 'in', 'range', '(', '0', ',', 'len1', ')', ':', 'count', '=', '0', 'for', 'out', 'in', 'range', '(', 'inn', '+', '1', ',', 'len1', '+', '1', ')', ':', 'if', 'str', '[', 'inn', ']', '>', 'str', '[', 'out', ']', ':', 'count', '+=', '1', 'rank', '+=', 'count', '*', 'Find_Factorial', '(', 'len1', '-', 'inn', ')', 'return', 'rankstr', '=', 'input', '(', '""Enter Your String:""', ')', 'print', '(', '""Lexicographic Rank of given String is: ""', ',', 'Find_Lexicographic_Rank', '(', 'str', ',', 'len', '(', 'str', ')', '-', '1', ')', ')']"
2955,"['python', 'program', 'count', 'number', 'occurrence', 'element', 'linked', 'list', 'without', 'using', 'recursion']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'current', '=', 'self', '.', 'head', 'while', 'current', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'def', 'count', '(', 'self', ',', 'key', ')', ':', 'current', '=', 'self', '.', 'head', 'count', '=', '0', 'while', 'current', ':', 'if', 'current', '.', 'data', '==', 'key', ':', 'count', '=', 'count', '+', '1', 'current', '=', 'current', '.', 'next', 'return', 'count', 'a_llist', '=', 'LinkedList', '(', ')', 'for', 'data', 'in', '[', '5', ',', '1', ',', '3', ',', '5', ',', '5', ',', '15', ',', '4', ',', '9', ',', '2', ']', ':', 'a_llist', '.', 'append', '(', 'data', ')', 'print', '(', ""'The linked list: '"", ',', 'end', '=', ""''"", ')', 'a_llist', '.', 'display', '(', ')', 'print', '(', ')', 'key', '=', 'int', '(', 'input', '(', ""'Enter data item: '"", ')', ')', 'count', '=', 'a_llist', '.', 'count', '(', 'key', ')', 'print', '(', ""'{0} occurs {1} time(s) in the list.'"", '.', 'format', '(', 'key', ',', 'count', ')', ')']"
2956,"['find', 'automorphic', 'number', 'present', 'within', 'given', 'range']","[""'''Write a Python\nprogram\xa0to\xa0find out all Automorphic numbers present within a given\nrange. or\xa0Write a program\xa0to\xa0find out all Automorphic numbers\npresent within a given range using Python '''"", 'print', '(', '""Enter a range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Perfect numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'num', '=', 'i', 'sqr', '=', 'num', '*', 'num', 'flag', '=', '0', 'while', 'num', '!=', '0', ':', 'if', '(', 'num', '%', '10', '!=', 'sqr', '%', '10', ')', ':', 'flag', '=', '-', '1', 'break', 'num', '=', 'int', '(', 'num', '/', '10', ')', 'sqr', '=', 'int', '(', 'sqr', '/', '10', ')', 'if', '(', 'flag', '==', '0', ')', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
2957,"['program', 'display', 'lower', 'triangular', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'print', '(', '""Lower Triangular Matrix is:\\n""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '<', 'j', ':', 'print', '(', '""0 ""', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', 'matrix', '[', 'i', ']', '[', 'j', ']', ',', 'end', '=', '"" ""', ')', 'print', '(', ')']"
2958,"['check', 'string', 'contains', 'digit']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'count', '=', '0', 'for', 'inn', 'in', 'range', '(', '0', ',', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'inn', ']', '>=', ""'0'"", 'and', 'str', '[', 'inn', ']', '<=', ""'9'"", ':', 'count', '+=', '1', 'if', 'count', '==', 'len', '(', 'str', ')', ':', 'print', '(', '""String contains only digits.""', ')', 'else', ':', 'print', '(', '""String does not contain only digits.""', ')']"
2959,"['program', 'calculate', 'surface', 'area', 'volume', 'cone']","['import', 'math', 'PI', '=', '3.14', 'r', '=', 'int', '(', 'input', '(', '""Enter the radius of the cone:""', ')', ')', 'h', '=', 'int', '(', 'input', '(', '""Enter the height of the cone:""', ')', ')', 'surface_area', '=', '(', 'PI', '*', 'r', ')', '*', '(', 'r', '+', 'math', '.', 'sqrt', '(', 'math', '.', 'pow', '(', 'h', ',', '2', ')', '+', 'math', '.', 'pow', '(', 'r', ',', '2', ')', ')', ')', 'volume', '=', 'PI', '*', 'math', '.', 'pow', '(', 'r', ',', '2', ')', '*', '(', 'h', '/', '3.0', ')', 'print', '(', '""Surface Area of the cone= ""', ',', 'surface_area', ')', 'print', '(', '""Volume of the cone = ""', ',', 'volume', ')']"
2960,"['define', 'custom', 'exception', 'class', 'take', 'string', 'message', 'attribute']","['class', 'MyError', '(', 'Exception', ')', ':', '""""""My own exception class\n\n    Attributes:\n        msg  -- explanation of the error\n    """"""', 'def', '__init__', '(', 'self', ',', 'msg', ')', ':', 'self', '.', 'msg', '=', 'msg', 'error', '=', 'MyError', '(', '""something wrong""', ')']"
2961,"['python', 'program', 'replace', 'occurrence', 'string']","['string', '=', 'input', '(', '""Enter string:""', ')', 'string', '=', 'string', '.', 'replace', '(', ""'a'"", ',', ""'$'"", ')', 'string', '=', 'string', '.', 'replace', '(', ""'A'"", ',', ""'$'"", ')', 'print', '(', '""Modified string:""', ')', 'print', '(', 'string', ')']"
2962,"['find', 'lcm', 'two', 'number', 'using', 'recursion']","['def', 'gcd', '(', 'num1', ',', 'num2', ')', ':', 'if', 'num2', '==', '0', ':', 'return', 'num1', 'else', ':', 'return', 'gcd', '(', 'num2', ',', 'num1', '%', 'num2', ')', 'def', 'lcm', '(', 'num1', ',', 'num2', ')', ':', 'return', '(', 'num1', '*', 'num2', ')', '//', 'gcd', '(', 'num1', ',', 'num2', ')', 'print', '(', '""Enter the two Number:""', ')', 'num1', '=', 'int', '(', 'input', '(', ')', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Lcm of Given Numbers Using Recursion is:""', ',', 'lcm', '(', 'num1', ',', 'num2', ')', ')']"
2963,"['python', 'program', 'remove', 'duplicate', 'item', 'list']","['a', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the number of elements in list:""', ')', ')', 'for', 'x', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'element', '=', 'int', '(', 'input', '(', '""Enter element""', '+', 'str', '(', 'x', '+', '1', ')', '+', '"":""', ')', ')', 'a', '.', 'append', '(', 'element', ')', 'b', '=', 'set', '(', ')', 'unique', '=', '[', ']', 'for', 'x', 'in', 'a', ':', 'if', 'x', 'not', 'in', 'b', ':', 'unique', '.', 'append', '(', 'x', ')', 'b', '.', 'add', '(', 'x', ')', 'print', '(', '""Non-duplicate items:""', ')', 'print', '(', 'unique', ')']"
2964,"['check', 'given', 'number', 'palindrome', 'using', 'recursion']","['rev', '=', '0', 'def', 'Num_reverse', '(', 'num', ')', ':', 'global', 'rev', 'if', 'num', '!=', '0', ':', 'rem', '=', 'num', '%', '10', 'rev', '=', '(', 'rev', '*', '10', ')', '+', 'rem', 'Num_reverse', '(', 'num', '//', '10', ')', 'return', 'revnum', '=', 'int', '(', 'input', '(', '""Enter your Number:""', ')', ')', 'if', '(', 'Num_reverse', '(', 'num', ')', '==', 'num', ')', ':', 'print', '(', 'num', ',', '"" is a Palindrome Number.""', ')', 'else', ':', 'print', '(', 'num', ',', '"" is not a Palindrome Number.""', ')']"
2965,"['move', 'zero', 'start', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'c', '=', 'size', '-', '1', 'for', 'i', 'in', 'range', '(', 'size', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'if', 'arr', '[', 'i', ']', '!=', '0', ':', 'arr', '[', 'c', ']', '=', 'arr', '[', 'i', ']', 'c', '-=', '1', 'for', 'i', 'in', 'range', '(', 'c', ',', '-', '1', ',', '-', '1', ')', ':', 'arr', '[', 'c', ']', '=', '0', 'c', '-=', '1', 'print', '(', '""After Move all zeros\xa0to Start, Array is:""', ')', 'print', '(', 'arr', ')']"
2966,"['please', 'write', 'program', 'generate', 'list', 'random', 'number', 'inclusive']","['import', 'random', 'print', 'random', '.', 'sample', '(', 'range', '(', '100', ')', ',', '5', ')']"
2967,"['count', 'many', 'consonant', 'present', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'count', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '==', ""'a'"", 'or', 'str', '[', 'i', ']', '==', ""'A'"", 'or', 'str', '[', 'i', ']', '==', ""'e'"", 'or', 'str', '[', 'i', ']', '==', ""'E'"", 'or', 'str', '[', 'i', ']', '==', ""'i'"", 'or', 'str', '[', 'i', ']', '==', ""'I'"", 'or', 'str', '[', 'i', ']', '==', ""'o'"", 'or', 'str', '[', 'i', ']', '==', ""'O'"", 'or', 'str', '[', 'i', ']', '==', ""'u'"", 'or', 'str', '[', 'i', ']', '==', ""'U'"", 'or', 'str', '[', 'i', ']', '==', ""' '"", ':', 'continue', 'else', ':', 'count', '+=', '1', 'if', 'count', '==', '0', ':', 'print', '(', '""No consonants are present in the string.""', ')', 'else', ':', 'print', '(', '""Numbers of consonants present in the string are ""', ',', 'count', ')']"
2968,"['python', 'program', 'print', 'dfs', 'numbering', 'graph']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'dfs', '(', 'v', ',', 'pre', ',', 'post', ')', ':', '""""""Display DFS traversal starting at vertex v. Stores pre and post times in\n    dictionaries pre and post.""""""', 'dfs_helper', '(', 'v', ',', 'set', '(', ')', ',', 'pre', ',', 'post', ',', '[', '0', ']', ')', 'def', 'dfs_helper', '(', 'v', ',', 'visited', ',', 'pre', ',', 'post', ',', 'time', ')', ':', '""""""Display DFS traversal starting at vertex v. Uses set visited to keep\n    track of already visited nodes, dictionaries pre and post to store\n    discovered and finished times and the one-element list time to keep track of\n    current time.""""""', 'visited', '.', 'add', '(', 'v', ')', 'time', '[', '0', ']', '=', 'time', '[', '0', ']', '+', '1', 'pre', '[', 'v', ']', '=', 'time', '[', '0', ']', 'print', '(', ""'Visiting {}... discovered time = {}'"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'time', '[', '0', ']', ')', ')', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'if', 'dest', 'not', 'in', 'visited', ':', 'dfs_helper', '(', 'dest', ',', 'visited', ',', 'pre', ',', 'post', ',', 'time', ')', 'time', '[', '0', ']', '=', 'time', '[', '0', ']', '+', '1', 'post', '[', 'v', ']', '=', 'time', '[', '0', ']', 'print', '(', ""'Leaving {}... finished time = {}'"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'time', '[', '0', ']', ')', ')', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest>'"", ')', 'print', '(', ""'dfs <vertex key>'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'dfs'"", ':', 'key', '=', 'int', '(', 'do', '[', '1', ']', ')', 'print', '(', ""'Depth-first Traversal: '"", ')', 'vertex', '=', 'g', '.', 'get_vertex', '(', 'key', ')', 'pre', '=', 'dict', '(', ')', 'post', '=', 'dict', '(', ')', 'dfs', '(', 'vertex', ',', 'pre', ',', 'post', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2969,"['linear', 'search', 'program', 'using', 'recursion']","['temp', '=', '0', 'def', 'Linear_search', '(', 'arr', ',', 'Search_ele', ',', 'n', ')', ':', 'global', 'temp', 'if', '(', 'n', '>', '0', ')', ':', 'i', '=', 'n', '-', '1', 'if', '(', 'arr', '[', 'i', ']', '==', 'Search_ele', ')', ':', 'temp', '=', '1', 'Linear_search', '(', 'arr', ',', 'Search_ele', ',', 'i', ')', 'return', 'temparr', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'Search_ele', '=', 'int', '(', 'input', '(', '""Enter the search element:""', ')', ')', 'if', '(', 'Linear_search', '(', 'arr', ',', 'Search_ele', ',', 'n', ')', '==', '1', ')', ':', 'print', '(', '""Element found....""', ')', 'else', ':', 'print', '(', '""Element not found....""', ')']"
2970,"['python', 'program', 'implement', 'dijkstras', 'shortest', 'path', 'algorithm']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'dijkstra', '(', 'g', ',', 'source', ')', ':', '""""""Return distance where distance[v] is min distance from source to v.\n\xa0\n    This will return a dictionary distance.\n\xa0\n    g is a Graph object.\n    source is a Vertex object in g.\n    """"""', 'unvisited', '=', 'set', '(', 'g', ')', 'distance', '=', 'dict', '.', 'fromkeys', '(', 'g', ',', 'float', '(', ""'inf'"", ')', ')', 'distance', '[', 'source', ']', '=', '0', 'while', 'unvisited', '!=', 'set', '(', ')', ':', 'closest', '=', 'min', '(', 'unvisited', ',', 'key', '=', 'lambda', 'v', ':', 'distance', '[', 'v', ']', ')', 'unvisited', '.', 'remove', '(', 'closest', ')', 'for', 'neighbour', 'in', 'closest', '.', 'get_neighbours', '(', ')', ':', 'if', 'neighbour', 'in', 'unvisited', ':', 'new_distance', '=', 'distance', '[', 'closest', ']', '+', 'closest', '.', 'get_weight', '(', 'neighbour', ')', 'if', 'distance', '[', 'neighbour', ']', '>', 'new_distance', ':', 'distance', '[', 'neighbour', ']', '=', 'new_distance', 'return', 'distance', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Undirected Graph'"", ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest> <weight>'"", ')', 'print', '(', ""'shortest <source vertex key>'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'weight', '=', 'int', '(', 'do', '[', '4', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ',', 'weight', ')', 'g', '.', 'add_edge', '(', 'dest', ',', 'src', ',', 'weight', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'shortest'"", ':', 'key', '=', 'int', '(', 'do', '[', '1', ']', ')', 'source', '=', 'g', '.', 'get_vertex', '(', 'key', ')', 'distance', '=', 'dijkstra', '(', 'g', ',', 'source', ')', 'print', '(', ""'Distances from {}: '"", '.', 'format', '(', 'key', ')', ')', 'for', 'v', 'in', 'distance', ':', 'print', '(', ""'Distance to {}: {}'"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'distance', '[', 'v', ']', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2971,"['define', 'function', 'convert', 'integer', 'string', 'print', 'console']","['Solution', 'def', 'printValue', '(', 'n', ')', ':', 'print', 'str', '(', 'n', ')', 'printValue', '(', '3', ')']"
2972,"['find', 'length', 'string', 'without', 'using', 'inbuilt', 'function']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'len', '=', '0', 'while', 'str', '[', 'len', ':', ']', ':', 'len', '+=', '1', 'print', '(', '""Your Enter String is:""', ',', 'len', ')']"
2973,"['write', 'program', 'filter', 'make', 'list', 'whose', 'element', 'even', 'number', 'included']","['Solution', 'evenNumbers', '=', 'filter', '(', 'lambda', 'x', ':', 'x', '%', '2', '==', '0', ',', 'range', '(', '1', ',', '21', ')', ')', 'print', 'evenNumbers']"
2974,"['define', 'function', 'accept', 'two', 'string', 'input', 'concatenate', 'print', 'console']","['Solution', 'def', 'printValue', '(', 's1', ',', 's2', ')', ':', 'print', 's1', '+', 's2', 'printValue', '(', '""3""', ',', '""4""', ')']"
2975,"['binary', 'decimal', 'conversion', 'using', 'recursion']","['def', 'BinaryToDecimal', '(', 'n', ')', ':', 'if', 'n', '==', '0', ':', 'return', '0', 'else', ':', 'return', '(', 'n', '%', '10', '+', '2', '*', 'BinaryToDecimal', '(', 'n', '//', '10', ')', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter the Binary Value:""', ')', ')', 'print', '(', '""Decimal Value of Binary number is:""', ',', 'BinaryToDecimal', '(', 'n', ')', ')']"
2976,"['python', 'program', 'convert', 'binary', 'gray', 'code']","['def', 'binary_to_gray', '(', 'n', ')', ':', '""""""Convert Binary to Gray codeword and return it.""""""', 'n', '=', 'int', '(', 'n', ',', '2', ')', 'n', '^=', '(', 'n', '>>', '1', ')', 'return', 'bin', '(', 'n', ')', '[', '2', ':', ']', 'g', '=', 'input', '(', ""'Enter binary number: '"", ')', 'b', '=', 'binary_to_gray', '(', 'g', ')', 'print', '(', ""'Gray codeword:'"", ',', 'b', ')']"
2977,"['program', 'convert', 'octal', 'binary']","['print', '(', '""Enter octal number: ""', ')', 'octal', '=', 'int', '(', 'input', '(', ')', ')', 'decimal', '=', '0', 'i', '=', '0', 'binary', '=', '0', 'while', '(', 'octal', '!=', '0', ')', ':', 'decimal', '=', 'decimal', '+', '(', 'octal', '%', '10', ')', '*', 'pow', '(', '8', ',', 'i', ')', 'i', '+=', '1', 'octal', '=', 'octal', '//', '10', 'i', '=', '1', 'while', '(', 'decimal', '!=', '0', ')', ':', 'binary', '=', 'binary', '+', '(', 'decimal', '%', '2', ')', '*', 'i', 'decimal', '=', 'decimal', '//', '2', 'i', '=', 'i', '*', '10', 'print', '(', '""Binary number is: ""', ',', 'binary', ')']"
2978,"['program', 'print', 'series', 'n']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number(Limit):""', ')', ')', 'i', '=', '0', 'pr', '=', '2', 'print', '(', '""2 ""', ',', 'end', '=', '""""', ')', 'while', 'i', '<', 'n', '-', '1', ':', 'pr', '=', '(', 'pr', '*', '2', ')', '-', 'i', 'print', '(', 'pr', ',', 'end', '=', '"" ""', ')', 'i', '+=', '1']"
2979,"['program', 'check', 'two', 'matrix', 'equal']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the 1st Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the 1st Matrix:""', ')', ')', 'row_size1', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the 1st Matrix:""', ')', ')', 'col_size1', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the 2nd Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the 1st Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'matrix1', '=', '[', ']', 'print', '(', '""Enter the 2nd Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix1', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'point', '=', '0', 'if', 'row_size', '==', 'row_size1', 'and', 'col_size', '==', 'col_size1', ':', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', 'matrix1', '[', 'i', ']', '[', 'j', ']', ':', 'point', '=', '1', 'break', 'else', ':', 'print', '(', '""Two matrices are not equal.""', ')', 'exit', '(', '0', ')', 'if', 'point', '==', '1', ':', 'print', '(', '""Two matrices are not equal.""', ')', 'else', ':', 'print', '(', '""Two matrices are equal.""', ')']"
2980,"['reverse', 'given', 'string', 'using', 'recursion']","['def', 'Reverse_String', '(', 'str', ')', ':', 'if', 'not', 'str', ':', 'return', 'str', 'else', ':', 'return', 'Reverse_String', '(', 'str', '[', '1', ':', ']', ')', '+', 'str', '[', '0', ']', 'str', '=', 'input', '(', '""Enter your String:""', ')', 'print', '(', '""After Reversing String is: ""', ',', 'Reverse_String', '(', 'str', ')', ')']"
2981,"['write', 'program', 'compute', 'factorial', 'given', 'number', 'result', 'printed', 'commaseparated', 'sequence', 'single', 'line']","['def', 'fact', '(', 'x', ')', ':', 'if', 'x', '==', '0', ':', 'return', '1', 'return', 'x', '*', 'fact', '(', 'x', '-', '1', ')', 'x', '=', 'int', '(', 'raw_input', '(', ')', ')', 'print', 'fact', '(', 'x', ')']"
2982,"['program', 'print', 'series', 'n']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number(Limit):""', ')', ')', 'i', '=', '4', 'if', 'n', '>=', '1', ':', 'print', '(', '""1 ""', ',', 'end', '=', '""""', ')', 'if', 'n', '>=', '2', ':', 'print', '(', '""2 ""', ',', 'end', '=', '""""', ')', 'if', 'n', '>=', '3', ':', 'print', '(', '""5 ""', ',', 'end', '=', '""""', ')', 'a', '=', '1', 'b', '=', '2', 'c', '=', '5', 'while', 'i', '<=', 'n', ':', 'd', '=', 'a', '+', 'b', '+', 'c', 'a', '=', 'b', 'b', '=', 'c', 'c', '=', 'd', 'print', '(', 'd', ',', 'end', '=', '"" ""', ')', 'i', '+=', '1']"
2983,"['python', 'program', 'find', 'power', 'number', 'using', 'recursion']","['def', 'power', '(', 'base', ',', 'exp', ')', ':', 'if', '(', 'exp', '==', '1', ')', ':', 'return', '(', 'base', ')', 'if', '(', 'exp', '!=', '1', ')', ':', 'return', '(', 'base', '*', 'power', '(', 'base', ',', 'exp', '-', '1', ')', ')', 'base', '=', 'int', '(', 'input', '(', '""Enter base: ""', ')', ')', 'exp', '=', 'int', '(', 'input', '(', '""Enter exponential value: ""', ')', ')', 'print', '(', '""Result:""', ',', 'power', '(', 'base', ',', 'exp', ')', ')']"
2984,"['python', 'program', 'check', 'expression', 'correctly', 'parenthesized']","['class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'push', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'pop', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', ')', 's', '=', 'Stack', '(', ')', 'exp', '=', 'input', '(', ""'Please enter the expression: '"", ')', 'for', 'c', 'in', 'exp', ':', 'if', 'c', '==', ""'('"", ':', 's', '.', 'push', '(', '1', ')', 'elif', 'c', '==', ""')'"", ':', 'if', 's', '.', 'is_empty', '(', ')', ':', 'is_balanced', '=', 'False', 'break', 's', '.', 'pop', '(', ')', 'else', ':', 'if', 's', '.', 'is_empty', '(', ')', ':', 'is_balanced', '=', 'True', 'else', ':', 'is_balanced', '=', 'False', 'if', 'is_balanced', ':', 'print', '(', ""'Expression is correctly parenthesized.'"", ')', 'else', ':', 'print', '(', ""'Expression is not correctly parenthesized.'"", ')']"
2985,"['count', 'many', 'vowel', 'present', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'count', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '==', ""'a'"", 'or', 'str', '[', 'i', ']', '==', ""'A'"", 'or', 'str', '[', 'i', ']', '==', ""'e'"", 'or', 'str', '[', 'i', ']', '==', ""'E'"", 'or', 'str', '[', 'i', ']', '==', ""'i'"", 'or', 'str', '[', 'i', ']', '==', ""'I'"", 'or', 'str', '[', 'i', ']', '==', ""'o'"", 'or', 'str', '[', 'i', ']', '==', ""'O'"", 'or', 'str', '[', 'i', ']', '==', ""'u'"", 'or', 'str', '[', 'i', ']', '==', ""'U'"", ':', 'count', '+=', '1', 'if', 'count', '==', '0', ':', 'print', '(', '""No vowels are present in the string.""', ')', 'else', ':', 'print', '(', '""Numbers of vowels present in the string are ""', ',', 'count', ')']"
2986,"['convert', 'octal', 'decimal', 'using', 'recursion']","['decimal', '=', '0', 'sem', '=', '0', 'def', 'OctalToDecimal', '(', 'n', ')', ':', 'global', 'sem', ',', 'decimal', 'if', '(', 'n', '!=', '0', ')', ':', 'decimal', '+=', '(', 'n', '%', '10', ')', '*', 'pow', '(', '8', ',', 'sem', ')', 'sem', '+=', '1', 'OctalToDecimal', '(', 'n', '//', '10', ')', 'return', 'decimaln', '=', 'int', '(', 'input', '(', '""Enter the Octal Value:""', ')', ')', 'print', '(', '""Decimal Value of Octal number is:""', ',', 'OctalToDecimal', '(', 'n', ')', ')']"
2987,"['python', 'program', 'find', 'largest', 'element', 'doubly', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'self', '.', 'prev', '=', 'None', 'class', 'DoublyLinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'first', '=', 'None', 'self', '.', 'last', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'insert_at_end', '(', 'Node', '(', 'data', ')', ')', 'def', 'insert_at_end', '(', 'self', ',', 'new_node', ')', ':', 'if', 'self', '.', 'last', 'is', 'None', ':', 'self', '.', 'last', '=', 'new_node', 'self', '.', 'first', '=', 'new_node', 'else', ':', 'new_node', '.', 'prev', '=', 'self', '.', 'last', 'self', '.', 'last', '.', 'next', '=', 'new_node', 'self', '.', 'last', '=', 'new_node', 'def', 'find_largest', '(', 'dllist', ')', ':', 'if', 'dllist', '.', 'first', 'is', 'None', ':', 'return', 'None', 'largest', '=', 'dllist', '.', 'first', '.', 'data', 'current', '=', 'dllist', '.', 'first', '.', 'next', 'while', 'current', ':', 'if', 'current', '.', 'data', '>', 'largest', ':', 'largest', '=', 'current', '.', 'data', 'current', '=', 'current', '.', 'next', 'return', 'largest', 'a_dllist', '=', 'DoublyLinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the doubly linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_dllist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'largest', '=', 'find_largest', '(', 'a_dllist', ')', 'if', 'largest', ':', 'print', '(', ""'The largest element is {}.'"", '.', 'format', '(', 'largest', ')', ')', 'else', ':', 'print', '(', ""'The list is empty.'"", ')']"
2988,"['python', 'program', 'find', 'undirected', 'graph', 'contains', 'cycle', 'using', 'dfs']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'add_undirected_edge', '(', 'self', ',', 'v1_key', ',', 'v2_key', ',', 'weight', '=', '1', ')', ':', '""""""Add undirected edge (2 directed edges) between v1_key and v2_key with\n        given weight.""""""', 'self', '.', 'add_edge', '(', 'v1_key', ',', 'v2_key', ',', 'weight', ')', 'self', '.', 'add_edge', '(', 'v2_key', ',', 'v1_key', ',', 'weight', ')', 'def', 'does_undirected_edge_exist', '(', 'self', ',', 'v1_key', ',', 'v2_key', ')', ':', '""""""Return True if there is an undirected edge between v1_key and v2_key.""""""', 'return', '(', 'self', '.', 'does_edge_exist', '(', 'v1_key', ',', 'v2_key', ')', 'and', 'self', '.', 'does_edge_exist', '(', 'v1_key', ',', 'v2_key', ')', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'is_cycle_present', '(', 'v', ',', 'visited', ')', ':', '""""""Return True if cycle is present in component containing vertex and put\n    all vertices in component in set visited.""""""', 'parent', '=', '{', 'v', ':', 'None', '}', 'return', 'is_cycle_present_helper', '(', 'v', ',', 'visited', ',', 'parent', ')', 'def', 'is_cycle_present_helper', '(', 'v', ',', 'visited', ',', 'parent', ')', ':', '""""""Return True if cycle is present in component containing vertex and put\n    all vertices in component in set visited. Uses dictionary parent to keep\n    track of parents of nodes in the DFS tree.""""""', 'visited', '.', 'add', '(', 'v', ')', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'if', 'dest', 'not', 'in', 'visited', ':', 'parent', '[', 'dest', ']', '=', 'v', 'if', 'is_cycle_present_helper', '(', 'dest', ',', 'visited', ',', 'parent', ')', ':', 'return', 'True', 'else', ':', 'if', 'parent', '[', 'v', ']', 'is', 'not', 'dest', ':', 'return', 'True', 'return', 'False', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Undirected Graph'"", ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <vertex1> <vertex2>'"", ')', 'print', '(', ""'cycle'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'v1', '=', 'int', '(', 'do', '[', '2', ']', ')', 'v2', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'v1', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'v1', ')', ')', 'elif', 'v2', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'v2', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_undirected_edge_exist', '(', 'v1', ',', 'v2', ')', ':', 'g', '.', 'add_undirected_edge', '(', 'v1', ',', 'v2', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'cycle'"", ':', 'present', '=', 'False', 'visited', '=', 'set', '(', ')', 'for', 'v', 'in', 'g', ':', 'if', 'v', 'not', 'in', 'visited', ':', 'if', 'is_cycle_present', '(', 'v', ',', 'visited', ')', ':', 'present', '=', 'True', 'break', 'if', 'present', ':', 'print', '(', ""'Cycle present.'"", ')', 'else', ':', 'print', '(', ""'Cycle not present.'"", ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2989,"['program', 'find', 'nth', 'spy', 'number']","['rangenumber', '=', 'int', '(', 'input', '(', '""Enter a Nth Number:""', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', 'c', '!=', 'rangenumber', ':', 'sum', '=', '0', 'mult', '=', '1', 'num1', '=', 'num', 'while', 'num1', '!=', '0', ':', 'rem', '=', 'num1', '%', '10', 'sum', '+=', 'rem', 'mult', '*=', 'rem', 'num1', '//=', '10', 'if', 'sum', '==', 'mult', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Spy number is ""', ',', 'letest', ')']"
2990,"['find', 'many', 'given', 'number']","[""'''Write a Python\nprogram\xa0to\xa0find out all How many 1 and 0 in a given number.\nor\xa0Write a program\xa0to\xa0find out all How many 1 and 0 in a given the number using Python '''"", 'print', '(', '""Enter a number:""', ')', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'c1', '=', '0', 'c0', '=', '0', 'while', 'int', '(', 'num', ')', ':', 'r', '=', 'num', '%', '10', 'num', '=', 'int', '(', 'num', '/', '10', ')', 'if', 'r', '==', '1', ':', 'c1', '=', 'c1', '+', '1', 'if', 'r', '==', '0', ':', 'c0', '=', 'c0', '+', '1', 'print', '(', '""The total number of zero\'s are ""', ',', 'c0', ')', 'print', '(', '""The total number of one\'s are ""', ',', 'c1', ')']"
2991,"['program', 'check', 'two', 'matrix', 'equal']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the 1st Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the 1st Matrix:""', ')', ')', 'row_size1', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the 1st Matrix:""', ')', ')', 'col_size1', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the 2nd Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the 1st Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'matrix1', '=', '[', ']', 'print', '(', '""Enter the 2nd Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix1', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'point', '=', '0', 'if', 'row_size', '==', 'row_size1', 'and', 'col_size', '==', 'col_size1', ':', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', 'matrix1', '[', 'i', ']', '[', 'j', ']', ':', 'point', '=', '1', 'break', 'else', ':', 'print', '(', '""Two matrices are not equal.""', ')', 'exit', '(', '0', ')', 'if', 'point', '==', '1', ':', 'print', '(', '""Two matrices are not equal.""', ')', 'else', ':', 'print', '(', '""Two matrices are equal.""', ')']"
2992,"['find', 'longest', 'word', 'string']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'sub_str', '=', 'str', '.', 'split', '(', '"" ""', ')', 'maxInd', '=', '0', 'max', '=', '0', 'max', '=', 'len', '(', 'sub_str', '[', '0', ']', ')', 'for', 'inn', 'in', 'range', '(', '0', ',', 'len', '(', 'sub_str', ')', ')', ':', 'len1', '=', 'len', '(', 'sub_str', '[', 'inn', ']', ')', 'if', 'len1', '>', 'max', ':', 'max', '=', 'len1', 'maxInd', '=', 'innprint', '(', '""Longest Substring(Word) is ""', ',', 'sub_str', '[', 'maxInd', ']', ')']"
2993,"['python', 'program', 'convert', 'gray', 'code', 'binary']","['def', 'gray_to_binary', '(', 'n', ')', ':', '""""""Convert Gray codeword to binary and return it.""""""', 'n', '=', 'int', '(', 'n', ',', '2', ')', 'mask', '=', 'n', 'while', 'mask', '!=', '0', ':', 'mask', '>>=', '1', 'n', '^=', 'mask', 'return', 'bin', '(', 'n', ')', '[', '2', ':', ']', 'g', '=', 'input', '(', ""'Enter Gray codeword: '"", ')', 'b', '=', 'gray_to_binary', '(', 'g', ')', 'print', '(', ""'In binary:'"", ',', 'b', ')']"
2994,"['python', 'program', 'implement', 'stack']","['class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'push', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'pop', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', ')', 's', '=', 'Stack', '(', ')', 'while', 'True', ':', 'print', '(', ""'push <value>'"", ')', 'print', '(', ""'pop'"", ')', 'print', '(', ""'quit'"", ')', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'push'"", ':', 's', '.', 'push', '(', 'int', '(', 'do', '[', '1', ']', ')', ')', 'elif', 'operation', '==', ""'pop'"", ':', 'if', 's', '.', 'is_empty', '(', ')', ':', 'print', '(', ""'Stack is empty.'"", ')', 'else', ':', 'print', '(', ""'Popped value: '"", ',', 's', '.', 'pop', '(', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
2995,"['python', 'program', 'solve', 'maximum', 'subarray', 'problem', 'using', 'divide', 'conquer']","['def', 'find_max_subarray', '(', 'alist', ',', 'start', ',', 'end', ')', ':', '""""""Returns (l, r, m) such that alist[l:r] is the maximum subarray in\n    A[start:end] with sum m. Here A[start:end] means all A[x] for start <= x <\n    end.""""""', 'if', 'start', '==', 'end', '-', '1', ':', 'return', 'start', ',', 'end', ',', 'alist', '[', 'start', ']', 'else', ':', 'mid', '=', '(', 'start', '+', 'end', ')', '//', '2', 'left_start', ',', 'left_end', ',', 'left_max', '=', 'find_max_subarray', '(', 'alist', ',', 'start', ',', 'mid', ')', 'right_start', ',', 'right_end', ',', 'right_max', '=', 'find_max_subarray', '(', 'alist', ',', 'mid', ',', 'end', ')', 'cross_start', ',', 'cross_end', ',', 'cross_max', '=', 'find_max_crossing_subarray', '(', 'alist', ',', 'start', ',', 'mid', ',', 'end', ')', 'if', '(', 'left_max', '>', 'right_max', 'and', 'left_max', '>', 'cross_max', ')', ':', 'return', 'left_start', ',', 'left_end', ',', 'left_max', 'elif', '(', 'right_max', '>', 'left_max', 'and', 'right_max', '>', 'cross_max', ')', ':', 'return', 'right_start', ',', 'right_end', ',', 'right_max', 'else', ':', 'return', 'cross_start', ',', 'cross_end', ',', 'cross_max', 'def', 'find_max_crossing_subarray', '(', 'alist', ',', 'start', ',', 'mid', ',', 'end', ')', ':', '""""""Returns (l, r, m) such that alist[l:r] is the maximum subarray within\n    alist with start <= l < mid <= r < end with sum m. The arguments start, mid,\n    end must satisfy start <= mid <= end.""""""', 'sum_left', '=', 'float', '(', ""'-inf'"", ')', 'sum_temp', '=', '0', 'cross_start', '=', 'mid', 'for', 'i', 'in', 'range', '(', 'mid', '-', '1', ',', 'start', '-', '1', ',', '-', '1', ')', ':', 'sum_temp', '=', 'sum_temp', '+', 'alist', '[', 'i', ']', 'if', 'sum_temp', '>', 'sum_left', ':', 'sum_left', '=', 'sum_temp', 'cross_start', '=', 'i', 'sum_right', '=', 'float', '(', ""'-inf'"", ')', 'sum_temp', '=', '0', 'cross_end', '=', 'mid', '+', '1', 'for', 'i', 'in', 'range', '(', 'mid', ',', 'end', ')', ':', 'sum_temp', '=', 'sum_temp', '+', 'alist', '[', 'i', ']', 'if', 'sum_temp', '>', 'sum_right', ':', 'sum_right', '=', 'sum_temp', 'cross_end', '=', 'i', '+', '1', 'return', 'cross_start', ',', 'cross_end', ',', 'sum_left', '+', 'sum_right', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', 'alist', '=', 'alist', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'start', ',', 'end', ',', 'maximum', '=', 'find_max_subarray', '(', 'alist', ',', '0', ',', 'len', '(', 'alist', ')', ')', 'print', '(', ""'The maximum subarray starts at index {}, ends at index {}'"", ""' and has sum {}.'"", '.', 'format', '(', 'start', ',', 'end', '-', '1', ',', 'maximum', ')', ')']"
2996,"['write', 'program', 'accepts', 'comma', 'separated', 'sequence', 'word', 'input', 'print', 'word', 'commaseparated', 'sequence', 'sorting', 'alphabetically']","['items', '=', '[', 'x', 'for', 'x', 'in', 'raw_input', '(', ')', '.', 'split', '(', ""','"", ')', ']', 'items', '.', 'sort', '(', ')', 'print', ""','"", '.', 'join', '(', 'items', ')']"
2997,"['program', 'calculate', 'lcm', 'two', 'number']","[""'''Write\na Python program\xa0to calculate the LCM of two numbers. or\xa0\n\n\n\n\xa0\xa0 Write a program\xa0to\xa0calculate the\nLCM of two numbers using Python '''"", 'print', '(', '""Enter two number to find L.C.M:""', ')', 'num1', '=', 'int', '(', 'input', '(', ')', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'n1', '=', 'num1', 'n2', '=', 'num2', 'while', '(', 'num1', '!=', 'num2', ')', ':', 'if', '(', 'num1', '>', 'num2', ')', ':', 'num1', '=', 'num1', '-', 'num2', 'else', ':', 'num2', '=', 'num2', '-', 'num1', 'lcm', '=', 'int', '(', '(', 'n1', '*', 'n2', ')', '/', 'num1', ')', 'print', '(', '""L.C.M is""', ',', 'lcm', ')']"
2998,"['count', 'inversion', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'count', '=', '0', 'print', '(', '""All the inversions are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', '-', '1', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '>', 'arr', '[', 'j', ']', ':', 'print', '(', '""(""', ',', 'arr', '[', 'i', ']', ',', '"",""', ',', 'arr', '[', 'j', ']', ',', '"")""', ')', 'count', '+=', '1', 'if', 'count', '==', '0', ':', 'print', '(', '""(0)""', ')', 'elif', 'count', '==', '0', ':', 'print', '(', '""\\nNumber of Inversions is ""', ',', 'count', ')', 'else', ':', 'print', '(', '""\\nNumber of Inversions are ""', ',', 'count', ')']"
2999,"['python', 'program', 'generate', 'dictionary', 'contains', 'number', 'n', 'form', 'xxx']","['n', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'd', '=', '{', 'x', ':', 'x', '*', 'x', 'for', 'x', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', '}', 'print', '(', 'd', ')']"
3000,"['python', 'program', 'reverse', 'string', 'without', 'using', 'recursion']","['a', '=', 'str', '(', 'input', '(', '""Enter a string: ""', ')', ')', 'print', '(', '""Reverse of the string is: ""', ')', 'print', '(', 'a', '[', ':', ':', '-', '1', ']', ')']"
3001,"['python', 'program', 'count', 'path', 'grid', 'hole', 'using', 'dynamic', 'programming', 'bottomup', 'approach']","['def', 'count_paths', '(', 'm', ',', 'n', ',', 'holes', ')', ':', '""""""Return number of paths from (0, 0) to (m, n) in an m x n grid.\n\xa0\n    holes is a list of tuples (x, y) where each tuple is a coordinate which is\n    blocked for a path.\n    """"""', 'paths', '=', '[', '[', '-', '1', ']', '*', '(', 'm', '+', '1', ')', 'for', '_', 'in', 'range', '(', 'n', '+', '1', ')', ']', 'if', '(', '0', ',', '0', ')', 'in', 'holes', ':', 'paths', '[', '0', ']', '[', '0', ']', '=', '0', 'else', ':', 'paths', '[', '0', ']', '[', '0', ']', '=', '1', 'for', 'x', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'if', '(', 'x', ',', '0', ')', 'in', 'holes', ':', 'paths', '[', 'x', ']', '[', '0', ']', '=', '0', 'else', ':', 'paths', '[', 'x', ']', '[', '0', ']', '=', 'paths', '[', 'x', '-', '1', ']', '[', '0', ']', 'for', 'y', 'in', 'range', '(', '1', ',', 'm', '+', '1', ')', ':', 'if', '(', '0', ',', 'y', ')', 'in', 'holes', ':', 'paths', '[', '0', ']', '[', 'y', ']', '=', '0', 'else', ':', 'paths', '[', '0', ']', '[', 'y', ']', '=', 'paths', '[', '0', ']', '[', 'y', '-', '1', ']', 'for', 'x', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'for', 'y', 'in', 'range', '(', '1', ',', 'm', '+', '1', ')', ':', 'if', '(', 'x', ',', 'y', ')', 'in', 'holes', ':', 'paths', '[', 'x', ']', '[', 'y', ']', '=', '0', 'else', ':', 'paths', '[', 'x', ']', '[', 'y', ']', '=', 'paths', '[', 'x', '-', '1', ']', '[', 'y', ']', '+', 'paths', '[', 'x', ']', '[', 'y', '-', '1', ']', 'return', 'paths', '[', 'n', ']', '[', 'm', ']', 'm', ',', 'n', '=', 'input', '(', ""'Enter m, n for the size of the m x n grid (m rows and n columns): '"", ')', '.', 'split', '(', ""','"", ')', 'm', '=', 'int', '(', 'm', ')', 'n', '=', 'int', '(', 'n', ')', 'print', '(', ""'Enter the coordinates of holes on each line (empty line to stop): '"", ')', 'holes', '=', '[', ']', 'while', 'True', ':', 'hole', '=', 'input', '(', ""''"", ')', 'if', 'not', 'hole', '.', 'strip', '(', ')', ':', 'break', 'hole', '=', 'hole', '.', 'split', '(', ""','"", ')', 'hole', '=', '(', 'int', '(', 'hole', '[', '0', ']', ')', ',', 'int', '(', 'hole', '[', '1', ']', ')', ')', 'holes', '.', 'append', '(', 'hole', ')', 'count', '=', 'count_paths', '(', 'm', ',', 'n', ',', 'holes', ')', 'print', '(', ""'Number of paths from (0, 0) to ({}, {}): {}.'"", '.', 'format', '(', 'n', ',', 'm', ',', 'count', ')', ')']"
3002,"['python', 'program', 'read', 'height', 'centimeter', 'convert', 'height', 'foot', 'inch']","['cm', '=', 'int', '(', 'input', '(', '""Enter the height in centimeters:""', ')', ')', 'inches', '=', '0.394', '*', 'cm', 'feet', '=', '0.0328', '*', 'cm', 'print', '(', '""The length in inches""', ',', 'round', '(', 'inches', ',', '2', ')', ')', 'print', '(', '""The length in feet""', ',', 'round', '(', 'feet', ',', '2', ')', ')']"
3003,"['please', 'write', 'program', 'output', 'random', 'number', 'divisible', 'inclusive', 'using', 'random', 'module', 'list', 'comprehension']","['import', 'random', 'print', 'random', '.', 'choice', '(', '[', 'i', 'for', 'i', 'in', 'range', '(', '201', ')', 'if', 'i', '%', '5', '==', '0', 'and', 'i', '%', '7', '==', '0', ']', ')']"
3004,"['python', 'program', 'read', 'content', 'file']","['a', '=', 'str', '(', 'input', '(', '""Enter the name of the file with .txt extension:""', ')', ')', 'file2', '=', 'open', '(', 'a', ',', ""'r'"", ')', 'line', '=', 'file2', '.', 'readline', '(', ')', 'while', '(', 'line', '!=', '""""', ')', ':', 'print', '(', 'line', ')', 'line', '=', 'file2', '.', 'readline', '(', ')', 'file2', '.', 'close', '(', ')']"
3005,"['please', 'write', 'program', 'using', 'generator', 'print', 'even', 'number', 'n', 'comma', 'separated', 'form', 'n', 'input', 'console']","['def', 'EvenGenerator', '(', 'n', ')', ':', 'i', '=', '0', 'while', 'i', '<=', 'n', ':', 'if', 'i', '%', '2', '==', '0', ':', 'yield', 'i', 'i', '+=', '1', 'n', '=', 'int', '(', 'raw_input', '(', ')', ')', 'values', '=', '[', ']', 'for', 'i', 'in', 'EvenGenerator', '(', 'n', ')', ':', 'values', '.', 'append', '(', 'str', '(', 'i', ')', ')', 'print', '"",""', '.', 'join', '(', 'values', ')']"
3006,"['define', 'function', 'receive', 'two', 'integral', 'number', 'string', 'form', 'compute', 'sum', 'print', 'console']","['Solution', 'def', 'printValue', '(', 's1', ',', 's2', ')', ':', 'print', 'int', '(', 's1', ')', '+', 'int', '(', 's2', ')', 'printValue', '(', '""3""', ',', '""4""', ')']"
3007,"['using', 'list', 'comprehension', 'please', 'write', 'program', 'print', 'list', 'removing', 'number']","['li', '=', '[', '12', ',', '24', ',', '35', ',', '70', ',', '88', ',', '120', ',', '155', ']', 'li', '=', '[', 'x', 'for', '(', 'i', ',', 'x', ')', 'in', 'enumerate', '(', 'li', ')', 'if', 'i', 'not', 'in', '(', '0', ',', '4', ',', '5', ')', ']', 'print', 'li']"
3008,"['print', 'full', 'inverted', 'pyramid', 'alphabet', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'np', '=', 'row_size', '*', '2', '-', '1', 'for', 'out', 'in', 'range', '(', 'row_size', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', 'row_size', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', '0', ',', 'np', ')', ':', 'print', '(', '(', 'chr', ')', '(', 'out', '+', '65', ')', ',', 'end', '=', '""""', ')', 'np', '-=', '2', 'print', '(', '""\\r""', ')']"
3009,"['please', 'write', 'program', 'accepts', 'basic', 'mathematic', 'expression', 'console', 'print', 'evaluation', 'result']","['expression', '=', 'raw_input', '(', ')', 'print', 'eval', '(', 'expression', ')']"
3010,"['print', 'vowel', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '==', ""'a'"", 'or', 'str', '[', 'i', ']', '==', ""'A'"", 'or', 'str', '[', 'i', ']', '==', ""'e'"", 'or', 'str', '[', 'i', ']', '==', ""'E'"", 'or', 'str', '[', 'i', ']', '==', ""'i'"", 'or', 'str', '[', 'i', ']', '==', ""'I'"", 'or', 'str', '[', 'i', ']', '==', ""'o'"", 'or', 'str', '[', 'i', ']', '==', ""'O'"", 'or', 'str', '[', 'i', ']', '==', ""'u'"", 'or', 'str', '[', 'i', ']', '==', ""'U'"", ':', 'print', '(', 'str', '[', 'i', ']', ',', 'end', '=', '"" ""', ')']"
3011,"['python', 'program', 'merge', 'two', 'list', 'sort']","['a', '=', '[', ']', 'c', '=', '[', ']', 'n1', '=', 'int', '(', 'input', '(', '""Enter number of elements:""', ')', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n1', '+', '1', ')', ':', 'b', '=', 'int', '(', 'input', '(', '""Enter element:""', ')', ')', 'a', '.', 'append', '(', 'b', ')', 'n2', '=', 'int', '(', 'input', '(', '""Enter number of elements:""', ')', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n2', '+', '1', ')', ':', 'd', '=', 'int', '(', 'input', '(', '""Enter element:""', ')', ')', 'c', '.', 'append', '(', 'd', ')', 'new', '=', 'a', '+', 'c', 'new', '.', 'sort', '(', ')', 'print', '(', '""Sorted list is:""', ',', 'new', ')']"
3012,"['max', 'sum', 'contiguous', 'subarray']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'Maximum_Sum', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', ',', 'size', ')', ':', 'sum', '=', '0', 'for', 'p', 'in', 'range', '(', 'i', ',', 'j', ')', ':', 'sum', '+=', 'arr', '[', 'p', ']', 'if', 'sum', '>=', 'Maximum_Sum', ':', 'Maximum_Sum', '=', 'sumprint', '(', '""Maximum sum of Contiguous Subarray is ""', ',', 'Maximum_Sum', ')']"
3013,"['python', 'program', 'find', 'number', 'odd', 'palindrome', 'range', 'number', 'without', 'using', 'recursion']","['a', '=', '[', ']', 'l', '=', 'int', '(', 'input', '(', '""Enter lower limit: ""', ')', ')', 'u', '=', 'int', '(', 'input', '(', '""Enter upper limit: ""', ')', ')', 'a', '=', '[', 'x', 'for', 'x', 'in', 'range', '(', 'l', ',', 'u', '+', '1', ')', 'if', 'x', '%', '2', '!=', '0', 'and', 'str', '(', 'x', ')', '==', 'str', '(', 'x', ')', '[', ':', ':', '-', '1', ']', ']', 'print', '(', '""The numbers are: ""', ',', 'a', ')']"
3014,"['program', 'print', 'cube', 'number', 'series']","['print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'i', '=', '1', 'while', '(', 'i', '<=', 'n', ')', ':', 'print', '(', 'i', '*', 'i', '*', 'i', ',', 'end', '=', '"" ""', ')', 'i', '+=', '1']"
3015,"['python', 'program', 'implement', 'merge', 'sort']","['def', 'merge_sort', '(', 'alist', ',', 'start', ',', 'end', ')', ':', ""'''Sorts the list from indexes start to end - 1 inclusive.'''"", 'if', 'end', '-', 'start', '>', '1', ':', 'mid', '=', '(', 'start', '+', 'end', ')', '//', '2', 'merge_sort', '(', 'alist', ',', 'start', ',', 'mid', ')', 'merge_sort', '(', 'alist', ',', 'mid', ',', 'end', ')', 'merge_list', '(', 'alist', ',', 'start', ',', 'mid', ',', 'end', ')', 'def', 'merge_list', '(', 'alist', ',', 'start', ',', 'mid', ',', 'end', ')', ':', 'left', '=', 'alist', '[', 'start', ':', 'mid', ']', 'right', '=', 'alist', '[', 'mid', ':', 'end', ']', 'k', '=', 'start', 'i', '=', '0', 'j', '=', '0', 'while', '(', 'start', '+', 'i', '<', 'mid', 'and', 'mid', '+', 'j', '<', 'end', ')', ':', 'if', '(', 'left', '[', 'i', ']', '<=', 'right', '[', 'j', ']', ')', ':', 'alist', '[', 'k', ']', '=', 'left', '[', 'i', ']', 'i', '=', 'i', '+', '1', 'else', ':', 'alist', '[', 'k', ']', '=', 'right', '[', 'j', ']', 'j', '=', 'j', '+', '1', 'k', '=', 'k', '+', '1', 'if', 'start', '+', 'i', '<', 'mid', ':', 'while', 'k', '<', 'end', ':', 'alist', '[', 'k', ']', '=', 'left', '[', 'i', ']', 'i', '=', 'i', '+', '1', 'k', '=', 'k', '+', '1', 'else', ':', 'while', 'k', '<', 'end', ':', 'alist', '[', 'k', ']', '=', 'right', '[', 'j', ']', 'j', '=', 'j', '+', '1', 'k', '=', 'k', '+', '1', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'merge_sort', '(', 'alist', ',', '0', ',', 'len', '(', 'alist', ')', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'alist', ')']"
3016,"['program', 'reverse', 'string', 'without', 'using', 'reverse', 'function']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'print', '(', '""After Reversing String is :""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', '-', '1', ',', '-', '1', ',', '-', '1', ')', ':', 'print', '(', 'str', '[', 'i', ']', ',', 'end', '=', '""""', ')']"
3017,"['write', 'program', 'map', 'make', 'list', 'whose', 'element', 'square', 'number', 'included']","['Solution', 'squaredNumbers', '=', 'map', '(', 'lambda', 'x', ':', 'x', '**', '2', ',', 'range', '(', '1', ',', '21', ')', ')', 'print', 'squaredNumbers']"
3018,"['program', 'find', 'sum', 'series']","['print', '(', '""Enter the range of number:""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum', '+=', 'i', '*', 'i', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3019,"['program', 'find', 'transpose', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'tran_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'tran_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'j', ']', '[', 'i', ']', 'print', '(', '""Transpose of the Given Matrix is:""', ')', 'for', 'm', 'in', 'tran_matrix', ':', 'print', '(', 'm', ')']"
3020,"['program', 'find', 'biggest', 'three', 'number']","['print', '(', '""Enter 3 numbers:""', ')', 'num1', '=', 'int', '(', 'input', '(', ')', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'num3', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""The biggest number is ""', ',', 'max', '(', 'num1', ',', 'num2', ',', 'num3', ')', ')']"
3021,"['python', 'program', 'form', 'integer', 'number', 'digit', 'ten', 'place', 'least', 'significant', 'digit', 'entered', 'integer', 'one', 'place']","['n', '=', 'int', '(', 'input', '(', '""Enter the number:""', ')', ')', 'tmp', '=', 'n', 'k', '=', '0', 'while', '(', 'n', '>', '0', ')', ':', 'k', '=', 'k', '+', '1', 'n', '=', 'n', '//', '10', 'b', '=', 'str', '(', 'tmp', ')', 'c', '=', 'str', '(', 'k', ')', 'd', '=', 'c', '+', 'b', '[', 'k', '-', '1', ']', 'print', '(', '""The new number formed:""', ',', 'int', '(', 'd', ')', ')']"
3022,"['define', 'function', 'generate', 'print', 'list', 'value', 'square', 'number', 'included']","['Solution', 'def', 'printList', '(', ')', ':', 'li', '=', 'list', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '21', ')', ':', 'li', '.', 'append', '(', 'i', '**', '2', ')', 'print', 'li', 'printList', '(', ')']"
3023,"['multiply', 'two', 'number', 'using', 'recursion']","['def', 'Multiplication', '(', 'num1', ',', 'num2', ')', ':', 'if', 'num1', '<', 'num2', ':', 'return', 'Multiplication', '(', 'num2', ',', 'num1', ')', 'elif', 'num2', '!=', '0', ':', 'return', 'num1', '+', 'Multiplication', '(', 'num1', ',', 'num2', '-', '1', ')', 'else', ':', 'return', '0', 'print', '(', '""Enter the two Number:""', ')', 'num1', '=', 'int', '(', 'input', '(', ')', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Multiplication of Two Number Using Recursion is: ""', ',', 'Multiplication', '(', 'num1', ',', 'num2', ')', ')']"
3024,"['write', 'cjavacpython', 'program', 'compute']","['n', '=', 'int', '(', 'input', '(', '""Enter the n value:""', ')', ')', 'fact', '=', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'fact', '*=', 'i', 'result', '=', '1.0', '/', 'fact', 'print', '(', '""1/n!= ""', ',', 'result', ')']"
3025,"['program', 'print', 'solid', 'half', 'diamond', 'star', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '-', '(', 'row_size', '-', '1', ')', ',', '-', '1', ')', ':', 'for', 'i', 'in', 'range', '(', '(', 'row_size', ')', ',', 'abs', '(', 'out', '-', '1', ')', ',', '-', '1', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
3026,"['define', 'class', 'least', 'two', 'method', 'getstring', 'get', 'string', 'console', 'input', 'printstring', 'print', 'string', 'upper', 'case', 'also', 'please', 'include', 'simple', 'test', 'function', 'test', 'class', 'method']","['class', 'InputOutString', '(', 'object', ')', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 's', '=', '""""', 'def', 'getString', '(', 'self', ')', ':', 'self', '.', 's', '=', 'raw_input', '(', ')', 'def', 'printString', '(', 'self', ')', ':', 'print', 'self', '.', 's', '.', 'upper', '(', ')', 'strObj', '=', 'InputOutString', '(', ')', 'strObj', '.', 'getString', '(', ')', 'strObj', '.', 'printString', '(', ')']"
3027,"['count', 'number', 'digit', 'number', 'using', 'recursion']","['count', '=', '0', 'def', 'count_digit', '(', 'num', ')', ':', 'global', 'count', 'if', '(', 'num', '!=', '0', ')', ':', 'count', '+=', '1', 'count_digit', '(', 'num', '//', '10', ')', 'return', 'countn', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'print', '(', '""The number of digits in the Given Number is ""', ',', 'count_digit', '(', 'n', ')', ')']"
3028,"['program', 'print', 'hollow', 'rectangle', 'star', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'print_control_x', '=', 'row_size', '//', '2', '+', '1', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'if', '(', 'inn', '==', '1', 'or', 'inn', '==', 'row_size', ')', 'or', '(', 'out', '==', '1', 'or', 'out', '==', 'row_size', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
3029,"['program', 'check', 'two', 'string', 'anagram']","['str', '=', 'input', '(', '""Enter the 1st String:""', ')', 'str2', '=', 'input', '(', '""Enter the 2nd String:""', ')', 'if', 'len', '(', 'str', ')', '!=', 'len', '(', 'str2', ')', ':', 'print', '(', '""Strings are not an Anagrams.""', ')', 'else', ':', 'count', '=', '0', 'str3', '=', ""''"", '.', 'join', '(', 'sorted', '(', 'str', ')', ')', 'str4', '=', ""''"", '.', 'join', '(', 'sorted', '(', 'str2', ')', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str3', '[', 'i', ']', '!=', 'str4', '[', 'i', ']', ':', 'count', '=', '1', 'if', 'count', '==', '1', ':', 'print', '(', '""Input strings are not an anagram""', ')', 'else', ':', 'print', '(', '""Input strings are an anagram""', ')']"
3030,"['python', 'program', 'implement', 'introsort']","['def', 'introsort', '(', 'alist', ')', ':', 'maxdepth', '=', '(', 'len', '(', 'alist', ')', '.', 'bit_length', '(', ')', '-', '1', ')', '*', '2', 'introsort_helper', '(', 'alist', ',', '0', ',', 'len', '(', 'alist', ')', ',', 'maxdepth', ')', 'def', 'introsort_helper', '(', 'alist', ',', 'start', ',', 'end', ',', 'maxdepth', ')', ':', 'if', 'end', '-', 'start', '<=', '1', ':', 'return', 'elif', 'maxdepth', '==', '0', ':', 'heapsort', '(', 'alist', ',', 'start', ',', 'end', ')', 'else', ':', 'p', '=', 'partition', '(', 'alist', ',', 'start', ',', 'end', ')', 'introsort_helper', '(', 'alist', ',', 'start', ',', 'p', '+', '1', ',', 'maxdepth', '-', '1', ')', 'introsort_helper', '(', 'alist', ',', 'p', '+', '1', ',', 'end', ',', 'maxdepth', '-', '1', ')', 'def', 'partition', '(', 'alist', ',', 'start', ',', 'end', ')', ':', 'pivot', '=', 'alist', '[', 'start', ']', 'i', '=', 'start', '-', '1', 'j', '=', 'end', 'while', 'True', ':', 'i', '=', 'i', '+', '1', 'while', 'alist', '[', 'i', ']', '<', 'pivot', ':', 'i', '=', 'i', '+', '1', 'j', '=', 'j', '-', '1', 'while', 'alist', '[', 'j', ']', '>', 'pivot', ':', 'j', '=', 'j', '-', '1', 'if', 'i', '>=', 'j', ':', 'return', 'j', 'swap', '(', 'alist', ',', 'i', ',', 'j', ')', 'def', 'swap', '(', 'alist', ',', 'i', ',', 'j', ')', ':', 'alist', '[', 'i', ']', ',', 'alist', '[', 'j', ']', '=', 'alist', '[', 'j', ']', ',', 'alist', '[', 'i', ']', 'def', 'heapsort', '(', 'alist', ',', 'start', ',', 'end', ')', ':', 'build_max_heap', '(', 'alist', ',', 'start', ',', 'end', ')', 'for', 'i', 'in', 'range', '(', 'end', '-', '1', ',', 'start', ',', '-', '1', ')', ':', 'swap', '(', 'alist', ',', 'start', ',', 'i', ')', 'max_heapify', '(', 'alist', ',', 'index', '=', '0', ',', 'start', '=', 'start', ',', 'end', '=', 'i', ')', 'def', 'build_max_heap', '(', 'alist', ',', 'start', ',', 'end', ')', ':', 'def', 'parent', '(', 'i', ')', ':', 'return', '(', 'i', '-', '1', ')', '//', '2', 'length', '=', 'end', '-', 'start', 'index', '=', 'parent', '(', 'length', '-', '1', ')', 'while', 'index', '>=', '0', ':', 'max_heapify', '(', 'alist', ',', 'index', ',', 'start', ',', 'end', ')', 'index', '=', 'index', '-', '1', 'def', 'max_heapify', '(', 'alist', ',', 'index', ',', 'start', ',', 'end', ')', ':', 'def', 'left', '(', 'i', ')', ':', 'return', '2', '*', 'i', '+', '1', 'def', 'right', '(', 'i', ')', ':', 'return', '2', '*', 'i', '+', '2', 'size', '=', 'end', '-', 'start', 'l', '=', 'left', '(', 'index', ')', 'r', '=', 'right', '(', 'index', ')', 'if', '(', 'l', '<', 'size', 'and', 'alist', '[', 'start', '+', 'l', ']', '>', 'alist', '[', 'start', '+', 'index', ']', ')', ':', 'largest', '=', 'l', 'else', ':', 'largest', '=', 'index', 'if', '(', 'r', '<', 'size', 'and', 'alist', '[', 'start', '+', 'r', ']', '>', 'alist', '[', 'start', '+', 'largest', ']', ')', ':', 'largest', '=', 'r', 'if', 'largest', '!=', 'index', ':', 'swap', '(', 'alist', ',', 'start', '+', 'largest', ',', 'start', '+', 'index', ')', 'max_heapify', '(', 'alist', ',', 'largest', ',', 'start', ',', 'end', ')', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'introsort', '(', 'alist', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'alist', ')']"
3031,"['python', 'program', 'search', 'number', 'time', 'particular', 'number', 'occurs', 'list']","['a', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter number of elements:""', ')', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'b', '=', 'int', '(', 'input', '(', '""Enter element:""', ')', ')', 'a', '.', 'append', '(', 'b', ')', 'k', '=', '0', 'num', '=', 'int', '(', 'input', '(', '""Enter the number to be counted:""', ')', ')', 'for', 'j', 'in', 'a', ':', 'if', '(', 'j', '==', 'num', ')', ':', 'k', '=', 'k', '+', '1', 'print', '(', '""Number of times""', ',', 'num', ',', '""appears is""', ',', 'k', ')']"
3032,"['print', 'perfect', 'square', 'number', 'given', 'range']","['import', 'math', 'print', '(', '""Enter range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Perfect squares between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'sqr', '=', 'math', '.', 'sqrt', '(', 'i', ')', 'if', 'sqr', '-', 'math', '.', 'floor', '(', 'sqr', ')', '==', '0', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
3033,"['find', 'maximum', 'minimum', 'element', 'array', 'using', 'recursion']","['import', 'sysdef', 'FindMax', '(', 'arr', ',', 'n', ')', ':', 'if', 'n', '==', '1', ':', 'return', 'arr', '[', '0', ']', 'return', 'max', '(', 'arr', '[', 'n', '-', '1', ']', ',', 'FindMax', '(', 'arr', ',', 'n', '-', '1', ')', ')', 'def', 'FindMin', '(', 'arr', ',', 'n', ')', ':', 'if', 'n', '==', '1', ':', 'return', 'arr', '[', '0', ']', 'return', 'min', '(', 'arr', '[', 'n', '-', '1', ']', ',', 'FindMin', '(', 'arr', ',', 'n', '-', '1', ')', ')', 'arr', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Maximum Element of the array is: ""', ',', 'FindMax', '(', 'arr', ',', 'len', '(', 'arr', ')', ')', ')', 'print', '(', '""Minimum Element of the array is: ""', ',', 'FindMin', '(', 'arr', ',', 'len', '(', 'arr', ')', ')', ')']"
3034,"['write', 'program', 'print', 'alphabet', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', ';', 'row_size', '=', 'input', '(', ')', 'for', 'out', 'in', 'range', '(', 'ord', '(', 'row_size', ')', ',', 'ord', '(', ""'A'"", ')', '-', '1', ',', '-', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'ord', '(', 'row_size', ')', ',', 'ord', '(', ""'A'"", ')', '-', '1', ',', '-', '1', ')', ':', 'print', '(', 'chr', '(', 'i', ')', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\r""', ')']"
3035,"['capitalize', 'first', 'letter', 'word', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'j', '=', '0', 'newStr', '=', '""""', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'i', '==', '0', 'or', 'str', '[', 'i', '-', '1', ']', '==', ""' '"", ':', 'ch', '=', 'str', '[', 'i', ']', '.', 'upper', '(', ')', 'newStr', '+=', 'ch', 'else', ':', 'newStr', '=', 'newStr', '+', 'str', '[', 'i', ']', 'print', '(', '""Your String is:""', ',', 'newStr', ')']"
3036,"['python', 'program', 'compute', 'polynomial', 'equation', 'given', 'coefficient', 'polynomial', 'stored', 'list']","['import', 'math', 'print', '(', '""Enter the coefficients of the form ax^3 + bx^2 + cx + d""', ')', 'lst', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '0', ',', '4', ')', ':', 'a', '=', 'int', '(', 'input', '(', '""Enter coefficient:""', ')', ')', 'lst', '.', 'append', '(', 'a', ')', 'x', '=', 'int', '(', 'input', '(', '""Enter the value of x:""', ')', ')', 'sum1', '=', '0', 'j', '=', '3', 'for', 'i', 'in', 'range', '(', '0', ',', '3', ')', ':', 'while', '(', 'j', '>', '0', ')', ':', 'sum1', '=', 'sum1', '+', '(', 'lst', '[', 'i', ']', '*', 'math', '.', 'pow', '(', 'x', ',', 'j', ')', ')', 'break', 'j', '=', 'j', '-', '1', 'sum1', '=', 'sum1', '+', 'lst', '[', '3', ']', 'print', '(', '""The value of the polynomial is:""', ',', 'sum1', ')']"
3037,"['write', 'program', 'accepts', 'string', 'input', 'print', 'yes', 'string', 'yes', 'yes', 'yes', 'otherwise', 'print']","['Solution', 's', '=', 'raw_input', '(', ')', 'if', 's', '==', '""yes""', 'or', 's', '==', '""YES""', 'or', 's', '==', '""Yes""', ':', 'print', '""Yes""', 'else', ':', 'print', '""No""']"
3038,"['convert', 'uppercase', 'lowercase', 'using', 'string', 'function']","['str', '=', 'input', '(', '""Enter the String(Upper case):""', ')', 'print', '(', '""Lower case String is:""', ',', 'str', '.', 'lower', '(', ')', ')']"
3039,"['program', 'print', 'inverted', 'pyramid', 'star', 'pattern']","['print', '(', '""Enter the row size:""', ')', 'row_size', '=', 'int', '(', 'input', '(', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', '+', '1', ')', ':', 'for', 'j', 'in', 'range', '(', 'out', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', 'row_size', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', '""* ""', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
3040,"['python', 'program', 'find', 'sum', 'node', 'binary', 'tree']","['class', 'BinaryTree', ':', 'def', '__init__', '(', 'self', ',', 'key', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'def', 'set_root', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'def', 'inorder', '(', 'self', ')', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'inorder', '(', ')', 'print', '(', 'self', '.', 'key', ',', 'end', '=', ""' '"", ')', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'right', '.', 'inorder', '(', ')', 'def', 'insert_left', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'left', '=', 'new_node', 'def', 'insert_right', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'right', '=', 'new_node', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'left', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'right', '.', 'search', '(', 'key', ')', 'return', 'temp', 'return', 'None', 'def', 'sum_nodes', '(', 'node', ')', ':', 'if', 'node', 'is', 'None', ':', 'return', '0', 'return', 'node', '.', 'key', '+', 'sum_nodes', '(', 'node', '.', 'left', ')', '+', 'sum_nodes', '(', 'node', '.', 'right', ')', 'btree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'insert <data> at root'"", ')', 'print', '(', ""'insert <data> left of <data>'"", ')', 'print', '(', ""'insert <data> right of <data>'"", ')', 'print', '(', ""'sum'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'print', '(', ""'inorder traversal of binary tree: '"", ',', 'end', '=', ""''"", ')', 'if', 'btree', 'is', 'not', 'None', ':', 'btree', '.', 'inorder', '(', ')', 'print', '(', ')', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'BinaryTree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'btree', '=', 'new_node', 'else', ':', 'position', '=', 'do', '[', '4', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'btree', 'is', 'not', 'None', ':', 'ref_node', '=', 'btree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'if', 'suboperation', '==', ""'left'"", ':', 'ref_node', '.', 'insert_left', '(', 'new_node', ')', 'elif', 'suboperation', '==', ""'right'"", ':', 'ref_node', '.', 'insert_right', '(', 'new_node', ')', 'elif', 'operation', '==', ""'sum'"", ':', 'print', '(', ""'Sum of nodes in tree: {}'"", '.', 'format', '(', 'sum_nodes', '(', 'btree', ')', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3041,"['find', 'sum', 'even', 'number', 'using', 'recursion', 'array']","['sum', '=', '0', 'def', 'SumOfEvenElement', '(', 'arr', ',', 'n', ')', ':', 'global', 'sum', 'if', '(', 'n', '>', '0', ')', ':', 'i', '=', 'n', '-', '1', 'if', '(', 'arr', '[', 'i', ']', '%', '2', '==', '0', ')', ':', 'sum', '=', 'sum', '+', 'arr', '[', 'i', ']', 'SumOfEvenElement', '(', 'arr', ',', 'i', ')', 'return', 'sumarr', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Sum of even Element is:""', ',', 'SumOfEvenElement', '(', 'arr', ',', 'n', ')', ')']"
3042,"['write', 'program', 'read', 'ascii', 'string', 'convert', 'unicode', 'string', 'encoded']","['s', '=', 'raw_input', '(', ')', 'u', '=', 'unicode', '(', 's', ',', '""utf-8""', ')', 'print', 'u']"
3043,"['program', 'find', 'sum', 'lower', 'triangular', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '<', 'j', ':', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Sum of Lower Triangular Matrix Elements is: ""', ',', 'sum', ')']"
3044,"['program', 'print', 'inverted', 'half', 'pyramid', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '0', ',', '-', '1', ')', ':', 'for', 'in1', 'in', 'range', '(', 'row_size', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'in2', 'in', 'range', '(', '1', ',', 'out', '+', '1', ')', ':', 'print', '(', 'in2', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
3045,"['find', 'median', 'two', 'unsorted', 'array']","['def', 'Find_median', '(', 'arr', ',', 'arr2', ',', 'size', ',', 'size2', ')', ':', 'm_size', '=', 'size', '+', 'size2', 'merge_arr', '=', '[', '0', ']', '*', 'm_size', 'i', '=', '0', 'k', '=', '0', 'j', '=', '0', 'while', 'k', '<', 'm_size', ':', 'if', 'i', '<', 'size', ':', 'merge_arr', '[', 'k', ']', '=', 'arr', '[', 'i', ']', 'i', '+=', '1', 'k', '+=', '1', 'if', 'j', '<', 'size2', ':', 'merge_arr', '[', 'k', ']', '=', 'arr2', '[', 'j', ']', 'j', '+=', '1', 'k', '+=', '1', 'merge_arr', '.', 'sort', '(', ')', 'if', 'size', '%', '2', '==', '1', ':', 'median', '=', 'merge_arr', '[', 'size', '//', '2', ']', 'print', '(', '""\\nMedian= ""', ',', 'median', ')', 'else', ':', 'median', '=', '(', 'merge_arr', '[', 'm_size', '//', '2', ']', '+', '(', 'merge_arr', '[', '(', 'm_size', '//', '2', ')', '-', '1', ']', ')', ')', '/', '2.0', 'print', '(', '""\\nMedian= ""', ',', 'median', ')', 'arr', '=', '[', ']', 'arr2', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the 1st array: ""', ')', ')', 'size2', '=', 'int', '(', 'input', '(', '""Enter the size of the 2nd array: ""', ')', ')', 'print', '(', '""Enter the Element of the 1st array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Enter the Element of the 2nd array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size2', ')', ':', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'arr2', '.', 'append', '(', 'num2', ')', 'Find_median', '(', 'arr', ',', 'arr2', ',', 'size', ',', 'size2', ')']"
3046,"['program', 'find', 'multiplication', 'two', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'matrix1', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix1', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum', '=', '0', 'mul_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'for', 'k', 'in', 'range', '(', 'row_size', ')', ':', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', '*', 'matrix1', '[', 'i', ']', '[', 'j', ']', 'mul_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'sum', 'print', '(', '""Multiplication of the two Matrices is:""', ')', 'for', 'm', 'in', 'mul_matrix', ':', 'print', '(', 'm', ')']"
3047,"['python', 'program', 'print', 'integer', 'arent', 'divisible', 'either', 'lie']","['for', 'i', 'in', 'range', '(', '0', ',', '51', ')', ':', 'if', '(', 'i', '%', '2', '!=', '0', '&', 'i', '%', '3', '!=', '0', ')', ':', 'print', '(', 'i', ')']"
3048,"['program', 'find', 'surface', 'area', 'volume', 'sphere']","['radius', '=', 'int', '(', 'input', '(', '""Enter radius of a sphere :""', ')', ')', 'surfaceArea', '=', '4', '*', '3.14', '*', 'radius', '*', 'radius', 'volume', '=', '(', '4', '/', '3', ')', '*', '3.14', '*', 'radius', '*', 'radius', '*', 'radius', 'print', '(', '""Surface Area of the sphere =""', ',', 'surfaceArea', ')', 'print', '(', '""Volume of the sphere =""', ',', 'volume', ')']"
3049,"['find', 'neon', 'number', 'present', 'within', 'given', 'range']","['print', '(', '""Enter a range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Neon numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'sqr', '=', 'i', '*', 'i', 'sum', '=', '0', 'while', 'sqr', '!=', '0', ':', 'rem', '=', 'sqr', '%', '10', 'sum', '+=', 'rem', 'sqr', '//=', '10', 'if', 'sum', '==', 'i', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
3050,"['find', 'first', 'capital', 'letter', 'given', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'ch', '=', ""' '"", 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '>=', ""'A'"", 'and', 'str', '[', 'i', ']', '<=', ""'Z'"", ':', 'ch', '=', 'str', '[', 'i', ']', 'break', 'else', ':', 'continue', 'print', '(', '""First capital letter in a given String is: ""', ',', 'ch', ')']"
3051,"['convert', 'lowercase', 'uppercase', 'without', 'using', 'inbuilt', 'function']","['str', '=', 'input', '(', '""Enter the String(Lower case):""', ')', 'i', '=', '0', 'ch', '=', ""''"", 'while', 'len', '(', 'str', ')', '>', 'i', ':', 'if', 'str', '[', 'i', ']', '>=', ""'a'"", 'and', 'str', '[', 'i', ']', '<=', ""'z'"", ':', 'ch', '+=', 'chr', '(', 'ord', '(', 'str', '[', 'i', ']', ')', '-', '32', ')', 'else', ':', 'ch', '+=', 'chr', '(', 'ord', '(', 'str', '[', 'i', ']', ')', ')', 'i', '+=', '1', 'print', '(', '""Lower case String is:""', ',', 'ch', ')']"
3052,"['find', 'pronic', 'number', 'present', 'within', 'given', 'range']","['import', 'math', 'print', '(', '""Enter a range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Pronic numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'flag', '=', '0', 'for', 'j', 'in', 'range', '(', '0', ',', 'i', '+', '1', ')', ':', 'if', 'j', '*', '(', 'j', '+', '1', ')', '==', 'i', ':', 'flag', '=', '1', 'break', 'if', 'flag', '==', '1', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
3053,"['python', 'program', 'display', 'node', 'linked', 'list', 'reverse', 'using', 'recursion']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'display_reversed', '(', 'self', ')', ':', 'self', '.', 'display_reversed_helper', '(', 'self', '.', 'head', ')', 'def', 'display_reversed_helper', '(', 'self', ',', 'current', ')', ':', 'if', 'current', 'is', 'None', ':', 'return', 'self', '.', 'display_reversed_helper', '(', 'current', '.', 'next', ')', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'a_llist', '=', 'LinkedList', '(', ')', 'n', '=', 'int', '(', 'input', '(', ""'How many elements would you like to add? '"", ')', ')', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'data', '=', 'int', '(', 'input', '(', ""'Enter data item: '"", ')', ')', 'a_llist', '.', 'append', '(', 'data', ')', 'print', '(', ""'The reversed linked list: '"", ',', 'end', '=', ""''"", ')', 'a_llist', '.', 'display_reversed', '(', ')']"
3054,"['python', 'program', 'check', 'string', 'palindrome']","['string', '=', 'raw_input', '(', '""Enter string:""', ')', 'if', '(', 'string', '==', 'string', '[', ':', ':', '-', '1', ']', ')', ':', 'print', '(', '""The string is a palindrome""', ')', 'else', ':', 'print', '(', '""The string isn\'t a palindrome""', ')']"
3055,"['find', 'evil', 'number', 'present', 'within', 'given', 'range']","['print', '(', '""Enter a range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Evil numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'one_c', '=', '0', 'num', '=', 'i', 'while', 'num', '!=', '0', ':', 'if', 'num', '%', '2', '==', '1', ':', 'one_c', '+=', '1', 'num', '//=', '2', 'if', 'one_c', '%', '2', '==', '0', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
3056,"['program', 'find', 'nth', 'abundant', 'number']","['rangenumber', '=', 'int', '(', 'input', '(', '""Enter a Nth Number:""', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', 'c', '!=', 'rangenumber', ':', 'num1', '=', 'num', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'num1', ')', ':', 'if', 'num1', '%', 'i', '==', '0', ':', 'sum', '=', 'sum', '+', 'i', 'if', 'sum', '>', 'num', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Abundant number is ""', ',', 'letest', ')']"
3057,"['python', 'program', 'implement', 'dequeue']","['class', 'Dequeue', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'append_left', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'insert', '(', '0', ',', 'data', ')', 'def', 'pop', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', ')', 'def', 'pop_left', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', '0', ')', 'q', '=', 'Dequeue', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'append <value>'"", ')', 'print', '(', ""'appendleft <value>'"", ')', 'print', '(', ""'pop'"", ')', 'print', '(', ""'popleft'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'append'"", ':', 'q', '.', 'append', '(', 'int', '(', 'do', '[', '1', ']', ')', ')', 'elif', 'operation', '==', ""'appendleft'"", ':', 'q', '.', 'append_left', '(', 'int', '(', 'do', '[', '1', ']', ')', ')', 'elif', 'operation', '==', ""'pop'"", ':', 'if', 'q', '.', 'is_empty', '(', ')', ':', 'print', '(', ""'Dequeue is empty.'"", ')', 'else', ':', 'print', '(', ""'Popped value from right: '"", ',', 'q', '.', 'pop', '(', ')', ')', 'elif', 'operation', '==', ""'popleft'"", ':', 'if', 'q', '.', 'is_empty', '(', ')', ':', 'print', '(', ""'Dequeue is empty.'"", ')', 'else', ':', 'print', '(', ""'Popped value from left: '"", ',', 'q', '.', 'pop_left', '(', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3058,"['check', 'given', 'number', 'automorphic', 'number']","[""'''Write\na Python program\xa0to check whether a given number is An Automorphic\nnumber or not. or\xa0Write a program\xa0to\xa0check whether\na given number is An Automorphic number or not using Python '''"", 'num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'sqr', '=', 'num', '*', 'num', 'flag', '=', '0', 'while', 'num', '!=', '0', ':', 'if', '(', 'num', '%', '10', '!=', 'sqr', '%', '10', ')', ':', 'flag', '=', '-', '1', 'break', 'num', '=', 'int', '(', 'num', '/', '10', ')', 'sqr', '=', 'int', '(', 'sqr', '/', '10', ')', 'if', '(', 'flag', '==', '0', ')', ':', 'print', '(', '""It is an Automorphic Number""', ')', 'else', ':', 'print', '(', '""It is not an Automorphic Number""', ')']"
3059,"['merging', 'two', 'unsorted', 'array', 'different', 'length']","['def', 'Merge_Array', '(', 'arr', ',', 'arr2', ',', 'size', ',', 'size2', ')', ':', 'm_size', '=', 'size', '+', 'size2', 'merge_arr', '=', '[', '0', ']', '*', 'm_size', 'i', '=', '0', 'k', '=', '0', 'j', '=', '0', 'while', 'k', '<', 'm_size', ':', 'if', 'i', '<', 'size', ':', 'merge_arr', '[', 'k', ']', '=', 'arr', '[', 'i', ']', 'i', '+=', '1', 'k', '+=', '1', 'if', 'j', '<', 'size2', ':', 'merge_arr', '[', 'k', ']', '=', 'arr2', '[', 'j', ']', 'j', '+=', '1', 'k', '+=', '1', 'print', '(', '""After Merge two Array element are:""', ')', 'for', 'p', 'in', 'range', '(', '0', ',', 'm_size', ')', ':', 'print', '(', 'merge_arr', '[', 'p', ']', ',', 'end', '=', '"" ""', ')', 'arr', '=', '[', ']', 'arr2', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the 1st array: ""', ')', ')', 'size2', '=', 'int', '(', 'input', '(', '""Enter the size of the 2nd array: ""', ')', ')', 'print', '(', '""Enter the Element of the 1st array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Enter the Element of the 2nd array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size2', ')', ':', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'arr2', '.', 'append', '(', 'num2', ')', 'Merge_Array', '(', 'arr', ',', 'arr2', ',', 'size', ',', 'size2', ')']"
3060,"['python', 'program', 'print', 'pascal', 'triangle', 'n', 'number', 'row', 'given', 'user']","['n', '=', 'int', '(', 'input', '(', '""Enter number of rows: ""', ')', ')', 'a', '=', '[', ']', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'a', '.', 'append', '(', '[', ']', ')', 'a', '[', 'i', ']', '.', 'append', '(', '1', ')', 'for', 'j', 'in', 'range', '(', '1', ',', 'i', ')', ':', 'a', '[', 'i', ']', '.', 'append', '(', 'a', '[', 'i', '-', '1', ']', '[', 'j', '-', '1', ']', '+', 'a', '[', 'i', '-', '1', ']', '[', 'j', ']', ')', 'if', '(', 'n', '!=', '0', ')', ':', 'a', '[', 'i', ']', '.', 'append', '(', '1', ')', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'print', '(', '""   ""', '*', '(', 'n', '-', 'i', ')', ',', 'end', '=', '"" ""', ',', 'sep', '=', '"" ""', ')', 'for', 'j', 'in', 'range', '(', '0', ',', 'i', '+', '1', ')', ':', 'print', '(', ""'{0:6}'"", '.', 'format', '(', 'a', '[', 'i', ']', '[', 'j', ']', ')', ',', 'end', '=', '"" ""', ',', 'sep', '=', '"" ""', ')', 'print', '(', ')']"
3061,"['python', 'program', 'find', 'sum', 'digit', 'number', 'recursively']","['l', '=', '[', ']', 'def', 'sum_digits', '(', 'b', ')', ':', 'if', '(', 'b', '==', '0', ')', ':', 'return', 'l', 'dig', '=', 'b', '%', '10', 'l', '.', 'append', '(', 'dig', ')', 'sum_digits', '(', 'b', '//', '10', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter a number: ""', ')', ')', 'sum_digits', '(', 'n', ')', 'print', '(', 'sum', '(', 'l', ')', ')']"
3062,"['check', 'given', 'number', 'armstrong', 'number']","['num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'num2', '=', 'num', 'sum', '=', '0', 'while', '(', 'num', '!=', '0', ')', ':', 'rem', '=', 'num', '%', '10', 'num', '=', 'int', '(', 'num', '/', '10', ')', 'sum', '=', 'sum', '+', 'rem', '*', 'rem', '*', 'rem', 'if', 'sum', '==', 'num2', ':', 'print', '(', '""It is an Armstrong Number""', ')', 'else', ':', 'print', '(', '""It is not an Armstrong Number""', ')']"
3063,"['python', 'program', 'implement', 'circular', 'doubly', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'self', '.', 'prev', '=', 'None', 'class', 'CircularDoublyLinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'first', '=', 'None', 'def', 'get_node', '(', 'self', ',', 'index', ')', ':', 'current', '=', 'self', '.', 'first', 'for', 'i', 'in', 'range', '(', 'index', ')', ':', 'current', '=', 'current', '.', 'next', 'if', 'current', '==', 'self', '.', 'first', ':', 'return', 'None', 'return', 'current', 'def', 'insert_after', '(', 'self', ',', 'ref_node', ',', 'new_node', ')', ':', 'new_node', '.', 'prev', '=', 'ref_node', 'new_node', '.', 'next', '=', 'ref_node', '.', 'next', 'new_node', '.', 'next', '.', 'prev', '=', 'new_node', 'ref_node', '.', 'next', '=', 'new_node', 'def', 'insert_before', '(', 'self', ',', 'ref_node', ',', 'new_node', ')', ':', 'self', '.', 'insert_after', '(', 'ref_node', '.', 'prev', ',', 'new_node', ')', 'def', 'insert_at_end', '(', 'self', ',', 'new_node', ')', ':', 'if', 'self', '.', 'first', 'is', 'None', ':', 'self', '.', 'first', '=', 'new_node', 'new_node', '.', 'next', '=', 'new_node', 'new_node', '.', 'prev', '=', 'new_node', 'else', ':', 'self', '.', 'insert_after', '(', 'self', '.', 'first', '.', 'prev', ',', 'new_node', ')', 'def', 'insert_at_beg', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'insert_at_end', '(', 'new_node', ')', 'self', '.', 'first', '=', 'new_node', 'def', 'remove', '(', 'self', ',', 'node', ')', ':', 'if', 'self', '.', 'first', '.', 'next', '==', 'self', '.', 'first', ':', 'self', '.', 'first', '=', 'None', 'else', ':', 'node', '.', 'prev', '.', 'next', '=', 'node', '.', 'next', 'node', '.', 'next', '.', 'prev', '=', 'node', '.', 'prev', 'if', 'self', '.', 'first', '==', 'node', ':', 'self', '.', 'first', '=', 'node', '.', 'next', 'def', 'display', '(', 'self', ')', ':', 'if', 'self', '.', 'first', 'is', 'None', ':', 'return', 'current', '=', 'self', '.', 'first', 'while', 'True', ':', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'next', 'if', 'current', '==', 'self', '.', 'first', ':', 'break', 'a_cdllist', '=', 'CircularDoublyLinkedList', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'insert <data> after <index>'"", ')', 'print', '(', ""'insert <data> before <index>'"", ')', 'print', '(', ""'insert <data> at beg'"", ')', 'print', '(', ""'insert <data> at end'"", ')', 'print', '(', ""'remove <index>'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'print', '(', ""'The list: '"", ',', 'end', '=', ""''"", ')', 'a_cdllist', '.', 'display', '(', ')', 'print', '(', ')', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'position', '=', 'do', '[', '3', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'new_node', '=', 'Node', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'if', 'position', '==', ""'beg'"", ':', 'a_cdllist', '.', 'insert_at_beg', '(', 'new_node', ')', 'elif', 'position', '==', ""'end'"", ':', 'a_cdllist', '.', 'insert_at_end', '(', 'new_node', ')', 'else', ':', 'index', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'a_cdllist', '.', 'get_node', '(', 'index', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such index.'"", ')', 'continue', 'if', 'suboperation', '==', ""'after'"", ':', 'a_cdllist', '.', 'insert_after', '(', 'ref_node', ',', 'new_node', ')', 'elif', 'suboperation', '==', ""'before'"", ':', 'a_cdllist', '.', 'insert_before', '(', 'ref_node', ',', 'new_node', ')', 'elif', 'operation', '==', ""'remove'"", ':', 'index', '=', 'int', '(', 'do', '[', '1', ']', ')', 'node', '=', 'a_cdllist', '.', 'get_node', '(', 'index', ')', 'if', 'node', 'is', 'None', ':', 'print', '(', ""'No such index.'"", ')', 'continue', 'a_cdllist', '.', 'remove', '(', 'node', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3064,"['python', 'program', 'copy', 'content', 'one', 'file', 'another']","['with', 'open', '(', '""test.txt""', ')', 'as', 'f', ':', 'with', 'open', '(', '""out.txt""', ',', '""w""', ')', 'as', 'f1', ':', 'for', 'line', 'in', 'f', ':', 'f1', '.', 'write', '(', 'line', ')']"
3065,"['add', 'number', 'without', 'using', 'arithmetic', 'operator']","[""'''Write a Python\nprogram\xa0to\xa0add between 2 numbers without using arithmetic operators.\nor\xa0Write a program\xa0to\xa0add between 2 numbers without using\narithmetic operators using Python '''"", 'print', '(', '""Enter first number:""', ')', 'num1', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Enter\xa0 second number:""', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'while', 'num2', '!=', '0', ':', 'carry', '=', 'num1', '&', 'num2', 'num1', '=', 'num1', '^', 'num2', 'num2', '=', 'carry', '<<', '1', 'print', '(', '""Addition of two number is ""', ',', 'num1', ')']"
3066,"['write', 'program', 'sum', 'digit', 'number']","[""'''Write\na Python program\xa0to the\xa0sum of all digits of a number. or\xa0\n\n\xa0\xa0 Write a program\xa0to the\xa0sum of all\ndigits of a number using Python '''"", 'n', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'sum', '=', '0', 'while', 'n', '>', '0', ':', 'rem', '=', 'n', '%', '10', 'sum', '=', 'sum', '+', 'rem', 'n', '=', 'int', '(', 'n', '/', '10', ')', 'print', '(', '""The sum of digits of number is:""', ',', 'sum', ')']"
3067,"['python', 'program', 'find', 'sum', 'series', 'xnn']","['n', '=', 'int', '(', 'input', '(', '""Enter the number of terms:""', ')', ')', 'x', '=', 'int', '(', 'input', '(', '""Enter the value of x:""', ')', ')', 'sum1', '=', '1', 'for', 'i', 'in', 'range', '(', '2', ',', 'n', '+', '1', ')', ':', 'sum1', '=', 'sum1', '+', '(', '(', 'x', '**', 'i', ')', '/', 'i', ')', 'print', '(', '""The sum of series is""', ',', 'round', '(', 'sum1', ',', '2', ')', ')']"
3068,"['program', 'calculate', 'surface', 'area', 'volume', 'cuboid']","['l', '=', 'int', '(', 'input', '(', '""Enter the length of the cuboid:""', ')', ')', 'h', '=', 'int', '(', 'input', '(', '""Enter the height of the cuboid:""', ')', ')', 'w', '=', 'int', '(', 'input', '(', '""Enter the weight of the cuboid:""', ')', ')', 'surface_area', '=', '2', '*', '(', '(', 'l', '*', 'w', ')', '+', '(', 'l', '*', 'h', ')', '+', '(', 'h', '*', 'w', ')', ')', 'volume', '=', 'l', '*', 'w', '*', 'h', 'print', '(', '""Surface Area of the cuboid = ""', ',', 'surface_area', ')', 'print', '(', '""Volume of the cuboid = ""', ',', 'volume', ')']"
3069,"['find', 'frequency', 'character', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'arr', '=', '[', '0', ']', '*', '256', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '==', ""' '"", ':', 'continue', 'num', '=', 'ord', '(', 'str', '[', 'i', ']', ')', 'arr', '[', 'num', ']', '+=', '1', 'print', '(', '""Frequency of character in a string are:""', ')', 'for', 'i', 'in', 'range', '(', '256', ')', ':', 'if', 'arr', '[', 'i', ']', '!=', '0', ':', 'print', '(', '(', 'chr', ')', '(', 'i', ')', ',', '"" occurs ""', ',', 'arr', '[', 'i', ']', ',', '"" times""', ')']"
3070,"['program', 'find', 'sum', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number:""', ')', ')', 'sum', '=', '0.0', 'fact', '=', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'fact', '*=', 'i', 'sum', '+=', '1.0', '/', 'factprint', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3071,"['find', 'reverse', 'number', 'using', 'recursion']","['def', 'reverse', '(', 'num', ')', ':', 'if', 'num', '<', '10', ':', 'print', '(', 'num', ')', 'return', 'else', ':', 'print', '(', 'num', '%', '10', ',', 'end', '=', '""""', ')', 'reverse', '(', 'int', '(', 'num', '/', '10', ')', ')', 'print', '(', '""Enter your number:""', ')', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Reverse of the input number is:""', ')', 'reverse', '(', 'num', ')']"
3072,"['python', 'program', 'display', 'letter', 'two', 'string']","['s1', '=', 'raw_input', '(', '""Enter first string:""', ')', 's2', '=', 'raw_input', '(', '""Enter second string:""', ')', 'a', '=', 'list', '(', 'set', '(', 's1', ')', '^', 'set', '(', 's2', ')', ')', 'print', '(', '""The letters are:""', ')', 'for', 'i', 'in', 'a', ':', 'print', '(', 'i', ')']"
3073,"['program', 'find', 'sum', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number:""', ')', ')', 'sum', '=', '0.0', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum', '+=', 'i', '/', '(', 'i', '+', '1', ')', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3074,"['python', 'program', 'find', 'sum', 'sine', 'series']","['import', 'math', 'def', 'sin', '(', 'x', ',', 'n', ')', ':', 'sine', '=', '0', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'sign', '=', '(', '-', '1', ')', '**', 'i', 'pi', '=', '22', '/', '7', 'y', '=', 'x', '*', '(', 'pi', '/', '180', ')', 'sine', '=', 'sine', '+', '(', '(', 'y', '**', '(', '2.0', '*', 'i', '+', '1', ')', ')', '/', 'math', '.', 'factorial', '(', '2', '*', 'i', '+', '1', ')', ')', '*', 'sign', 'return', 'sine', 'x', '=', 'int', '(', 'input', '(', '""Enter the value of x in degrees:""', ')', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter the number of terms:""', ')', ')', 'print', '(', 'round', '(', 'sin', '(', 'x', ',', 'n', ')', ',', '2', ')', ')']"
3075,"['python', 'program', 'create', 'list', 'tuples', 'first', 'element', 'number', 'second', 'element', 'square', 'number']","['l_range', '=', 'int', '(', 'input', '(', '""Enter the lower range:""', ')', ')', 'u_range', '=', 'int', '(', 'input', '(', '""Enter the upper range:""', ')', ')', 'a', '=', '[', '(', 'x', ',', 'x', '**', '2', ')', 'for', 'x', 'in', 'range', '(', 'l_range', ',', 'u_range', '+', '1', ')', ']', 'print', '(', 'a', ')']"
3076,"['python', 'program', 'clear', 'rightmost', 'set', 'bit', 'number']","['def', 'clear_rightmost_set_bit', '(', 'n', ')', ':', '""""""Clear rightmost set bit of n and return it.""""""', 'return', 'n', '&', '(', 'n', '-', '1', ')', 'n', '=', 'int', '(', 'input', '(', ""'Enter a number: '"", ')', ')', 'ans', '=', 'clear_rightmost_set_bit', '(', 'n', ')', 'print', '(', ""'n with its rightmost set bit cleared equals:'"", ',', 'ans', ')']"
3077,"['print', 'string', 'using', 'array']","['import', 'array', 'arr', '=', 'array', '.', 'array', '(', ""'u'"", ',', '[', ""'c'"", ',', ""'s'"", ',', ""'i'"", ',', ""'n'"", ',', ""'f'"", ',', ""'o'"", ',', ""'3'"", ',', ""'6'"", ',', ""'0'"", ',', ""'.'"", ',', ""'c'"", ',', ""'o'"", ',', ""'m'"", ']', ')', 'len', '=', 'len', '(', 'arr', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '""""', ')']"
3078,"['check', 'whether', 'given', 'number', 'harshad', 'number']","[""'''Write\na Python program\xa0to check whether a given number is a Harshad number or\nnot. or\xa0Write a program\xa0to\xa0check whether\na given number is a Harshad number or not\nusing Python '''"", 'num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'num2', '=', 'num', 'sum', '=', '0', 'while', 'num', '!=', '0', ':', 'rem', '=', 'num', '%', '10', 'num', '=', 'int', '(', 'num', '/', '10', ')', 'sum', '=', 'sum', '+', 'rem', 'if', '(', 'num2', '%', 'sum', '==', '0', ')', ':', 'print', '(', '""It is a Harshad Number""', ')', 'else', ':', 'print', '(', '""It is not a Harshad Number""', ')']"
3079,"['delete', 'element', 'array']","['arr', '=', '[', ']', 'temp', '=', '0', 'pos', '=', '0', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Enter the element to be deleted:""', ')', 'ele', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Before deleting array elements are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '==', 'ele', ':', 'pos', '=', 'i', 'temp', '=', '1', 'if', 'temp', '==', '1', ':', 'arr', '.', 'pop', '(', 'pos', ')', 'print', '(', '""\\nAfter deleting array elements are:""', ')', 'print', '(', 'arr', ')']"
3080,"['python', 'many', 'builtin', 'function', 'know', 'use', 'read', 'document', 'online', 'find', 'book', 'python', 'builtin', 'document', 'function', 'every', 'builtin', 'function', 'please', 'write', 'program', 'print', 'python', 'builtin', 'function', 'document', 'ab', 'int', 'add', 'document', 'function']","['print', 'abs', '.', '__doc__', 'print', 'int', '.', '__doc__', 'print', 'raw_input', '.', '__doc__', 'def', 'square', '(', 'num', ')', ':', ""'''Return the square value of the input number.\n    \n    The input number must be integer.\n    '''"", 'return', 'num', '**', '2', 'print', 'square', '(', '2', ')', 'print', 'square', '.', '__doc__']"
3081,"['python', 'program', 'implement', 'binary', 'heap']","['class', 'BinaryHeap', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'size', '(', 'self', ')', ':', 'return', 'len', '(', 'self', '.', 'items', ')', 'def', 'parent', '(', 'self', ',', 'i', ')', ':', 'return', '(', 'i', '-', '1', ')', '//', '2', 'def', 'left', '(', 'self', ',', 'i', ')', ':', 'return', '2', '*', 'i', '+', '1', 'def', 'right', '(', 'self', ',', 'i', ')', ':', 'return', '2', '*', 'i', '+', '2', 'def', 'get', '(', 'self', ',', 'i', ')', ':', 'return', 'self', '.', 'items', '[', 'i', ']', 'def', 'get_max', '(', 'self', ')', ':', 'if', 'self', '.', 'size', '(', ')', '==', '0', ':', 'return', 'None', 'return', 'self', '.', 'items', '[', '0', ']', 'def', 'extract_max', '(', 'self', ')', ':', 'if', 'self', '.', 'size', '(', ')', '==', '0', ':', 'return', 'None', 'largest', '=', 'self', '.', 'get_max', '(', ')', 'self', '.', 'items', '[', '0', ']', '=', 'self', '.', 'items', '[', '-', '1', ']', 'del', 'self', '.', 'items', '[', '-', '1', ']', 'self', '.', 'max_heapify', '(', '0', ')', 'return', 'largest', 'def', 'max_heapify', '(', 'self', ',', 'i', ')', ':', 'l', '=', 'self', '.', 'left', '(', 'i', ')', 'r', '=', 'self', '.', 'right', '(', 'i', ')', 'if', '(', 'l', '<=', 'self', '.', 'size', '(', ')', '-', '1', 'and', 'self', '.', 'get', '(', 'l', ')', '>', 'self', '.', 'get', '(', 'i', ')', ')', ':', 'largest', '=', 'l', 'else', ':', 'largest', '=', 'i', 'if', '(', 'r', '<=', 'self', '.', 'size', '(', ')', '-', '1', 'and', 'self', '.', 'get', '(', 'r', ')', '>', 'self', '.', 'get', '(', 'largest', ')', ')', ':', 'largest', '=', 'r', 'if', '(', 'largest', '!=', 'i', ')', ':', 'self', '.', 'swap', '(', 'largest', ',', 'i', ')', 'self', '.', 'max_heapify', '(', 'largest', ')', 'def', 'swap', '(', 'self', ',', 'i', ',', 'j', ')', ':', 'self', '.', 'items', '[', 'i', ']', ',', 'self', '.', 'items', '[', 'j', ']', '=', 'self', '.', 'items', '[', 'j', ']', ',', 'self', '.', 'items', '[', 'i', ']', 'def', 'insert', '(', 'self', ',', 'key', ')', ':', 'index', '=', 'self', '.', 'size', '(', ')', 'self', '.', 'items', '.', 'append', '(', 'key', ')', 'while', '(', 'index', '!=', '0', ')', ':', 'p', '=', 'self', '.', 'parent', '(', 'index', ')', 'if', 'self', '.', 'get', '(', 'p', ')', '<', 'self', '.', 'get', '(', 'index', ')', ':', 'self', '.', 'swap', '(', 'p', ',', 'index', ')', 'index', '=', 'p', 'bheap', '=', 'BinaryHeap', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'insert <data>'"", ')', 'print', '(', ""'max get'"", ')', 'print', '(', ""'max extract'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'bheap', '.', 'insert', '(', 'data', ')', 'elif', 'operation', '==', ""'max'"", ':', 'suboperation', '=', 'do', '[', '1', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'get'"", ':', 'print', '(', ""'Maximum value: {}'"", '.', 'format', '(', 'bheap', '.', 'get_max', '(', ')', ')', ')', 'elif', 'suboperation', '==', ""'extract'"", ':', 'print', '(', ""'Maximum value removed: {}'"", '.', 'format', '(', 'bheap', '.', 'extract_max', '(', ')', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3082,"['program', 'find', 'sum', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number:""', ')', ')', 'sum', '=', '0', 'i', '=', '0', 'while', 'i', '<=', 'n', ':', 'sum', '+=', 'i', 'i', '+=', '2', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3083,"['python', 'program', 'find', 'lcm', 'two', 'number', 'using', 'recursion']","['def', 'lcm', '(', 'a', ',', 'b', ')', ':', 'lcm', '.', 'multiple', '=', 'lcm', '.', 'multiple', '+', 'b', 'if', '(', '(', 'lcm', '.', 'multiple', '%', 'a', '==', '0', ')', 'and', '(', 'lcm', '.', 'multiple', '%', 'b', '==', '0', ')', ')', ':', 'return', 'lcm', '.', 'multiple', ';', 'else', ':', 'lcm', '(', 'a', ',', 'b', ')', 'return', 'lcm', '.', 'multiple', 'lcm', '.', 'multiple', '=', '0', 'a', '=', 'int', '(', 'input', '(', '""Enter first number:""', ')', ')', 'b', '=', 'int', '(', 'input', '(', '""Enter second number:""', ')', ')', 'if', '(', 'a', '>', 'b', ')', ':', 'LCM', '=', 'lcm', '(', 'b', ',', 'a', ')', 'else', ':', 'LCM', '=', 'lcm', '(', 'a', ',', 'b', ')', 'print', '(', 'LCM', ')']"
3084,"['program', 'read', 'display', 'matrix']",[]
3085,"['find', 'type', 'array']","['arr', '=', '[', ']', 'odd_type', '=', '0', 'even_type', '=', '0', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Array elements are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '%', '2', '==', '0', ':', 'even_type', '+=', '1', 'else', ':', 'odd_type', '+=', '1', 'if', 'even_type', '==', 'size', ':', 'print', '(', '""\\nEven type array""', ')', 'elif', 'odd_type', '==', 'size', ':', 'print', '(', '""\\nodd type array""', ')', 'else', ':', 'print', '(', '""\\nMixed array""', ')']"
3086,"['find', 'harshad', 'number', 'present', 'within', 'given', 'range']","[""'''Write a Python\nprogram\xa0to\xa0find out all Harshad numbers present within a given range.\nor\xa0Write a program\xa0to\xa0find out all Harshad numbers present\nwithin a given range using Python '''"", 'print', '(', '""Enter a range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Harshad numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'num2', '=', 'i', 'num', '=', 'i', 'sum', '=', '0', 'while', 'num', '!=', '0', ':', 'rem', '=', 'num', '%', '10', 'num', '=', 'int', '(', 'num', '/', '10', ')', 'sum', '=', 'sum', '+', 'rem', 'if', '(', 'num2', '%', 'sum', '==', '0', ')', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
3087,"['find', 'length', 'string', 'using', 'recursion']","['def', 'StringLength', '(', 'str', ',', 'i', ')', ':', 'if', '(', 'str', '[', 'i', ']', '==', ""'\\0'"", ')', ':', 'return', '0', 'else', ':', 'return', '(', '1', '+', 'StringLength', '(', 'str', ',', 'i', '+', '1', ')', ')', 'str', '=', 'input', '(', '""Enter your String:""', ')', 'str', '+=', ""'\\0'"", 'print', '(', '""Length of the String is: ""', ',', 'StringLength', '(', 'str', ',', '0', ')', ')']"
3088,"['program', 'print', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number(Limit):""', ')', ')', 'i', '=', '1', 'pr', '=', '1', 'while', 'i', '<=', 'n', ':', 'if', '(', 'i', '%', '2', '==', '0', ')', ':', 'print', '(', '-', '1', '*', 'pr', ',', 'end', '=', '"" ""', ')', 'else', ':', 'print', '(', 'pr', ',', 'end', '=', '"" ""', ')', 'pr', '+=', 'pow', '(', 'i', ',', '2', ')', 'i', '+=', '1']"
3089,"['program', 'compute', 'area', 'perimeter', 'pentagon']","['import', 'math', 'print', '(', '""Enter the length of the side:""', ')', 'a', '=', 'int', '(', 'input', '(', ')', ')', 'area', '=', '(', 'math', '.', 'sqrt', '(', '5', '*', '(', '5', '+', '2', '*', 'math', '.', 'sqrt', '(', '5', ')', ')', ')', '*', 'pow', '(', 'a', ',', '2', ')', ')', '/', '4.0', 'perimeter', '=', '(', '5', '*', 'a', ')', 'print', '(', '""Area of the Pentagon = ""', ',', 'area', ')', 'print', '(', '""Perimeter of the Pentagon = ""', ',', 'perimeter', ')']"
3090,"['python', 'program', 'find', 'sum', 'cosine', 'series']","['import', 'math', 'def', 'cosine', '(', 'x', ',', 'n', ')', ':', 'cosx', '=', '1', 'sign', '=', '-', '1', 'for', 'i', 'in', 'range', '(', '2', ',', 'n', ',', '2', ')', ':', 'pi', '=', '22', '/', '7', 'y', '=', 'x', '*', '(', 'pi', '/', '180', ')', 'cosx', '=', 'cosx', '+', '(', 'sign', '*', '(', 'y', '**', 'i', ')', ')', '/', 'math', '.', 'factorial', '(', 'i', ')', 'sign', '=', '-', 'sign', 'return', 'cosx', 'x', '=', 'int', '(', 'input', '(', '""Enter the value of x in degrees:""', ')', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter the number of terms:""', ')', ')', 'print', '(', 'round', '(', 'cosine', '(', 'x', ',', 'n', ')', ',', '2', ')', ')']"
3091,"['find', 'smallest', 'element', 'array']","['import', 'sys', 'arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'min', '=', 'sys', '.', 'maxsize', 'for', 'j', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', '(', 'arr', '[', 'j', ']', '<=', 'min', ')', ':', 'min', '=', 'arr', '[', 'j', ']', 'print', '(', '""The smallest element of array: ""', ',', 'min', ')']"
3092,"['find', 'sum', 'element', 'array']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Sum of the Given Matrix Elements is: ""', ',', 'sum', ')']"
3093,"['write', 'program', 'solve', 'classic', 'ancient', 'chinese', 'puzzle', 'count', 'head', 'leg', 'among', 'chicken', 'rabbit', 'farm', 'many', 'rabbit', 'many', 'chicken', 'hint']","['def', 'solve', '(', 'numheads', ',', 'numlegs', ')', ':', 'ns', '=', ""'No solutions!'"", 'for', 'i', 'in', 'range', '(', 'numheads', '+', '1', ')', ':', 'j', '=', 'numheads', '-', 'i', 'if', '2', '*', 'i', '+', '4', '*', 'j', '==', 'numlegs', ':', 'return', 'i', ',', 'j', 'return', 'ns', ',', 'ns', 'numheads', '=', '35', 'numlegs', '=', '94', 'solutions', '=', 'solve', '(', 'numheads', ',', 'numlegs', ')', 'print', 'solutions']"
3094,"['write', 'program', 'print', 'alphabet', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', ';', 'row_size', '=', 'input', '(', ')', 'for', 'out', 'in', 'range', '(', 'ord', '(', 'row_size', ')', ',', 'ord', '(', ""'A'"", ')', '-', '1', ',', '-', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'ord', '(', 'row_size', ')', ',', 'ord', '(', ""'A'"", ')', '-', '1', ',', '-', '1', ')', ':', 'print', '(', 'chr', '(', 'i', ')', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\r""', ')']"
3095,"['check', 'whether', 'given', 'number', 'abundant', 'number']","[""'''Write\na Python program\xa0to check whether a given number is an Abundant number\nor not. or\xa0Write a program\xa0to\xa0check whether\na given number is an Abundant number or not\nusing Python '''"", 'num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'num', ')', ':', 'if', '(', 'num', '%', 'i', '==', '0', ')', ':', 'sum', '=', 'sum', '+', 'i', 'if', 'sum', '>', 'num', ':', 'print', '(', '""It is an Abundant Number""', ')', 'else', ':', 'print', '(', '""It is not an Abundant Number""', ')']"
3096,"['program', 'find', 'sum', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number:""', ')', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'if', 'i', '%', '2', '==', '0', ':', 'sum', '-=', 'i', 'else', ':', 'sum', '+=', 'iprint', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3097,"['python', 'program', 'read', 'list', 'word', 'return', 'length', 'longest', 'one']","['a', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the number of elements in list:""', ')', ')', 'for', 'x', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'element', '=', 'input', '(', '""Enter element""', '+', 'str', '(', 'x', '+', '1', ')', '+', '"":""', ')', 'a', '.', 'append', '(', 'element', ')', 'max1', '=', 'len', '(', 'a', '[', '0', ']', ')', 'temp', '=', 'a', '[', '0', ']', 'for', 'i', 'in', 'a', ':', 'if', '(', 'len', '(', 'i', ')', '>', 'max1', ')', ':', 'max1', '=', 'len', '(', 'i', ')', 'temp', '=', 'i', 'print', '(', '""The word with the longest length is:""', ')', 'print', '(', 'temp', ')']"
3098,"['print', 'average', 'number', 'array', 'even', 'position']","['arr', '=', '[', ']', 'cout', '=', '0', 'sum', '=', '0', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'for', 'j', 'in', 'range', '(', '1', ',', 'size', '+', '1', ')', ':', 'if', '(', 'j', '%', '2', '==', '0', ')', ':', 'sum', '+=', 'arr', '[', 'j', ']', 'cout', '+=', '1', 'avg', '=', '(', 'sum', '/', 'cout', ')', 'print', '(', '""Average of Numbers in array at even position is ""', ',', 'avg', ')']"
3099,"['print', 'first', 'natural', 'number', 'using', 'recursion']","['def', 'PrintNaturalNumber', '(', 'n', ')', ':', 'if', '(', 'n', '<=', '50', ')', ':', 'print', '(', 'n', ',', 'end', '=', '"" ""', ')', 'PrintNaturalNumber', '(', 'n', '+', '1', ')', 'n', '=', '1', 'print', '(', '""First 50 Natural Numbers are:""', ')', 'PrintNaturalNumber', '(', 'n', ')']"
3100,"['check', 'whether', 'number', 'disarium', 'number']","['import', 'math', 'num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'num1', '=', 'num', 'c', '=', '0', 'while', 'num1', '!=', '0', ':', 'num1', '//=', '10', 'c', '+=', '1', 'num1', '=', 'num', 'sum', '=', '0', 'while', 'num1', '!=', '0', ':', 'rem', '=', 'num1', '%', '10', 'sum', '+=', 'math', '.', 'pow', '(', 'rem', ',', 'c', ')', 'num1', '//=', '10', 'c', '-=', '1', 'if', 'sum', '==', 'num', ':', 'print', '(', '""It is a Disarium Number.""', ')', 'else', ':', 'print', '(', '""It is Not a Disarium Number.""', ')']"
3101,"['define', 'class', 'generator', 'iterate', 'number', 'divisible', 'given', 'range', 'n']","['def', 'putNumbers', '(', 'n', ')', ':', 'i', '=', '0', 'while', 'i', '<', 'n', ':', 'j', '=', 'i', 'i', '=', 'i', '+', '1', 'if', 'j', '%', '7', '==', '0', ':', 'yield', 'j', 'for', 'i', 'in', 'reverse', '(', '100', ')', ':', 'print', 'i']"
3102,"['python', 'program', 'map', 'two', 'list', 'dictionary']","['keys', '=', '[', ']', 'values', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter number of elements for dictionary:""', ')', ')', 'print', '(', '""For keys:""', ')', 'for', 'x', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'element', '=', 'int', '(', 'input', '(', '""Enter element""', '+', 'str', '(', 'x', '+', '1', ')', '+', '"":""', ')', ')', 'keys', '.', 'append', '(', 'element', ')', 'print', '(', '""For values:""', ')', 'for', 'x', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'element', '=', 'int', '(', 'input', '(', '""Enter element""', '+', 'str', '(', 'x', '+', '1', ')', '+', '"":""', ')', ')', 'values', '.', 'append', '(', 'element', ')', 'd', '=', 'dict', '(', 'zip', '(', 'keys', ',', 'values', ')', ')', 'print', '(', '""The dictionary is:""', ')', 'print', '(', 'd', ')']"
3103,"['print', 'hollow', 'diamond', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'print_control_x', '=', 'row_size', '//', '2', '+', '1', 'x', '=', '1', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'if', 'inn', '==', 'print_control_x', 'or', 'inn', '==', 'row_size', '-', 'print_control_x', '+', '1', ':', 'print', '(', 'x', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'if', 'out', '<=', 'row_size', '//', '2', ':', 'print_control_x', '-=', '1', 'x', '+=', '1', 'else', ':', 'print_control_x', '+=', '1', 'x', '-=', '1', 'print', '(', '""\\r""', ')']"
3104,"['program', 'find', 'sum', 'upper', 'triangular', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '>', 'j', ':', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Sum of Upper Triangular Matrix Elements is: ""', ',', 'sum', ')']"
3105,"['python', 'program', 'check', 'number', 'armstrong', 'number']","['n', '=', 'int', '(', 'input', '(', '""Enter any number: ""', ')', ')', 'a', '=', 'list', '(', 'map', '(', 'int', ',', 'str', '(', 'n', ')', ')', ')', 'b', '=', 'list', '(', 'map', '(', 'lambda', 'x', ':', 'x', '**', '3', ',', 'a', ')', ')', 'if', '(', 'sum', '(', 'b', ')', '==', 'n', ')', ':', 'print', '(', '""The number is an armstrong number. ""', ')', 'else', ':', 'print', '(', '""The number isn\'t an arsmtrong number. ""', ')']"
3106,"['python', 'program', 'find', 'fibonacci', 'series', 'without', 'using', 'recursion']","['a', '=', 'int', '(', 'input', '(', '""Enter the first number of the series ""', ')', ')', 'b', '=', 'int', '(', 'input', '(', '""Enter the second number of the series ""', ')', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter the number of terms needed ""', ')', ')', 'print', '(', 'a', ',', 'b', ',', 'end', '=', '"" ""', ')', 'while', '(', 'n', '-', '2', ')', ':', 'c', '=', 'a', '+', 'b', 'a', '=', 'b', 'b', '=', 'c', 'print', '(', 'c', ',', 'end', '=', '"" ""', ')', 'n', '=', 'n', '-', '1']"
3107,"['python', 'program', 'read', 'string', 'user', 'append', 'file']","['fname', '=', 'input', '(', '""Enter file name: ""', ')', 'file3', '=', 'open', '(', 'fname', ',', '""a""', ')', 'c', '=', 'input', '(', '""Enter string to append: \\n""', ')', ';', 'file3', '.', 'write', '(', '""\\n""', ')', 'file3', '.', 'write', '(', 'c', ')', 'file3', '.', 'close', '(', ')', 'print', '(', '""Contents of appended file:""', ')', ';', 'file4', '=', 'open', '(', 'fname', ',', ""'r'"", ')', 'line1', '=', 'file4', '.', 'readline', '(', ')', 'while', '(', 'line1', '!=', '""""', ')', ':', 'print', '(', 'line1', ')', 'line1', '=', 'file4', '.', 'readline', '(', ')', 'file4', '.', 'close', '(', ')']"
3108,"['remove', 'lowercase', 'character', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'str2', '=', '[', ']', 'i', '=', '0', 'while', 'i', '<', 'len', '(', 'str', ')', ':', 'ch', '=', 'str', '[', 'i', ']', 'if', 'not', 'ch', '.', 'islower', '(', ')', ':', 'str2', '.', 'append', '(', 'ch', ')', 'i', '+=', '1', 'Final_String', '=', ""''"", '.', 'join', '(', 'str2', ')', 'print', '(', '""After removing lowercase letter string is:""', ',', 'Final_String', ')']"
3109,"['print', 'prime', 'number', 'given', 'n']","['import', 'math', 'print', '(', '""Enter a range to find all prime numbers within that range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Prime numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'j', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'count', '=', '0', 'for', 'i', 'in', 'range', '(', '2', ',', 'int', '(', 'math', '.', 'sqrt', '(', 'j', ')', ')', '+', '1', ')', ':', 'if', 'j', '%', 'i', '==', '0', ':', 'count', '+=', '1', 'if', 'count', '==', '0', ':', 'print', '(', 'j', ',', 'end', '=', '"" ""', ')']"
3110,"['python', 'program', 'check', 'common', 'letter', 'two', 'input', 'string']","['s1', '=', 'raw_input', '(', '""Enter first string:""', ')', 's2', '=', 'raw_input', '(', '""Enter second string:""', ')', 'a', '=', 'list', '(', 'set', '(', 's1', ')', '&', 'set', '(', 's2', ')', ')', 'print', '(', '""The common letters are:""', ')', 'for', 'i', 'in', 'a', ':', 'print', '(', 'i', ')']"
3111,"['python', 'program', 'print', 'nth', 'node', 'last', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'length_llist', '(', 'llist', ')', ':', 'length', '=', '0', 'current', '=', 'llist', '.', 'head', 'while', 'current', ':', 'current', '=', 'current', '.', 'next', 'length', '=', 'length', '+', '1', 'return', 'length', 'def', 'return_n_from_last', '(', 'llist', ',', 'n', ')', ':', 'l', '=', 'length_llist', '(', 'llist', ')', 'current', '=', 'llist', '.', 'head', 'for', 'i', 'in', 'range', '(', 'l', '-', 'n', ')', ':', 'current', '=', 'current', '.', 'next', 'return', 'current', '.', 'data', 'a_llist', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_llist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'n', '=', 'int', '(', 'input', '(', ""'The nth element from the end will be printed. Please enter n: '"", ')', ')', 'value', '=', 'return_n_from_last', '(', 'a_llist', ',', 'n', ')', 'print', '(', ""'The nth element from the end: {}'"", '.', 'format', '(', 'value', ')', ')']"
3112,"['program', 'convert', 'second', 'hour', 'minute', 'second']","['t_sec', '=', 'int', '(', 'input', '(', '""Enter the total Second:""', ')', ')', 'hour', '=', '(', 'int', ')', '(', 't_sec', '/', '3600', ')', 't_sec', '=', '(', 'int', ')', '(', 't_sec', '%', '3600', ')', 'mint', '=', '(', 'int', ')', '(', 't_sec', '/', '60', ')', 'sec', '=', '(', 'int', ')', '(', 't_sec', '%', '60', ')', 'print', '(', '""Hours=""', ',', 'hour', ',', '""\\nMinutes=""', ',', 'mint', ',', '""\\nSecond=""', ',', 'sec', ')']"
3113,"['python', 'program', 'display', 'node', 'tree', 'using', 'bfs', 'traversal']","['class', 'Tree', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'data', 'self', '.', 'children', '=', '[', ']', 'def', 'set_root', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'key', '=', 'data', 'def', 'add', '(', 'self', ',', 'node', ')', ':', 'self', '.', 'children', '.', 'append', '(', 'node', ')', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'for', 'child', 'in', 'self', '.', 'children', ':', 'temp', '=', 'child', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'return', 'None', 'def', 'bfs', '(', 'self', ')', ':', 'queue', '=', '[', 'self', ']', 'while', 'queue', '!=', '[', ']', ':', 'popped', '=', 'queue', '.', 'pop', '(', '0', ')', 'for', 'child', 'in', 'popped', '.', 'children', ':', 'queue', '.', 'append', '(', 'child', ')', 'print', '(', 'popped', '.', 'key', ',', 'end', '=', ""' '"", ')', 'tree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'add <data> at root'"", ')', 'print', '(', ""'add <data> below <data>'"", ')', 'print', '(', ""'bfs'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'add'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'Tree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'tree', '=', 'new_node', 'elif', 'suboperation', '==', ""'below'"", ':', 'position', '=', 'do', '[', '3', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'tree', 'is', 'not', 'None', ':', 'ref_node', '=', 'tree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'ref_node', '.', 'add', '(', 'new_node', ')', 'elif', 'operation', '==', ""'bfs'"", ':', 'if', 'tree', 'is', 'None', ':', 'print', '(', ""'Tree is empty.'"", ')', 'else', ':', 'print', '(', ""'BFS traversal: '"", ',', 'end', '=', ""''"", ')', 'tree', '.', 'bfs', '(', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3114,"['check', 'given', 'string', 'palindrome']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'count', '=', '0', 'j', '=', 'len', '(', 'str', ')', '-', '1', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '==', 'str', '[', 'j', ']', ':', 'count', '+=', '1', 'j', '-=', '1', 'if', 'count', '==', 'len', '(', 'str', ')', ':', 'print', '(', '""Input string is palindrome""', ')', 'else', ':', 'print', '(', '""Input string is not palindrome""', ')']"
3115,"['python', 'program', 'implement', 'stack', 'using', 'one', 'queue']","['class', 'Stack', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'q', '=', 'Queue', '(', ')', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'q', '.', 'is_empty', '(', ')', 'def', 'push', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'q', '.', 'enqueue', '(', 'data', ')', 'def', 'pop', '(', 'self', ')', ':', 'for', '_', 'in', 'range', '(', 'self', '.', 'q', '.', 'get_size', '(', ')', '-', '1', ')', ':', 'dequeued', '=', 'self', '.', 'q', '.', 'dequeue', '(', ')', 'self', '.', 'q', '.', 'enqueue', '(', 'dequeued', ')', 'return', 'self', '.', 'q', '.', 'dequeue', '(', ')', 'class', 'Queue', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'self', '.', 'size', '=', '0', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'enqueue', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'size', '+=', '1', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'dequeue', '(', 'self', ')', ':', 'self', '.', 'size', '-=', '1', 'return', 'self', '.', 'items', '.', 'pop', '(', '0', ')', 'def', 'get_size', '(', 'self', ')', ':', 'return', 'self', '.', 'size', 's', '=', 'Stack', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'push <value>'"", ')', 'print', '(', ""'pop'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'push'"", ':', 's', '.', 'push', '(', 'int', '(', 'do', '[', '1', ']', ')', ')', 'elif', 'operation', '==', ""'pop'"", ':', 'if', 's', '.', 'is_empty', '(', ')', ':', 'print', '(', ""'Stack is empty.'"", ')', 'else', ':', 'print', '(', ""'Popped value: '"", ',', 's', '.', 'pop', '(', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3116,"['program', 'print', 'full', 'pyramid', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'np', '=', '1', 'for', 'out', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'in1', 'in', 'range', '(', 'row_size', '-', '1', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'in2', 'in', 'range', '(', '0', ',', 'np', ')', ':', 'print', '(', 'np', '-', 'out', ',', 'end', '=', '""""', ')', 'np', '+=', '2', 'print', '(', '""\\r""', ')']"
3117,"['python', 'program', 'print', 'inverted', 'star', 'pattern']","['n', '=', 'int', '(', 'input', '(', '""Enter number of rows: ""', ')', ')', 'for', 'i', 'in', 'range', '(', 'n', ',', '0', ',', '-', '1', ')', ':', 'print', '(', '(', 'n', '-', 'i', ')', '*', ""' '"", '+', 'i', '*', ""'*'"", ')']"
3118,"['write', 'program', 'print', 'alphabet', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', ';', 'row_size', '=', 'input', '(', ')', 'for', 'out', 'in', 'range', '(', 'ord', '(', 'row_size', ')', ',', 'ord', '(', ""'A'"", ')', '-', '1', ',', '-', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'ord', '(', 'row_size', ')', ',', 'ord', '(', ""'A'"", ')', '-', '1', ',', '-', '1', ')', ':', 'print', '(', 'chr', '(', 'out', ')', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\r""', ')']"
3119,"['print', 'list', 'occurring', 'element', 'array']","['import', 'sys', 'arr', '=', '[', ']', 'freq', '=', '[', ']', 'max', '=', '-', 'sys', '.', 'maxsize', '-', '1', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '>=', 'max', ':', 'max', '=', 'arr', '[', 'i', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'max', '+', '1', ')', ':', 'freq', '.', 'append', '(', '0', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'freq', '[', 'arr', '[', 'i', ']', ']', '+=', '1', 'list_oc', '=', '9999', 'list_v', '=', '9999', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', 'freq', '[', 'arr', '[', 'i', ']', ']', '<', 'list_oc', ':', 'list_oc', '=', 'freq', '[', 'arr', '[', 'i', ']', ']', 'list_v', '=', 'arr', '[', 'i', ']', 'print', '(', '""The List occurring Number ""', ',', 'list_v', ',', '"" occurs ""', ',', 'list_oc', ',', '"" times.""', ')']"
3120,"['python', 'program', 'find', 'sum', 'digit', 'number', 'without', 'recursion']","['l', '=', '[', ']', 'b', '=', 'int', '(', 'input', '(', '""Enter a number: ""', ')', ')', 'while', '(', 'b', '>', '0', ')', ':', 'dig', '=', 'b', '%', '10', 'l', '.', 'append', '(', 'dig', ')', 'b', '=', 'b', '//', '10', 'print', '(', '""Sum is:""', ')', 'print', '(', 'sum', '(', 'l', ')', ')']"
3121,"['python', 'program', 'print', 'sum', 'negative', 'number', 'positive', 'even', 'number', 'positive', 'odd', 'number', 'list']","['n', '=', 'int', '(', 'input', '(', '""Enter the number of elements to be in the list:""', ')', ')', 'b', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'a', '=', 'int', '(', 'input', '(', '""Element: ""', ')', ')', 'b', '.', 'append', '(', 'a', ')', 'sum1', '=', '0', 'sum2', '=', '0', 'sum3', '=', '0', 'for', 'j', 'in', 'b', ':', 'if', '(', 'j', '>', '0', ')', ':', 'if', '(', 'j', '%', '2', '==', '0', ')', ':', 'sum1', '=', 'sum1', '+', 'j', 'else', ':', 'sum2', '=', 'sum2', '+', 'j', 'else', ':', 'sum3', '=', 'sum3', '+', 'j', 'print', '(', '""Sum of all positive even numbers:""', ',', 'sum1', ')', 'print', '(', '""Sum of all positive odd numbers:""', ',', 'sum2', ')', 'print', '(', '""Sum of all negative numbers:""', ',', 'sum3', ')']"
3122,"['python', 'program', 'implement', 'daryheap']","['class', 'D_aryHeap', ':', 'def', '__init__', '(', 'self', ',', 'd', ')', ':', 'self', '.', 'items', '=', '[', ']', 'self', '.', 'd', '=', 'd', 'def', 'size', '(', 'self', ')', ':', 'return', 'len', '(', 'self', '.', 'items', ')', 'def', 'parent', '(', 'self', ',', 'i', ')', ':', 'return', '(', 'i', '-', '1', ')', '//', 'self', '.', 'd', 'def', 'child', '(', 'self', ',', 'index', ',', 'position', ')', ':', 'return', 'index', '*', 'self', '.', 'd', '+', '(', 'position', '+', '1', ')', 'def', 'get', '(', 'self', ',', 'i', ')', ':', 'return', 'self', '.', 'items', '[', 'i', ']', 'def', 'get_max', '(', 'self', ')', ':', 'if', 'self', '.', 'size', '(', ')', '==', '0', ':', 'return', 'None', 'return', 'self', '.', 'items', '[', '0', ']', 'def', 'extract_max', '(', 'self', ')', ':', 'if', 'self', '.', 'size', '(', ')', '==', '0', ':', 'return', 'None', 'largest', '=', 'self', '.', 'get_max', '(', ')', 'self', '.', 'items', '[', '0', ']', '=', 'self', '.', 'items', '[', '-', '1', ']', 'del', 'self', '.', 'items', '[', '-', '1', ']', 'self', '.', 'max_heapify', '(', '0', ')', 'return', 'largest', 'def', 'max_heapify', '(', 'self', ',', 'i', ')', ':', 'largest', '=', 'i', 'for', 'j', 'in', 'range', '(', 'self', '.', 'd', ')', ':', 'c', '=', 'self', '.', 'child', '(', 'i', ',', 'j', ')', 'if', '(', 'c', '<', 'self', '.', 'size', '(', ')', 'and', 'self', '.', 'get', '(', 'c', ')', '>', 'self', '.', 'get', '(', 'largest', ')', ')', ':', 'largest', '=', 'c', 'if', '(', 'largest', '!=', 'i', ')', ':', 'self', '.', 'swap', '(', 'largest', ',', 'i', ')', 'self', '.', 'max_heapify', '(', 'largest', ')', 'def', 'swap', '(', 'self', ',', 'i', ',', 'j', ')', ':', 'self', '.', 'items', '[', 'i', ']', ',', 'self', '.', 'items', '[', 'j', ']', '=', 'self', '.', 'items', '[', 'j', ']', ',', 'self', '.', 'items', '[', 'i', ']', 'def', 'insert', '(', 'self', ',', 'key', ')', ':', 'index', '=', 'self', '.', 'size', '(', ')', 'self', '.', 'items', '.', 'append', '(', 'key', ')', 'while', '(', 'index', '!=', '0', ')', ':', 'p', '=', 'self', '.', 'parent', '(', 'index', ')', 'if', 'self', '.', 'get', '(', 'p', ')', '<', 'self', '.', 'get', '(', 'index', ')', ':', 'self', '.', 'swap', '(', 'p', ',', 'index', ')', 'index', '=', 'p', 'd', '=', 'int', '(', 'input', '(', ""'Enter the value of D: '"", ')', ')', ';', 'dheap', '=', 'D_aryHeap', '(', 'd', ')', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'insert <data>'"", ')', 'print', '(', ""'max get'"", ')', 'print', '(', ""'max extract'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'dheap', '.', 'insert', '(', 'data', ')', 'elif', 'operation', '==', ""'max'"", ':', 'suboperation', '=', 'do', '[', '1', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'get'"", ':', 'print', '(', ""'Maximum value: {}'"", '.', 'format', '(', 'dheap', '.', 'get_max', '(', ')', ')', ')', 'elif', 'suboperation', '==', ""'extract'"", ':', 'print', '(', ""'Maximum value removed: {}'"", '.', 'format', '(', 'dheap', '.', 'extract_max', '(', ')', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3123,"['python', 'program', 'read', 'content', 'file', 'reverse', 'order']","['filename', '=', 'input', '(', '""Enter file name: ""', ')', 'for', 'line', 'in', 'reversed', '(', 'list', '(', 'open', '(', 'filename', ')', ')', ')', ':', 'print', '(', 'line', '.', 'rstrip', '(', ')', ')']"
3124,"['define', 'function', 'print', 'dictionary', 'key', 'number', 'included', 'value', 'square', 'key']","['Solution', 'def', 'printDict', '(', ')', ':', 'd', '=', 'dict', '(', ')', 'd', '[', '1', ']', '=', '1', 'd', '[', '2', ']', '=', '2', '**', '2', 'd', '[', '3', ']', '=', '3', '**', '2', 'print', 'd', 'printDict', '(', ')']"
3125,"['program', 'check', 'whether', 'matrix', 'scalar']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'point', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '!=', 'j', 'and', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', '0', ':', 'point', '=', '1', 'break', 'if', 'i', '==', 'j', 'and', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', 'matrix', '[', 'i', ']', '[', 'j', ']', ':', 'point', '=', '1', 'break', 'if', 'point', '==', '1', ':', 'print', '(', '""Given Matrix is not a Scaler Matrix.""', ')', 'else', ':', 'print', '(', '""Given Matrix is a Scaler Matrix.""', ')']"
3126,"['python', 'program', 'find', 'union', 'two', 'list']","['l1', '=', '[', ']', 'num1', '=', 'int', '(', 'input', '(', ""'Enter size of list 1: '"", ')', ')', 'for', 'n', 'in', 'range', '(', 'num1', ')', ':', 'numbers1', '=', 'int', '(', 'input', '(', ""'Enter any number:'"", ')', ')', 'l1', '.', 'append', '(', 'numbers1', ')', 'l2', '=', '[', ']', 'num2', '=', 'int', '(', 'input', '(', ""'Enter size of list 2:'"", ')', ')', 'for', 'n', 'in', 'range', '(', 'num2', ')', ':', 'numbers2', '=', 'int', '(', 'input', '(', ""'Enter any number:'"", ')', ')', 'l2', '.', 'append', '(', 'numbers2', ')', 'union', '=', 'list', '(', 'set', '(', ')', '.', 'union', '(', 'l1', ',', 'l2', ')', ')', 'print', '(', ""'The Union of two lists is:'"", ',', 'union', ')']"
3127,"['python', 'program', 'implement', 'queue', 'data', 'structure', 'using', 'linked', 'list']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'Queue', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last', '=', 'None', 'def', 'enqueue', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last', '=', 'self', '.', 'last', '.', 'next', 'def', 'dequeue', '(', 'self', ')', ':', 'if', 'self', '.', 'head', 'is', 'None', ':', 'return', 'None', 'else', ':', 'to_return', '=', 'self', '.', 'head', '.', 'data', 'self', '.', 'head', '=', 'self', '.', 'head', '.', 'next', 'return', 'to_return', 'a_queue', '=', 'Queue', '(', ')', 'while', 'True', ':', 'print', '(', ""'enqueue <value>'"", ')', 'print', '(', ""'dequeue'"", ')', 'print', '(', ""'quit'"", ')', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'enqueue'"", ':', 'a_queue', '.', 'enqueue', '(', 'int', '(', 'do', '[', '1', ']', ')', ')', 'elif', 'operation', '==', ""'dequeue'"", ':', 'dequeued', '=', 'a_queue', '.', 'dequeue', '(', ')', 'if', 'dequeued', 'is', 'None', ':', 'print', '(', ""'Queue is empty.'"", ')', 'else', ':', 'print', '(', ""'Dequeued element: '"", ',', 'int', '(', 'dequeued', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3128,"['print', 'unicode', 'string', 'hello', 'world']","['unicodeString', '=', 'u""hello world!""', 'print', 'unicodeString']"
3129,"['please', 'write', 'program', 'generate', 'sentence', 'subject', 'verb', 'play', 'love', 'object', 'hockeyfootball']","['subjects', '=', '[', '""I""', ',', '""You""', ']', 'verbs', '=', '[', '""Play""', ',', '""Love""', ']', 'objects', '=', '[', '""Hockey""', ',', '""Football""', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'subjects', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'verbs', ')', ')', ':', 'for', 'k', 'in', 'range', '(', 'len', '(', 'objects', ')', ')', ':', 'sentence', '=', '""%s %s %s.""', '%', '(', 'subjects', '[', 'i', ']', ',', 'verbs', '[', 'j', ']', ',', 'objects', '[', 'k', ']', ')', 'print', 'sentence']"
3130,"['check', 'whether', 'given', 'number', 'perfect', 'square', 'number']","[""'''Write\na Python program\xa0to check whether a given number is a perfect square\nnumber or not. or\xa0\xa0Write a program\xa0to\xa0check whether\na given number is a perfect square number or not using Python '''"", 'import', 'math', 'num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'sqr', '=', 'math', '.', 'sqrt', '(', 'num', ')', 'if', 'sqr', '-', 'math', '.', 'floor', '(', 'sqr', ')', '==', '0', ':', 'print', '(', '""It is a Perfect Square""', ')', 'else', ':', 'print', '(', '""It is not a Perfect Square""', ')']"
3131,"['python', 'program', 'calculate', 'average', 'number', 'given', 'list']","['n', '=', 'int', '(', 'input', '(', '""Enter the number of elements to be inserted: ""', ')', ')', 'a', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'elem', '=', 'int', '(', 'input', '(', '""Enter element: ""', ')', ')', 'a', '.', 'append', '(', 'elem', ')', 'avg', '=', 'sum', '(', 'a', ')', '/', 'n', 'print', '(', '""Average of elements in the list""', ',', 'round', '(', 'avg', ',', '2', ')', ')']"
3132,"['check', 'whether', 'number', 'pronic', 'number']","['import', 'math', 'num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'flag', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'num', '+', '1', ')', ':', 'if', 'i', '*', '(', 'i', '+', '1', ')', '==', 'num', ':', 'flag', '=', '1', 'break', 'if', 'flag', '==', '1', ':', 'print', '(', '""It is a Pronic Number.""', ')', 'else', ':', 'print', '(', '""It is Not a Pronic Number.""', ')']"
3133,"['check', 'given', 'string', 'palindrome', 'using', 'recursion']","['c', '=', '0', 'def', 'Check_Palindrome', '(', 'str', ',', 'i', ',', 'length', ')', ':', 'global', 'c', 'if', '(', 'i', '<', 'len', '(', 'str', ')', ')', ':', 'if', '(', 'str', '[', 'i', ']', '==', 'str', '[', 'length', ']', ')', ':', 'c', '+=', '1', 'Check_Palindrome', '(', 'str', ',', 'i', '+', '1', ',', 'length', '-', '1', ')', 'return', 'cstr', '=', 'input', '(', '""Enter your String:""', ')', 'if', '(', 'Check_Palindrome', '(', 'str', ',', '0', ',', 'len', '(', 'str', ')', '-', '1', ')', '==', 'len', '(', 'str', ')', ')', ':', 'print', '(', '""It is a Palindrome String.""', ')', 'else', ':', 'print', '(', '""It is not a Palindrome String.""', ')']"
3134,"['find', 'maximum', 'product', 'number', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'First_element', '=', 'arr', '[', '0', ']', 'Second_element', '=', 'arr', '[', '1', ']', 'third_element', '=', 'arr', '[', '2', ']', 'Max_Product', '=', 'First_element', '*', 'Second_element', '*', 'third_elementfor', 'i', 'in', 'range', '(', '0', ',', 'size', '-', '2', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ',', 'size', '-', '1', ')', ':', 'for', 'k', 'in', 'range', '(', 'j', '+', '1', ',', 'size', ')', ':', 'product', '=', 'arr', '[', 'i', ']', '*', 'arr', '[', 'j', ']', '*', 'arr', '[', 'k', ']', 'if', 'abs', '(', 'product', ')', '>=', 'abs', '(', 'Max_Product', ')', ':', 'Max_Product', '=', 'product', 'First_element', '=', 'arr', '[', 'i', ']', 'Second_element', '=', 'arr', '[', 'j', ']', 'third_element', '=', 'arr', '[', 'k', ']', 'print', '(', '""Maximum Product of 3 numbers pair is (""', ',', 'First_element', ',', '"",""', ',', 'Second_element', ',', '"",""', ',', 'third_element', ',', '"")""', ')', 'print', '(', '""Maximum Product of 3 numbers is ""', ',', 'Max_Product', ')']"
3135,"['print', 'odd', 'number', 'n']","['n', '=', 'int', '(', 'input', '(', '""Enter the n value:""', ')', ')', 'print', '(', '""Printing Odd numbers between 1 to ""', ',', 'n', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'if', 'i', '%', '2', '!=', '0', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
3136,"['program', 'print', 'series']","['print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'a', '=', '10', 'b', '=', '5', 'i', '=', '1', 'while', '(', 'i', '<=', 'n', ')', ':', 'if', '(', 'i', '%', '2', '==', '0', ')', ':', 'print', '(', 'b', ',', 'end', '=', '"" ""', ')', 'b', '+=', '10', 'else', ':', 'print', '(', 'a', ',', 'end', '=', '"" ""', ')', 'a', '+=', '50', 'i', '+=', '1']"
3137,"['program', 'find', 'sum', 'series', 'n']","['print', '(', '""Enter the range of number:""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Enter the value of x:""', ')', 'x', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '=', '0', 'i', '=', '1', 'while', '(', 'i', '<=', 'n', ')', ':', 'for', 'j', 'in', 'range', '(', '1', ',', 'i', '+', '1', ')', ':', 'sum', '+=', 'j', 'i', '+=', '1', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3138,"['program', 'find', 'sum', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number:""', ')', ')', 'sum', '=', '0', 'p', '=', '3', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum', '+=', 'p', 'p', '=', '(', 'p', '*', '10', ')', '+', '3', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3139,"['python', 'program', 'remove', 'ith', 'occurrence', 'given', 'word', 'list', 'word', 'repeat']","['a', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the number of elements in list:""', ')', ')', 'for', 'x', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'element', '=', 'input', '(', '""Enter element""', '+', 'str', '(', 'x', '+', '1', ')', '+', '"":""', ')', 'a', '.', 'append', '(', 'element', ')', 'print', '(', 'a', ')', 'c', '=', '[', ']', 'count', '=', '0', 'b', '=', 'input', '(', '""Enter word to remove: ""', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter the occurrence to remove: ""', ')', ')', 'for', 'i', 'in', 'a', ':', 'if', '(', 'i', '==', 'b', ')', ':', 'count', '=', 'count', '+', '1', 'if', '(', 'count', '!=', 'n', ')', ':', 'c', '.', 'append', '(', 'i', ')', 'else', ':', 'c', '.', 'append', '(', 'i', ')', 'if', '(', 'count', '==', '0', ')', ':', 'print', '(', '""Item not found ""', ')', 'else', ':', 'print', '(', '""The number of repetitions is: ""', ',', 'count', ')', 'print', '(', '""Updated list is: ""', ',', 'c', ')', 'print', '(', '""The distinct elements are: ""', ',', 'set', '(', 'a', ')', ')']"
3140,"['program', 'convert', 'hexadecimal', 'decimal']","['import', 'math', 'hex', '=', 'input', '(', '""Enter Hexadecimal Number:""', ')', 'value', '=', '0', 'decimal', '=', '0', 'j', '=', 'len', '(', 'hex', ')', 'j', '-=', '1', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'hex', ')', ')', ':', 'if', 'hex', '[', 'i', ']', '>=', ""'0'"", 'and', 'hex', '[', 'i', ']', '<=', ""'9'"", ':', 'value', '=', '(', 'int', ')', '(', 'hex', '[', 'i', ']', ')', 'if', 'hex', '[', 'i', ']', '==', ""'A'"", 'or', 'hex', '[', 'i', ']', '==', ""'a'"", ':', 'value', '=', '10', 'if', 'hex', '[', 'i', ']', '==', ""'B'"", 'or', 'hex', '[', 'i', ']', '==', ""'b'"", ':', 'value', '=', '11', 'if', 'hex', '[', 'i', ']', '==', ""'C'"", 'or', 'hex', '[', 'i', ']', '==', ""'c'"", ':', 'value', '=', '12', 'if', 'hex', '[', 'i', ']', '==', ""'D'"", 'or', 'hex', '[', 'i', ']', '==', ""'d'"", ':', 'value', '=', '13', 'if', 'hex', '[', 'i', ']', '==', ""'E'"", 'or', 'hex', '[', 'i', ']', '==', ""'e'"", ':', 'value', '=', '14', 'if', 'hex', '[', 'i', ']', '==', ""'F'"", 'or', 'hex', '[', 'i', ']', '==', ""'f'"", ':', 'value', '=', '15', 'decimal', '=', 'decimal', '+', '(', 'int', ')', '(', 'value', '*', 'math', '.', 'pow', '(', '16', ',', 'j', ')', ')', 'j', '-=', '1', 'print', '(', '""Decimal Number is:""', ',', 'decimal', ')']"
3141,"['program', 'find', 'square', 'matrix']","['print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'matrix', '[', 'i', ']', '[', 'j', ']', '=', 'pow', '(', 'matrix', '[', 'i', ']', '[', 'j', ']', ',', '2', ')', 'print', '(', '""Square of the Matrix elements are:""', ')', 'for', 'm', 'in', 'matrix', ':', 'print', '(', 'm', ')']"
3142,"['find', 'factorial', 'number', 'using', 'recursion']","['def', 'Factorial', '(', 'num', ')', ':', 'if', 'num', '<=', '0', ':', 'return', '1', 'else', ':', 'return', 'num', '*', 'Factorial', '(', 'num', '-', '1', ')', 'num', '=', 'int', '(', 'input', '(', '""Enter the Number:""', ')', ')', 'print', '(', '""Factorial of Given Number Using Recursion is:""', ',', 'Factorial', '(', 'num', ')', ')']"
3143,"['find', 'sum', 'even', 'number', 'using', 'recursion']","['def', 'SumEven', '(', 'num1', ',', 'num2', ')', ':', 'if', 'num1', '>', 'num2', ':', 'return', '0', 'return', 'num1', '+', 'SumEven', '(', 'num1', '+', '2', ',', 'num2', ')', 'num1', '=', '2', 'print', '(', '""Enter your Limit:""', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Sum of all Even numbers in the given range is:""', ',', 'SumEven', '(', 'num1', ',', 'num2', ')', ')']"
3144,"['write', 'program', 'find', 'nth', 'strong', 'number']","[""'''Write a Python\nprogram\xa0to\xa0find the nth strong number. or\xa0Write a\nprogram\xa0to\xa0find the nth strong number using Python '''"", 'print', '(', '""Enter the Nth value:""', ')', 'rangenumber', '=', 'int', '(', 'input', '(', ')', ')', 'num', '=', '1', 'c', '=', '0', 'letest', '=', '0', 'while', '(', 'c', '!=', 'rangenumber', ')', ':', 'num2', '=', 'num', 'num1', '=', 'num', 'sum', '=', '0', 'fact', '=', '1', 'while', '(', 'num1', '!=', '0', ')', ':', 'fact', '=', '1', 'rem', '=', 'num1', '%', '10', 'num1', '=', 'num1', '//', '10', 'for', 'j', 'in', 'range', '(', '1', ',', 'rem', '+', '1', ')', ':', 'fact', '=', 'fact', '*', 'j', 'sum', '=', 'sum', '+', 'fact', 'if', '(', 'sum', '==', 'num2', ')', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th strong number is ""', ',', 'letest', ')']"
3145,"['python', 'program', 'implement', 'graph']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest> [weight]'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'if', 'len', '(', 'do', ')', '==', '5', ':', 'weight', '=', 'int', '(', 'do', '[', '4', ']', ')', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ',', 'weight', ')', 'else', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3146,"['program', 'find', 'prime', 'factor', 'number']","['import', 'math', 'num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'print', '(', '""Prime Factors of ""', ',', 'num', ',', 'end', '=', '"" are \\n""', ')', 'while', 'num', '%', '2', '==', '0', ':', 'print', '(', '2', ',', ')', 'num', '=', 'num', '/', '2', 'for', 'i', 'in', 'range', '(', '3', ',', 'int', '(', 'math', '.', 'sqrt', '(', 'num', ')', ')', '+', '1', ',', '2', ')', ':', 'while', 'num', '%', 'i', '==', '0', ':', 'print', '(', 'i', ',', ')', 'num', '=', 'num', '/', 'i', 'if', 'num', '>', '2', ':', 'print', '(', 'num', ')']"
3147,"['please', 'write', 'program', 'shuffle', 'print', 'list']","['from', 'random', 'import', 'shuffle', 'li', '=', '[', '3', ',', '6', ',', '7', ',', '8', ']', 'shuffle', '(', 'li', ')', 'print', 'li']"
3148,"['please', 'write', 'program', 'randomly', 'generate', 'list', 'number', 'divisible', 'inclusive']","['import', 'random', 'print', 'random', '.', 'sample', '(', '[', 'i', 'for', 'i', 'in', 'range', '(', '1', ',', '1001', ')', 'if', 'i', '%', '5', '==', '0', 'and', 'i', '%', '7', '==', '0', ']', ',', '5', ')']"
3149,"['python', 'program', 'take', 'two', 'string', 'display', 'larger', 'string', 'without', 'using', 'builtin', 'function']","['string1', '=', 'raw_input', '(', '""Enter first string:""', ')', 'string2', '=', 'raw_input', '(', '""Enter second string:""', ')', 'count1', '=', '0', 'count2', '=', '0', 'for', 'i', 'in', 'string1', ':', 'count1', '=', 'count1', '+', '1', 'for', 'j', 'in', 'string2', ':', 'count2', '=', 'count2', '+', '1', 'if', '(', 'count1', '<', 'count2', ')', ':', 'print', '(', '""Larger string is:""', ')', 'print', '(', 'string2', ')', 'elif', '(', 'count1', '==', 'count2', ')', ':', 'print', '(', '""Both strings are equal.""', ')', 'else', ':', 'print', '(', '""Larger string is:""', ')', 'print', '(', 'string1', ')']"
3150,"['write', 'program', 'print', 'alphabet', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', ';', 'row_size', '=', 'input', '(', ')', 'for', 'out', 'in', 'range', '(', 'ord', '(', 'row_size', ')', ',', 'ord', '(', ""'A'"", ')', '-', '1', ',', '-', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'ord', '(', 'row_size', ')', ',', 'ord', '(', ""'A'"", ')', '-', '1', ',', '-', '1', ')', ':', 'print', '(', 'chr', '(', 'out', ')', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\r""', ')']"
3151,"['program', 'find', 'sum', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number:""', ')', ')', 'sum', '=', '0', 'p', '=', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum', '+=', 'p', 'p', '=', '(', 'p', '*', '10', ')', '+', '1', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3152,"['program', 'swap', 'two', 'number', 'without', 'third', 'variable']","['num1', '=', 'int', '(', 'input', '(', '""Enter 1st number:""', ')', ')', 'num2', '=', 'int', '(', 'input', '(', '""Enter 2nd number:""', ')', ')', 'num1', '=', 'num1', '+', 'num2', 'num2', '=', 'num1', '-', 'num2', 'num1', '=', 'num1', '-', 'num2', 'print', '(', '""***After swapping***""', ')', 'print', '(', '""Number 1: ""', ',', 'num1', ')', 'print', '(', '""Number 2: ""', ',', 'num2', ')']"
3153,"['python', 'program', 'implement', 'bellmanford', 'algorithm']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__len__', '(', 'self', ')', ':', 'return', 'len', '(', 'self', '.', 'vertices', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'bellman_ford', '(', 'g', ',', 'source', ')', ':', '""""""Return distance where distance[v] is min distance from source to v.\n\xa0\n    This will return a dictionary distance.\n\xa0\n    g is a Graph object which can have negative edge weights.\n    source is a Vertex object in g.\n    """"""', 'distance', '=', 'dict', '.', 'fromkeys', '(', 'g', ',', 'float', '(', ""'inf'"", ')', ')', 'distance', '[', 'source', ']', '=', '0', 'for', '_', 'in', 'range', '(', 'len', '(', 'g', ')', '-', '1', ')', ':', 'for', 'v', 'in', 'g', ':', 'for', 'n', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'distance', '[', 'n', ']', '=', 'min', '(', 'distance', '[', 'n', ']', ',', 'distance', '[', 'v', ']', '+', 'v', '.', 'get_weight', '(', 'n', ')', ')', 'return', 'distance', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest> <weight>'"", ')', 'print', '(', ""'bellman-ford <source vertex key>'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'weight', '=', 'int', '(', 'do', '[', '4', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ',', 'weight', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'bellman-ford'"", ':', 'key', '=', 'int', '(', 'do', '[', '1', ']', ')', 'source', '=', 'g', '.', 'get_vertex', '(', 'key', ')', 'distance', '=', 'bellman_ford', '(', 'g', ',', 'source', ')', 'print', '(', ""'Distances from {}: '"", '.', 'format', '(', 'key', ')', ')', 'for', 'v', 'in', 'distance', ':', 'print', '(', ""'Distance to {}: {}'"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'distance', '[', 'v', ']', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3154,"['python', 'program', 'count', 'number', 'blank', 'space', 'text', 'file']","['fname', '=', 'input', '(', '""Enter file name: ""', ')', 'k', '=', '0', 'with', 'open', '(', 'fname', ',', ""'r'"", ')', 'as', 'f', ':', 'for', 'line', 'in', 'f', ':', 'words', '=', 'line', '.', 'split', '(', ')', 'for', 'i', 'in', 'words', ':', 'for', 'letter', 'in', 'i', ':', 'if', '(', 'letter', '.', 'isspace', ')', ':', 'k', '=', 'k', '+', '1', 'print', '(', '""Occurrences of blank spaces:""', ')', 'print', '(', 'k', ')']"
3155,"['print', 'solid', 'diamond', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'x', '=', '1', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '-', '(', 'row_size', '+', '1', ')', ',', '-', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', '1', ',', 'abs', '(', 'out', ')', '+', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', 'row_size', ',', 'abs', '(', 'out', ')', '-', '1', ',', '-', '1', ')', ':', 'print', '(', 'x', ',', 'end', '=', '"" ""', ')', 'if', 'out', '>', '0', ':', 'x', '+=', '1', 'else', ':', 'x', '-=', '1', 'print', '(', '""\\r""', ')']"
3156,"['given', 'tuple', 'write', 'program', 'print', 'first', 'half', 'value', 'one', 'line', 'last', 'half', 'value', 'one', 'line']","['Solution', 'tp', '=', '(', '1', ',', '2', ',', '3', ',', '4', ',', '5', ',', '6', ',', '7', ',', '8', ',', '9', ',', '10', ')', 'tp1', '=', 'tp', '[', ':', '5', ']', 'tp2', '=', 'tp', '[', '5', ':', ']', 'print', 'tp1', 'print', 'tp2']"
3157,"['find', 'sum', 'odd', 'number', 'using', 'recursion', 'array']","['sum', '=', '0', 'def', 'SumOfOddElement', '(', 'arr', ',', 'n', ')', ':', 'global', 'sum', 'if', '(', 'n', '>', '0', ')', ':', 'i', '=', 'n', '-', '1', 'if', '(', 'arr', '[', 'i', ']', '%', '2', '==', '1', ')', ':', 'sum', '=', 'sum', '+', 'arr', '[', 'i', ']', 'SumOfOddElement', '(', 'arr', ',', 'i', ')', 'return', 'sumarr', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Sum of Odd Element is:""', ',', 'SumOfOddElement', '(', 'arr', ',', 'n', ')', ')']"
3158,"['write', 'program', 'compute', 'frequency', 'word', 'input', 'output', 'output', 'sorting', 'key', 'alphanumerically']","['freq', '=', '{', '}', 'line', '=', 'raw_input', '(', ')', 'for', 'word', 'in', 'line', '.', 'split', '(', ')', ':', 'freq', '[', 'word', ']', '=', 'freq', '.', 'get', '(', 'word', ',', '0', ')', '+', '1', 'words', '=', 'freq', '.', 'keys', '(', ')', 'words', '.', 'sort', '(', ')', 'for', 'w', 'in', 'words', ':', 'print', '""%s:%d""', '%', '(', 'w', ',', 'freq', '[', 'w', ']', ')']"
3159,"['please', 'write', 'program', 'print', 'list', 'removing', 'delete', 'even', 'number']","['li', '=', '[', '5', ',', '6', ',', '77', ',', '45', ',', '22', ',', '12', ',', '24', ']', 'li', '=', '[', 'x', 'for', 'x', 'in', 'li', 'if', 'x', '%', '2', '!=', '0', ']', 'print', 'li']"
3160,"['python', 'program', 'exchange', 'value', 'two', 'number', 'without', 'using', 'temporary', 'variable']","['a', '=', 'int', '(', 'input', '(', '""Enter value of first variable: ""', ')', ')', 'b', '=', 'int', '(', 'input', '(', '""Enter value of second variable: ""', ')', ')', 'a', '=', 'a', '+', 'b', 'b', '=', 'a', '-', 'b', 'a', '=', 'a', '-', 'b', 'print', '(', '""a is:""', ',', 'a', ',', '"" b is:""', ',', 'b', ')']"
3161,"['python', 'program', 'check', 'date', 'valid', 'print', 'incremented', 'date']","['date', '=', 'input', '(', '""Enter the date: ""', ')', 'dd', ',', 'mm', ',', 'yy', '=', 'date', '.', 'split', '(', ""'/'"", ')', 'dd', '=', 'int', '(', 'dd', ')', 'mm', '=', 'int', '(', 'mm', ')', 'yy', '=', 'int', '(', 'yy', ')', 'if', '(', 'mm', '==', '1', 'or', 'mm', '==', '3', 'or', 'mm', '==', '5', 'or', 'mm', '==', '7', 'or', 'mm', '==', '8', 'or', 'mm', '==', '10', 'or', 'mm', '==', '12', ')', ':', 'max1', '=', '31', 'elif', '(', 'mm', '==', '4', 'or', 'mm', '==', '6', 'or', 'mm', '==', '9', 'or', 'mm', '==', '11', ')', ':', 'max1', '=', '30', 'elif', '(', 'yy', '%', '4', '==', '0', 'and', 'yy', '%', '100', '!=', '0', 'or', 'yy', '%', '400', '==', '0', ')', ':', 'max1', '=', '29', 'else', ':', 'max1', '=', '28', 'if', '(', 'mm', '<', '1', 'or', 'mm', '>', '12', ')', ':', 'print', '(', '""Date is invalid.""', ')', 'elif', '(', 'dd', '<', '1', 'or', 'dd', '>', 'max1', ')', ':', 'print', '(', '""Date is invalid.""', ')', 'elif', '(', 'dd', '==', 'max1', 'and', 'mm', '!=', '12', ')', ':', 'dd', '=', '1', 'mm', '=', 'mm', '+', '1', 'print', '(', '""The incremented date is: ""', ',', 'dd', ',', 'mm', ',', 'yy', ')', 'elif', '(', 'dd', '==', '31', 'and', 'mm', '==', '12', ')', ':', 'dd', '=', '1', 'mm', '=', '1', 'yy', '=', 'yy', '+', '1', 'print', '(', '""The incremented date is: ""', ',', 'dd', ',', 'mm', ',', 'yy', ')', 'else', ':', 'dd', '=', 'dd', '+', '1', 'print', '(', '""The incremented date is: ""', ',', 'dd', ',', 'mm', ',', 'yy', ')']"
3162,"['find', 'sum', 'diagonal', 'element', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '==', 'j', ':', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Sum of diagonals Element is: ""', ',', 'sum', ')']"
3163,"['python', 'program', 'compute', 'simple', 'interest', 'given', 'required', 'value']","['principle', '=', 'float', '(', 'input', '(', '""Enter the principle amount:""', ')', ')', 'time', '=', 'int', '(', 'input', '(', '""Enter the time(years):""', ')', ')', 'rate', '=', 'float', '(', 'input', '(', '""Enter the rate:""', ')', ')', 'simple_interest', '=', '(', 'principle', '*', 'time', '*', 'rate', ')', '/', '100', 'print', '(', '""The simple interest is:""', ',', 'simple_interest', ')']"
3164,"['program', 'find', 'nth', 'happy', 'number']","['rangenumber', '=', 'int', '(', 'input', '(', '""Enter a Nth Number:""', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', 'c', '!=', 'rangenumber', ':', 'sum', '=', '0', 'num1', '=', 'num', 'while', 'sum', '!=', '1', 'and', 'sum', '!=', '4', ':', 'sum', '=', '0', 'while', 'num1', '!=', '0', ':', 'rem', '=', 'num1', '%', '10', 'sum', '+=', '(', 'rem', '*', 'rem', ')', 'num1', '//=', '10', 'num1', '=', 'sum', 'if', 'sum', '==', '1', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Happy number is ""', ',', 'letest', ')']"
3165,"['write', 'program', 'print', 'pattern']","['import', 'java', '.', 'util', '.', 'Scanner', ';', 'public', 'class', 'p10', '{', 'public', 'static', 'void', 'main', '(', 'String', '[', ']', 'args', ')', '{', 'Scanner', 'cs', '=', 'new', 'Scanner', '(', 'System', '.', 'in', ')', ';', 'System', '.', 'out', '.', 'println', '(', '""Enter the row and column size:""', ')', ';', 'int', 'row_size', ',', 'out', ',', 'in', ';', 'row_size', '=', 'cs', '.', 'nextInt', '(', ')', ';', 'for', '(', 'out', '=', 'row_size', ';', 'out', '>=', '1', ';', 'out', '-', '-', ')', '{', 'for', '(', 'in', '=', '1', ';', 'in', '<=', 'row_size', ';', 'in', '+', '+', ')', 'System', '.', 'out', '.', 'print', '(', 'out', ')', ';', 'System', '.', 'out', '.', 'println', '(', ')', ';', '}', 'cs', '.', 'close', '(', ')', ';', '}', '}']"
3166,"['find', 'magic', 'number', 'present', 'within', 'given', 'range']","['print', '(', '""Enter a range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Magic numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'num3', '=', 'i', 'num1', '=', 'i', 'sum', '=', '0', 'while', 'num1', '!=', '0', ':', 'rem', '=', 'num1', '%', '10', 'sum', '+=', 'rem', 'num1', '//=', '10', 'rev', '=', '0', 'num2', '=', 'sum', 'while', 'num2', '!=', '0', ':', 'rem2', '=', 'num2', '%', '10', 'rev', '=', 'rev', '*', '10', '+', 'rem2', 'num2', '//=', '10', 'if', 'sum', '*', 'rev', '==', 'num3', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
3167,"['program', 'find', 'sum', 'upper', 'triangular', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '>', 'j', ':', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Sum of Upper Triangular Matrix Elements is: ""', ',', 'sum', ')']"
3168,"['please', 'write', 'assert', 'statement', 'verify', 'every', 'number', 'list', 'even']","['li', '=', '[', '2', ',', '4', ',', '6', ',', '8', ']', 'for', 'i', 'in', 'li', ':', 'assert', 'i', '%', '2', '==', '0']"
3169,"['please', 'write', 'program', 'count', 'print', 'number', 'character', 'string', 'input', 'console']","['dic', '=', '{', '}', 's', '=', 'raw_input', '(', ')', 'for', 's', 'in', 's', ':', 'dic', '[', 's', ']', '=', 'dic', '.', 'get', '(', 's', ',', '0', ')', '+', '1', 'print', ""'\\n'"", '.', 'join', '(', '[', ""'%s,%s'"", '%', '(', 'k', ',', 'v', ')', 'for', 'k', ',', 'v', 'in', 'dic', '.', 'items', '(', ')', ']', ')']"
3170,"['find', 'armstrong', 'number', 'present', 'within', 'given', 'range']","['print', '(', '""Enter a range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Armstrong numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'num2', '=', 'i', 'num1', '=', 'i', 'sum', '=', '0', 'while', '(', 'num1', '!=', '0', ')', ':', 'rem', '=', 'num1', '%', '10', 'num1', '=', 'int', '(', 'num1', '/', '10', ')', 'sum', '=', 'sum', '+', 'rem', '*', 'rem', '*', 'rem', 'if', 'sum', '==', 'num2', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
3171,"['python', 'program', 'implement', 'gnome', 'sort']","['def', 'gnome_sort', '(', 'alist', ')', ':', 'for', 'pos', 'in', 'range', '(', '1', ',', 'len', '(', 'alist', ')', ')', ':', 'while', '(', 'pos', '!=', '0', 'and', 'alist', '[', 'pos', ']', '<', 'alist', '[', 'pos', '-', '1', ']', ')', ':', 'alist', '[', 'pos', ']', ',', 'alist', '[', 'pos', '-', '1', ']', '=', 'alist', '[', 'pos', '-', '1', ']', ',', 'alist', '[', 'pos', ']', 'pos', '=', 'pos', '-', '1', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'gnome_sort', '(', 'alist', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'alist', ')']"
3172,"['program', 'print', 'triangular', 'number', 'series', 'n']","['print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'i', '=', '1', 'while', '(', 'i', '<=', 'n', ')', ':', 'print', '(', '(', 'int', ')', '(', '(', 'i', '*', '(', 'i', '+', '1', ')', ')', '/', '2', ')', ',', 'end', '=', '"" ""', ')', 'i', '+=', '1']"
3173,"['python', 'program', 'find', 'shortest', 'path', 'vertex', 'using', 'bfs', 'unweighted', 'graph']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'class', 'Queue', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'items', '=', '[', ']', 'def', 'is_empty', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '==', '[', ']', 'def', 'enqueue', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'items', '.', 'append', '(', 'data', ')', 'def', 'dequeue', '(', 'self', ')', ':', 'return', 'self', '.', 'items', '.', 'pop', '(', '0', ')', 'def', 'find_shortest_paths', '(', 'src', ')', ':', '""""""Returns tuple of two dictionaries: (parent, distance)\n\xa0\n    parent contains vertices mapped to their parent vertex in the shortest\n    path from src to that vertex.\n    distance contains vertices mapped to their shortest distance from src.\n    """"""', 'parent', '=', '{', 'src', ':', 'None', '}', 'distance', '=', '{', 'src', ':', '0', '}', 'visited', '=', 'set', '(', ')', 'q', '=', 'Queue', '(', ')', 'q', '.', 'enqueue', '(', 'src', ')', 'visited', '.', 'add', '(', 'src', ')', 'while', 'not', 'q', '.', 'is_empty', '(', ')', ':', 'current', '=', 'q', '.', 'dequeue', '(', ')', 'for', 'dest', 'in', 'current', '.', 'get_neighbours', '(', ')', ':', 'if', 'dest', 'not', 'in', 'visited', ':', 'visited', '.', 'add', '(', 'dest', ')', 'parent', '[', 'dest', ']', '=', 'current', 'distance', '[', 'dest', ']', '=', 'distance', '[', 'current', ']', '+', '1', 'q', '.', 'enqueue', '(', 'dest', ')', 'return', '(', 'parent', ',', 'distance', ')', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest>'"", ')', 'print', '(', ""'shortest <vertex key>'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'shortest'"", ':', 'key', '=', 'int', '(', 'do', '[', '1', ']', ')', 'src', '=', 'g', '.', 'get_vertex', '(', 'key', ')', 'parent', ',', 'distance', '=', 'find_shortest_paths', '(', 'src', ')', 'print', '(', ""'Path from destination vertices to source vertex {}:'"", '.', 'format', '(', 'key', ')', ')', 'for', 'v', 'in', 'parent', ':', 'print', '(', ""'Vertex {} (distance {}): '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'distance', '[', 'v', ']', ')', ',', 'end', '=', ""''"", ')', 'while', 'parent', '[', 'v', ']', 'is', 'not', 'None', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'v', '=', 'parent', '[', 'v', ']', 'print', '(', 'src', '.', 'get_key', '(', ')', ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3174,"['python', 'program', 'find', 'undirected', 'graph', 'bipartite', 'using', 'dfs']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'add_undirected_edge', '(', 'self', ',', 'v1_key', ',', 'v2_key', ',', 'weight', '=', '1', ')', ':', '""""""Add undirected edge (2 directed edges) between v1_key and v2_key with\n        given weight.""""""', 'self', '.', 'add_edge', '(', 'v1_key', ',', 'v2_key', ',', 'weight', ')', 'self', '.', 'add_edge', '(', 'v2_key', ',', 'v1_key', ',', 'weight', ')', 'def', 'does_undirected_edge_exist', '(', 'self', ',', 'v1_key', ',', 'v2_key', ')', ':', '""""""Return True if there is an undirected edge between v1_key and v2_key.""""""', 'return', '(', 'self', '.', 'does_edge_exist', '(', 'v1_key', ',', 'v2_key', ')', 'and', 'self', '.', 'does_edge_exist', '(', 'v1_key', ',', 'v2_key', ')', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'is_bipartite', '(', 'vertex', ',', 'visited', ')', ':', '""""""Return True if component containing vertex is bipartite and put all\n    vertices in its component in set visited.""""""', 'colour', '=', '{', 'vertex', ':', '0', '}', 'return', 'is_bipartite_helper', '(', 'vertex', ',', 'visited', ',', 'colour', ')', 'def', 'is_bipartite_helper', '(', 'v', ',', 'visited', ',', 'colour', ')', ':', '""""""Return True if component containing vertex is bipartite and put all\n    vertices in its component in set visited. Uses dictionary colour to keep\n    track of colour of each vertex.""""""', 'visited', '.', 'add', '(', 'v', ')', 'next_colour', '=', '1', '-', 'colour', '[', 'v', ']', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'if', 'dest', 'not', 'in', 'visited', ':', 'colour', '[', 'dest', ']', '=', 'next_colour', 'if', 'not', 'is_bipartite_helper', '(', 'dest', ',', 'visited', ',', 'colour', ')', ':', 'return', 'False', 'else', ':', 'if', 'colour', '[', 'dest', ']', '!=', 'next_colour', ':', 'return', 'False', 'return', 'True', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Undirected Graph'"", ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <vertex1> <vertex2>'"", ')', 'print', '(', ""'bipartite'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'v1', '=', 'int', '(', 'do', '[', '2', ']', ')', 'v2', '=', 'int', '(', 'do', '[', '3', ']', ')', 'if', 'v1', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'v1', ')', ')', 'elif', 'v2', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'v2', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_undirected_edge_exist', '(', 'v1', ',', 'v2', ')', ':', 'g', '.', 'add_undirected_edge', '(', 'v1', ',', 'v2', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'bipartite'"", ':', 'bipartite', '=', 'True', 'visited', '=', 'set', '(', ')', 'for', 'v', 'in', 'g', ':', 'if', 'v', 'not', 'in', 'visited', ':', 'if', 'not', 'is_bipartite', '(', 'v', ',', 'visited', ')', ':', 'bipartite', '=', 'False', 'break', 'if', 'bipartite', ':', 'print', '(', ""'Graph is bipartite.'"", ')', 'else', ':', 'print', '(', ""'Graph is not bipartite.'"", ')', 'elif', 'operation', '==', ""'display'"", ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'g', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'g', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3175,"['subtract', 'two', 'number', 'operator', 'without', 'using', 'minus', 'operator']","['num1', '=', 'int', '(', 'input', '(', '""Enter first number:""', ')', ')', 'num2', '=', 'int', '(', 'input', '(', '""Enter\xa0 second number:""', ')', ')', 'sub', '=', 'num1', '+', '(', '~', 'num2', '+', '1', ')', 'print', '(', '""Subtraction of two number is ""', ',', 'sub', ')']"
3176,"['python', 'program', 'find', 'longest', 'common', 'subsequence', 'using', 'dynamic', 'programming', 'memoization']","['def', 'lcs', '(', 'u', ',', 'v', ')', ':', '""""""Return c where c[i][j] contains length of LCS of u[i:] and v[j:].""""""', 'c', '=', '[', '[', '-', '1', ']', '*', '(', 'len', '(', 'v', ')', '+', '1', ')', 'for', '_', 'in', 'range', '(', 'len', '(', 'u', ')', '+', '1', ')', ']', 'lcs_helper', '(', 'u', ',', 'v', ',', 'c', ',', '0', ',', '0', ')', 'return', 'c', 'def', 'lcs_helper', '(', 'u', ',', 'v', ',', 'c', ',', 'i', ',', 'j', ')', ':', '""""""Return length of LCS of u[i:] and v[j:] and fill in table c.\n\xa0\n    c[i][j] contains the length of LCS of u[i:] and v[j:].\n    This function fills in c as smaller subproblems for solving c[i][j] are\n    solved.""""""', 'if', 'c', '[', 'i', ']', '[', 'j', ']', '>=', '0', ':', 'return', 'c', '[', 'i', ']', '[', 'j', ']', 'if', 'i', '==', 'len', '(', 'u', ')', 'or', 'j', '==', 'len', '(', 'v', ')', ':', 'q', '=', '0', 'else', ':', 'if', 'u', '[', 'i', ']', '==', 'v', '[', 'j', ']', ':', 'q', '=', '1', '+', 'lcs_helper', '(', 'u', ',', 'v', ',', 'c', ',', 'i', '+', '1', ',', 'j', '+', '1', ')', 'else', ':', 'q', '=', 'max', '(', 'lcs_helper', '(', 'u', ',', 'v', ',', 'c', ',', 'i', '+', '1', ',', 'j', ')', ',', 'lcs_helper', '(', 'u', ',', 'v', ',', 'c', ',', 'i', ',', 'j', '+', '1', ')', ')', 'c', '[', 'i', ']', '[', 'j', ']', '=', 'q', 'return', 'q', 'def', 'print_lcs', '(', 'u', ',', 'v', ',', 'c', ')', ':', '""""""Print one LCS of u and v using table c.""""""', 'i', '=', 'j', '=', '0', 'while', 'not', '(', 'i', '==', 'len', '(', 'u', ')', 'or', 'j', '==', 'len', '(', 'v', ')', ')', ':', 'if', 'u', '[', 'i', ']', '==', 'v', '[', 'j', ']', ':', 'print', '(', 'u', '[', 'i', ']', ',', 'end', '=', ""''"", ')', 'i', '+=', '1', 'j', '+=', '1', 'elif', 'c', '[', 'i', ']', '[', 'j', '+', '1', ']', '>', 'c', '[', 'i', '+', '1', ']', '[', 'j', ']', ':', 'j', '+=', '1', 'else', ':', 'i', '+=', '1', 'u', '=', 'input', '(', ""'Enter first string: '"", ')', 'v', '=', 'input', '(', ""'Enter second string: '"", ')', 'c', '=', 'lcs', '(', 'u', ',', 'v', ')', 'print', '(', ""'Longest Common Subsequence: '"", ',', 'end', '=', ""''"", ')', 'print_lcs', '(', 'u', ',', 'v', ',', 'c', ')']"
3177,"['python', 'program', 'print', 'alternate', 'node', 'linked', 'list', 'using', 'recursion']","['class', 'Node', ':', 'def', '__init__', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'data', '=', 'data', 'self', '.', 'next', '=', 'None', 'class', 'LinkedList', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'head', '=', 'None', 'self', '.', 'last_node', '=', 'None', 'def', 'append', '(', 'self', ',', 'data', ')', ':', 'if', 'self', '.', 'last_node', 'is', 'None', ':', 'self', '.', 'head', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'head', 'else', ':', 'self', '.', 'last_node', '.', 'next', '=', 'Node', '(', 'data', ')', 'self', '.', 'last_node', '=', 'self', '.', 'last_node', '.', 'next', 'def', 'alternate', '(', 'self', ')', ':', 'self', '.', 'alternate_helper', '(', 'self', '.', 'head', ')', 'def', 'alternate_helper', '(', 'self', ',', 'current', ')', ':', 'if', 'current', 'is', 'None', ':', 'return', 'print', '(', 'current', '.', 'data', ',', 'end', '=', ""' '"", ')', 'if', 'current', '.', 'next', ':', 'self', '.', 'alternate_helper', '(', 'current', '.', 'next', '.', 'next', ')', 'a_llist', '=', 'LinkedList', '(', ')', 'data_list', '=', 'input', '(', ""'Please enter the elements in the linked list: '"", ')', '.', 'split', '(', ')', 'for', 'data', 'in', 'data_list', ':', 'a_llist', '.', 'append', '(', 'int', '(', 'data', ')', ')', 'print', '(', ""'The alternate nodes of the linked list: '"", ',', 'end', '=', ""''"", ')', 'a_llist', '.', 'alternate', '(', ')']"
3178,"['program', 'find', 'factorial', 'number']","['num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'fact', '=', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'num', '+', '1', ')', ':', 'fact', '=', 'fact', '*', 'i', 'print', '(', '""The Factorial is""', ',', 'fact', ')']"
3179,"['quick', 'sort', 'program', 'python', 'java', 'c', 'c']","['def', 'partition', '(', 'arr', ',', 'first', ',', 'last', ')', ':', 'i', '=', 'first', '-', '1', 'x', '=', 'arr', '[', 'last', ']', 'for', 'j', 'in', 'range', '(', 'first', ',', 'last', ')', ':', 'if', '(', 'arr', '[', 'j', ']', '<', 'x', ')', ':', 'i', '+=', '1', 'temp', '=', 'arr', '[', 'i', ']', 'arr', '[', 'i', ']', '=', 'arr', '[', 'j', ']', 'arr', '[', 'j', ']', '=', 'temp', 'i', '+=', '1', 'temp', '=', 'arr', '[', 'i', ']', 'arr', '[', 'i', ']', '=', 'arr', '[', 'last', ']', 'arr', '[', 'last', ']', '=', 'temp', 'return', 'i', 'def', 'qsort', '(', 'arr', ',', 'first', ',', 'last', ')', ':', 'if', '(', 'first', '<', 'last', ')', ':', 'mid', '=', 'partition', '(', 'arr', ',', 'first', ',', 'last', ')', 'qsort', '(', 'arr', ',', 'first', ',', 'mid', '-', '1', ')', 'qsort', '(', 'arr', ',', 'mid', '+', '1', ',', 'last', ')', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array:""', ')', ')', 'arr', '=', '[', ']', 'print', '(', '""Enter the element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Before Sorting Array Element are: ""', ',', 'arr', ')', 'qsort', '(', 'arr', ',', '0', ',', 'size', '-', '1', ')', 'print', '(', '""\\nAfter Sorting Array Element are: ""', ',', 'arr', ')']"
3180,"['move', 'zero', 'end', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'c', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '!=', '0', ':', 'arr', '[', 'c', ']', '=', 'arr', '[', 'i', ']', 'c', '+=', '1', 'for', 'i', 'in', 'range', '(', 'c', ',', 'size', ')', ':', 'arr', '[', 'c', ']', '=', '0', 'c', '+=', '1', 'print', '(', '""After Move all zeros to end, Array is:""', ')', 'print', '(', 'arr', ')']"
3181,"['write', 'cjavacpython', 'program', 'compute', 'xnn']","['n', '=', 'int', '(', 'input', '(', '""Enter the n Value:""', ')', ')', 'x', '=', 'int', '(', 'input', '(', '""Enter the x value:""', ')', ')', 'fact', '=', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'fact', '*=', 'i', 'result', '=', 'pow', '(', 'x', ',', 'n', ')', '/', 'fact', 'print', '(', '""Result(x^n/n!)= ""', ',', 'result', ')']"
3182,"['python', 'program', 'find', 'binary', 'equivalent', 'number', 'recursively']","['l', '=', '[', ']', 'def', 'convert', '(', 'b', ')', ':', 'if', '(', 'b', '==', '0', ')', ':', 'return', 'l', 'dig', '=', 'b', '%', '2', 'l', '.', 'append', '(', 'dig', ')', 'convert', '(', 'b', '//', '2', ')', 'a', '=', 'int', '(', 'input', '(', '""Enter a number: ""', ')', ')', 'convert', '(', 'a', ')', 'l', '.', 'reverse', '(', ')', 'print', '(', '""Binary equivalent:""', ')', 'for', 'i', 'in', 'l', ':', 'print', 'i', ',']"
3183,"['python', 'program', 'read', 'number', 'n', 'print', 'natural', 'number', 'summation', 'pattern']","['n', '=', 'int', '(', 'input', '(', '""Enter a number: ""', ')', ')', 'for', 'j', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'a', '=', '[', ']', 'for', 'i', 'in', 'range', '(', '1', ',', 'j', '+', '1', ')', ':', 'print', '(', 'i', ',', 'sep', '=', '"" ""', ',', 'end', '=', '"" ""', ')', 'if', '(', 'i', '<', 'j', ')', ':', 'print', '(', '""+""', ',', 'sep', '=', '"" ""', ',', 'end', '=', '"" ""', ')', 'a', '.', 'append', '(', 'i', ')', 'print', '(', '""=""', ',', 'sum', '(', 'a', ')', ')', 'print', '(', ')']"
3184,"['python', 'program', 'print', 'identity', 'matrix']","['n', '=', 'int', '(', 'input', '(', '""Enter a number: ""', ')', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'if', '(', 'i', '==', 'j', ')', ':', 'print', '(', '""1""', ',', 'sep', '=', '"" ""', ',', 'end', '=', '"" ""', ')', 'else', ':', 'print', '(', '""0""', ',', 'sep', '=', '"" ""', ',', 'end', '=', '"" ""', ')', 'print', '(', ')']"
3185,"['fibonacci', 'sequence', 'computed', 'based', 'following', 'formula', 'please', 'write', 'program', 'compute', 'value', 'fn', 'given', 'n', 'input', 'console']","['def', 'f', '(', 'n', ')', ':', 'if', 'n', '==', '0', ':', 'return', '0', 'elif', 'n', '==', '1', ':', 'return', '1', 'else', ':', 'return', 'f', '(', 'n', '-', '1', ')', '+', 'f', '(', 'n', '-', '2', ')', 'n', '=', 'int', '(', 'raw_input', '(', ')', ')', 'print', 'f', '(', 'n', ')']"
3186,"['please', 'write', 'program', 'accepts', 'string', 'console', 'print', 'reverse', 'order']","['s', '=', 'raw_input', '(', ')', 's', '=', 's', '[', ':', ':', '-', '1', ']', 'print', 's']"
3187,"['sort', 'array', 'ascending', 'order', 'using', 'recursion']","['def', 'swap_Element', '(', 'arr', ',', 'i', ',', 'j', ')', ':', 'temp', '=', 'arr', '[', 'i', ']', 'arr', '[', 'i', ']', '=', 'arr', '[', 'j', ']', 'arr', '[', 'j', ']', '=', 'tempdef', 'sort_element', '(', 'arr', ',', 'n', ')', ':', 'if', '(', 'n', '>', '0', ')', ':', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'if', '(', 'arr', '[', 'i', ']', '>=', 'arr', '[', 'n', '-', '1', ']', ')', ':', 'swap_Element', '(', 'arr', ',', 'i', ',', 'n', '-', '1', ')', 'sort_element', '(', 'arr', ',', 'n', '-', '1', ')', 'def', 'printArr', '(', 'arr', ',', 'n', ')', ':', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')', 'arr', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'sort_element', '(', 'arr', ',', 'n', ')', 'print', '(', '""After ascending\xa0 order sort Array Elements are:""', ')', 'printArr', '(', 'arr', ',', 'n', ')']"
3188,"['check', 'whether', 'given', 'number', 'perfect', 'number']","['num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'num', ')', ':', 'if', '(', 'num', '%', 'i', '==', '0', ')', ':', 'sum', '=', 'sum', '+', 'i', 'if', 'sum', '==', 'num', ':', 'print', '(', '""It is a Perfect Number""', ')', 'else', ':', 'print', '(', '""It is not a Perfect Number""', ')']"
3189,"['program', 'find', 'sum', 'series']","['print', '(', '""Enter the range of number:""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '=', '0', 'fact', '=', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'fact', '*=', 'i', 'sum', '+=', 'fact', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3190,"['python', 'program', 'check', 'string', 'pangram']","['from', 'string', 'import', 'ascii_lowercase', 'as', 'asc_lower', 'def', 'check', '(', 's', ')', ':', 'return', 'set', '(', 'asc_lower', ')', '-', 'set', '(', 's', '.', 'lower', '(', ')', ')', '==', 'set', '(', '[', ']', ')', 'strng', '=', 'raw_input', '(', '""Enter string:""', ')', 'if', '(', 'check', '(', 'strng', ')', '==', 'True', ')', ':', 'print', '(', '""The string is a pangram""', ')', 'else', ':', 'print', '(', '""The string isn\'t a pangram""', ')']"
3191,"['program', 'find', 'area', 'perimeter', 'square']","['side', '=', 'int', '(', 'input', '(', '""Enter side of a square :""', ')', ')', 'area', '=', 'side', '*', 'side', 'perimeter', '=', '4', '*', 'side', 'print', '(', '""Area of the Square=""', ',', 'area', ')', 'print', '(', '""Perimeter of the square=""', ',', 'perimeter', ')']"
3192,"['write', 'program', 'calculates', 'print', 'value', 'according', 'given', 'formula', 'q', 'square', 'root', 'c', 'dh', 'following', 'fixed', 'value', 'c', 'h', 'c', 'h', 'variable', 'whose', 'value', 'input', 'program', 'commaseparated', 'sequence']","['import', 'math', 'c', '=', '50', 'h', '=', '30', 'value', '=', '[', ']', 'items', '=', '[', 'x', 'for', 'x', 'in', 'raw_input', '(', ')', '.', 'split', '(', ""','"", ')', ']', 'for', 'd', 'in', 'items', ':', 'value', '.', 'append', '(', 'str', '(', 'int', '(', 'round', '(', 'math', '.', 'sqrt', '(', '2', '*', 'c', '*', 'float', '(', 'd', ')', '/', 'h', ')', ')', ')', ')', ')', 'print', ""','"", '.', 'join', '(', 'value', ')']"
3193,"['python', 'program', 'find', 'gravitational', 'force', 'acting', 'two', 'object']","['m1', '=', 'float', '(', 'input', '(', '""Enter the first mass: ""', ')', ')', 'm2', '=', 'float', '(', 'input', '(', '""Enter the second mass: ""', ')', ')', 'r', '=', 'float', '(', 'input', '(', '""Enter the distance between the centres of the masses: ""', ')', ')', 'G', '=', '6.673', '*', '(', '10', '**', '-', '11', ')', 'f', '=', '(', 'G', '*', 'm1', '*', 'm2', ')', '/', '(', 'r', '**', '2', ')', 'print', '(', '""Hence, the gravitational force is: ""', ',', 'round', '(', 'f', ',', '2', ')', ',', '""N""', ')']"
3194,"['print', 'ascii', 'value', 'character', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'print', '(', '""ASCII values of letters in string are:""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'print', '(', 'str', '[', 'i', ']', ',', '"" ==> ""', ',', '(', 'ord', ')', '(', 'str', '[', 'i', ']', ')', ')']"
3195,"['check', 'prime', 'number', 'using', 'recursion']","['def', 'CheckPrime', '(', 'i', ',', 'num', ')', ':', 'if', 'num', '==', 'i', ':', 'return', '0', 'else', ':', 'if', '(', 'num', '%', 'i', '==', '0', ')', ':', 'return', '1', 'else', ':', 'return', 'CheckPrime', '(', 'i', '+', '1', ',', 'num', ')', 'num', '=', 'int', '(', 'input', '(', '""Enter your Number:""', ')', ')', 'if', '(', 'CheckPrime', '(', '2', ',', 'num', ')', '==', '0', ')', ':', 'print', '(', '""It is a Prime Number.""', ')', 'else', ':', 'print', '(', '""It is not a Prime Number.""', ')']"
3196,"['find', 'lexicographic', 'rank', 'given', 'string']","['def', 'Find_Factorial', '(', 'len1', ')', ':', 'fact', '=', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'len1', '+', '1', ')', ':', 'fact', '=', 'fact', '*', 'i', 'return', 'factdef', 'Find_Lexicographic_Rank', '(', 'str', ',', 'len1', ')', ':', 'rank', '=', '1', 'for', 'inn', 'in', 'range', '(', '0', ',', 'len1', ')', ':', 'count', '=', '0', 'for', 'out', 'in', 'range', '(', 'inn', '+', '1', ',', 'len1', '+', '1', ')', ':', 'if', 'str', '[', 'inn', ']', '>', 'str', '[', 'out', ']', ':', 'count', '+=', '1', 'rank', '+=', 'count', '*', 'Find_Factorial', '(', 'len1', '-', 'inn', ')', 'return', 'rankstr', '=', 'input', '(', '""Enter Your String:""', ')', 'print', '(', '""Lexicographic Rank of given String is: ""', ',', 'Find_Lexicographic_Rank', '(', 'str', ',', 'len', '(', 'str', ')', '-', '1', ')', ')']"
3197,"['find', 'largest', 'element', 'array']","['import', 'sys', 'arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'max', '=', '-', 'sys', '.', 'maxsize', '-', '1', 'for', 'j', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', '(', 'arr', '[', 'j', ']', '>=', 'max', ')', ':', 'max', '=', 'arr', '[', 'j', ']', 'print', '(', '""The largest element of array: ""', ',', 'max', ')']"
3198,"['program', 'print', 'solid', 'half', 'diamond', 'alphabet', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '-', '(', 'row_size', '+', '1', ')', ',', '-', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', 'row_size', ',', 'abs', '(', 'out', ')', '-', '1', ',', '-', '1', ')', ':', 'print', '(', '(', 'chr', ')', '(', 'inn', '+', '65', ')', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
3199,"['write', 'program', 'find', 'nth', 'strong', 'number']","[""'''Write a Python\nprogram\xa0to\xa0find the nth strong number. or\xa0Write a\nprogram\xa0to\xa0find the nth strong number using Python '''"", 'print', '(', '""Enter the Nth value:""', ')', 'rangenumber', '=', 'int', '(', 'input', '(', ')', ')', 'num', '=', '1', 'c', '=', '0', 'letest', '=', '0', 'while', '(', 'c', '!=', 'rangenumber', ')', ':', 'num2', '=', 'num', 'num1', '=', 'num', 'sum', '=', '0', 'fact', '=', '1', 'while', '(', 'num1', '!=', '0', ')', ':', 'fact', '=', '1', 'rem', '=', 'num1', '%', '10', 'num1', '=', 'num1', '//', '10', 'for', 'j', 'in', 'range', '(', '1', ',', 'rem', '+', '1', ')', ':', 'fact', '=', 'fact', '*', 'j', 'sum', '=', 'sum', '+', 'fact', 'if', '(', 'sum', '==', 'num2', ')', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th strong number is ""', ',', 'letest', ')']"
3200,"['program', 'find', 'sum', 'lower', 'triangular', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '<', 'j', ':', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Sum of Lower Triangular Matrix Elements is: ""', ',', 'sum', ')']"
3201,"['python', 'program', 'implement', 'insertion', 'sort']","['def', 'insertion_sort', '(', 'alist', ')', ':', 'for', 'i', 'in', 'range', '(', '1', ',', 'len', '(', 'alist', ')', ')', ':', 'temp', '=', 'alist', '[', 'i', ']', 'j', '=', 'i', '-', '1', 'while', '(', 'j', '>=', '0', 'and', 'temp', '<', 'alist', '[', 'j', ']', ')', ':', 'alist', '[', 'j', '+', '1', ']', '=', 'alist', '[', 'j', ']', 'j', '=', 'j', '-', '1', 'alist', '[', 'j', '+', '1', ']', '=', 'temp', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'insertion_sort', '(', 'alist', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'alist', ')']"
3202,"['add', 'number', 'without', 'using', 'arithmetic', 'operator']","[""'''Write a Python\nprogram\xa0to\xa0add between 2 numbers without using arithmetic operators.\nor\xa0Write a program\xa0to\xa0add between 2 numbers without using\narithmetic operators using Python '''"", 'print', '(', '""Enter first number:""', ')', 'num1', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Enter\xa0 second number:""', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'while', 'num2', '!=', '0', ':', 'carry', '=', 'num1', '&', 'num2', 'num1', '=', 'num1', '^', 'num2', 'num2', '=', 'carry', '<<', '1', 'print', '(', '""Addition of two number is ""', ',', 'num1', ')']"
3203,"['program', 'calculate', 'speed', 'kmhr']","['d', '=', 'float', '(', 'input', '(', '""Enter the Distance in Kms:""', ')', ')', 't', '=', 'float', '(', 'input', '(', '""Enter the Time in Hrs:""', ')', ')', 'speed', '=', 'd', '/', 't', 'print', '(', '""Speed is ""', ',', 'speed', ',', '"" (Km/Hr)""', ')']"
3204,"['program', 'convert', 'binary', 'decimal', 'using', 'loop']","['print', '(', '""Enter Binary number:""', ')', 'binary', '=', 'int', '(', 'input', '(', ')', ')', 'decimal', '=', '0', 'temp', '=', '0', 'while', '(', 'binary', '!=', '0', ')', ':', 'reminder', '=', 'binary', '%', '10', 'binary', '=', 'binary', '//', '10', 'decimal', '=', 'decimal', '+', 'reminder', '*', 'pow', '(', '2', ',', 'temp', ')', 'temp', '=', 'temp', '+', '1', 'print', '(', '""Decimal number is: ""', ',', 'decimal', ')']"
3205,"['program', 'find', 'normal', 'trace', 'matrix']","['import', 'math', 'row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'trace', '=', '0', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'if', 'i', '==', 'j', ':', 'trace', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'normal', '=', 'math', '.', 'sqrt', '(', 'sum', ')', 'print', '(', '""Normal Of the Matrix is: ""', ',', 'normal', ')', 'print', '(', '""Trace Of the Matrix is: ""', ',', 'trace', ')']"
3206,"['program', 'find', 'sum', 'series', 'nn']","['print', '(', '""Enter the range of number:""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '=', '0.0', 'fact', '=', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'fact', '*=', 'i', 'sum', '+=', 'fact', '/', 'i', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3207,"['python', 'program', 'find', 'minimum', 'spanning', 'tree', 'using', 'prims', 'algorithm']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', 'display', '(', 'self', ')', ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'self', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'self', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'def', '__len__', '(', 'self', ')', ':', 'return', 'len', '(', 'self', '.', 'vertices', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'mst_prim', '(', 'g', ')', ':', '""""""Return a minimum cost spanning tree of the connected graph g.""""""', 'mst', '=', 'Graph', '(', ')', 'if', 'not', 'g', ':', 'return', 'mst', 'nearest_neighbour', '=', '{', '}', 'smallest_distance', '=', '{', '}', 'unvisited', '=', 'set', '(', 'g', ')', 'u', '=', 'next', '(', 'iter', '(', 'g', ')', ')', 'mst', '.', 'add_vertex', '(', 'u', '.', 'get_key', '(', ')', ')', 'unvisited', '.', 'remove', '(', 'u', ')', 'for', 'n', 'in', 'u', '.', 'get_neighbours', '(', ')', ':', 'if', 'n', 'is', 'u', ':', 'continue', 'nearest_neighbour', '[', 'n', ']', '=', 'mst', '.', 'get_vertex', '(', 'u', '.', 'get_key', '(', ')', ')', 'smallest_distance', '[', 'n', ']', '=', 'u', '.', 'get_weight', '(', 'n', ')', 'while', '(', 'smallest_distance', ')', ':', 'outside_mst', '=', 'min', '(', 'smallest_distance', ',', 'key', '=', 'smallest_distance', '.', 'get', ')', 'inside_mst', '=', 'nearest_neighbour', '[', 'outside_mst', ']', 'mst', '.', 'add_vertex', '(', 'outside_mst', '.', 'get_key', '(', ')', ')', 'mst', '.', 'add_edge', '(', 'outside_mst', '.', 'get_key', '(', ')', ',', 'inside_mst', '.', 'get_key', '(', ')', ',', 'smallest_distance', '[', 'outside_mst', ']', ')', 'mst', '.', 'add_edge', '(', 'inside_mst', '.', 'get_key', '(', ')', ',', 'outside_mst', '.', 'get_key', '(', ')', ',', 'smallest_distance', '[', 'outside_mst', ']', ')', 'unvisited', '.', 'remove', '(', 'outside_mst', ')', 'del', 'smallest_distance', '[', 'outside_mst', ']', 'del', 'nearest_neighbour', '[', 'outside_mst', ']', 'for', 'n', 'in', 'outside_mst', '.', 'get_neighbours', '(', ')', ':', 'if', 'n', 'in', 'unvisited', ':', 'if', 'n', 'not', 'in', 'smallest_distance', ':', 'smallest_distance', '[', 'n', ']', '=', 'outside_mst', '.', 'get_weight', '(', 'n', ')', 'nearest_neighbour', '[', 'n', ']', '=', 'mst', '.', 'get_vertex', '(', 'outside_mst', '.', 'get_key', '(', ')', ')', 'else', ':', 'if', 'smallest_distance', '[', 'n', ']', '>', 'outside_mst', '.', 'get_weight', '(', 'n', ')', ':', 'smallest_distance', '[', 'n', ']', '=', 'outside_mst', '.', 'get_weight', '(', 'n', ')', 'nearest_neighbour', '[', 'n', ']', '=', 'mst', '.', 'get_vertex', '(', 'outside_mst', '.', 'get_key', '(', ')', ')', 'return', 'mst', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Undirected Graph'"", ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest> <weight>'"", ')', 'print', '(', ""'mst'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'weight', '=', 'int', '(', 'do', '[', '4', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ',', 'weight', ')', 'g', '.', 'add_edge', '(', 'dest', ',', 'src', ',', 'weight', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'mst'"", ':', 'mst', '=', 'mst_prim', '(', 'g', ')', 'print', '(', ""'Minimum Spanning Tree:'"", ')', 'mst', '.', 'display', '(', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'display'"", ':', 'g', '.', 'display', '(', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3208,"['print', 'number', 'using', 'loop']","['for', 'i', 'in', 'range', '(', '1', ',', '101', ')', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
3209,"['python', 'program', 'find', 'sum', 'node', 'tree']","['class', 'Tree', ':', 'def', '__init__', '(', 'self', ',', 'data', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'data', 'self', '.', 'children', '=', '[', ']', 'def', 'set_root', '(', 'self', ',', 'data', ')', ':', 'self', '.', 'key', '=', 'data', 'def', 'add', '(', 'self', ',', 'node', ')', ':', 'self', '.', 'children', '.', 'append', '(', 'node', ')', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'for', 'child', 'in', 'self', '.', 'children', ':', 'temp', '=', 'child', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'return', 'None', 'def', 'sum_nodes', '(', 'self', ')', ':', 'summation', '=', 'self', '.', 'key', 'for', 'child', 'in', 'self', '.', 'children', ':', 'summation', '=', 'summation', '+', 'child', '.', 'sum_nodes', '(', ')', 'return', 'summation', 'tree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'add <data> at root'"", ')', 'print', '(', ""'add <data> below <data>'"", ')', 'print', '(', ""'sum'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'add'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'Tree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'tree', '=', 'new_node', 'elif', 'suboperation', '==', ""'below'"", ':', 'position', '=', 'do', '[', '3', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'tree', 'is', 'not', 'None', ':', 'ref_node', '=', 'tree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'ref_node', '.', 'add', '(', 'new_node', ')', 'elif', 'operation', '==', ""'sum'"", ':', 'if', 'tree', 'is', 'None', ':', 'print', '(', ""'Tree is empty.'"", ')', 'else', ':', 'summation', '=', 'tree', '.', 'sum_nodes', '(', ')', 'print', '(', ""'Sum of all nodes: {}'"", '.', 'format', '(', 'summation', ')', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3210,"['print', 'full', 'inverted', 'pyramid', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '0', ',', '-', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', 'row_size', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', 'out', ',', '0', ',', '-', '1', ')', ':', 'print', '(', 'out', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\r""', ')']"
3211,"['program', 'find', 'sum', 'series']","['print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'i', '=', '1', 'sum', '=', '0.0', 'while', '(', 'i', '<=', 'n', ')', ':', 'if', '(', 'i', '%', '2', '==', '0', ')', ':', 'sum', '-=', 'i', '/', '(', 'i', '+', '1', ')', 'else', ':', 'sum', '+=', 'i', '/', '(', 'i', '+', '1', ')', 'i', '+=', '1', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3212,"['check', 'whether', 'number', 'happy', 'number']","['num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'sum', '=', '0', 'while', 'sum', '!=', '1', 'and', 'sum', '!=', '4', ':', 'sum', '=', '0', 'while', 'num', '!=', '0', ':', 'rem', '=', 'num', '%', '10', 'sum', '+=', '(', 'rem', '*', 'rem', ')', 'num', '//=', '10', 'num', '=', 'sum', 'if', 'sum', '==', '1', ':', 'print', '(', '""It is a Happy Number.""', ')', 'else', ':', 'print', '(', '""It is\xa0 an Unhappy Number.""', ')']"
3213,"['find', 'length', 'string', 'using', 'inbuilt', 'function']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'print', '(', '""Your Enter String is:""', ',', 'len', '(', 'str', ')', ')']"
3214,"['python', 'program', 'take', 'string', 'replace', 'every', 'blank', 'space', 'hyphen']","['string', '=', 'raw_input', '(', '""Enter string:""', ')', 'string', '=', 'string', '.', 'replace', '(', ""' '"", ',', ""'-'"", ')', 'print', '(', '""Modified string:""', ')', 'print', '(', 'string', ')']"
3215,"['python', 'program', 'find', 'cumulative', 'sum', 'list', 'ith', 'element', 'sum', 'first', 'element', 'original', 'list']","['a', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the number of elements in list:""', ')', ')', 'for', 'x', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'element', '=', 'int', '(', 'input', '(', '""Enter element""', '+', 'str', '(', 'x', '+', '1', ')', '+', '"":""', ')', ')', 'a', '.', 'append', '(', 'element', ')', 'b', '=', '[', 'sum', '(', 'a', '[', '0', ':', 'x', '+', '1', ']', ')', 'for', 'x', 'in', 'range', '(', '0', ',', 'len', '(', 'a', ')', ')', ']', 'print', '(', '""The original list is: ""', ',', 'a', ')', 'print', '(', '""The new list is: ""', ',', 'b', ')']"
3216,"['program', 'enter', 'basic', 'salary', 'calculate', 'gross', 'salary', 'employee']","['basic', '=', 'float', '(', 'input', '(', '""Enter the basic salary of an employee:""', ')', ')', 'da', '=', '(', 'float', ')', '(', '15', '*', 'basic', ')', '/', '100.0', 'hr', '=', '(', 'float', ')', '(', '10', '*', 'basic', ')', '/', '100.0', 'da_on_ta', '=', '(', 'float', ')', '(', '3', '*', 'basic', ')', '/', '100.0', 'gross', '=', 'basic', '+', 'da', '+', 'hr', '+', 'da_on_ta', 'print', '(', '""Gross salary of an Employee= ""', ',', 'gross', ')']"
3217,"['python', 'program', 'solve', 'rod', 'cutting', 'problem', 'using', 'dynamic', 'programming', 'bottomup', 'approach']","['def', 'cut_rod', '(', 'p', ',', 'n', ')', ':', '""""""Take a list p of prices and the rod length n and return lists r and s.\n    r[i] is the maximum revenue that you can get and s[i] is the length of the\n    first piece to cut from a rod of length i.""""""', 'r', '=', '[', '-', '1', ']', '*', '(', 'n', '+', '1', ')', 'r', '[', '0', ']', '=', '0', 's', '=', '[', '-', '1', ']', '*', '(', 'n', '+', '1', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'q', '=', '-', '1', 'for', 'j', 'in', 'range', '(', '1', ',', 'i', '+', '1', ')', ':', 'temp', '=', 'p', '[', 'j', ']', '+', 'r', '[', 'i', '-', 'j', ']', 'if', 'q', '<', 'temp', ':', 'q', '=', 'temp', 's', '[', 'i', ']', '=', 'j', 'r', '[', 'i', ']', '=', 'q', 'return', 'r', ',', 's', 'n', '=', 'int', '(', 'input', '(', ""'Enter the length of the rod in inches: '"", ')', ')', 'p', '=', '[', 'None', ']', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'price', '=', 'input', '(', ""'Enter the price of a rod of length {} in: '"", '.', 'format', '(', 'i', ')', ')', 'p', '.', 'append', '(', 'int', '(', 'price', ')', ')', 'r', ',', 's', '=', 'cut_rod', '(', 'p', ',', 'n', ')', 'print', '(', ""'The maximum revenue that can be obtained:'"", ',', 'r', '[', 'n', ']', ')', 'print', '(', ""'The rod needs to be cut into length(s) of '"", ',', 'end', '=', ""''"", ')', 'while', 'n', '>', '0', ':', 'print', '(', 's', '[', 'n', ']', ',', 'end', '=', ""' '"", ')', 'n', '-=', 's', '[', 'n', ']']"
3218,"['python', 'program', 'check', 'whether', 'string', 'palindrome', 'using', 'recursion']","['def', 'is_palindrome', '(', 's', ')', ':', 'if', 'len', '(', 's', ')', '<', '1', ':', 'return', 'True', 'else', ':', 'if', 's', '[', '0', ']', '==', 's', '[', '-', '1', ']', ':', 'return', 'is_palindrome', '(', 's', '[', '1', ':', '-', '1', ']', ')', 'else', ':', 'return', 'False', 'a', '=', 'str', '(', 'input', '(', '""Enter string:""', ')', ')', 'if', '(', 'is_palindrome', '(', 'a', ')', '==', 'True', ')', ':', 'print', '(', '""String is a palindrome!""', ')', 'else', ':', 'print', '(', '""String isn\'t a palindrome!""', ')']"
3219,"['program', 'find', 'sum', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number:""', ')', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum', '+=', 'pow', '(', 'i', ',', '3', ')', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3220,"['write', 'cjavacpython', 'program', 'compute', 'xnn']","['n', '=', 'int', '(', 'input', '(', '""Enter the n Value:""', ')', ')', 'x', '=', 'int', '(', 'input', '(', '""Enter the x value:""', ')', ')', 'fact', '=', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'fact', '*=', 'i', 'result', '=', 'pow', '(', 'x', ',', 'n', ')', '/', 'fact', 'print', '(', '""Result(x^n/n!)= ""', ',', 'result', ')']"
3221,"['program', 'convert', 'hexadecimal', 'number', 'binary']","['print', '(', '""Enter a HexaDecimal number:""', ')', 'hex', '=', 'input', '(', ')', 'binary', '=', '""""', 'i', '=', '0', 'j', '=', '1', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'hex', ')', ')', ':', 'if', 'hex', '[', 'i', ']', '==', ""'F'"", ':', 'binary', '=', 'binary', '+', '""1111""', 'elif', 'hex', '[', 'i', ']', '==', '""E""', ':', 'binary', '=', 'binary', '+', '""1110""', 'elif', 'hex', '[', 'i', ']', '==', '""D""', ':', 'binary', '=', 'binary', '+', '""1101""', 'elif', 'hex', '[', 'i', ']', '==', '""C""', ':', 'binary', '=', 'binary', '+', '""1100""', 'elif', 'hex', '[', 'i', ']', '==', '""B""', ':', 'binary', '=', 'binary', '+', '""1011""', 'elif', 'hex', '[', 'i', ']', '==', '""A""', ':', 'binary', '=', 'binary', '+', '""1010""', 'else', ':', 'st', '=', 'hex', '[', 'i', ':', 'i', '+', '1', ']', 'decimal', '=', '0', 'temp', '=', '1', 'hexnum', '=', 'int', '(', 'st', ')', 'while', 'hexnum', '!=', '0', ':', 'remainder', '=', 'hexnum', '%', '2', 'hexnum', '=', 'hexnum', '//', '2', 'decimal', '=', 'decimal', '+', 'remainder', '*', 'temp', 'temp', '=', 'temp', '*', '10', 'str1', '=', 'str', '(', 'decimal', ')', 'if', 'len', '(', 'str1', ')', '==', '3', ':', 'str1', '=', '""0""', '+', 'str1', 'if', 'len', '(', 'str1', ')', '==', '2', ':', 'str1', '=', '""00""', '+', 'str1', 'if', 'len', '(', 'str1', ')', '==', '1', ':', 'str1', '=', '""000""', '+', 'str1', 'binary', '=', 'binary', '+', 'str1', 'print', '(', '""HexaDecimal to Binary is""', ',', 'binary', ')']"
3222,"['write', 'method', 'calculate', 'square', 'value', 'number']","['def', 'square', '(', 'num', ')', ':', 'return', 'num', '**', '2', 'print', 'square', '(', '2', ')', 'print', 'square', '(', '3', ')']"
3223,"['find', 'happy', 'number', 'present', 'within', 'given', 'range']","['print', '(', '""Enter a range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Happy numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'num', '=', 'i', 'sum', '=', '0', 'while', 'sum', '!=', '1', 'and', 'sum', '!=', '4', ':', 'sum', '=', '0', 'while', 'num', '!=', '0', ':', 'rem', '=', 'num', '%', '10', 'sum', '+=', '(', 'rem', '*', 'rem', ')', 'num', '//=', '10', 'num', '=', 'sum', 'if', 'sum', '==', '1', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
3224,"['python', 'program', 'print', 'node', 'left', 'subtree']","['class', 'BinaryTree', ':', 'def', '__init__', '(', 'self', ',', 'key', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'def', 'set_root', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'def', 'inorder', '(', 'self', ')', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'inorder', '(', ')', 'print', '(', 'self', '.', 'key', ',', 'end', '=', ""' '"", ')', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'right', '.', 'inorder', '(', ')', 'def', 'insert_left', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'left', '=', 'new_node', 'def', 'insert_right', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'right', '=', 'new_node', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'left', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'right', '.', 'search', '(', 'key', ')', 'return', 'temp', 'return', 'None', 'def', 'print_left', '(', 'self', ')', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'inorder', '(', ')', 'btree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'insert <data> at root'"", ')', 'print', '(', ""'insert <data> left of <data>'"", ')', 'print', '(', ""'insert <data> right of <data>'"", ')', 'print', '(', ""'left'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'BinaryTree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'btree', '=', 'new_node', 'else', ':', 'position', '=', 'do', '[', '4', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'btree', 'is', 'not', 'None', ':', 'ref_node', '=', 'btree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'if', 'suboperation', '==', ""'left'"", ':', 'ref_node', '.', 'insert_left', '(', 'new_node', ')', 'elif', 'suboperation', '==', ""'right'"", ':', 'ref_node', '.', 'insert_right', '(', 'new_node', ')', 'elif', 'operation', '==', ""'left'"", ':', 'print', '(', ""'Nodes of left subtree: '"", ',', 'end', '=', ""''"", ')', 'if', 'btree', 'is', 'not', 'None', ':', 'btree', '.', 'print_left', '(', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3225,"['print', 'average', 'number', 'array', 'odd', 'position']","['arr', '=', '[', ']', 'cout', '=', '0', 'sum', '=', '0', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'for', 'j', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', '(', '(', 'j', '+', '1', ')', '%', '2', '==', '1', ')', ':', 'sum', '+=', 'arr', '[', 'j', ']', 'cout', '+=', '1', 'avg', '=', '(', 'sum', '/', 'cout', ')', 'print', '(', '""Average of Numbers in array at odd position is ""', ',', 'avg', ')']"
3226,"['two', 'given', 'list', 'write', 'program', 'make', 'list', 'whose', 'element', 'intersection', 'given', 'list']","['set1', '=', 'set', '(', '[', '1', ',', '3', ',', '6', ',', '78', ',', '35', ',', '55', ']', ')', 'set2', '=', 'set', '(', '[', '12', ',', '24', ',', '35', ',', '24', ',', '88', ',', '120', ',', '155', ']', ')', 'set1', '&=', 'set2', 'li', '=', 'list', '(', 'set1', ')', 'print', 'li']"
3227,"['sum', 'element', 'array', 'using', 'recursion']","['sum', '=', '0', 'def', 'SumOfArray', '(', 'arr', ',', 'n', ')', ':', 'global', 'sum', 'if', '(', 'n', '>', '0', ')', ':', 'i', '=', 'n', '-', '1', 'sum', '=', 'sum', '+', 'arr', '[', 'i', ']', 'SumOfArray', '(', 'arr', ',', 'i', ')', 'return', 'sumarr', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Sum of Array Element is:""', ',', 'SumOfArray', '(', 'arr', ',', 'n', ')', ')']"
3228,"['find', 'sum', 'negative', 'positive', 'number', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'float', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'sum_pos', '=', '0.0', 'sum_neg', '=', '0.0', 'for', 'j', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'if', '(', 'arr', '[', 'j', ']', '>', '0', ')', ':', 'sum_pos', '+=', 'arr', '[', 'j', ']', 'else', ':', 'sum_neg', '+=', 'arr', '[', 'j', ']', 'print', '(', '""sum of positive number : ""', ',', 'sum_pos', ')', 'print', '(', '""sum of Negative number : ""', ',', 'sum_neg', ')']"
3229,"['python', 'program', 'check', 'number', 'perfect', 'number']","['n', '=', 'int', '(', 'input', '(', '""Enter any number: ""', ')', ')', 'sum1', '=', '0', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', ')', ':', 'if', '(', 'n', '%', 'i', '==', '0', ')', ':', 'sum1', '=', 'sum1', '+', 'i', 'if', '(', 'sum1', '==', 'n', ')', ':', 'print', '(', '""The number is a Perfect number!""', ')', 'else', ':', 'print', '(', '""The number is not a Perfect number!""', ')']"
3230,"['python', 'program', 'find', 'whether', 'number', 'power', 'two']","['def', 'is_power_of_two', '(', 'n', ')', ':', '""""""Return True if n is a power of two.""""""', 'if', 'n', '<=', '0', ':', 'return', 'False', 'else', ':', 'return', 'n', '&', '(', 'n', '-', '1', ')', '==', '0', 'n', '=', 'int', '(', 'input', '(', ""'Enter a number: '"", ')', ')', 'if', 'is_power_of_two', '(', 'n', ')', ':', 'print', '(', ""'{} is a power of two.'"", '.', 'format', '(', 'n', ')', ')', 'else', ':', 'print', '(', ""'{} is not a power of two.'"", '.', 'format', '(', 'n', ')', ')']"
3231,"['python', 'program', 'select', 'ith', 'smallest', 'element', 'list', 'expected', 'linear', 'time']","['def', 'select', '(', 'alist', ',', 'start', ',', 'end', ',', 'i', ')', ':', '""""""Find ith smallest element in alist[start... end-1].""""""', 'if', 'end', '-', 'start', '<=', '1', ':', 'return', 'alist', '[', 'start', ']', 'pivot', '=', 'partition', '(', 'alist', ',', 'start', ',', 'end', ')', 'k', '=', 'pivot', '-', 'start', '+', '1', 'if', 'i', '<', 'k', ':', 'return', 'select', '(', 'alist', ',', 'start', ',', 'pivot', ',', 'i', ')', 'elif', 'i', '>', 'k', ':', 'return', 'select', '(', 'alist', ',', 'pivot', '+', '1', ',', 'end', ',', 'i', '-', 'k', ')', 'return', 'alist', '[', 'pivot', ']', 'def', 'partition', '(', 'alist', ',', 'start', ',', 'end', ')', ':', 'pivot', '=', 'alist', '[', 'start', ']', 'i', '=', 'start', '+', '1', 'j', '=', 'end', '-', '1', 'while', 'True', ':', 'while', '(', 'i', '<=', 'j', 'and', 'alist', '[', 'i', ']', '<=', 'pivot', ')', ':', 'i', '=', 'i', '+', '1', 'while', '(', 'i', '<=', 'j', 'and', 'alist', '[', 'j', ']', '>=', 'pivot', ')', ':', 'j', '=', 'j', '-', '1', 'if', 'i', '<=', 'j', ':', 'alist', '[', 'i', ']', ',', 'alist', '[', 'j', ']', '=', 'alist', '[', 'j', ']', ',', 'alist', '[', 'i', ']', 'else', ':', 'alist', '[', 'start', ']', ',', 'alist', '[', 'j', ']', '=', 'alist', '[', 'j', ']', ',', 'alist', '[', 'start', ']', 'return', 'j', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', 'alist', '=', 'alist', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'i', '=', 'int', '(', 'input', '(', ""'The ith smallest element will be found. Enter i: '"", ')', ')', 'ith_smallest_item', '=', 'select', '(', 'alist', ',', '0', ',', 'len', '(', 'alist', ')', ',', 'i', ')', 'print', '(', ""'Result: {}.'"", '.', 'format', '(', 'ith_smallest_item', ')', ')']"
3232,"['program', 'print', 'alphabet', 'z', 'using', 'loop']","['print', '(', '""Printing A-Z using ASCII""', ')', 'for', 'i', 'in', 'range', '(', '65', ',', '90', '+', '1', ')', ':', 'print', '(', 'chr', '(', 'i', ')', ',', 'end', '=', '"" ""', ')']"
3233,"['program', 'find', 'sum', 'series']","['print', '(', '""Enter the range of number:""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '=', '0', 'i', '=', '1', 'while', '(', 'i', '<=', 'n', ')', ':', 'sum', '+=', 'i', 'i', '+=', '2', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3234,"['find', 'minimum', 'occurring', 'character', 'given', 'string']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'min', '=', '999', 'arr', '=', '[', '0', ']', '*', '256', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '==', ""' '"", ':', 'continue', 'num', '=', 'ord', '(', 'str', '[', 'i', ']', ')', 'arr', '[', 'num', ']', '+=', '1', 'ch', '=', ""' '"", 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'arr', '[', 'ord', '(', 'str', '[', 'i', ']', ')', ']', '!=', '0', ':', 'if', 'arr', '[', 'ord', '(', 'str', '[', 'i', ']', ')', ']', '<=', 'min', ':', 'min', '=', 'arr', '[', 'ord', '(', 'str', '[', 'i', ']', ')', ']', 'ch', '=', 'str', '[', 'i', ']', 'print', '(', '""The Minimum occurring character in a string is ""', ',', 'ch', ')']"
3235,"['program', 'find', 'subtraction', 'two', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'matrix1', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix1', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sub_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'sub_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'i', ']', '[', 'j', ']', '-', 'matrix1', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Subtraction of the two Matrices is:""', ')', 'for', 'm', 'in', 'sub_matrix', ':', 'print', '(', 'm', ')']"
3236,"['define', 'function', 'generate', 'print', 'tuple', 'value', 'square', 'number', 'included']","['Solution', 'def', 'printTuple', '(', ')', ':', 'li', '=', 'list', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '21', ')', ':', 'li', '.', 'append', '(', 'i', '**', '2', ')', 'print', 'tuple', '(', 'li', ')', 'printTuple', '(', ')']"
3237,"['python', 'program', 'create', 'class', 'get', 'possible', 'subset', 'set', 'distinct', 'integer']","['class', 'sub', ':', 'def', 'f1', '(', 'self', ',', 's1', ')', ':', 'return', 'self', '.', 'f2', '(', '[', ']', ',', 'sorted', '(', 's1', ')', ')', 'def', 'f2', '(', 'self', ',', 'curr', ',', 's1', ')', ':', 'if', 's1', ':', 'return', 'self', '.', 'f2', '(', 'curr', ',', 's1', '[', '1', ':', ']', ')', '+', 'self', '.', 'f2', '(', 'curr', '+', '[', 's1', '[', '0', ']', ']', ',', 's1', '[', '1', ':', ']', ')', 'return', '[', 'curr', ']', 'a', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter number of elements of list: ""', ')', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'b', '=', 'int', '(', 'input', '(', '""Enter element: ""', ')', ')', 'a', '.', 'append', '(', 'b', ')', 'print', '(', '""Subsets: ""', ')', 'print', '(', 'sub', '(', ')', '.', 'f1', '(', 'a', ')', ')']"
3238,"['python', 'program', 'remove', 'nth', 'index', 'character', 'nonempty', 'string']","['def', 'remove', '(', 'string', ',', 'n', ')', ':', 'first', '=', 'string', '[', ':', 'n', ']', 'last', '=', 'string', '[', 'n', '+', '1', ':', ']', 'return', 'first', '+', 'last', 'string', '=', 'raw_input', '(', '""Enter the sring:""', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter the index of the character to remove:""', ')', ')', 'print', '(', '""Modified string:""', ')', 'print', '(', 'remove', '(', 'string', ',', 'n', ')', ')']"
3239,"['write', 'program', 'find', 'nth', 'prime', 'number']","[""'''Write a Python\nprogram\xa0to\xa0find the nth prime number. or\xa0Write a\nprogram\xa0to\xa0find the nth prime number using Python '''"", 'print', '(', '""Enter Nth Number:""', ')', 'rangenumber', '=', 'int', '(', 'input', '(', ')', ')', 'c', '=', '0', 'num', '=', '2', 'letest', '=', '0', 'while', '(', 'c', '!=', 'rangenumber', ')', ':', 'count', '=', '0', 'for', 'i', 'in', 'range', '(', '2', ',', 'num', ')', ':', 'if', '(', 'num', '%', 'i', '==', '0', ')', ':', 'count', '+=', '1', 'break', 'if', '(', 'count', '==', '0', ')', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th prime number is ""', ',', 'letest', ')']"
3240,"['find', 'word', 'ending', 'given', 'characterssuffix']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'ch', '=', 'input', '(', '""Enter the Character:""', ')', 'sub_str', '=', 'str', '.', 'split', '(', '"" ""', ')', 'print', '(', '""All the words ending with ""', ',', 'ch', ',', '"" are:""', ')', 'for', 'inn', 'in', 'range', '(', '0', ',', 'len', '(', 'sub_str', ')', ')', ':', 'if', 'sub_str', '[', 'inn', ']', '.', 'endswith', '(', 'ch', ')', ':', 'print', '(', 'sub_str', '[', 'inn', ']', ',', 'end', '=', '"" ""', ')']"
3241,"['python', 'program', 'implement', 'linear', 'search']","['def', 'linear_search', '(', 'alist', ',', 'key', ')', ':', '""""""Return index of key in alist. Return -1 if key not present.""""""', 'for', 'i', 'in', 'range', '(', 'len', '(', 'alist', ')', ')', ':', 'if', 'alist', '[', 'i', ']', '==', 'key', ':', 'return', 'i', 'return', '-', '1', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', 'alist', '=', 'alist', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'key', '=', 'int', '(', 'input', '(', ""'The number to search for: '"", ')', ')', 'index', '=', 'linear_search', '(', 'alist', ',', 'key', ')', 'if', 'index', '<', '0', ':', 'print', '(', ""'{} was not found.'"", '.', 'format', '(', 'key', ')', ')', 'else', ':', 'print', '(', ""'{} was found at index {}.'"", '.', 'format', '(', 'key', ',', 'index', ')', ')']"
3242,"['python', 'program', 'solve', 'nqueen', 'problem', 'recursion']","['class', 'QueenChessBoard', ':', 'def', '__init__', '(', 'self', ',', 'size', ')', ':', 'self', '.', 'size', '=', 'size', 'self', '.', 'columns', '=', '[', ']', 'def', 'get_size', '(', 'self', ')', ':', 'return', 'self', '.', 'size', 'def', 'get_queens_count', '(', 'self', ')', ':', 'return', 'len', '(', 'self', '.', 'columns', ')', 'def', 'place_in_next_row', '(', 'self', ',', 'column', ')', ':', 'self', '.', 'columns', '.', 'append', '(', 'column', ')', 'def', 'remove_in_current_row', '(', 'self', ')', ':', 'return', 'self', '.', 'columns', '.', 'pop', '(', ')', 'def', 'is_this_column_safe_in_next_row', '(', 'self', ',', 'column', ')', ':', 'row', '=', 'len', '(', 'self', '.', 'columns', ')', 'for', 'queen_column', 'in', 'self', '.', 'columns', ':', 'if', 'column', '==', 'queen_column', ':', 'return', 'False', 'for', 'queen_row', ',', 'queen_column', 'in', 'enumerate', '(', 'self', '.', 'columns', ')', ':', 'if', 'queen_column', '-', 'queen_row', '==', 'column', '-', 'row', ':', 'return', 'False', 'for', 'queen_row', ',', 'queen_column', 'in', 'enumerate', '(', 'self', '.', 'columns', ')', ':', 'if', '(', '(', 'self', '.', 'size', '-', 'queen_column', ')', '-', 'queen_row', '==', '(', 'self', '.', 'size', '-', 'column', ')', '-', 'row', ')', ':', 'return', 'False', 'return', 'True', 'def', 'display', '(', 'self', ')', ':', 'for', 'row', 'in', 'range', '(', 'self', '.', 'size', ')', ':', 'for', 'column', 'in', 'range', '(', 'self', '.', 'size', ')', ':', 'if', 'column', '==', 'self', '.', 'columns', '[', 'row', ']', ':', 'print', '(', ""'Q'"", ',', 'end', '=', ""' '"", ')', 'else', ':', 'print', '(', ""'.'"", ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'def', 'print_all_solutions_to_n_queen', '(', 'size', ')', ':', '""""""Display a chessboard for each possible configuration of placing n queens\n    on an n x n chessboard where n = size and print the number of such\n    configurations.""""""', 'board', '=', 'QueenChessBoard', '(', 'size', ')', 'number_of_solutions', '=', 'print_all_solutions_helper', '(', 'board', ')', 'print', '(', ""'Number of solutions:'"", ',', 'number_of_solutions', ')', 'def', 'print_all_solutions_helper', '(', 'board', ')', ':', '""""""Display a chessboard for each possible configuration of filling the given\n    board with queens and return the number of such configurations.""""""', 'size', '=', 'board', '.', 'get_size', '(', ')', 'if', 'size', '==', 'board', '.', 'get_queens_count', '(', ')', ':', 'board', '.', 'display', '(', ')', 'print', '(', ')', 'return', '1', 'number_of_solutions', '=', '0', 'for', 'column', 'in', 'range', '(', 'size', ')', ':', 'if', 'board', '.', 'is_this_column_safe_in_next_row', '(', 'column', ')', ':', 'board', '.', 'place_in_next_row', '(', 'column', ')', 'number_of_solutions', '+=', 'print_all_solutions_helper', '(', 'board', ')', 'board', '.', 'remove_in_current_row', '(', ')', 'return', 'number_of_solutions', 'n', '=', 'int', '(', 'input', '(', ""'Enter n: '"", ')', ')', 'print_all_solutions_to_n_queen', '(', 'n', ')']"
3243,"['python', 'program', 'swap', 'first', 'last', 'value', 'list']","['a', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter the number of elements in list:""', ')', ')', 'for', 'x', 'in', 'range', '(', '0', ',', 'n', ')', ':', 'element', '=', 'int', '(', 'input', '(', '""Enter element""', '+', 'str', '(', 'x', '+', '1', ')', '+', '"":""', ')', ')', 'a', '.', 'append', '(', 'element', ')', 'temp', '=', 'a', '[', '0', ']', 'a', '[', '0', ']', '=', 'a', '[', 'n', '-', '1', ']', 'a', '[', 'n', '-', '1', ']', '=', 'temp', 'print', '(', '""New list is:""', ')', 'print', '(', 'a', ')']"
3244,"['write', 'program', 'print', 'alphabet', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', 'row_size', '=', 'input', '(', ')', 'for', 'out', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'ord', '(', 'row_size', ')', '+', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'ord', '(', 'row_size', ')', '+', '1', ')', ':', 'print', '(', 'chr', '(', 'out', ')', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
3245,"['program', 'convert', 'decimal', 'number', 'binary']","['print', '(', '""Enter a Decimal Number: ""', ')', 'decimal', '=', 'int', '(', 'input', '(', ')', ')', 'binary', '=', '0', 'temp', '=', '1', 'while', '(', 'decimal', '!=', '0', ')', ':', 'reminder', '=', 'decimal', '%', '2', 'decimal', '=', 'decimal', '//', '2', 'binary', '=', 'int', '(', 'binary', '+', '(', 'reminder', '*', 'temp', ')', ')', 'temp', '=', 'int', '(', 'temp', '*', '10', ')', 'print', '(', '""The Binary Number is: ""', ',', 'binary', ')']"
3246,"['find', 'sum', 'digit', 'number', 'using', 'recursion']","['def', 'SumOfDigits', '(', 'num', ')', ':', 'if', 'num', '==', '0', ':', 'return', '0', 'else', ':', 'return', '(', '(', 'num', '%', '10', ')', '+', 'SumOfDigits', '(', 'num', '//', '10', ')', ')', 'num', '=', 'int', '(', 'input', '(', '""Enter the Number:""', ')', ')', 'print', '(', '""Sum of digits of given Number Using Recursion is:""', ',', 'SumOfDigits', '(', 'num', ')', ')']"
3247,"['check', 'string', 'contains', 'least', 'one', 'number']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'count', '=', '0', 'for', 'inn', 'in', 'range', '(', '0', ',', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'inn', ']', '>=', ""'0'"", 'and', 'str', '[', 'inn', ']', '<=', ""'9'"", ':', 'count', '+=', '1', 'if', 'count', '>=', '1', ':', 'print', '(', '""String contains at least one digits.""', ')', 'else', ':', 'print', '(', '""String does not contains at least one digits.""', ')']"
3248,"['define', 'function', 'generate', 'dictionary', 'key', 'number', 'included', 'value', 'square', 'key', 'function', 'print', 'value']","['Solution', 'def', 'printDict', '(', ')', ':', 'd', '=', 'dict', '(', ')', 'for', 'i', 'in', 'range', '(', '1', ',', '21', ')', ':', 'd', '[', 'i', ']', '=', 'i', '**', '2', 'for', '(', 'k', ',', 'v', ')', 'in', 'd', '.', 'items', '(', ')', ':', 'print', 'v', 'printDict', '(', ')']"
3249,"['program', 'print', 'series']","['print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'i', '=', '1', 'se', '=', '1', 'while', '(', 'i', '<=', 'n', ')', ':', 'if', '(', 'i', '%', '2', '==', '0', ')', ':', 'print', '(', 'se', ',', 'end', '=', '"" ""', ')', 'else', ':', 'print', '(', '-', '1', '*', 'se', ',', 'end', '=', '"" ""', ')', 'se', '+=', '3', 'i', '+=', '1']"
3250,"['python', 'program', 'print', 'nth', 'fibonacci', 'number', 'using', 'dynamic', 'programming', 'bottomup', 'approach']","['def', 'fibonacci', '(', 'n', ')', ':', '""""""Return the nth Fibonacci number.""""""', 'if', 'n', '==', '0', ':', 'return', '0', 'r', '=', '[', '-', '1', ']', '*', '(', 'n', '+', '1', ')', 'r', '[', '0', ']', '=', '0', 'r', '[', '1', ']', '=', '1', 'for', 'i', 'in', 'range', '(', '2', ',', 'n', '+', '1', ')', ':', 'r', '[', 'i', ']', '=', 'r', '[', 'i', '-', '1', ']', '+', 'r', '[', 'i', '-', '2', ']', 'return', 'r', '[', 'n', ']', 'n', '=', 'int', '(', 'input', '(', ""'Enter n: '"", ')', ')', 'ans', '=', 'fibonacci', '(', 'n', ')', 'print', '(', ""'The nth Fibonacci number:'"", ',', 'ans', ')']"
3251,"['find', 'first', 'small', 'letter', 'given', 'string']","['str', '=', 'input', '(', '""Enter the String:""', ')', 'ch', '=', ""' '"", 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '>=', ""'a'"", 'and', 'str', '[', 'i', ']', '<=', ""'z'"", ':', 'ch', '=', 'str', '[', 'i', ']', 'break', 'else', ':', 'continue', 'print', '(', '""First small letter in a given String is: ""', ',', 'ch', ')']"
3252,"['program', 'compute', 'area', 'perimeter', 'octagon']","['import', 'math', 'print', '(', '""Enter the length of the side:""', ')', 'a', '=', 'int', '(', 'input', '(', ')', ')', 'area', '=', '(', '2', '*', '(', '1', '+', 'math', '.', 'sqrt', '(', '2', ')', ')', '*', 'math', '.', 'pow', '(', 'a', ',', '2', ')', ')', 'perimeter', '=', '(', '8', '*', 'a', ')', 'print', '(', '""Area of the Octagon = ""', ',', 'area', ')', 'print', '(', '""Perimeter of the Octagon = ""', ',', 'perimeter', ')']"
3253,"['python', 'program', 'check', 'number', 'palindrome']","['n', '=', 'int', '(', 'input', '(', '""Enter number:""', ')', ')', 'temp', '=', 'n', 'rev', '=', '0', 'while', '(', 'n', '>', '0', ')', ':', 'dig', '=', 'n', '%', '10', 'rev', '=', 'rev', '*', '10', '+', 'dig', 'n', '=', 'n', '//', '10', 'if', '(', 'temp', '==', 'rev', ')', ':', 'print', '(', '""The number is a palindrome!""', ')', 'else', ':', 'print', '(', '""The number isn\'t a palindrome!""', ')']"
3254,"['print', 'multiplication', 'table', 'using', 'recursion']","['def', 'MultiplicationTable', '(', 'num', ',', 'i', ')', ':', 'print', '(', 'num', ',', '"" X ""', ',', 'i', ',', '"" = ""', ',', 'num', '*', 'i', ')', 'if', '(', 'i', '<', '10', ')', ':', 'MultiplicationTable', '(', 'num', ',', 'i', '+', '1', ')', 'num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'print', '(', '""Multiplication Table of ""', ',', 'num', ',', '"" is:""', ')', 'MultiplicationTable', '(', 'num', ',', '1', ')']"
3255,"['python', 'program', 'form', 'new', 'string', 'made', 'first', 'last', 'character', 'given', 'string']","['string', '=', 'raw_input', '(', '""Enter string:""', ')', 'count', '=', '0', 'for', 'i', 'in', 'string', ':', 'count', '=', 'count', '+', '1', 'new', '=', 'string', '[', '0', ':', '2', ']', '+', 'string', '[', 'count', '-', '2', ':', 'count', ']', 'print', '(', '""Newly formed string is:""', ')', 'print', '(', 'new', ')']"
3256,"['program', 'find', 'sum', 'series']","['print', '(', '""Enter the range of number:""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Enter the value of x:""', ')', ';', 'x', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '=', '0', 'i', '=', '1', 'while', '(', 'i', '<=', 'n', ')', ':', 'sum', '+=', 'pow', '(', 'x', ',', 'i', ')', 'i', '+=', '2', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3257,"['program', 'print', 'arithmetic', 'series']","['print', '(', '""Enter the First Number:""', ')', 'first_num', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Enter the Difference Between two Number:""', ')', 'diff', '=', 'int', '(', 'input', '(', ')', ')', 'while', '(', 'first_num', '<=', 'n', ')', ':', 'print', '(', 'first_num', ',', 'end', '=', '"" ""', ')', 'first_num', '+=', 'diff']"
3258,"['check', 'whether', 'given', 'matrix', 'identity', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'point', '=', '0', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '==', 'j', 'and', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', '1', ':', 'point', '=', '1', 'break', 'elif', 'i', '!=', 'j', 'and', 'matrix', '[', 'i', ']', '[', 'j', ']', '!=', '0', ':', 'point', '=', '1', 'break', 'if', 'point', '==', '1', ':', 'print', '(', '""Given Matrix is not an identity matrix.""', ')', 'else', ':', 'print', '(', '""Given Matrix is an identity matrix.""', ')']"
3259,"['program', 'print', 'ascii', 'value', 'character']","['ch', '=', 'input', '(', '""Enter a character:""', ')', 'ascii', '=', 'ord', '(', 'ch', ')', 'print', '(', '""The ASCII value is""', ',', 'ascii', ')']"
3260,"['find', 'subtraction', 'two', 'number', 'using', 'recursion']","['def', 'Subtraction', '(', 'num1', ',', 'num2', ')', ':', 'if', 'num2', '==', '0', ':', 'return', 'num1', 'return', 'Subtraction', '(', 'num1', '-', '1', ',', 'num2', '-', '1', ')', 'print', '(', '""Enter the two Number:""', ')', 'num1', '=', 'int', '(', 'input', '(', ')', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Subtraction of Two Number Using Recursion is: ""', ',', 'Subtraction', '(', 'num1', ',', 'num2', ')', ')']"
3261,"['program', 'find', 'subtraction', 'two', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'matrix1', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix1', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'sub_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'sub_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'i', ']', '[', 'j', ']', '-', 'matrix1', '[', 'i', ']', '[', 'j', ']', 'print', '(', '""Subtraction of the two Matrices is:""', ')', 'for', 'm', 'in', 'sub_matrix', ':', 'print', '(', 'm', ')']"
3262,"['program', 'find', 'sum', 'series']","['print', '(', '""Enter the range of number(Limit):""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'i', '=', '1', 'sum', '=', '0.0', 'while', '(', 'i', '<=', 'n', ')', ':', 'sum', '+=', '1', '/', 'i', 'i', '+=', '2', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3263,"['use', 'list', 'comprehension', 'square', 'odd', 'number', 'list', 'list', 'input', 'sequence', 'commaseparated', 'number']","['values', '=', 'raw_input', '(', ')', 'numbers', '=', '[', 'x', 'for', 'x', 'in', 'values', '.', 'split', '(', '"",""', ')', 'if', 'int', '(', 'x', ')', '%', '2', '!=', '0', ']', 'print', '"",""', '.', 'join', '(', 'numbers', ')']"
3264,"['python', 'program', 'find', 'second', 'largest', 'number', 'list']","['a', '=', '[', ']', 'n', '=', 'int', '(', 'input', '(', '""Enter number of elements:""', ')', ')', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'b', '=', 'int', '(', 'input', '(', '""Enter element:""', ')', ')', 'a', '.', 'append', '(', 'b', ')', 'a', '.', 'sort', '(', ')', 'print', '(', '""Second largest element is:""', ',', 'a', '[', 'n', '-', '2', ']', ')']"
3265,"['find', 'pair', 'maximum', 'product', 'array']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'First_element', '=', 'arr', '[', '0', ']', 'Second_element', '=', 'arr', '[', '1', ']', 'Max_Product', '=', 'First_element', '*', 'Second_elementfor', 'i', 'in', 'range', '(', '0', ',', 'size', '-', '1', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ',', 'size', ')', ':', 'product', '=', 'arr', '[', 'i', ']', '*', 'arr', '[', 'j', ']', 'if', 'abs', '(', 'product', ')', '>=', 'abs', '(', 'Max_Product', ')', ':', 'Max_Product', '=', 'product', 'First_element', '=', 'arr', '[', 'i', ']', 'Second_element', '=', 'arr', '[', 'j', ']', 'print', '(', '""Pair of Maximum Product is (""', ',', 'First_element', ',', '"",""', ',', 'Second_element', ',', '"")""', ')', 'print', '(', '""\\nMaximum Product of 2 numbers is ""', ',', 'Max_Product', ')']"
3266,"['program', 'display', 'upper', 'triangular', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'print', '(', '""Upper Triangular Matrix is:""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '>', 'j', ':', 'print', '(', '""0 ""', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', 'matrix', '[', 'i', ']', '[', 'j', ']', ',', 'end', '=', '"" ""', ')', 'print', '(', ')']"
3267,"['python', 'program', 'find', 'minimum', 'spanning', 'tree', 'using', 'krusals', 'algorithm']","['class', 'Graph', ':', 'def', '__init__', '(', 'self', ')', ':', 'self', '.', 'vertices', '=', '{', '}', 'def', 'add_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Add a vertex with the given key to the graph.""""""', 'vertex', '=', 'Vertex', '(', 'key', ')', 'self', '.', 'vertices', '[', 'key', ']', '=', 'vertex', 'def', 'get_vertex', '(', 'self', ',', 'key', ')', ':', '""""""Return vertex object with the corresponding key.""""""', 'return', 'self', '.', 'vertices', '[', 'key', ']', 'def', '__contains__', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'add_edge', '(', 'self', ',', 'src_key', ',', 'dest_key', ',', 'weight', '=', '1', ')', ':', '""""""Add edge from src_key to dest_key with given weight.""""""', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'add_neighbour', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ',', 'weight', ')', 'def', 'does_vertex_exist', '(', 'self', ',', 'key', ')', ':', 'return', 'key', 'in', 'self', '.', 'vertices', 'def', 'does_edge_exist', '(', 'self', ',', 'src_key', ',', 'dest_key', ')', ':', '""""""Return True if there is an edge from src_key to dest_key.""""""', 'return', 'self', '.', 'vertices', '[', 'src_key', ']', '.', 'does_it_point_to', '(', 'self', '.', 'vertices', '[', 'dest_key', ']', ')', 'def', 'display', '(', 'self', ')', ':', 'print', '(', ""'Vertices: '"", ',', 'end', '=', ""''"", ')', 'for', 'v', 'in', 'self', ':', 'print', '(', 'v', '.', 'get_key', '(', ')', ',', 'end', '=', ""' '"", ')', 'print', '(', ')', 'print', '(', ""'Edges: '"", ')', 'for', 'v', 'in', 'self', ':', 'for', 'dest', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'w', '=', 'v', '.', 'get_weight', '(', 'dest', ')', 'print', '(', ""'(src={}, dest={}, weight={}) '"", '.', 'format', '(', 'v', '.', 'get_key', '(', ')', ',', 'dest', '.', 'get_key', '(', ')', ',', 'w', ')', ')', 'def', '__len__', '(', 'self', ')', ':', 'return', 'len', '(', 'self', '.', 'vertices', ')', 'def', '__iter__', '(', 'self', ')', ':', 'return', 'iter', '(', 'self', '.', 'vertices', '.', 'values', '(', ')', ')', 'class', 'Vertex', ':', 'def', '__init__', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'points_to', '=', '{', '}', 'def', 'get_key', '(', 'self', ')', ':', '""""""Return key corresponding to this vertex object.""""""', 'return', 'self', '.', 'key', 'def', 'add_neighbour', '(', 'self', ',', 'dest', ',', 'weight', ')', ':', '""""""Make this vertex point to dest with given edge weight.""""""', 'self', '.', 'points_to', '[', 'dest', ']', '=', 'weight', 'def', 'get_neighbours', '(', 'self', ')', ':', '""""""Return all vertices pointed to by this vertex.""""""', 'return', 'self', '.', 'points_to', '.', 'keys', '(', ')', 'def', 'get_weight', '(', 'self', ',', 'dest', ')', ':', '""""""Get weight of edge from this vertex to dest.""""""', 'return', 'self', '.', 'points_to', '[', 'dest', ']', 'def', 'does_it_point_to', '(', 'self', ',', 'dest', ')', ':', '""""""Return True if this vertex points to dest.""""""', 'return', 'dest', 'in', 'self', '.', 'points_to', 'def', 'mst_krusal', '(', 'g', ')', ':', '""""""Return a minimum cost spanning tree of the connected graph g.""""""', 'mst', '=', 'Graph', '(', ')', 'if', 'len', '(', 'g', ')', '==', '1', ':', 'u', '=', 'next', '(', 'iter', '(', 'g', ')', ')', 'mst', '.', 'add_vertex', '(', 'u', '.', 'get_key', '(', ')', ')', 'return', 'mst', 'edges', '=', '[', ']', 'for', 'v', 'in', 'g', ':', 'for', 'n', 'in', 'v', '.', 'get_neighbours', '(', ')', ':', 'if', 'v', '.', 'get_key', '(', ')', '<', 'n', '.', 'get_key', '(', ')', ':', 'edges', '.', 'append', '(', '(', 'v', ',', 'n', ')', ')', 'edges', '.', 'sort', '(', 'key', '=', 'lambda', 'edge', ':', 'edge', '[', '0', ']', '.', 'get_weight', '(', 'edge', '[', '1', ']', ')', ')', 'component', '=', '{', '}', 'for', 'i', ',', 'v', 'in', 'enumerate', '(', 'g', ')', ':', 'component', '[', 'v', ']', '=', 'i', 'edge_index', '=', '0', 'while', 'len', '(', 'mst', ')', '<', 'len', '(', 'g', ')', ':', 'u', ',', 'v', '=', 'edges', '[', 'edge_index', ']', 'edge_index', '+=', '1', 'if', 'component', '[', 'u', ']', '!=', 'component', '[', 'v', ']', ':', 'if', 'not', 'mst', '.', 'does_vertex_exist', '(', 'u', '.', 'get_key', '(', ')', ')', ':', 'mst', '.', 'add_vertex', '(', 'u', '.', 'get_key', '(', ')', ')', 'if', 'not', 'mst', '.', 'does_vertex_exist', '(', 'v', '.', 'get_key', '(', ')', ')', ':', 'mst', '.', 'add_vertex', '(', 'v', '.', 'get_key', '(', ')', ')', 'mst', '.', 'add_edge', '(', 'u', '.', 'get_key', '(', ')', ',', 'v', '.', 'get_key', '(', ')', ',', 'u', '.', 'get_weight', '(', 'v', ')', ')', 'mst', '.', 'add_edge', '(', 'v', '.', 'get_key', '(', ')', ',', 'u', '.', 'get_key', '(', ')', ',', 'u', '.', 'get_weight', '(', 'v', ')', ')', 'for', 'w', 'in', 'g', ':', 'if', 'component', '[', 'w', ']', '==', 'component', '[', 'v', ']', ':', 'component', '[', 'w', ']', '=', 'component', '[', 'u', ']', 'return', 'mst', 'g', '=', 'Graph', '(', ')', 'print', '(', ""'Undirected Graph'"", ')', 'print', '(', ""'Menu'"", ')', 'print', '(', ""'add vertex <key>'"", ')', 'print', '(', ""'add edge <src> <dest> <weight>'"", ')', 'print', '(', ""'mst'"", ')', 'print', '(', ""'display'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', 'if', 'operation', '==', ""'add'"", ':', 'suboperation', '=', 'do', '[', '1', ']', 'if', 'suboperation', '==', ""'vertex'"", ':', 'key', '=', 'int', '(', 'do', '[', '2', ']', ')', 'if', 'key', 'not', 'in', 'g', ':', 'g', '.', 'add_vertex', '(', 'key', ')', 'else', ':', 'print', '(', ""'Vertex already exists.'"", ')', 'elif', 'suboperation', '==', ""'edge'"", ':', 'src', '=', 'int', '(', 'do', '[', '2', ']', ')', 'dest', '=', 'int', '(', 'do', '[', '3', ']', ')', 'weight', '=', 'int', '(', 'do', '[', '4', ']', ')', 'if', 'src', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'src', ')', ')', 'elif', 'dest', 'not', 'in', 'g', ':', 'print', '(', ""'Vertex {} does not exist.'"", '.', 'format', '(', 'dest', ')', ')', 'else', ':', 'if', 'not', 'g', '.', 'does_edge_exist', '(', 'src', ',', 'dest', ')', ':', 'g', '.', 'add_edge', '(', 'src', ',', 'dest', ',', 'weight', ')', 'g', '.', 'add_edge', '(', 'dest', ',', 'src', ',', 'weight', ')', 'else', ':', 'print', '(', ""'Edge already exists.'"", ')', 'elif', 'operation', '==', ""'mst'"", ':', 'mst', '=', 'mst_krusal', '(', 'g', ')', 'print', '(', ""'Minimum Spanning Tree:'"", ')', 'mst', '.', 'display', '(', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'display'"", ':', 'g', '.', 'display', '(', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3268,"['check', 'whether', 'number', 'magic', 'number']","['num', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'num1', '=', 'num', 'sum', '=', '0', 'while', 'num1', '!=', '0', ':', 'rem', '=', 'num1', '%', '10', 'sum', '+=', 'rem', 'num1', '//=', '10', 'rev', '=', '0', 'num2', '=', 'sum', 'while', 'num2', '!=', '0', ':', 'rem2', '=', 'num2', '%', '10', 'rev', '=', 'rev', '*', '10', '+', 'rem2', 'num2', '//=', '10', 'if', 'sum', '*', 'rev', '==', 'num', ':', 'print', '(', '""It is a Magic Number.""', ')', 'else', ':', 'print', '(', '""It is not a Magic Number.""', ')']"
3269,"['program', 'find', 'sum', 'series']","['n', '=', 'int', '(', 'input', '(', '""Enter the range of number:""', ')', ')', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '2', ',', 'n', '+', '2', ')', ':', 'sum', '+=', '1', '+', '(', 'i', '*', '(', 'i', '-', '1', ')', ')', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3270,"['python', 'program', 'solve', 'celebrity', 'problem']","['def', 'eliminate_non_celebrities', '(', 'matrix', ')', ':', '""""""Take an n x n matrix that has m[i][j] = True iff i knows j and return\n    person who is maybe a celebrity.""""""', 'possible_celeb', '=', '0', 'n', '=', 'len', '(', 'matrix', ')', 'for', 'p', 'in', 'range', '(', '1', ',', 'n', ')', ':', 'if', '(', 'matrix', '[', 'possible_celeb', ']', '[', 'p', ']', 'or', 'not', 'matrix', '[', 'p', ']', '[', 'possible_celeb', ']', ')', ':', 'possible_celeb', '=', 'p', 'return', 'possible_celeb', 'def', 'check_if_celebrity', '(', 'possible_celeb', ',', 'matrix', ')', ':', '""""""Take an n x n matrix that has m[i][j] = True iff i knows j and return\n    True if possible_celeb is a celebrity.""""""', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'if', 'matrix', '[', 'possible_celeb', ']', '[', 'i', ']', 'is', 'True', ':', 'return', 'False', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'if', 'matrix', '[', 'i', ']', '[', 'possible_celeb', ']', 'is', 'False', ':', 'if', 'i', '!=', 'possible_celeb', ':', 'return', 'False', 'return', 'True', 'n', '=', 'int', '(', 'input', '(', ""'Number of people: '"", ')', ')', 'm', '=', '[', '[', 'False', ']', '*', 'n', 'for', '_', 'in', 'range', '(', 'n', ')', ']', 'for', 'i', 'in', 'range', '(', 'n', ')', ':', 'people', '=', 'input', '(', ""'Enter list of people known to {}: '"", '.', 'format', '(', 'i', ')', ')', '.', 'split', '(', ')', 'for', 'p', 'in', 'people', ':', 'p', '=', 'int', '(', 'p', ')', 'm', '[', 'i', ']', '[', 'p', ']', '=', 'True', 'possible_celeb', '=', 'eliminate_non_celebrities', '(', 'm', ')', 'if', 'check_if_celebrity', '(', 'possible_celeb', ',', 'm', ')', ':', 'print', '(', ""'{} is the celebrity.'"", '.', 'format', '(', 'possible_celeb', ')', ')', 'else', ':', 'print', '(', ""'There is no celebrity.'"", ')']"
3271,"['python', 'program', 'find', 'sum', 'first', 'n', 'natural', 'number']","['n', '=', 'int', '(', 'input', '(', '""Enter a number: ""', ')', ')', 'sum1', '=', '0', 'while', '(', 'n', '>', '0', ')', ':', 'sum1', '=', 'sum1', '+', 'n', 'n', '=', 'n', '-', '1', 'print', '(', '""The sum of first n natural numbers is""', ',', 'sum1', ')']"
3272,"['python', 'program', 'implement', 'selection', 'sort']","['def', 'selection_sort', '(', 'alist', ')', ':', 'for', 'i', 'in', 'range', '(', '0', ',', 'len', '(', 'alist', ')', '-', '1', ')', ':', 'smallest', '=', 'i', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ',', 'len', '(', 'alist', ')', ')', ':', 'if', 'alist', '[', 'j', ']', '<', 'alist', '[', 'smallest', ']', ':', 'smallest', '=', 'j', 'alist', '[', 'i', ']', ',', 'alist', '[', 'smallest', ']', '=', 'alist', '[', 'smallest', ']', ',', 'alist', '[', 'i', ']', 'alist', '=', 'input', '(', ""'Enter the list of numbers: '"", ')', '.', 'split', '(', ')', 'alist', '=', '[', 'int', '(', 'x', ')', 'for', 'x', 'in', 'alist', ']', 'selection_sort', '(', 'alist', ')', 'print', '(', ""'Sorted list: '"", ',', 'end', '=', ""''"", ')', 'print', '(', 'alist', ')']"
3273,"['find', 'first', 'non', 'repeating', 'character', 'string']","['str', '=', 'input', '(', '""Enter Your String:""', ')', 'arr', '=', '[', '0', ']', '*', '256', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'str', '[', 'i', ']', '!=', ""' '"", ':', 'num', '=', 'ord', '(', 'str', '[', 'i', ']', ')', 'arr', '[', 'num', ']', '+=', '1', 'ch', '=', ""' '"", 'print', '(', '""First Non-repeating character in a given string is: ""', ',', 'end', '=', '""""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'str', ')', ')', ':', 'if', 'arr', '[', 'ord', '(', 'str', '[', 'i', ']', ')', ']', '==', '1', ':', 'ch', '=', 'str', '[', 'i', ']', 'breakprint', '(', 'ch', ',', 'end', '=', '""""', ')']"
3274,"['program', 'find', 'nth', 'perfect', 'square', 'number']","['import', 'math', 'rangenumber', '=', 'int', '(', 'input', '(', '""Enter a Nth Number:""', ')', ')', 'c', '=', '0', 'letest', '=', '0', 'num', '=', '1', 'while', 'c', '!=', 'rangenumber', ':', 'num1', '=', 'num', 'sqr', '=', 'math', '.', 'sqrt', '(', 'num1', ')', 'if', 'sqr', '-', 'math', '.', 'floor', '(', 'sqr', ')', '==', '0', ':', 'c', '+=', '1', 'letest', '=', 'num', 'num', '=', 'num', '+', '1', 'print', '(', 'rangenumber', ',', '""th Perfect Square number is ""', ',', 'latest', ')']"
3275,"['program', 'find', 'transpose', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'tran_matrix', '=', '[', '[', '0', 'for', 'i', 'in', 'range', '(', 'col_size', ')', ']', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ']', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'tran_matrix', '[', 'i', ']', '[', 'j', ']', '=', 'matrix', '[', 'j', ']', '[', 'i', ']', 'print', '(', '""Transpose of the Given Matrix is:""', ')', 'for', 'm', 'in', 'tran_matrix', ':', 'print', '(', 'm', ')']"
3276,"['program', 'find', 'normal', 'trace', 'matrix']","['import', 'math', 'row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'trace', '=', '0', 'sum', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'row_size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'col_size', ')', ':', 'if', 'i', '==', 'j', ':', 'trace', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'sum', '+=', 'matrix', '[', 'i', ']', '[', 'j', ']', 'normal', '=', 'math', '.', 'sqrt', '(', 'sum', ')', 'print', '(', '""Normal Of the Matrix is: ""', ',', 'normal', ')', 'print', '(', '""Trace Of the Matrix is: ""', ',', 'trace', ')']"
3277,"['python', 'program', 'find', 'factorial', 'number', 'using', 'recursion']","['def', 'factorial', '(', 'n', ')', ':', 'if', '(', 'n', '<=', '1', ')', ':', 'return', '1', 'else', ':', 'return', '(', 'n', '*', 'factorial', '(', 'n', '-', '1', ')', ')', 'n', '=', 'int', '(', 'input', '(', '""Enter number:""', ')', ')', 'print', '(', '""Factorial:""', ')', 'print', '(', 'factorial', '(', 'n', ')', ')']"
3278,"['find', 'sum', 'series']","['import', 'math', 'print', '(', '""Enter the range of number:""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '=', '0.0', 'fact', '=', '1', 'for', 'i', 'in', 'range', '(', '1', ',', 'n', '+', '1', ')', ':', 'sum', '+=', 'pow', '(', 'i', ',', 'i', ')', '/', 'i', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
3279,"['python', 'program', 'display', 'letter', 'present', 'string']","['s1', '=', 'raw_input', '(', '""Enter first string:""', ')', 's2', '=', 'raw_input', '(', '""Enter second string:""', ')', 'a', '=', 'list', '(', 'set', '(', 's1', ')', '|', 'set', '(', 's2', ')', ')', 'print', '(', '""The letters are:""', ')', 'for', 'i', 'in', 'a', ':', 'print', '(', 'i', ')']"
3280,"['program', 'display', 'upper', 'triangular', 'matrix']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row Size Of the Matrix:""', ')', ')', 'col_size', '=', 'int', '(', 'input', '(', '""Enter the columns Size Of the Matrix:""', ')', ')', 'matrix', '=', '[', ']', 'print', '(', '""Enter the Matrix Element:""', ')', 'for', 'i', 'in', 'range', '(', 'row_size', ')', ':', 'matrix', '.', 'append', '(', '[', 'int', '(', 'j', ')', 'for', 'j', 'in', 'input', '(', ')', '.', 'split', '(', ')', ']', ')', 'print', '(', '""Upper Triangular Matrix is:""', ')', 'for', 'i', 'in', 'range', '(', 'len', '(', 'matrix', ')', ')', ':', 'for', 'j', 'in', 'range', '(', 'len', '(', 'matrix', '[', '0', ']', ')', ')', ':', 'if', 'i', '>', 'j', ':', 'print', '(', '""0 ""', ',', 'end', '=', '""""', ')', 'else', ':', 'print', '(', 'matrix', '[', 'i', ']', '[', 'j', ']', ',', 'end', '=', '"" ""', ')', 'print', '(', ')']"
3281,"['python', 'program', 'multiply', 'item', 'dictionary']","['d', '=', '{', ""'A'"", ':', '10', ',', ""'B'"", ':', '10', ',', ""'C'"", ':', '239', '}', 'tot', '=', '1', 'for', 'i', 'in', 'd', ':', 'tot', '=', 'tot', '*', 'd', '[', 'i', ']', 'print', '(', 'tot', ')']"
3282,"['program', 'sort', 'array', 'descending', 'order']","['arr', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the array: ""', ')', ')', 'print', '(', '""Enter the Element of the array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Before sorting array elements are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'for', 'j', 'in', 'range', '(', 'i', '+', '1', ',', 'size', ')', ':', 'if', 'arr', '[', 'i', ']', '<=', 'arr', '[', 'j', ']', ':', 'temp', '=', 'arr', '[', 'i', ']', 'arr', '[', 'i', ']', '=', 'arr', '[', 'j', ']', 'arr', '[', 'j', ']', '=', 'tempprint', '(', '""\\nAfter Decreasing order sort Array Elements are:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'print', '(', 'arr', '[', 'i', ']', ',', 'end', '=', '"" ""', ')']"
3283,"['python', 'program', 'print', 'border', 'given', 'tree', 'anticlockwise', 'direction']","['class', 'BinaryTree', ':', 'def', '__init__', '(', 'self', ',', 'key', '=', 'None', ')', ':', 'self', '.', 'key', '=', 'key', 'self', '.', 'left', '=', 'None', 'self', '.', 'right', '=', 'None', 'def', 'set_root', '(', 'self', ',', 'key', ')', ':', 'self', '.', 'key', '=', 'key', 'def', 'inorder', '(', 'self', ')', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'inorder', '(', ')', 'print', '(', 'self', '.', 'key', ',', 'end', '=', ""' '"", ')', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'right', '.', 'inorder', '(', ')', 'def', 'insert_left', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'left', '=', 'new_node', 'def', 'insert_right', '(', 'self', ',', 'new_node', ')', ':', 'self', '.', 'right', '=', 'new_node', 'def', 'search', '(', 'self', ',', 'key', ')', ':', 'if', 'self', '.', 'key', '==', 'key', ':', 'return', 'self', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'left', '.', 'search', '(', 'key', ')', 'if', 'temp', 'is', 'not', 'None', ':', 'return', 'temp', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'temp', '=', 'self', '.', 'right', '.', 'search', '(', 'key', ')', 'return', 'temp', 'return', 'None', 'def', 'print_left_boundary', '(', 'self', ')', ':', 'current', '=', 'self', 'while', 'True', ':', 'if', 'current', '.', 'left', 'is', 'not', 'None', ':', 'print', '(', 'current', '.', 'key', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'left', 'elif', 'current', '.', 'right', 'is', 'not', 'None', ':', 'print', '(', 'current', '.', 'key', ',', 'end', '=', ""' '"", ')', 'current', '=', 'current', '.', 'right', 'else', ':', 'break', 'def', 'print_right_boundary', '(', 'self', ')', ':', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'right', '.', 'print_right_boundary', '(', ')', 'print', '(', 'self', '.', 'key', ',', 'end', '=', ""' '"", ')', 'elif', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'print_right_boundary', '(', ')', 'print', '(', 'self', '.', 'key', ',', 'end', '=', ""' '"", ')', 'def', 'print_leaves', '(', 'self', ')', ':', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'print_leaves', '(', ')', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'right', '.', 'print_leaves', '(', ')', 'if', '(', 'self', '.', 'left', 'is', 'None', 'and', 'self', '.', 'right', 'is', 'None', ')', ':', 'print', '(', 'self', '.', 'key', ',', 'end', '=', ""' '"", ')', 'def', 'print_border', '(', 'self', ')', ':', 'print', '(', 'self', '.', 'key', ',', 'end', '=', ""' '"", ')', 'if', 'self', '.', 'left', 'is', 'not', 'None', ':', 'self', '.', 'left', '.', 'print_left_boundary', '(', ')', 'self', '.', 'left', '.', 'print_leaves', '(', ')', 'if', 'self', '.', 'right', 'is', 'not', 'None', ':', 'self', '.', 'right', '.', 'print_leaves', '(', ')', 'self', '.', 'right', '.', 'print_right_boundary', '(', ')', 'btree', '=', 'None', 'print', '(', ""'Menu (this assumes no duplicate keys)'"", ')', 'print', '(', ""'insert <data> at root'"", ')', 'print', '(', ""'insert <data> left of <data>'"", ')', 'print', '(', ""'insert <data> right of <data>'"", ')', 'print', '(', ""'border'"", ')', 'print', '(', ""'quit'"", ')', 'while', 'True', ':', 'do', '=', 'input', '(', ""'What would you like to do? '"", ')', '.', 'split', '(', ')', 'operation', '=', 'do', '[', '0', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'operation', '==', ""'insert'"", ':', 'data', '=', 'int', '(', 'do', '[', '1', ']', ')', 'new_node', '=', 'BinaryTree', '(', 'data', ')', 'suboperation', '=', 'do', '[', '2', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'if', 'suboperation', '==', ""'at'"", ':', 'btree', '=', 'new_node', 'else', ':', 'position', '=', 'do', '[', '4', ']', '.', 'strip', '(', ')', '.', 'lower', '(', ')', 'key', '=', 'int', '(', 'position', ')', 'ref_node', '=', 'None', 'if', 'btree', 'is', 'not', 'None', ':', 'ref_node', '=', 'btree', '.', 'search', '(', 'key', ')', 'if', 'ref_node', 'is', 'None', ':', 'print', '(', ""'No such key.'"", ')', 'continue', 'if', 'suboperation', '==', ""'left'"", ':', 'ref_node', '.', 'insert_left', '(', 'new_node', ')', 'elif', 'suboperation', '==', ""'right'"", ':', 'ref_node', '.', 'insert_right', '(', 'new_node', ')', 'elif', 'operation', '==', ""'border'"", ':', 'if', 'btree', 'is', 'not', 'None', ':', 'print', '(', ""'Border of tree: '"", ')', 'btree', '.', 'print_border', '(', ')', 'print', '(', ')', 'elif', 'operation', '==', ""'quit'"", ':', 'break']"
3284,"['find', 'sunny', 'number', 'present', 'within', 'given', 'range']","['import', 'math', 'print', '(', '""Enter a range:""', ')', 'range1', '=', 'int', '(', 'input', '(', ')', ')', 'range2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Sunny numbers between ""', ',', 'range1', ',', '"" and ""', ',', 'range2', ',', '"" are: ""', ')', 'for', 'i', 'in', 'range', '(', 'range1', ',', 'range2', '+', '1', ')', ':', 'root', '=', 'math', '.', 'sqrt', '(', 'i', '+', '1', ')', 'if', 'int', '(', 'root', ')', '==', 'root', ':', 'print', '(', 'i', ',', 'end', '=', '"" ""', ')']"
3285,"['define', 'class', 'named', 'american', 'static', 'method', 'called', 'printnationality']","['Solution', 'class', 'American', '(', 'object', ')', ':', '@', 'staticmethod', 'def', 'printNationality', '(', ')', ':', 'print', '""America""', 'anAmerican', '=', 'American', '(', ')', 'anAmerican', '.', 'printNationality', '(', ')', 'American', '.', 'printNationality', '(', ')']"
3286,"['program', 'print', 'double', 'pyramid', 'star', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', 'row_size', ',', '-', '(', 'row_size', '+', '1', ')', ',', '-', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', '0', ',', 'abs', '(', 'out', ')', '+', '1', ')', ':', 'print', '(', '""*""', ',', 'end', '=', '""""', ')', 'print', '(', '""\\r""', ')']"
3287,"['python', 'program', 'count', 'occurrence', 'word', 'text', 'file']","['fname', '=', 'input', '(', '""Enter file name: ""', ')', 'word', '=', 'input', '(', '""Enter word to be searched:""', ')', 'k', '=', '0', 'with', 'open', '(', 'fname', ',', ""'r'"", ')', 'as', 'f', ':', 'for', 'line', 'in', 'f', ':', 'words', '=', 'line', '.', 'split', '(', ')', 'for', 'i', 'in', 'words', ':', 'if', '(', 'i', '==', 'word', ')', ':', 'k', '=', 'k', '+', '1', 'print', '(', '""Occurrences of the word:""', ')', 'print', '(', 'k', ')']"
3288,"['check', 'two', 'array', 'disjoint']","['arr', '=', '[', ']', 'arr2', '=', '[', ']', 'size', '=', 'int', '(', 'input', '(', '""Enter the size of the 1st array: ""', ')', ')', 'size2', '=', 'int', '(', 'input', '(', '""Enter the size of the 2nd array: ""', ')', ')', 'print', '(', '""Enter the Element of the 1st array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'num', '=', 'int', '(', 'input', '(', ')', ')', 'arr', '.', 'append', '(', 'num', ')', 'print', '(', '""Enter the Element of the 2nd array:""', ')', 'for', 'i', 'in', 'range', '(', '0', ',', 'size2', ')', ':', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'arr2', '.', 'append', '(', 'num2', ')', 'count', '=', '0', 'for', 'i', 'in', 'range', '(', '0', ',', 'size', ')', ':', 'for', 'j', 'in', 'range', '(', '0', ',', 'size2', ')', ':', 'if', 'arr', '[', 'i', ']', '==', 'arr2', '[', 'j', ']', ':', 'count', '+=', '1', 'if', 'count', '>=', '1', ':', 'print', '(', '""Arrays are not disjoint.""', ')', 'else', ':', 'print', '(', '""Arrays are disjoint.""', ')']"
3289,"['program', 'read', 'display', 'matrix']",[]
3290,"['python', 'program', 'find', 'number', 'prime', 'prime', 'using', 'recursion']","['def', 'check', '(', 'n', ',', 'div', '=', 'None', ')', ':', 'if', 'div', 'is', 'None', ':', 'div', '=', 'n', '-', '1', 'while', 'div', '>=', '2', ':', 'if', 'n', '%', 'div', '==', '0', ':', 'print', '(', '""Number not prime""', ')', 'return', 'False', 'else', ':', 'return', 'check', '(', 'n', ',', 'div', '-', '1', ')', 'else', ':', 'print', '(', '""Number is prime""', ')', 'return', ""'True'"", 'n', '=', 'int', '(', 'input', '(', '""Enter number: ""', ')', ')', 'check', '(', 'n', ')']"
3291,"['find', 'sum', 'multiplication', 'average', 'two', 'number']","['num1', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'num2', '=', 'int', '(', 'input', '(', '""Enter a number:""', ')', ')', 'addition', '=', 'num1', '+', 'num2', 'multiplication', '=', 'num1', '*', 'num2', 'average', '=', '(', 'num1', '+', 'num2', ')', '/', '2', 'print', '(', '""Addition =""', ',', 'addition', ')', 'print', '(', '""Multiplication =""', ',', 'multiplication', ')', 'print', '(', '""Average =""', ',', 'average', ')']"
3292,"['find', 'sum', 'two', 'number', 'using', 'recursion']","['def', 'sum', '(', 'num1', ',', 'num2', ')', ':', 'if', 'num2', '==', '0', ':', 'return', 'num1', 'return', 'sum', '(', 'num1', ',', 'num2', '-', '1', ')', '+', '1', 'print', '(', '""Enter the two Number:""', ')', 'num1', '=', 'int', '(', 'input', '(', ')', ')', 'num2', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Sum of Two Number Using Recursion is: ""', ',', 'sum', '(', 'num1', ',', 'num2', ')', ')']"
3293,"['python', 'program', 'count', 'number', 'word', 'text', 'file']","['fname', '=', 'input', '(', '""Enter file name: ""', ')', 'num_words', '=', '0', 'with', 'open', '(', 'fname', ',', ""'r'"", ')', 'as', 'f', ':', 'for', 'line', 'in', 'f', ':', 'words', '=', 'line', '.', 'split', '(', ')', 'num_words', '+=', 'len', '(', 'words', ')', 'print', '(', '""Number of words:""', ')', 'print', '(', 'num_words', ')']"
3294,"['python', 'program', 'check', 'given', 'key', 'exists', 'dictionary']","['d', '=', '{', ""'A'"", ':', '1', ',', ""'B'"", ':', '2', ',', ""'C'"", ':', '3', '}', 'key', '=', 'raw_input', '(', '""Enter key to check:""', ')', 'if', 'key', 'in', 'd', '.', 'keys', '(', ')', ':', 'print', '(', '""Key is present and value of the key is:""', ')', 'print', '(', 'd', '[', 'key', ']', ')', 'else', ':', 'print', '(', '""Key isn\'t present!""', ')']"
3295,"['print', 'full', 'pyramid', 'number', 'pattern']","['row_size', '=', 'int', '(', 'input', '(', '""Enter the row size:""', ')', ')', 'for', 'out', 'in', 'range', '(', '1', ',', 'row_size', '+', '1', ')', ':', 'for', 'inn', 'in', 'range', '(', 'row_size', ',', 'out', ',', '-', '1', ')', ':', 'print', '(', '"" ""', ',', 'end', '=', '""""', ')', 'for', 'p', 'in', 'range', '(', '1', ',', 'out', '+', '1', ')', ':', 'print', '(', 'out', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\r""', ')']"
3296,"['python', 'program', 'check', 'whether', 'number', 'positive', 'negative']","['n', '=', 'int', '(', 'input', '(', '""Enter number: ""', ')', ')', 'if', '(', 'n', '>', '0', ')', ':', 'print', '(', '""Number is positive""', ')', 'else', ':', 'print', '(', '""Number is negative""', ')']"
3297,"['fibonacci', 'sequence', 'computed', 'based', 'following', 'formula', 'please', 'write', 'program', 'using', 'list', 'comprehension', 'print', 'fibonacci', 'sequence', 'comma', 'separated', 'form', 'given', 'n', 'input', 'console']","['def', 'f', '(', 'n', ')', ':', 'if', 'n', '==', '0', ':', 'return', '0', 'elif', 'n', '==', '1', ':', 'return', '1', 'else', ':', 'return', 'f', '(', 'n', '-', '1', ')', '+', 'f', '(', 'n', '-', '2', ')', 'n', '=', 'int', '(', 'raw_input', '(', ')', ')', 'values', '=', '[', 'str', '(', 'f', '(', 'x', ')', ')', 'for', 'x', 'in', 'range', '(', '0', ',', 'n', '+', '1', ')', ']', 'print', '"",""', '.', 'join', '(', 'values', ')']"
3298,"['please', 'raise', 'runtimeerror', 'exception']","['raise', 'RuntimeError', '(', ""'something wrong'"", ')']"
3299,"['program', 'print', 'inverted', 'right', 'triangle', 'alphabet', 'pattern']","['print', '(', '""Enter the row and column size:""', ')', ';', 'row_size', '=', 'input', '(', ')', 'for', 'out', 'in', 'range', '(', 'ord', '(', 'row_size', ')', ',', 'ord', '(', ""'A'"", ')', '-', '1', ',', '-', '1', ')', ':', 'for', 'i', 'in', 'range', '(', 'ord', '(', ""'A'"", ')', ',', 'out', '+', '1', ')', ':', 'print', '(', 'chr', '(', 'i', ')', ',', 'end', '=', '"" ""', ')', 'print', '(', '""\\r""', ')']"
3300,"['program', 'find', 'sum', 'series']","['print', '(', '""Enter the range of number:""', ')', 'n', '=', 'int', '(', 'input', '(', ')', ')', 'print', '(', '""Enter the value of x:""', ')', 'x', '=', 'int', '(', 'input', '(', ')', ')', 'sum', '=', '1.0', 'i', '=', '1', 'while', '(', 'i', '<=', 'n', ')', ':', 'sum', '+=', 'pow', '(', 'x', ',', 'i', ')', '/', 'i', 'i', '+=', '1', 'print', '(', '""The sum of the series = ""', ',', 'sum', ')']"
